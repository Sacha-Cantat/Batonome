
Batonome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080099b8  080099b8  000199b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eac  08009eac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb4  08009eb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  200001e0  0800a09c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  0800a09c  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f451  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb9  00000000  00000000  0003f661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00043220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00044c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e91  00000000  00000000  000464e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc2f  00000000  00000000  0006a379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d848e  00000000  00000000  00087fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f04  00000000  00000000  00160488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800999c 	.word	0x0800999c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800999c 	.word	0x0800999c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ImuManagement>:
 */

#include "Imu.h"

void ImuManagement()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	printf("IMU management task is launched\n");
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <ImuManagement+0x10>)
 8000eb2:	f006 fdf1 	bl	8007a98 <puts>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	080099b8 	.word	0x080099b8

08000ec0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ec8:	1d39      	adds	r1, r7, #4
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <__io_putchar+0x20>)
 8000ed2:	f002 fd09 	bl	80038e8 <HAL_UART_Transmit>
  return ch;
 8000ed6:	687b      	ldr	r3, [r7, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000328 	.word	0x20000328

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fccf 	bl	800188a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f83e 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f95e 	bl	80011b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef4:	f000 f880 	bl	8000ff8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000ef8:	f000 f8bc 	bl	8001074 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000efc:	f000 f8f8 	bl	80010f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f00:	f000 f926 	bl	8001150 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Welcome Batonome v1.0.0\n");
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <main+0x60>)
 8000f06:	f006 fdc7 	bl	8007a98 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f0a:	f003 f9a1 	bl	8004250 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <main+0x64>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <main+0x68>)
 8000f14:	f003 f9e6 	bl	80042e4 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <main+0x6c>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <main+0x70>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0x74>)
 8000f24:	f003 f9de 	bl	80042e4 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <main+0x78>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add thread IMU */
  ImuHandle = osThreadNew(StartImu, NULL, &Imu_attributes);
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <main+0x7c>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <main+0x80>)
 8000f34:	f003 f9d6 	bl	80042e4 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <main+0x84>)
 8000f3c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f3e:	f003 f9ab 	bl	8004298 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x5e>
 8000f44:	080099ec 	.word	0x080099ec
 8000f48:	08009a1c 	.word	0x08009a1c
 8000f4c:	0800120d 	.word	0x0800120d
 8000f50:	200003ac 	.word	0x200003ac
 8000f54:	08009a40 	.word	0x08009a40
 8000f58:	0800121d 	.word	0x0800121d
 8000f5c:	200003b0 	.word	0x200003b0
 8000f60:	08009a64 	.word	0x08009a64
 8000f64:	080011f9 	.word	0x080011f9
 8000f68:	200003b4 	.word	0x200003b4

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2244      	movs	r2, #68	; 0x44
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 f817 	bl	8006fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f92:	f001 f833 	bl	8001ffc <HAL_PWREx_ControlVoltageScaling>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f9c:	f000 f958 	bl	8001250 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fac:	2360      	movs	r3, #96	; 0x60
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f875 	bl	80020a8 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f944 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fc75 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fec:	f000 f930 	bl	8001250 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3758      	adds	r7, #88	; 0x58
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_I2C1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_I2C1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_I2C1_Init+0x74>)
 8001004:	f640 6214 	movw	r2, #3604	; 0xe14
 8001008:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_I2C1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_I2C1_Init+0x74>)
 8001012:	2201      	movs	r2, #1
 8001014:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_I2C1_Init+0x74>)
 8001036:	f000 fead 	bl	8001d94 <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 f906 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_I2C1_Init+0x74>)
 8001048:	f000 ff33 	bl	8001eb2 <HAL_I2CEx_ConfigAnalogFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001052:	f000 f8fd 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_I2C1_Init+0x74>)
 800105a:	f000 ff75 	bl	8001f48 <HAL_I2CEx_ConfigDigitalFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 f8f4 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001fc 	.word	0x200001fc
 8001070:	40005400 	.word	0x40005400

08001074 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C3_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C3_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C3_Init+0x74>)
 8001080:	f640 6214 	movw	r2, #3604	; 0xe14
 8001084:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C3_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_I2C3_Init+0x74>)
 800108e:	2201      	movs	r2, #1
 8001090:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010b2:	f000 fe6f 	bl	8001d94 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010bc:	f000 f8c8 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010c4:	f000 fef5 	bl	8001eb2 <HAL_I2CEx_ConfigAnalogFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80010ce:	f000 f8bf 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C3_Init+0x74>)
 80010d6:	f000 ff37 	bl	8001f48 <HAL_I2CEx_ConfigDigitalFilter>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 f8b6 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000250 	.word	0x20000250
 80010ec:	40005c00 	.word	0x40005c00

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_USART1_UART_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001134:	f002 fb8a 	bl	800384c <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800113e:	f000 f887 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200002a4 	.word	0x200002a4
 800114c:	40013800 	.word	0x40013800

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <MX_USART2_UART_Init+0x5c>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART2_UART_Init+0x58>)
 8001194:	f002 fb5a 	bl	800384c <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f857 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000328 	.word	0x20000328
 80011ac:	40004400 	.word	0x40004400

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_GPIO_Init+0x44>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <StartImu>:
  * @brief  Function implementing the Imu management thread.
  * @param  argument: Not used
  * @retval None
  */
void StartImu(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f003 f901 	bl	8004408 <osDelay>
		ImuManagement();
 8001206:	f7ff fe51 	bl	8000eac <ImuManagement>
		osDelay(1);
 800120a:	e7f9      	b.n	8001200 <StartImu+0x8>

0800120c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f003 f8f7 	bl	8004408 <osDelay>
 800121a:	e7fb      	b.n	8001214 <StartBlink01+0x8>

0800121c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f003 f8ef 	bl	8004408 <osDelay>
 800122a:	e7fb      	b.n	8001224 <StartBlink02+0x8>

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fb3d 	bl	80018bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_MspInit+0x4c>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_MspInit+0x4c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6613      	str	r3, [r2, #96]	; 0x60
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_MspInit+0x4c>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_MspInit+0x4c>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_MspInit+0x4c>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	210f      	movs	r1, #15
 8001296:	f06f 0001 	mvn.w	r0, #1
 800129a:	f000 fbe7 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a2      	sub	sp, #136	; 0x88
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2254      	movs	r2, #84	; 0x54
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fe6e 	bl	8006fae <memset>
  if(hi2c->Instance==I2C1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_I2C_MspInit+0x168>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13a      	bne.n	8001352 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 fd47 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f4:	f7ff ffac 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001304:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001310:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001314:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001316:	2312      	movs	r3, #18
 8001318:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001324:	2304      	movs	r3, #4
 8001326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f000 fbc4 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 800133e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001342:	6593      	str	r3, [r2, #88]	; 0x58
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001350:	e05c      	b.n	800140c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a31      	ldr	r2, [pc, #196]	; (800141c <HAL_I2C_MspInit+0x170>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d157      	bne.n	800140c <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800135c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001360:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fd06 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8001376:	f7ff ff6b 	bl	8001250 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013bc:	2304      	movs	r3, #4
 80013be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fb78 	bl	8001ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d0:	2310      	movs	r3, #16
 80013d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013e2:	2304      	movs	r3, #4
 80013e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013ec:	4619      	mov	r1, r3
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <HAL_I2C_MspInit+0x174>)
 80013f0:	f000 fb66 	bl	8001ac0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 80013fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_I2C_MspInit+0x16c>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	bf00      	nop
 800140e:	3788      	adds	r7, #136	; 0x88
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40005400 	.word	0x40005400
 8001418:	40021000 	.word	0x40021000
 800141c:	40005c00 	.word	0x40005c00
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0a0      	sub	sp, #128	; 0x80
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2254      	movs	r2, #84	; 0x54
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fdb2 	bl	8006fae <memset>
  if(huart->Instance==USART1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_UART_MspInit+0x120>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d136      	bne.n	80014c2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fc8b 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff fef0 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_UART_MspInit+0x124>)
 8001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001474:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_UART_MspInit+0x124>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	6613      	str	r3, [r2, #96]	; 0x60
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_UART_MspInit+0x124>)
 800147e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_UART_MspInit+0x124>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <HAL_UART_MspInit+0x124>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <HAL_UART_MspInit+0x124>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a0:	23c0      	movs	r3, #192	; 0xc0
 80014a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b0:	2307      	movs	r3, #7
 80014b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <HAL_UART_MspInit+0x128>)
 80014bc:	f000 fb00 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	e03b      	b.n	800153a <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_UART_MspInit+0x12c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d136      	bne.n	800153a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fc4f 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80014e4:	f7ff feb4 	bl	8001250 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_UART_MspInit+0x124>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_UART_MspInit+0x124>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_UART_MspInit+0x124>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_UART_MspInit+0x124>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_UART_MspInit+0x124>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_UART_MspInit+0x124>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001518:	230c      	movs	r3, #12
 800151a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001528:	2307      	movs	r3, #7
 800152a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f000 fac3 	bl	8001ac0 <HAL_GPIO_Init>
}
 800153a:	bf00      	nop
 800153c:	3780      	adds	r7, #128	; 0x80
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013800 	.word	0x40013800
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400
 8001550:	40004400 	.word	0x40004400

08001554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	; 0x38
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_InitTick+0xe0>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_InitTick+0xe0>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_InitTick+0xe0>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157a:	f107 0210 	add.w	r2, r7, #16
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fb67 	bl	8002c58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001594:	f001 fb34 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8001598:	6378      	str	r0, [r7, #52]	; 0x34
 800159a:	e004      	b.n	80015a6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800159c:	f001 fb30 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80015a0:	4603      	mov	r3, r0
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	4a23      	ldr	r2, [pc, #140]	; (8001638 <HAL_InitTick+0xe4>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9b      	lsrs	r3, r3, #18
 80015b0:	3b01      	subs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_InitTick+0xe8>)
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_InitTick+0xec>)
 80015b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_InitTick+0xe8>)
 80015bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_InitTick+0xe8>)
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_InitTick+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_InitTick+0xe8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_InitTick+0xe8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <HAL_InitTick+0xe8>)
 80015dc:	f001 feb6 	bl	800334c <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11b      	bne.n	8001626 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <HAL_InitTick+0xe8>)
 80015f0:	f001 ff0e 	bl	8003410 <HAL_TIM_Base_Start_IT>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d111      	bne.n	8001626 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001602:	2036      	movs	r0, #54	; 0x36
 8001604:	f000 fa4e 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	d808      	bhi.n	8001620 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800160e:	2200      	movs	r2, #0
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	2036      	movs	r0, #54	; 0x36
 8001614:	f000 fa2a 	bl	8001a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_InitTick+0xf0>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e002      	b.n	8001626 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001626:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800162a:	4618      	mov	r0, r3
 800162c:	3738      	adds	r7, #56	; 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	431bde83 	.word	0x431bde83
 800163c:	200003b8 	.word	0x200003b8
 8001640:	40001000 	.word	0x40001000
 8001644:	20000004 	.word	0x20000004

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM6_DAC_IRQHandler+0x10>)
 800167a:	f001 ff1d 	bl	80034b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200003b8 	.word	0x200003b8

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a2:	f005 fb53 	bl	8006d4c <__errno>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2216      	movs	r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
  return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_exit>:

void _exit (int status)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe7 	bl	8001698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ca:	e7fe      	b.n	80016ca <_exit+0x12>

080016cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
  }

  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fbcd 	bl	8000ec0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
  }
  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_close>:

int _close(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001766:	605a      	str	r2, [r3, #4]
  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_isatty>:

int _isatty(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f005 fab8 	bl	8006d4c <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20010000 	.word	0x20010000
 8001808:	00000400 	.word	0x00000400
 800180c:	20000404 	.word	0x20000404
 8001810:	20001de8 	.word	0x20001de8

08001814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001870 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800183c:	f7ff ffea 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <LoopForever+0x6>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <LoopForever+0xe>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <LoopForever+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f005 fb6d 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186a:	f7ff fb3b 	bl	8000ee4 <main>

0800186e <LoopForever>:

LoopForever:
    b LoopForever
 800186e:	e7fe      	b.n	800186e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800187c:	08009ebc 	.word	0x08009ebc
  ldr r2, =_sbss
 8001880:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001884:	20001de4 	.word	0x20001de4

08001888 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC1_IRQHandler>

0800188a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f8de 	bl	8001a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	200f      	movs	r0, #15
 800189c:	f7ff fe5a 	bl	8001554 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e001      	b.n	80018b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ac:	f7ff fcd6 	bl	800125c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000408 	.word	0x20000408

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000408 	.word	0x20000408

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff4c 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7e:	f7ff ff61 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	6978      	ldr	r0, [r7, #20]
 8001a8a:	f7ff ffb1 	bl	80019f0 <NVIC_EncodePriority>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff80 	bl	800199c <__NVIC_SetPriority>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff54 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e148      	b.n	8001d62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 813a 	beq.w	8001d5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_GPIO_Init+0x40>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d017      	beq.n	8001b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d123      	bne.n	8001bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	6939      	ldr	r1, [r7, #16]
 8001bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0203 	and.w	r2, r3, #3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8094 	beq.w	8001d5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c34:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	4a51      	ldr	r2, [pc, #324]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c40:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c76:	d00d      	beq.n	8001c94 <HAL_GPIO_Init+0x1d4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a43      	ldr	r2, [pc, #268]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d007      	beq.n	8001c90 <HAL_GPIO_Init+0x1d0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_GPIO_Init+0x1cc>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e004      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c94:	2300      	movs	r3, #0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	f002 0203 	and.w	r2, r2, #3
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca6:	4937      	ldr	r1, [pc, #220]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd8:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d02:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f aeaf 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e081      	b.n	8001eaa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fa76 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d104      	bne.n	8001e2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69d9      	ldr	r1, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d138      	bne.n	8001f3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e032      	b.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2224      	movs	r2, #36	; 0x24
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
  }
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d139      	bne.n	8001fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e033      	b.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200a:	d130      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002018:	d038      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2232      	movs	r2, #50	; 0x32
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	e002      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002054:	d102      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f2      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002068:	d110      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e00f      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d007      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002084:	4a05      	ldr	r2, [pc, #20]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f000 bc02 	b.w	80028c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4b96      	ldr	r3, [pc, #600]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c6:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80e4 	beq.w	80022a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4c>
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	f040 808b 	bne.w	8002202 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 8087 	bne.w	8002202 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f4:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_OscConfig+0x64>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e3d9      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_RCC_OscConfig+0x7e>
 800211c:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	e005      	b.n	8002132 <HAL_RCC_OscConfig+0x8a>
 8002126:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002132:	4293      	cmp	r3, r2
 8002134:	d223      	bcs.n	800217e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fdbe 	bl	8002cbc <RCC_SetFlashLatencyFromMSIRange>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e3ba      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214a:	4b73      	ldr	r3, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a72      	ldr	r2, [pc, #456]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b70      	ldr	r3, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	496d      	ldr	r1, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	4968      	ldr	r1, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e025      	b.n	80021ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217e:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a65      	ldr	r2, [pc, #404]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4960      	ldr	r1, [pc, #384]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	495b      	ldr	r1, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fd7e 	bl	8002cbc <RCC_SetFlashLatencyFromMSIRange>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e37a      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ca:	f000 fc81 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4950      	ldr	r1, [pc, #320]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_RCC_OscConfig+0x278>)
 80021e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9b0 	bl	8001554 <HAL_InitTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d052      	beq.n	80022a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	e35e      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d032      	beq.n	8002270 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002216:	f7ff fb65 	bl	80018e4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221e:	f7ff fb61 	bl	80018e4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e347      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a35      	ldr	r2, [pc, #212]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4930      	ldr	r1, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	492b      	ldr	r1, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
 800226e:	e01a      	b.n	80022a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800227c:	f7ff fb32 	bl	80018e4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002284:	f7ff fb2e 	bl	80018e4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e314      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1dc>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d073      	beq.n	800239a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_OscConfig+0x21c>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d10e      	bne.n	80022dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d10b      	bne.n	80022dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d063      	beq.n	8002398 <HAL_RCC_OscConfig+0x2f0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d15f      	bne.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e2f1      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x24c>
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e025      	b.n	8002340 <HAL_RCC_OscConfig+0x298>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022fc:	d114      	bne.n	8002328 <HAL_RCC_OscConfig+0x280>
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a02      	ldr	r2, [pc, #8]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e013      	b.n	8002340 <HAL_RCC_OscConfig+0x298>
 8002318:	40021000 	.word	0x40021000
 800231c:	08009a88 	.word	0x08009a88
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004
 8002328:	4ba0      	ldr	r3, [pc, #640]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a9f      	ldr	r2, [pc, #636]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b9d      	ldr	r3, [pc, #628]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a9c      	ldr	r2, [pc, #624]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff facc 	bl	80018e4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fac8 	bl	80018e4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e2ae      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b92      	ldr	r3, [pc, #584]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x2a8>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff fab8 	bl	80018e4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fab4 	bl	80018e4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e29a      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x2d0>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d060      	beq.n	8002468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_OscConfig+0x310>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d119      	bne.n	80023e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d116      	bne.n	80023e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	4b7c      	ldr	r3, [pc, #496]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x328>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e277      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	4973      	ldr	r1, [pc, #460]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e4:	e040      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d023      	beq.n	8002436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ee:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff fa73 	bl	80018e4 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002402:	f7ff fa6f 	bl	80018e4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e255      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	4b65      	ldr	r3, [pc, #404]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b62      	ldr	r3, [pc, #392]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	495f      	ldr	r1, [pc, #380]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e018      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800243c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7ff fa4f 	bl	80018e4 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7ff fa4b 	bl	80018e4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e231      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff fa2a 	bl	80018e4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fa26 	bl	80018e4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e20c      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x3ec>
 80024b4:	e01b      	b.n	80024ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff fa0d 	bl	80018e4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7ff fa09 	bl	80018e4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1ef      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a6 	beq.w	8002648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	; 0x58
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002524:	2301      	movs	r3, #1
 8002526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x508>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d118      	bne.n	8002566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_OscConfig+0x508>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x508>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002540:	f7ff f9d0 	bl	80018e4 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7ff f9cc 	bl	80018e4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1b2      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_RCC_OscConfig+0x508>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x4d8>
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257e:	e029      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d115      	bne.n	80025b4 <HAL_RCC_OscConfig+0x50c>
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_RCC_OscConfig+0x504>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	4b9a      	ldr	r3, [pc, #616]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	4a99      	ldr	r2, [pc, #612]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c4:	4b96      	ldr	r3, [pc, #600]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a95      	ldr	r2, [pc, #596]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff f982 	bl	80018e4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7ff f97e 	bl	80018e4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e162      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	4b89      	ldr	r3, [pc, #548]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCC_OscConfig+0x53c>
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7ff f96b 	bl	80018e4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7ff f967 	bl	80018e4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e14b      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	4b7d      	ldr	r3, [pc, #500]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ed      	bne.n	8002612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002636:	7ffb      	ldrb	r3, [r7, #31]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03c      	beq.n	80026ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800265c:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800265e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002662:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f93a 	bl	80018e4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7ff f936 	bl	80018e4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e11c      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCC_OscConfig+0x5cc>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002696:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269c:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff f91d 	bl	80018e4 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ae:	f7ff f919 	bl	80018e4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0ff      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c0:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80026c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80f3 	beq.w	80028be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f040 80c9 	bne.w	8002874 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026e2:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0203 	and.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d12c      	bne.n	8002750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	3b01      	subs	r3, #1
 8002702:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d123      	bne.n	8002750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d11b      	bne.n	8002750 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d113      	bne.n	8002750 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d109      	bne.n	8002750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d06b      	beq.n	8002828 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d062      	beq.n	800281c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002756:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0ac      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800276c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002770:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002772:	f7ff f8b7 	bl	80018e4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7ff f8b3 	bl	80018e4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e099      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x77c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027b2:	0212      	lsls	r2, r2, #8
 80027b4:	4311      	orrs	r1, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027ba:	0852      	lsrs	r2, r2, #1
 80027bc:	3a01      	subs	r2, #1
 80027be:	0552      	lsls	r2, r2, #21
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027c6:	0852      	lsrs	r2, r2, #1
 80027c8:	3a01      	subs	r2, #1
 80027ca:	0652      	lsls	r2, r2, #25
 80027cc:	4311      	orrs	r1, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027d2:	06d2      	lsls	r2, r2, #27
 80027d4:	430a      	orrs	r2, r1
 80027d6:	4912      	ldr	r1, [pc, #72]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f4:	f7ff f876 	bl	80018e4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7ff f872 	bl	80018e4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e058      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_RCC_OscConfig+0x778>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281a:	e050      	b.n	80028be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e04f      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
 8002820:	40021000 	.word	0x40021000
 8002824:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d144      	bne.n	80028be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800284c:	f7ff f84a 	bl	80018e4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff f846 	bl	80018e4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e02c      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x7ac>
 8002872:	e024      	b.n	80028be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d01f      	beq.n	80028ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 8002880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff f82d 	bl	80018e4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f829 	bl	80018e4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4905      	ldr	r1, [pc, #20]	; (80028c8 <HAL_RCC_OscConfig+0x820>)
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x824>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
 80028b8:	e001      	b.n	80028be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	feeefffc 	.word	0xfeeefffc

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0e7      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4970      	ldr	r1, [pc, #448]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cf      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	429a      	cmp	r2, r3
 800292e:	d908      	bls.n	8002942 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4960      	ldr	r1, [pc, #384]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04c      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d121      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0a6      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d115      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e09a      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08e      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e086      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4943      	ldr	r1, [pc, #268]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7fe ff94 	bl	80018e4 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe ff90 	bl	80018e4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e06e      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d208      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d210      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4923      	ldr	r1, [pc, #140]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e036      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4910      	ldr	r1, [pc, #64]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a84:	f000 f824 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	490b      	ldr	r1, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1fc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fd53 	bl	8001554 <HAL_InitTick>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08009a88 	.word	0x08009a88
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d121      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d11e      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d134      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d003      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xac>
 8002b74:	e005      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b78:	617b      	str	r3, [r7, #20]
      break;
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7e:	617b      	str	r3, [r7, #20]
      break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	617b      	str	r3, [r7, #20]
      break;
 8002b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	fb03 f202 	mul.w	r2, r3, r2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0e5b      	lsrs	r3, r3, #25
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08009aa0 	.word	0x08009aa0
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000000 	.word	0x20000000

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c04:	f7ff fff0 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08009a98 	.word	0x08009a98

08002c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c30:	f7ff ffda 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0adb      	lsrs	r3, r3, #11
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08009a98 	.word	0x08009a98

08002c58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	220f      	movs	r2, #15
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_RCC_GetClockConfig+0x60>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40022000 	.word	0x40022000

08002cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cd4:	f7ff f984 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002cd8:	6178      	str	r0, [r7, #20]
 8002cda:	e014      	b.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cf4:	f7ff f974 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d10b      	bne.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d919      	bls.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2ba0      	cmp	r3, #160	; 0xa0
 8002d18:	d902      	bls.n	8002d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e013      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e010      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	d902      	bls.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e00a      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d102      	bne.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d38:	2302      	movs	r3, #2
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e004      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b70      	cmp	r3, #112	; 0x70
 8002d42:	d101      	bne.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4909      	ldr	r1, [pc, #36]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40022000 	.word	0x40022000

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da0:	d01a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da6:	d814      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002db0:	d10f      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dbe:	e00c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f9ce 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de0:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	494e      	ldr	r1, [pc, #312]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002df6:	e001      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 809e 	beq.w	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fd4a 	bl	80018e4 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe fd46 	bl	80018e4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	74fb      	strb	r3, [r7, #19]
        break;
 8002e66:	e005      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d15a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01e      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d019      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec2:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd06 	bl	80018e4 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fd02 	bl	80018e4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d902      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ef2:	e006      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ec      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f1e:	e009      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f34:	7c7b      	ldrb	r3, [r7, #17]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3a:	4b8a      	ldr	r3, [pc, #552]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	4a89      	ldr	r2, [pc, #548]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f52:	4b84      	ldr	r3, [pc, #528]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 0203 	bic.w	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4980      	ldr	r1, [pc, #512]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f74:	4b7b      	ldr	r3, [pc, #492]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f023 020c 	bic.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	4978      	ldr	r1, [pc, #480]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	496f      	ldr	r1, [pc, #444]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	4967      	ldr	r1, [pc, #412]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fda:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	495e      	ldr	r1, [pc, #376]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4956      	ldr	r1, [pc, #344]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301e:	4b51      	ldr	r3, [pc, #324]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d028      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003040:	4b48      	ldr	r3, [pc, #288]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4945      	ldr	r1, [pc, #276]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305e:	d106      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
 800306c:	e011      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003076:	d10c      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f872 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d028      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	492d      	ldr	r1, [pc, #180]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030bc:	d106      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a28      	ldr	r2, [pc, #160]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c8:	60d3      	str	r3, [r2, #12]
 80030ca:	e011      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f843 	bl	8003168 <RCCEx_PLLSAI1_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01c      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800311a:	d10c      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f820 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003150:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003158:	7cbb      	ldrb	r3, [r7, #18]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003176:	4b74      	ldr	r3, [pc, #464]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003182:	4b71      	ldr	r3, [pc, #452]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10d      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
       ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800319a:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
       ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d047      	beq.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d018      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x86>
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d825      	bhi.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0x62>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d009      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x74>
 80031c8:	e020      	b.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11d      	bne.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e01a      	b.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e013      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800320a:	e006      	b.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e004      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321a:	bf00      	nop
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	430b      	orrs	r3, r1
 8003238:	4943      	ldr	r1, [pc, #268]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d17c      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3f      	ldr	r2, [pc, #252]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fe fb48 	bl	80018e4 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003258:	f7fe fb44 	bl	80018e4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
        break;
 800326a:	e005      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d15f      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d110      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800328c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	06d2      	lsls	r2, r2, #27
 800329c:	430a      	orrs	r2, r1
 800329e:	492a      	ldr	r1, [pc, #168]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]
 80032a4:	e027      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d112      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	0211      	lsls	r1, r2, #8
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6912      	ldr	r2, [r2, #16]
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	430a      	orrs	r2, r1
 80032ca:	491f      	ldr	r1, [pc, #124]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	610b      	str	r3, [r1, #16]
 80032d0:	e011      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	0211      	lsls	r1, r2, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6952      	ldr	r2, [r2, #20]
 80032e8:	0852      	lsrs	r2, r2, #1
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0652      	lsls	r2, r2, #25
 80032ee:	430a      	orrs	r2, r1
 80032f0:	4915      	ldr	r1, [pc, #84]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003300:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe faef 	bl	80018e4 <HAL_GetTick>
 8003306:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003308:	e009      	b.n	800331e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330a:	f7fe faeb 	bl	80018e4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d902      	bls.n	800331e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	73fb      	strb	r3, [r7, #15]
          break;
 800331c:	e005      	b.n	800332a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ef      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e049      	b.n	80033f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f841 	bl	80033fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 f9dc 	bl	8003748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e03b      	b.n	80034a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_TIM_Base_Start_IT+0x9c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_TIM_Base_Start_IT+0x4e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d004      	beq.n	800345e <HAL_TIM_Base_Start_IT+0x4e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d115      	bne.n	800348a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d015      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d011      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	e008      	b.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e000      	b.n	800349e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40014000 	.word	0x40014000
 80034b4:	00010007 	.word	0x00010007

080034b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0202 	mvn.w	r2, #2
 80034e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f905 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8f7 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f908 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0204 	mvn.w	r2, #4
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8db 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8cd 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f8de 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0208 	mvn.w	r2, #8
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2204      	movs	r2, #4
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8b1 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8a3 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8b4 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0210 	mvn.w	r2, #16
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2208      	movs	r2, #8
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f887 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f879 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f88a 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0201 	mvn.w	r2, #1
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fdf8 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8de 	bl	8003824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d10e      	bne.n	8003696 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d107      	bne.n	8003696 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800368e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8d1 	bl	8003838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d10e      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f838 	bl	8003732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d10e      	bne.n	80036ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d107      	bne.n	80036ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0220 	mvn.w	r2, #32
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f891 	bl	8003810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <TIM_Base_SetConfig+0xbc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x20>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <TIM_Base_SetConfig+0xbc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x52>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x52>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <TIM_Base_SetConfig+0xc0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x52>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <TIM_Base_SetConfig+0xc4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <TIM_Base_SetConfig+0xbc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0xa0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <TIM_Base_SetConfig+0xc0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0xa0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <TIM_Base_SetConfig+0xc4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	615a      	str	r2, [r3, #20]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400

08003810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fdd8 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8c0 	bl	8003a10 <UART_SetConfig>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e022      	b.n	80038e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fae0 	bl	8003e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb67 	bl	8003fac <UART_CheckIdleState>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8082 	bne.w	8003a06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x26>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07a      	b.n	8003a08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x38>
 800391c:	2302      	movs	r3, #2
 800391e:	e073      	b.n	8003a08 <HAL_UART_Transmit+0x120>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2221      	movs	r2, #33	; 0x21
 8003934:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003936:	f7fd ffd5 	bl	80018e4 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d108      	bne.n	8003968 <HAL_UART_Transmit+0x80>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e003      	b.n	8003970 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003978:	e02d      	b.n	80039d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fb5a 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e039      	b.n	8003a08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a6:	b292      	uxth	r2, r2
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3302      	adds	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e008      	b.n	80039c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b292      	uxth	r2, r2
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1cb      	bne.n	800397a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fb26 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e005      	b.n	8003a08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b08a      	sub	sp, #40	; 0x28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4bb4      	ldr	r3, [pc, #720]	; (8003d10 <UART_SetConfig+0x300>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4aa9      	ldr	r2, [pc, #676]	; (8003d14 <UART_SetConfig+0x304>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4aa0      	ldr	r2, [pc, #640]	; (8003d18 <UART_SetConfig+0x308>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d126      	bne.n	8003ae8 <UART_SetConfig+0xd8>
 8003a9a:	4ba0      	ldr	r3, [pc, #640]	; (8003d1c <UART_SetConfig+0x30c>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d81b      	bhi.n	8003ae0 <UART_SetConfig+0xd0>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0xa0>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003ad9 	.word	0x08003ad9
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e080      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e07c      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e078      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e074      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e070      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8c      	ldr	r2, [pc, #560]	; (8003d20 <UART_SetConfig+0x310>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d138      	bne.n	8003b64 <UART_SetConfig+0x154>
 8003af2:	4b8a      	ldr	r3, [pc, #552]	; (8003d1c <UART_SetConfig+0x30c>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d82d      	bhi.n	8003b5c <UART_SetConfig+0x14c>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0xf8>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003b5d 	.word	0x08003b5d
 8003b10:	08003b5d 	.word	0x08003b5d
 8003b14:	08003b5d 	.word	0x08003b5d
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003b5d 	.word	0x08003b5d
 8003b20:	08003b5d 	.word	0x08003b5d
 8003b24:	08003b5d 	.word	0x08003b5d
 8003b28:	08003b45 	.word	0x08003b45
 8003b2c:	08003b5d 	.word	0x08003b5d
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b55 	.word	0x08003b55
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e042      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e03e      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e03a      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e036      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e032      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <UART_SetConfig+0x304>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <UART_SetConfig+0x1b4>
 8003b6e:	4b6b      	ldr	r3, [pc, #428]	; (8003d1c <UART_SetConfig+0x30c>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x1a4>
 8003b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x1ac>
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x194>
 8003b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x1ac>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x18c>
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x19c>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x1ac>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e012      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e00e      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e00a      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e006      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e002      	b.n	8003bca <UART_SetConfig+0x1ba>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a51      	ldr	r2, [pc, #324]	; (8003d14 <UART_SetConfig+0x304>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d17a      	bne.n	8003cca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d824      	bhi.n	8003c26 <UART_SetConfig+0x216>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x1d4>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c27 	.word	0x08003c27
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c17 	.word	0x08003c17
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fffa 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61f8      	str	r0, [r7, #28]
        break;
 8003c0e:	e010      	b.n	8003c32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <UART_SetConfig+0x314>)
 8003c12:	61fb      	str	r3, [r7, #28]
        break;
 8003c14:	e00d      	b.n	8003c32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7fe ff5b 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8003c1a:	61f8      	str	r0, [r7, #28]
        break;
 8003c1c:	e009      	b.n	8003c32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c22:	61fb      	str	r3, [r7, #28]
        break;
 8003c24:	e005      	b.n	8003c32 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8107 	beq.w	8003e48 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d305      	bcc.n	8003c56 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c5c:	e0f4      	b.n	8003e48 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2200      	movs	r2, #0
 8003c62:	461c      	mov	r4, r3
 8003c64:	4615      	mov	r5, r2
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	022b      	lsls	r3, r5, #8
 8003c70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c74:	0222      	lsls	r2, r4, #8
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	6849      	ldr	r1, [r1, #4]
 8003c7a:	0849      	lsrs	r1, r1, #1
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4688      	mov	r8, r1
 8003c80:	4681      	mov	r9, r0
 8003c82:	eb12 0a08 	adds.w	sl, r2, r8
 8003c86:	eb43 0b09 	adc.w	fp, r3, r9
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c98:	4650      	mov	r0, sl
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	f7fc ff84 	bl	8000ba8 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cae:	d308      	bcc.n	8003cc2 <UART_SetConfig+0x2b2>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb6:	d204      	bcs.n	8003cc2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	e0c2      	b.n	8003e48 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cc8:	e0be      	b.n	8003e48 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd2:	d16a      	bne.n	8003daa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d834      	bhi.n	8003d46 <UART_SetConfig+0x336>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0x2d4>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d47 	.word	0x08003d47
 8003cf4:	08003d37 	.word	0x08003d37
 8003cf8:	08003d47 	.word	0x08003d47
 8003cfc:	08003d47 	.word	0x08003d47
 8003d00:	08003d47 	.word	0x08003d47
 8003d04:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7fe ff7a 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	61f8      	str	r0, [r7, #28]
        break;
 8003d0e:	e020      	b.n	8003d52 <UART_SetConfig+0x342>
 8003d10:	efff69f3 	.word	0xefff69f3
 8003d14:	40008000 	.word	0x40008000
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40004400 	.word	0x40004400
 8003d24:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe ff80 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e010      	b.n	8003d52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <UART_SetConfig+0x454>)
 8003d32:	61fb      	str	r3, [r7, #28]
        break;
 8003d34:	e00d      	b.n	8003d52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe fecb 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8003d3a:	61f8      	str	r0, [r7, #28]
        break;
 8003d3c:	e009      	b.n	8003d52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	61fb      	str	r3, [r7, #28]
        break;
 8003d44:	e005      	b.n	8003d52 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d077      	beq.n	8003e48 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005a      	lsls	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	441a      	add	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b0f      	cmp	r3, #15
 8003d72:	d916      	bls.n	8003da2 <UART_SetConfig+0x392>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d212      	bcs.n	8003da2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f023 030f 	bic.w	r3, r3, #15
 8003d84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	8afb      	ldrh	r3, [r7, #22]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	8afa      	ldrh	r2, [r7, #22]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e052      	b.n	8003e48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da8:	e04e      	b.n	8003e48 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d827      	bhi.n	8003e02 <UART_SetConfig+0x3f2>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x3a8>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe ff10 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61f8      	str	r0, [r7, #28]
        break;
 8003de2:	e014      	b.n	8003e0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe ff22 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8003de8:	61f8      	str	r0, [r7, #28]
        break;
 8003dea:	e010      	b.n	8003e0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <UART_SetConfig+0x454>)
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e00d      	b.n	8003e0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fe6d 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8003df6:	61f8      	str	r0, [r7, #28]
        break;
 8003df8:	e009      	b.n	8003e0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e005      	b.n	8003e0e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d019      	beq.n	8003e48 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	085a      	lsrs	r2, r3, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b0f      	cmp	r3, #15
 8003e2c:	d909      	bls.n	8003e42 <UART_SetConfig+0x432>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d205      	bcs.n	8003e42 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
 8003e40:	e002      	b.n	8003e48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	00f42400 	.word	0x00f42400

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d10a      	bne.n	8003f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fbc:	f7fd fc92 	bl	80018e4 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10e      	bne.n	8003fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f82d 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e023      	b.n	8004036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d10e      	bne.n	800401a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f817 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e00d      	b.n	8004036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b09c      	sub	sp, #112	; 0x70
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404e:	e0a5      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	f000 80a1 	beq.w	800419c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fd fc43 	bl	80018e4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <UART_WaitOnFlagUntilTimeout+0x32>
 800406a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800406c:	2b00      	cmp	r3, #0
 800406e:	d13e      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800407e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004084:	667b      	str	r3, [r7, #100]	; 0x64
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800408e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004090:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800409c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e6      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e5      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e067      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d04f      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d147      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004114:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800412a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
 8004136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	613b      	str	r3, [r7, #16]
   return(result);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004168:	623a      	str	r2, [r7, #32]
 800416a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69f9      	ldr	r1, [r7, #28]
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	61bb      	str	r3, [r7, #24]
   return(result);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e010      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	f43f af4a 	beq.w	8004050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3770      	adds	r7, #112	; 0x70
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <__NVIC_SetPriority>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <SysTick_Handler+0x1c>)
 8004222:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004224:	f001 fd28 	bl	8005c78 <xTaskGetSchedulerState>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d001      	beq.n	8004232 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800422e:	f002 fb13 	bl	8006858 <xPortSysTickHandler>
  }
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004240:	2100      	movs	r1, #0
 8004242:	f06f 0004 	mvn.w	r0, #4
 8004246:	f7ff ffbf 	bl	80041c8 <__NVIC_SetPriority>
#endif
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004256:	f3ef 8305 	mrs	r3, IPSR
 800425a:	603b      	str	r3, [r7, #0]
  return(result);
 800425c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004262:	f06f 0305 	mvn.w	r3, #5
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	e00c      	b.n	8004284 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <osKernelInitialize+0x44>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <osKernelInitialize+0x44>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004278:	2300      	movs	r3, #0
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e002      	b.n	8004284 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000040c 	.word	0x2000040c

08004298 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800429e:	f3ef 8305 	mrs	r3, IPSR
 80042a2:	603b      	str	r3, [r7, #0]
  return(result);
 80042a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80042aa:	f06f 0305 	mvn.w	r3, #5
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e010      	b.n	80042d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <osKernelStart+0x48>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d109      	bne.n	80042ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042ba:	f7ff ffbf 	bl	800423c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <osKernelStart+0x48>)
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042c4:	f001 f87c 	bl	80053c0 <vTaskStartScheduler>
      stat = osOK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e002      	b.n	80042d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042d4:	687b      	ldr	r3, [r7, #4]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	2000040c 	.word	0x2000040c

080042e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af04      	add	r7, sp, #16
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f4:	f3ef 8305 	mrs	r3, IPSR
 80042f8:	617b      	str	r3, [r7, #20]
  return(result);
 80042fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d17e      	bne.n	80043fe <osThreadNew+0x11a>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d07b      	beq.n	80043fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800430a:	2318      	movs	r3, #24
 800430c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d045      	beq.n	80043aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <osThreadNew+0x48>
        name = attr->name;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <osThreadNew+0x6e>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b38      	cmp	r3, #56	; 0x38
 8004344:	d805      	bhi.n	8004352 <osThreadNew+0x6e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <osThreadNew+0x72>
        return (NULL);
 8004352:	2300      	movs	r3, #0
 8004354:	e054      	b.n	8004400 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00e      	beq.n	800438c <osThreadNew+0xa8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2bbb      	cmp	r3, #187	; 0xbb
 8004374:	d90a      	bls.n	800438c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <osThreadNew+0xa8>
        mem = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e010      	b.n	80043ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10c      	bne.n	80043ae <osThreadNew+0xca>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <osThreadNew+0xca>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <osThreadNew+0xca>
          mem = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	e001      	b.n	80043ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d110      	bne.n	80043d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043bc:	9202      	str	r2, [sp, #8]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6a3a      	ldr	r2, [r7, #32]
 80043c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fe0c 	bl	8004fe8 <xTaskCreateStatic>
 80043d0:	4603      	mov	r3, r0
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e013      	b.n	80043fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d110      	bne.n	80043fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	f107 0310 	add.w	r3, r7, #16
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fe57 	bl	80050a2 <xTaskCreate>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d001      	beq.n	80043fe <osThreadNew+0x11a>
            hTask = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043fe:	693b      	ldr	r3, [r7, #16]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3728      	adds	r7, #40	; 0x28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004410:	f3ef 8305 	mrs	r3, IPSR
 8004414:	60bb      	str	r3, [r7, #8]
  return(result);
 8004416:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <osDelay+0x1c>
    stat = osErrorISR;
 800441c:	f06f 0305 	mvn.w	r3, #5
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e007      	b.n	8004434 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <osDelay+0x2c>
      vTaskDelay(ticks);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 ff92 	bl	8005358 <vTaskDelay>
    }
  }

  return (stat);
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a07      	ldr	r2, [pc, #28]	; (800446c <vApplicationGetIdleTaskMemory+0x2c>)
 8004450:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a06      	ldr	r2, [pc, #24]	; (8004470 <vApplicationGetIdleTaskMemory+0x30>)
 8004456:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000410 	.word	0x20000410
 8004470:	200004cc 	.word	0x200004cc

08004474 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004484:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <vApplicationGetTimerTaskMemory+0x30>)
 800448a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	200006cc 	.word	0x200006cc
 80044a4:	20000788 	.word	0x20000788

080044a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f103 0208 	add.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f103 0208 	add.w	r2, r3, #8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f103 0208 	add.w	r2, r3, #8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d103      	bne.n	800456a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e00c      	b.n	8004584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3308      	adds	r3, #8
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e002      	b.n	8004578 <vListInsert+0x2e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d2f6      	bcs.n	8004572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6852      	ldr	r2, [r2, #4]
 80045dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d103      	bne.n	80045f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1e5a      	subs	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800463a:	f002 f87b 	bl	8006734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	3b01      	subs	r3, #1
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d114      	bne.n	80046ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3310      	adds	r3, #16
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f929 	bl	80058f4 <xTaskRemoveFromEventList>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d012      	beq.n	80046ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <xQueueGenericReset+0xcc>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	e009      	b.n	80046ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3310      	adds	r3, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fef2 	bl	80044a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff feed 	bl	80044a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046ce:	f002 f861 	bl	8006794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046d2:	2301      	movs	r3, #1
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <xQueueGenericCreateStatic+0x52>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <xQueueGenericCreateStatic+0x56>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericCreateStatic+0x58>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <xQueueGenericCreateStatic+0x7e>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <xQueueGenericCreateStatic+0x82>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <xQueueGenericCreateStatic+0x84>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	61fb      	str	r3, [r7, #28]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800477e:	2350      	movs	r3, #80	; 0x50
 8004780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d00a      	beq.n	800479e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	61bb      	str	r3, [r7, #24]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800479e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f805 	bl	80047d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	; 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e002      	b.n	80047f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047fe:	2101      	movs	r1, #1
 8004800:	69b8      	ldr	r0, [r7, #24]
 8004802:	f7ff ff05 	bl	8004610 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericSend+0x32>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueGenericSend+0x40>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueGenericSend+0x44>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueGenericSend+0x46>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <xQueueGenericSend+0x60>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d103      	bne.n	8004886 <xQueueGenericSend+0x6e>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <xQueueGenericSend+0x72>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueGenericSend+0x74>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	623b      	str	r3, [r7, #32]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a6:	f001 f9e7 	bl	8005c78 <xTaskGetSchedulerState>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <xQueueGenericSend+0x9e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueGenericSend+0xa2>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueGenericSend+0xa4>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	61fb      	str	r3, [r7, #28]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d6:	f001 ff2d 	bl	8006734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <xQueueGenericSend+0xd4>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d129      	bne.n	8004940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f2:	f000 fa0b 	bl	8004d0c <prvCopyDataToQueue>
 80048f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fff5 	bl	80058f4 <xTaskRemoveFromEventList>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <xQueueGenericSend+0x1f8>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e00a      	b.n	8004938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004928:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <xQueueGenericSend+0x1f8>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004938:	f001 ff2c 	bl	8006794 <vPortExitCritical>
				return pdPASS;
 800493c:	2301      	movs	r3, #1
 800493e:	e063      	b.n	8004a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004946:	f001 ff25 	bl	8006794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800494a:	2300      	movs	r3, #0
 800494c:	e05c      	b.n	8004a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f82f 	bl	80059bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004962:	f001 ff17 	bl	8006794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004966:	f000 fd9b 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496a:	f001 fee3 	bl	8006734 <vPortEnterCritical>
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004974:	b25b      	sxtb	r3, r3
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d103      	bne.n	8004984 <xQueueGenericSend+0x16c>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d103      	bne.n	800499a <xQueueGenericSend+0x182>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499a:	f001 fefb 	bl	8006794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800499e:	1d3a      	adds	r2, r7, #4
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f81e 	bl	80059e8 <xTaskCheckForTimeOut>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d124      	bne.n	80049fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b4:	f000 faa2 	bl	8004efc <prvIsQueueFull>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	3310      	adds	r3, #16
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 ff44 	bl	8005854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ce:	f000 fa2d 	bl	8004e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049d2:	f000 fd73 	bl	80054bc <xTaskResumeAll>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af7c 	bne.w	80048d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <xQueueGenericSend+0x1f8>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	e772      	b.n	80048d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f2:	f000 fa1b 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f6:	f000 fd61 	bl	80054bc <xTaskResumeAll>
 80049fa:	e76c      	b.n	80048d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049fe:	f000 fa15 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a02:	f000 fd5b 	bl	80054bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3738      	adds	r7, #56	; 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b090      	sub	sp, #64	; 0x40
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <xQueueGenericSendFromISR+0x3c>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <xQueueGenericSendFromISR+0x40>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <xQueueGenericSendFromISR+0x42>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d103      	bne.n	8004a7e <xQueueGenericSendFromISR+0x6a>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <xQueueGenericSendFromISR+0x6e>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <xQueueGenericSendFromISR+0x70>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	623b      	str	r3, [r7, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a9e:	f001 ff2b 	bl	80068f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	61fa      	str	r2, [r7, #28]
 8004ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xQueueGenericSendFromISR+0xbc>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d12f      	bne.n	8004b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ae6:	f000 f911 	bl	8004d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d112      	bne.n	8004b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d016      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fef7 	bl	80058f4 <xTaskRemoveFromEventList>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e007      	b.n	8004b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	b25a      	sxtb	r2, r3
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b2e:	e001      	b.n	8004b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3740      	adds	r7, #64	; 0x40
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	; 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <xQueueReceive+0x30>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	623b      	str	r3, [r7, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <xQueueReceive+0x3e>
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <xQueueReceive+0x42>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <xQueueReceive+0x44>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xQueueReceive+0x5e>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	61fb      	str	r3, [r7, #28]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004baa:	f001 f865 	bl	8005c78 <xTaskGetSchedulerState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <xQueueReceive+0x6e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueReceive+0x72>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueReceive+0x74>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xQueueReceive+0x8e>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61bb      	str	r3, [r7, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bda:	f001 fdab 	bl	8006734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01f      	beq.n	8004c2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bee:	f000 f8f7 	bl	8004de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fe74 	bl	80058f4 <xTaskRemoveFromEventList>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <xQueueReceive+0x1bc>)
 8004c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c22:	f001 fdb7 	bl	8006794 <vPortExitCritical>
				return pdPASS;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e069      	b.n	8004cfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c30:	f001 fdb0 	bl	8006794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e062      	b.n	8004cfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 feba 	bl	80059bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c4c:	f001 fda2 	bl	8006794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c50:	f000 fc26 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c54:	f001 fd6e 	bl	8006734 <vPortEnterCritical>
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <xQueueReceive+0x122>
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d103      	bne.n	8004c84 <xQueueReceive+0x138>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	f001 fd86 	bl	8006794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c88:	1d3a      	adds	r2, r7, #4
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fea9 	bl	80059e8 <xTaskCheckForTimeOut>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d123      	bne.n	8004ce4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9e:	f000 f917 	bl	8004ed0 <prvIsQueueEmpty>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fdcf 	bl	8005854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb8:	f000 f8b8 	bl	8004e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cbc:	f000 fbfe 	bl	80054bc <xTaskResumeAll>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d189      	bne.n	8004bda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <xQueueReceive+0x1bc>)
 8004cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	e780      	b.n	8004bda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f000 f8a7 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cde:	f000 fbed 	bl	80054bc <xTaskResumeAll>
 8004ce2:	e77a      	b.n	8004bda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce6:	f000 f8a1 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cea:	f000 fbe7 	bl	80054bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf0:	f000 f8ee 	bl	8004ed0 <prvIsQueueEmpty>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f43f af6f 	beq.w	8004bda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d14d      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ffbc 	bl	8005cb4 <xTaskPriorityDisinherit>
 8004d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	e043      	b.n	8004dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d119      	bne.n	8004d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6858      	ldr	r0, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	461a      	mov	r2, r3
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	f002 f91b 	bl	8006f92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d32b      	bcc.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	e026      	b.n	8004dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68d8      	ldr	r0, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	f002 f901 	bl	8006f92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	425b      	negs	r3, r3
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d105      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d303      	bcc.n	8004e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f002 f8b7 	bl	8006f92 <memcpy>
	}
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e34:	f001 fc7e 	bl	8006734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e40:	e011      	b.n	8004e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd50 	bl	80058f4 <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e5a:	f000 fe27 	bl	8005aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dce9      	bgt.n	8004e42 <prvUnlockQueue+0x16>
 8004e6e:	e000      	b.n	8004e72 <prvUnlockQueue+0x46>
					break;
 8004e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e7a:	f001 fc8b 	bl	8006794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e7e:	f001 fc59 	bl	8006734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e8a:	e011      	b.n	8004eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fd2b 	bl	80058f4 <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea4:	f000 fe02 	bl	8005aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dce9      	bgt.n	8004e8c <prvUnlockQueue+0x60>
 8004eb8:	e000      	b.n	8004ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 fc66 	bl	8006794 <vPortExitCritical>
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 fc2c 	bl	8006734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e001      	b.n	8004eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 fc51 	bl	8006794 <vPortExitCritical>

	return xReturn;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 fc16 	bl	8006734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d102      	bne.n	8004f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e001      	b.n	8004f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f001 fc39 	bl	8006794 <vPortExitCritical>

	return xReturn;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e014      	b.n	8004f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f48:	490c      	ldr	r1, [pc, #48]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f5e:	e006      	b.n	8004f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d9e7      	bls.n	8004f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000b88 	.word	0x20000b88

08004f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f90:	f001 fbd0 	bl	8006734 <vPortEnterCritical>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d103      	bne.n	8004faa <vQueueWaitForMessageRestricted+0x2a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d103      	bne.n	8004fc0 <vQueueWaitForMessageRestricted+0x40>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fbe8 	bl	8006794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fc61 	bl	800589c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff26 	bl	8004e2c <prvUnlockQueue>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	; 0x38
 8004fec:	af04      	add	r7, sp, #16
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xTaskCreateStatic+0x46>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	61fb      	str	r3, [r7, #28]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800502e:	23bc      	movs	r3, #188	; 0xbc
 8005030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2bbc      	cmp	r3, #188	; 0xbc
 8005036:	d00a      	beq.n	800504e <xTaskCreateStatic+0x66>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	61bb      	str	r3, [r7, #24]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800504e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01e      	beq.n	8005094 <xTaskCreateStatic+0xac>
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2202      	movs	r2, #2
 800506a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800506e:	2300      	movs	r3, #0
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	9302      	str	r3, [sp, #8]
 8005076:	f107 0314 	add.w	r3, r7, #20
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f850 	bl	800512c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800508c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508e:	f000 f8f3 	bl	8005278 <prvAddNewTaskToReadyList>
 8005092:	e001      	b.n	8005098 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005098:	697b      	ldr	r3, [r7, #20]
	}
 800509a:	4618      	mov	r0, r3
 800509c:	3728      	adds	r7, #40	; 0x28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b08c      	sub	sp, #48	; 0x30
 80050a6:	af04      	add	r7, sp, #16
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 fc5e 	bl	8006978 <pvPortMalloc>
 80050bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00e      	beq.n	80050e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050c4:	20bc      	movs	r0, #188	; 0xbc
 80050c6:	f001 fc57 	bl	8006978 <pvPortMalloc>
 80050ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
 80050d8:	e005      	b.n	80050e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f001 fd18 	bl	8006b10 <vPortFree>
 80050e0:	e001      	b.n	80050e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f80e 	bl	800512c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005110:	69f8      	ldr	r0, [r7, #28]
 8005112:	f000 f8b1 	bl	8005278 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005116:	2301      	movs	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e002      	b.n	8005122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005122:	69bb      	ldr	r3, [r7, #24]
	}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	461a      	mov	r2, r3
 8005144:	21a5      	movs	r1, #165	; 0xa5
 8005146:	f001 ff32 	bl	8006fae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005154:	3b01      	subs	r3, #1
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <prvInitialiseNewTask+0x58>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01f      	beq.n	80051ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e012      	b.n	80051b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	7819      	ldrb	r1, [r3, #0]
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	3334      	adds	r3, #52	; 0x34
 80051a0:	460a      	mov	r2, r1
 80051a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d9e9      	bls.n	8005190 <prvInitialiseNewTask+0x64>
 80051bc:	e000      	b.n	80051c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80051be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c8:	e003      	b.n	80051d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	2b37      	cmp	r3, #55	; 0x37
 80051d6:	d901      	bls.n	80051dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051d8:	2337      	movs	r3, #55	; 0x37
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2200      	movs	r2, #0
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	3304      	adds	r3, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f978 	bl	80044e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	3318      	adds	r3, #24
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f973 	bl	80044e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	3354      	adds	r3, #84	; 0x54
 800522c:	2260      	movs	r2, #96	; 0x60
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f001 febc 	bl	8006fae <memset>
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <prvInitialiseNewTask+0x140>)
 800523a:	659a      	str	r2, [r3, #88]	; 0x58
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <prvInitialiseNewTask+0x144>)
 8005240:	65da      	str	r2, [r3, #92]	; 0x5c
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <prvInitialiseNewTask+0x148>)
 8005246:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	69b8      	ldr	r0, [r7, #24]
 800524e:	f001 f941 	bl	80064d4 <pxPortInitialiseStack>
 8005252:	4602      	mov	r2, r0
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005262:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005264:	bf00      	nop
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08009af0 	.word	0x08009af0
 8005270:	08009b10 	.word	0x08009b10
 8005274:	08009ad0 	.word	0x08009ad0

08005278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005280:	f001 fa58 	bl	8006734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a2c      	ldr	r2, [pc, #176]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 800528c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005296:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052a4:	f000 fc26 	bl	8005af4 <prvInitialiseTaskLists>
 80052a8:	e00d      	b.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <prvAddNewTaskToReadyList+0xcc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d802      	bhi.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c0:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	4b1b      	ldr	r3, [pc, #108]	; (800534c <prvAddNewTaskToReadyList+0xd4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d903      	bls.n	80052ec <prvAddNewTaskToReadyList+0x74>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <prvAddNewTaskToReadyList+0xd4>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <prvAddNewTaskToReadyList+0xd8>)
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f7ff f8fd 	bl	8004502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005308:	f001 fa44 	bl	8006794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <prvAddNewTaskToReadyList+0xcc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d207      	bcs.n	8005332 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <prvAddNewTaskToReadyList+0xdc>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	2000109c 	.word	0x2000109c
 8005340:	20000bc8 	.word	0x20000bc8
 8005344:	200010a8 	.word	0x200010a8
 8005348:	200010b8 	.word	0x200010b8
 800534c:	200010a4 	.word	0x200010a4
 8005350:	20000bcc 	.word	0x20000bcc
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <vTaskDelay+0x60>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <vTaskDelay+0x30>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60bb      	str	r3, [r7, #8]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005388:	f000 f88a 	bl	80054a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800538c:	2100      	movs	r1, #0
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fcfe 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005394:	f000 f892 	bl	80054bc <xTaskResumeAll>
 8005398:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d107      	bne.n	80053b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <vTaskDelay+0x64>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	200010c4 	.word	0x200010c4
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ce:	463a      	mov	r2, r7
 80053d0:	1d39      	adds	r1, r7, #4
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f832 	bl	8004440 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	9202      	str	r2, [sp, #8]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	460a      	mov	r2, r1
 80053ee:	4924      	ldr	r1, [pc, #144]	; (8005480 <vTaskStartScheduler+0xc0>)
 80053f0:	4824      	ldr	r0, [pc, #144]	; (8005484 <vTaskStartScheduler+0xc4>)
 80053f2:	f7ff fdf9 	bl	8004fe8 <xTaskCreateStatic>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <vTaskStartScheduler+0xc8>)
 80053fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053fc:	4b22      	ldr	r3, [pc, #136]	; (8005488 <vTaskStartScheduler+0xc8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e001      	b.n	800540e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d102      	bne.n	800541a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005414:	f000 fd10 	bl	8005e38 <xTimerCreateTimerTask>
 8005418:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d11b      	bne.n	8005458 <vTaskStartScheduler+0x98>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vTaskStartScheduler+0xcc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3354      	adds	r3, #84	; 0x54
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <vTaskStartScheduler+0xd0>)
 800543c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <vTaskStartScheduler+0xd4>)
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <vTaskStartScheduler+0xd8>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800544c:	4b13      	ldr	r3, [pc, #76]	; (800549c <vTaskStartScheduler+0xdc>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005452:	f001 f8cd 	bl	80065f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005456:	e00e      	b.n	8005476 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d10a      	bne.n	8005476 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <vTaskStartScheduler+0xb4>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	08009a04 	.word	0x08009a04
 8005484:	08005ac5 	.word	0x08005ac5
 8005488:	200010c0 	.word	0x200010c0
 800548c:	20000bc8 	.word	0x20000bc8
 8005490:	20000010 	.word	0x20000010
 8005494:	200010bc 	.word	0x200010bc
 8005498:	200010a8 	.word	0x200010a8
 800549c:	200010a0 	.word	0x200010a0

080054a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a03      	ldr	r2, [pc, #12]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	200010c4 	.word	0x200010c4

080054bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ca:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <xTaskResumeAll+0x118>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e8:	f001 f924 	bl	8006734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ec:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <xTaskResumeAll+0x118>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	4a38      	ldr	r2, [pc, #224]	; (80055d4 <xTaskResumeAll+0x118>)
 80054f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f6:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <xTaskResumeAll+0x118>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d162      	bne.n	80055c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <xTaskResumeAll+0x11c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05e      	beq.n	80055c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005506:	e02f      	b.n	8005568 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005508:	4b34      	ldr	r3, [pc, #208]	; (80055dc <xTaskResumeAll+0x120>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3318      	adds	r3, #24
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff f851 	bl	80045bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff f84c 	bl	80045bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <xTaskResumeAll+0x124>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d903      	bls.n	8005538 <xTaskResumeAll+0x7c>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a2a      	ldr	r2, [pc, #168]	; (80055e0 <xTaskResumeAll+0x124>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <xTaskResumeAll+0x128>)
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7fe ffd7 	bl	8004502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <xTaskResumeAll+0x12c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <xTaskResumeAll+0x130>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <xTaskResumeAll+0x120>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1cb      	bne.n	8005508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005576:	f000 fb5f 	bl	8005c38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <xTaskResumeAll+0x134>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d010      	beq.n	80055a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005586:	f000 f847 	bl	8005618 <xTaskIncrementTick>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <xTaskResumeAll+0x130>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3b01      	subs	r3, #1
 800559a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <xTaskResumeAll+0x134>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <xTaskResumeAll+0x130>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <xTaskResumeAll+0x138>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c4:	f001 f8e6 	bl	8006794 <vPortExitCritical>

	return xAlreadyYielded;
 80055c8:	68bb      	ldr	r3, [r7, #8]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200010c4 	.word	0x200010c4
 80055d8:	2000109c 	.word	0x2000109c
 80055dc:	2000105c 	.word	0x2000105c
 80055e0:	200010a4 	.word	0x200010a4
 80055e4:	20000bcc 	.word	0x20000bcc
 80055e8:	20000bc8 	.word	0x20000bc8
 80055ec:	200010b0 	.word	0x200010b0
 80055f0:	200010ac 	.word	0x200010ac
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <xTaskGetTickCount+0x1c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005604:	687b      	ldr	r3, [r7, #4]
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	200010a0 	.word	0x200010a0

08005618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005622:	4b4f      	ldr	r3, [pc, #316]	; (8005760 <xTaskIncrementTick+0x148>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 808f 	bne.w	800574a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800562c:	4b4d      	ldr	r3, [pc, #308]	; (8005764 <xTaskIncrementTick+0x14c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005634:	4a4b      	ldr	r2, [pc, #300]	; (8005764 <xTaskIncrementTick+0x14c>)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d120      	bne.n	8005682 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005640:	4b49      	ldr	r3, [pc, #292]	; (8005768 <xTaskIncrementTick+0x150>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <xTaskIncrementTick+0x48>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	603b      	str	r3, [r7, #0]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <xTaskIncrementTick+0x46>
 8005660:	4b41      	ldr	r3, [pc, #260]	; (8005768 <xTaskIncrementTick+0x150>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <xTaskIncrementTick+0x154>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <xTaskIncrementTick+0x150>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4a3f      	ldr	r2, [pc, #252]	; (800576c <xTaskIncrementTick+0x154>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <xTaskIncrementTick+0x158>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	4a3d      	ldr	r2, [pc, #244]	; (8005770 <xTaskIncrementTick+0x158>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	f000 fadb 	bl	8005c38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005682:	4b3c      	ldr	r3, [pc, #240]	; (8005774 <xTaskIncrementTick+0x15c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d349      	bcc.n	8005720 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800568c:	4b36      	ldr	r3, [pc, #216]	; (8005768 <xTaskIncrementTick+0x150>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005696:	4b37      	ldr	r3, [pc, #220]	; (8005774 <xTaskIncrementTick+0x15c>)
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	601a      	str	r2, [r3, #0]
					break;
 800569e:	e03f      	b.n	8005720 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a0:	4b31      	ldr	r3, [pc, #196]	; (8005768 <xTaskIncrementTick+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d203      	bcs.n	80056c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056b8:	4a2e      	ldr	r2, [pc, #184]	; (8005774 <xTaskIncrementTick+0x15c>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056be:	e02f      	b.n	8005720 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe ff79 	bl	80045bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3318      	adds	r3, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe ff70 	bl	80045bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <xTaskIncrementTick+0x160>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <xTaskIncrementTick+0xd8>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <xTaskIncrementTick+0x160>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <xTaskIncrementTick+0x164>)
 80056fe:	441a      	add	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe fefb 	bl	8004502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <xTaskIncrementTick+0x168>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	429a      	cmp	r2, r3
 8005718:	d3b8      	bcc.n	800568c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571e:	e7b5      	b.n	800568c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <xTaskIncrementTick+0x168>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	4915      	ldr	r1, [pc, #84]	; (800577c <xTaskIncrementTick+0x164>)
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d901      	bls.n	800573c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <xTaskIncrementTick+0x16c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e004      	b.n	8005754 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <xTaskIncrementTick+0x170>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <xTaskIncrementTick+0x170>)
 8005752:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200010c4 	.word	0x200010c4
 8005764:	200010a0 	.word	0x200010a0
 8005768:	20001054 	.word	0x20001054
 800576c:	20001058 	.word	0x20001058
 8005770:	200010b4 	.word	0x200010b4
 8005774:	200010bc 	.word	0x200010bc
 8005778:	200010a4 	.word	0x200010a4
 800577c:	20000bcc 	.word	0x20000bcc
 8005780:	20000bc8 	.word	0x20000bc8
 8005784:	200010b0 	.word	0x200010b0
 8005788:	200010ac 	.word	0x200010ac

0800578c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005792:	4b2a      	ldr	r3, [pc, #168]	; (800583c <vTaskSwitchContext+0xb0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800579a:	4b29      	ldr	r3, [pc, #164]	; (8005840 <vTaskSwitchContext+0xb4>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057a0:	e046      	b.n	8005830 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057a2:	4b27      	ldr	r3, [pc, #156]	; (8005840 <vTaskSwitchContext+0xb4>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a8:	4b26      	ldr	r3, [pc, #152]	; (8005844 <vTaskSwitchContext+0xb8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	e010      	b.n	80057d2 <vTaskSwitchContext+0x46>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vTaskSwitchContext+0x40>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	607b      	str	r3, [r7, #4]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vTaskSwitchContext+0x3e>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	491d      	ldr	r1, [pc, #116]	; (8005848 <vTaskSwitchContext+0xbc>)
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0e4      	beq.n	80057b0 <vTaskSwitchContext+0x24>
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4a15      	ldr	r2, [pc, #84]	; (8005848 <vTaskSwitchContext+0xbc>)
 80057f2:	4413      	add	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	605a      	str	r2, [r3, #4]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	3308      	adds	r3, #8
 8005808:	429a      	cmp	r2, r3
 800580a:	d104      	bne.n	8005816 <vTaskSwitchContext+0x8a>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a0b      	ldr	r2, [pc, #44]	; (800584c <vTaskSwitchContext+0xc0>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <vTaskSwitchContext+0xb8>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <vTaskSwitchContext+0xc0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3354      	adds	r3, #84	; 0x54
 800582c:	4a08      	ldr	r2, [pc, #32]	; (8005850 <vTaskSwitchContext+0xc4>)
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	200010c4 	.word	0x200010c4
 8005840:	200010b0 	.word	0x200010b0
 8005844:	200010a4 	.word	0x200010a4
 8005848:	20000bcc 	.word	0x20000bcc
 800584c:	20000bc8 	.word	0x20000bc8
 8005850:	20000010 	.word	0x20000010

08005854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <vTaskPlaceOnEventList+0x44>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3318      	adds	r3, #24
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fe fe61 	bl	800454a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005888:	2101      	movs	r1, #1
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f000 fa80 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000bc8 	.word	0x20000bc8

0800589c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	617b      	str	r3, [r7, #20]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3318      	adds	r3, #24
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7fe fe18 	bl	8004502 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058d8:	f04f 33ff 	mov.w	r3, #4294967295
 80058dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	68b8      	ldr	r0, [r7, #8]
 80058e2:	f000 fa55 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
	}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000bc8 	.word	0x20000bc8

080058f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	60fb      	str	r3, [r7, #12]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fe49 	bl	80045bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592a:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <xTaskRemoveFromEventList+0xb0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11d      	bne.n	800596e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fe40 	bl	80045bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <xTaskRemoveFromEventList+0xb4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d903      	bls.n	8005950 <xTaskRemoveFromEventList+0x5c>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <xTaskRemoveFromEventList+0xb4>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a13      	ldr	r2, [pc, #76]	; (80059ac <xTaskRemoveFromEventList+0xb8>)
 800595e:	441a      	add	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe fdcb 	bl	8004502 <vListInsertEnd>
 800596c:	e005      	b.n	800597a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3318      	adds	r3, #24
 8005972:	4619      	mov	r1, r3
 8005974:	480e      	ldr	r0, [pc, #56]	; (80059b0 <xTaskRemoveFromEventList+0xbc>)
 8005976:	f7fe fdc4 	bl	8004502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <xTaskRemoveFromEventList+0xc0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	429a      	cmp	r2, r3
 8005986:	d905      	bls.n	8005994 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <xTaskRemoveFromEventList+0xc4>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e001      	b.n	8005998 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005998:	697b      	ldr	r3, [r7, #20]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200010c4 	.word	0x200010c4
 80059a8:	200010a4 	.word	0x200010a4
 80059ac:	20000bcc 	.word	0x20000bcc
 80059b0:	2000105c 	.word	0x2000105c
 80059b4:	20000bc8 	.word	0x20000bc8
 80059b8:	200010b0 	.word	0x200010b0

080059bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <vTaskInternalSetTimeOutState+0x24>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <vTaskInternalSetTimeOutState+0x28>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	605a      	str	r2, [r3, #4]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	200010b4 	.word	0x200010b4
 80059e4:	200010a0 	.word	0x200010a0

080059e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	613b      	str	r3, [r7, #16]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a2a:	f000 fe83 	bl	8006734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <xTaskCheckForTimeOut+0xbc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d102      	bne.n	8005a4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e023      	b.n	8005a96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <xTaskCheckForTimeOut+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d007      	beq.n	8005a6a <xTaskCheckForTimeOut+0x82>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d302      	bcc.n	8005a6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e015      	b.n	8005a96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d20b      	bcs.n	8005a8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff9b 	bl	80059bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e004      	b.n	8005a96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f000 fe7d 	bl	8006794 <vPortExitCritical>

	return xReturn;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	200010a0 	.word	0x200010a0
 8005aa8:	200010b4 	.word	0x200010b4

08005aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <vTaskMissedYield+0x14>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200010b0 	.word	0x200010b0

08005ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005acc:	f000 f852 	bl	8005b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <prvIdleTask+0x28>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d9f9      	bls.n	8005acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <prvIdleTask+0x2c>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ae8:	e7f0      	b.n	8005acc <prvIdleTask+0x8>
 8005aea:	bf00      	nop
 8005aec:	20000bcc 	.word	0x20000bcc
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e00c      	b.n	8005b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <prvInitialiseTaskLists+0x60>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fcca 	bl	80044a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b37      	cmp	r3, #55	; 0x37
 8005b1e:	d9ef      	bls.n	8005b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b20:	480d      	ldr	r0, [pc, #52]	; (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b22:	f7fe fcc1 	bl	80044a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b26:	480d      	ldr	r0, [pc, #52]	; (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b28:	f7fe fcbe 	bl	80044a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b2c:	480c      	ldr	r0, [pc, #48]	; (8005b60 <prvInitialiseTaskLists+0x6c>)
 8005b2e:	f7fe fcbb 	bl	80044a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b32:	480c      	ldr	r0, [pc, #48]	; (8005b64 <prvInitialiseTaskLists+0x70>)
 8005b34:	f7fe fcb8 	bl	80044a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b38:	480b      	ldr	r0, [pc, #44]	; (8005b68 <prvInitialiseTaskLists+0x74>)
 8005b3a:	f7fe fcb5 	bl	80044a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <prvInitialiseTaskLists+0x78>)
 8005b40:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <prvInitialiseTaskLists+0x7c>)
 8005b46:	4a05      	ldr	r2, [pc, #20]	; (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000bcc 	.word	0x20000bcc
 8005b58:	2000102c 	.word	0x2000102c
 8005b5c:	20001040 	.word	0x20001040
 8005b60:	2000105c 	.word	0x2000105c
 8005b64:	20001070 	.word	0x20001070
 8005b68:	20001088 	.word	0x20001088
 8005b6c:	20001054 	.word	0x20001054
 8005b70:	20001058 	.word	0x20001058

08005b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7a:	e019      	b.n	8005bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b7c:	f000 fdda 	bl	8006734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <prvCheckTasksWaitingTermination+0x50>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fd15 	bl	80045bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ba6:	f000 fdf5 	bl	8006794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f810 	bl	8005bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e1      	bne.n	8005b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20001070 	.word	0x20001070
 8005bc8:	2000109c 	.word	0x2000109c
 8005bcc:	20001084 	.word	0x20001084

08005bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3354      	adds	r3, #84	; 0x54
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 ff71 	bl	8007ac4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 ff8d 	bl	8006b10 <vPortFree>
				vPortFree( pxTCB );
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ff8a 	bl	8006b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bfc:	e018      	b.n	8005c30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d103      	bne.n	8005c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 ff81 	bl	8006b10 <vPortFree>
	}
 8005c0e:	e00f      	b.n	8005c30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d00a      	beq.n	8005c30 <prvDeleteTCB+0x60>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <prvDeleteTCB+0x5e>
	}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <prvResetNextTaskUnblockTime+0x38>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <prvResetNextTaskUnblockTime+0x3c>)
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c50:	e008      	b.n	8005c64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <prvResetNextTaskUnblockTime+0x38>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <prvResetNextTaskUnblockTime+0x3c>)
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20001054 	.word	0x20001054
 8005c74:	200010bc 	.word	0x200010bc

08005c78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <xTaskGetSchedulerState+0x34>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c86:	2301      	movs	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	e008      	b.n	8005c9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c8c:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <xTaskGetSchedulerState+0x38>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c94:	2302      	movs	r3, #2
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	e001      	b.n	8005c9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c9e:	687b      	ldr	r3, [r7, #4]
	}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	200010a8 	.word	0x200010a8
 8005cb0:	200010c4 	.word	0x200010c4

08005cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d056      	beq.n	8005d78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cca:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <xTaskPriorityDisinherit+0xd0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d00a      	beq.n	8005cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60fb      	str	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60bb      	str	r3, [r7, #8]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	1e5a      	subs	r2, r3, #1
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d02c      	beq.n	8005d78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d128      	bne.n	8005d78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe fc46 	bl	80045bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <xTaskPriorityDisinherit+0xd4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d903      	bls.n	8005d58 <xTaskPriorityDisinherit+0xa4>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <xTaskPriorityDisinherit+0xd4>)
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <xTaskPriorityDisinherit+0xd8>)
 8005d66:	441a      	add	r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fe fbc7 	bl	8004502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d78:	697b      	ldr	r3, [r7, #20]
	}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000bc8 	.word	0x20000bc8
 8005d88:	200010a4 	.word	0x200010a4
 8005d8c:	20000bcc 	.word	0x20000bcc

08005d90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d9a:	4b21      	ldr	r3, [pc, #132]	; (8005e20 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da0:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fc08 	bl	80045bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d10a      	bne.n	8005dca <prvAddCurrentTaskToDelayedList+0x3a>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4819      	ldr	r0, [pc, #100]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dc4:	f7fe fb9d 	bl	8004502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dc8:	e026      	b.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d209      	bcs.n	8005df6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe fbab 	bl	800454a <vListInsert>
}
 8005df4:	e010      	b.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fe fba1 	bl	800454a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d202      	bcs.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e12:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6013      	str	r3, [r2, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	200010a0 	.word	0x200010a0
 8005e24:	20000bc8 	.word	0x20000bc8
 8005e28:	20001088 	.word	0x20001088
 8005e2c:	20001058 	.word	0x20001058
 8005e30:	20001054 	.word	0x20001054
 8005e34:	200010bc 	.word	0x200010bc

08005e38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e42:	f000 fb07 	bl	8006454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e46:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <xTimerCreateTimerTask+0x80>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d021      	beq.n	8005e92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	f107 0108 	add.w	r1, r7, #8
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fb07 	bl	8004474 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	9202      	str	r2, [sp, #8]
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	2302      	movs	r3, #2
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	460a      	mov	r2, r1
 8005e78:	4910      	ldr	r1, [pc, #64]	; (8005ebc <xTimerCreateTimerTask+0x84>)
 8005e7a:	4811      	ldr	r0, [pc, #68]	; (8005ec0 <xTimerCreateTimerTask+0x88>)
 8005e7c:	f7ff f8b4 	bl	8004fe8 <xTaskCreateStatic>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <xTimerCreateTimerTask+0x8c>)
 8005e84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e86:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <xTimerCreateTimerTask+0x8c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	613b      	str	r3, [r7, #16]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200010f8 	.word	0x200010f8
 8005ebc:	08009a0c 	.word	0x08009a0c
 8005ec0:	08005ffd 	.word	0x08005ffd
 8005ec4:	200010fc 	.word	0x200010fc

08005ec8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	623b      	str	r3, [r7, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <xTimerGenericCommand+0x98>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02a      	beq.n	8005f54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	dc18      	bgt.n	8005f42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f10:	f7ff feb2 	bl	8005c78 <xTaskGetSchedulerState>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d109      	bne.n	8005f2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <xTimerGenericCommand+0x98>)
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f107 0110 	add.w	r1, r7, #16
 8005f22:	2300      	movs	r3, #0
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	f7fe fc77 	bl	8004818 <xQueueGenericSend>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f2c:	e012      	b.n	8005f54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <xTimerGenericCommand+0x98>)
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f107 0110 	add.w	r1, r7, #16
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fe fc6d 	bl	8004818 <xQueueGenericSend>
 8005f3e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f40:	e008      	b.n	8005f54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <xTimerGenericCommand+0x98>)
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f107 0110 	add.w	r1, r7, #16
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	f7fe fd61 	bl	8004a14 <xQueueGenericSendFromISR>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3728      	adds	r7, #40	; 0x28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	200010f8 	.word	0x200010f8

08005f64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <prvProcessExpiredTimer+0x94>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fb1d 	bl	80045bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d022      	beq.n	8005fd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	18d1      	adds	r1, r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	6978      	ldr	r0, [r7, #20]
 8005f9e:	f000 f8d1 	bl	8006144 <prvInsertTimerInActiveList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01f      	beq.n	8005fe8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f7ff ff88 	bl	8005ec8 <xTimerGenericCommand>
 8005fb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	6978      	ldr	r0, [r7, #20]
 8005fee:	4798      	blx	r3
}
 8005ff0:	bf00      	nop
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200010f0 	.word	0x200010f0

08005ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f857 	bl	80060bc <prvGetNextExpireTime>
 800600e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f803 	bl	8006020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800601a:	f000 f8d5 	bl	80061c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800601e:	e7f1      	b.n	8006004 <prvTimerTask+0x8>

08006020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800602a:	f7ff fa39 	bl	80054a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800602e:	f107 0308 	add.w	r3, r7, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f866 	bl	8006104 <prvSampleTimeNow>
 8006038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d130      	bne.n	80060a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <prvProcessTimerOrBlockTask+0x3c>
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d806      	bhi.n	800605c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800604e:	f7ff fa35 	bl	80054bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff85 	bl	8005f64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800605a:	e024      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <prvProcessTimerOrBlockTask+0x90>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <prvProcessTimerOrBlockTask+0x50>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <prvProcessTimerOrBlockTask+0x52>
 8006070:	2300      	movs	r3, #0
 8006072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <prvProcessTimerOrBlockTask+0x94>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	f7fe ff7d 	bl	8004f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006086:	f7ff fa19 	bl	80054bc <xTaskResumeAll>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <prvProcessTimerOrBlockTask+0x98>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
}
 80060a0:	e001      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060a2:	f7ff fa0b 	bl	80054bc <xTaskResumeAll>
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200010f4 	.word	0x200010f4
 80060b4:	200010f8 	.word	0x200010f8
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <prvGetNextExpireTime+0x44>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <prvGetNextExpireTime+0x16>
 80060ce:	2201      	movs	r2, #1
 80060d0:	e000      	b.n	80060d4 <prvGetNextExpireTime+0x18>
 80060d2:	2200      	movs	r2, #0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <prvGetNextExpireTime+0x44>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e001      	b.n	80060f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	200010f0 	.word	0x200010f0

08006104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800610c:	f7ff fa74 	bl	80055f8 <xTaskGetTickCount>
 8006110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <prvSampleTimeNow+0x3c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d205      	bcs.n	8006128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800611c:	f000 f936 	bl	800638c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e002      	b.n	800612e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <prvSampleTimeNow+0x3c>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20001100 	.word	0x20001100

08006144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d812      	bhi.n	8006190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e01b      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <prvInsertTimerInActiveList+0x7c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fe f9de 	bl	800454a <vListInsert>
 800618e:	e012      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d206      	bcs.n	80061a6 <prvInsertTimerInActiveList+0x62>
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e007      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <prvInsertTimerInActiveList+0x80>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fe f9ca 	bl	800454a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061b6:	697b      	ldr	r3, [r7, #20]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200010f4 	.word	0x200010f4
 80061c4:	200010f0 	.word	0x200010f0

080061c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ce:	e0ca      	b.n	8006366 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da18      	bge.n	8006208 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	3304      	adds	r3, #4
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	61fb      	str	r3, [r7, #28]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fe:	6850      	ldr	r0, [r2, #4]
 8006200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006202:	6892      	ldr	r2, [r2, #8]
 8006204:	4611      	mov	r1, r2
 8006206:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f2c0 80aa 	blt.w	8006364 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe f9cb 	bl	80045bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006226:	463b      	mov	r3, r7
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ff6b 	bl	8006104 <prvSampleTimeNow>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b09      	cmp	r3, #9
 8006234:	f200 8097 	bhi.w	8006366 <prvProcessReceivedCommands+0x19e>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <prvProcessReceivedCommands+0x78>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006269 	.word	0x08006269
 8006244:	08006269 	.word	0x08006269
 8006248:	08006269 	.word	0x08006269
 800624c:	080062dd 	.word	0x080062dd
 8006250:	080062f1 	.word	0x080062f1
 8006254:	0800633b 	.word	0x0800633b
 8006258:	08006269 	.word	0x08006269
 800625c:	08006269 	.word	0x08006269
 8006260:	080062dd 	.word	0x080062dd
 8006264:	080062f1 	.word	0x080062f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	18d1      	adds	r1, r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006288:	f7ff ff5c 	bl	8006144 <prvInsertTimerInActiveList>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d069      	beq.n	8006366 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006298:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d05e      	beq.n	8006366 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	441a      	add	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ba:	f7ff fe05 	bl	8005ec8 <xTimerGenericCommand>
 80062be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d14f      	bne.n	8006366 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	61bb      	str	r3, [r7, #24]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062ee:	e03a      	b.n	8006366 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	617b      	str	r3, [r7, #20]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	18d1      	adds	r1, r2, r3
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006334:	f7ff ff06 	bl	8006144 <prvInsertTimerInActiveList>
					break;
 8006338:	e015      	b.n	8006366 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634a:	f000 fbe1 	bl	8006b10 <vPortFree>
 800634e:	e00a      	b.n	8006366 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006362:	e000      	b.n	8006366 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006364:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006366:	4b08      	ldr	r3, [pc, #32]	; (8006388 <prvProcessReceivedCommands+0x1c0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	1d39      	adds	r1, r7, #4
 800636c:	2200      	movs	r2, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fbec 	bl	8004b4c <xQueueReceive>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f47f af2a 	bne.w	80061d0 <prvProcessReceivedCommands+0x8>
	}
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	3730      	adds	r7, #48	; 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200010f8 	.word	0x200010f8

0800638c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006392:	e048      	b.n	8006426 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <prvSwitchTimerLists+0xc0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639e:	4b2b      	ldr	r3, [pc, #172]	; (800644c <prvSwitchTimerLists+0xc0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe f905 	bl	80045bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02e      	beq.n	8006426 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d90e      	bls.n	80063f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063e6:	4b19      	ldr	r3, [pc, #100]	; (800644c <prvSwitchTimerLists+0xc0>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f7fe f8aa 	bl	800454a <vListInsert>
 80063f6:	e016      	b.n	8006426 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	2100      	movs	r1, #0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fd60 	bl	8005ec8 <xTimerGenericCommand>
 8006408:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	603b      	str	r3, [r7, #0]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <prvSwitchTimerLists+0xc0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1b1      	bne.n	8006394 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <prvSwitchTimerLists+0xc0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <prvSwitchTimerLists+0xc4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a04      	ldr	r2, [pc, #16]	; (800644c <prvSwitchTimerLists+0xc0>)
 800643c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800643e:	4a04      	ldr	r2, [pc, #16]	; (8006450 <prvSwitchTimerLists+0xc4>)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200010f0 	.word	0x200010f0
 8006450:	200010f4 	.word	0x200010f4

08006454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800645a:	f000 f96b 	bl	8006734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <prvCheckForValidListAndQueue+0x60>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d120      	bne.n	80064a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006466:	4814      	ldr	r0, [pc, #80]	; (80064b8 <prvCheckForValidListAndQueue+0x64>)
 8006468:	f7fe f81e 	bl	80044a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800646c:	4813      	ldr	r0, [pc, #76]	; (80064bc <prvCheckForValidListAndQueue+0x68>)
 800646e:	f7fe f81b 	bl	80044a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <prvCheckForValidListAndQueue+0x6c>)
 8006474:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <prvCheckForValidListAndQueue+0x64>)
 8006476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <prvCheckForValidListAndQueue+0x70>)
 800647a:	4a10      	ldr	r2, [pc, #64]	; (80064bc <prvCheckForValidListAndQueue+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800647e:	2300      	movs	r3, #0
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <prvCheckForValidListAndQueue+0x74>)
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <prvCheckForValidListAndQueue+0x78>)
 8006486:	2110      	movs	r1, #16
 8006488:	200a      	movs	r0, #10
 800648a:	f7fe f929 	bl	80046e0 <xQueueGenericCreateStatic>
 800648e:	4603      	mov	r3, r0
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <prvCheckForValidListAndQueue+0x60>)
 8006492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <prvCheckForValidListAndQueue+0x60>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <prvCheckForValidListAndQueue+0x60>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	490b      	ldr	r1, [pc, #44]	; (80064d0 <prvCheckForValidListAndQueue+0x7c>)
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fd42 	bl	8004f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a8:	f000 f974 	bl	8006794 <vPortExitCritical>
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200010f8 	.word	0x200010f8
 80064b8:	200010c8 	.word	0x200010c8
 80064bc:	200010dc 	.word	0x200010dc
 80064c0:	200010f0 	.word	0x200010f0
 80064c4:	200010f4 	.word	0x200010f4
 80064c8:	200011a4 	.word	0x200011a4
 80064cc:	20001104 	.word	0x20001104
 80064d0:	08009a14 	.word	0x08009a14

080064d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3b04      	subs	r3, #4
 80064e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b04      	subs	r3, #4
 80064f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f023 0201 	bic.w	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b04      	subs	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006504:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <pxPortInitialiseStack+0x64>)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b14      	subs	r3, #20
 800650e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b04      	subs	r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f06f 0202 	mvn.w	r2, #2
 8006522:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3b20      	subs	r3, #32
 8006528:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800652a:	68fb      	ldr	r3, [r7, #12]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	0800653d 	.word	0x0800653d

0800653c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006546:	4b12      	ldr	r3, [pc, #72]	; (8006590 <prvTaskExitError+0x54>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d00a      	beq.n	8006566 <prvTaskExitError+0x2a>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <prvTaskExitError+0x28>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60bb      	str	r3, [r7, #8]
}
 8006578:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800657a:	bf00      	nop
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0fc      	beq.n	800657c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	2000000c 	.word	0x2000000c
	...

080065a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <pxCurrentTCBConst2>)
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	6808      	ldr	r0, [r1, #0]
 80065a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f380 8809 	msr	PSP, r0
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	4770      	bx	lr
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst2>:
 80065c0:	20000bc8 	.word	0x20000bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065c8:	4808      	ldr	r0, [pc, #32]	; (80065ec <prvPortStartFirstTask+0x24>)
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	6800      	ldr	r0, [r0, #0]
 80065ce:	f380 8808 	msr	MSP, r0
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8814 	msr	CONTROL, r0
 80065da:	b662      	cpsie	i
 80065dc:	b661      	cpsie	f
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	df00      	svc	0
 80065e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ea:	bf00      	nop
 80065ec:	e000ed08 	.word	0xe000ed08

080065f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065f6:	4b46      	ldr	r3, [pc, #280]	; (8006710 <xPortStartScheduler+0x120>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a46      	ldr	r2, [pc, #280]	; (8006714 <xPortStartScheduler+0x124>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10a      	bne.n	8006616 <xPortStartScheduler+0x26>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006616:	4b3e      	ldr	r3, [pc, #248]	; (8006710 <xPortStartScheduler+0x120>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3f      	ldr	r2, [pc, #252]	; (8006718 <xPortStartScheduler+0x128>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10a      	bne.n	8006636 <xPortStartScheduler+0x46>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60fb      	str	r3, [r7, #12]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006636:	4b39      	ldr	r3, [pc, #228]	; (800671c <xPortStartScheduler+0x12c>)
 8006638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006658:	b2da      	uxtb	r2, r3
 800665a:	4b31      	ldr	r3, [pc, #196]	; (8006720 <xPortStartScheduler+0x130>)
 800665c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800665e:	4b31      	ldr	r3, [pc, #196]	; (8006724 <xPortStartScheduler+0x134>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006664:	e009      	b.n	800667a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006666:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <xPortStartScheduler+0x134>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3b01      	subs	r3, #1
 800666c:	4a2d      	ldr	r2, [pc, #180]	; (8006724 <xPortStartScheduler+0x134>)
 800666e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d0ef      	beq.n	8006666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006686:	4b27      	ldr	r3, [pc, #156]	; (8006724 <xPortStartScheduler+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1c3 0307 	rsb	r3, r3, #7
 800668e:	2b04      	cmp	r3, #4
 8006690:	d00a      	beq.n	80066a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60bb      	str	r3, [r7, #8]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066a8:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <xPortStartScheduler+0x134>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <xPortStartScheduler+0x134>)
 80066b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <xPortStartScheduler+0x134>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <xPortStartScheduler+0x134>)
 80066bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066c6:	4b18      	ldr	r3, [pc, #96]	; (8006728 <xPortStartScheduler+0x138>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a17      	ldr	r2, [pc, #92]	; (8006728 <xPortStartScheduler+0x138>)
 80066cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066d2:	4b15      	ldr	r3, [pc, #84]	; (8006728 <xPortStartScheduler+0x138>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a14      	ldr	r2, [pc, #80]	; (8006728 <xPortStartScheduler+0x138>)
 80066d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066de:	f000 f8dd 	bl	800689c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066e2:	4b12      	ldr	r3, [pc, #72]	; (800672c <xPortStartScheduler+0x13c>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066e8:	f000 f8fc 	bl	80068e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <xPortStartScheduler+0x140>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <xPortStartScheduler+0x140>)
 80066f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066f8:	f7ff ff66 	bl	80065c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066fc:	f7ff f846 	bl	800578c <vTaskSwitchContext>
	prvTaskExitError();
 8006700:	f7ff ff1c 	bl	800653c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	e000ed00 	.word	0xe000ed00
 8006714:	410fc271 	.word	0x410fc271
 8006718:	410fc270 	.word	0x410fc270
 800671c:	e000e400 	.word	0xe000e400
 8006720:	200011f4 	.word	0x200011f4
 8006724:	200011f8 	.word	0x200011f8
 8006728:	e000ed20 	.word	0xe000ed20
 800672c:	2000000c 	.word	0x2000000c
 8006730:	e000ef34 	.word	0xe000ef34

08006734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	607b      	str	r3, [r7, #4]
}
 800674c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <vPortEnterCritical+0x58>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a0d      	ldr	r2, [pc, #52]	; (800678c <vPortEnterCritical+0x58>)
 8006756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <vPortEnterCritical+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d10f      	bne.n	8006780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortEnterCritical+0x5c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <vPortEnterCritical+0x4c>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <vPortEnterCritical+0x4a>
	}
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	2000000c 	.word	0x2000000c
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <vPortExitCritical+0x50>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <vPortExitCritical+0x24>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	607b      	str	r3, [r7, #4]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <vPortExitCritical+0x50>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <vPortExitCritical+0x50>)
 80067c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <vPortExitCritical+0x50>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <vPortExitCritical+0x42>
 80067ca:	2300      	movs	r3, #0
 80067cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f383 8811 	msr	BASEPRI, r3
}
 80067d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000000c 	.word	0x2000000c
	...

080067f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067f0:	f3ef 8009 	mrs	r0, PSP
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <pxCurrentTCBConst>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f01e 0f10 	tst.w	lr, #16
 8006800:	bf08      	it	eq
 8006802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	6010      	str	r0, [r2, #0]
 800680c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006814:	f380 8811 	msr	BASEPRI, r0
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f7fe ffb4 	bl	800578c <vTaskSwitchContext>
 8006824:	f04f 0000 	mov.w	r0, #0
 8006828:	f380 8811 	msr	BASEPRI, r0
 800682c:	bc09      	pop	{r0, r3}
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	6808      	ldr	r0, [r1, #0]
 8006832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006836:	f01e 0f10 	tst.w	lr, #16
 800683a:	bf08      	it	eq
 800683c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006840:	f380 8809 	msr	PSP, r0
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	f3af 8000 	nop.w

08006850 <pxCurrentTCBConst>:
 8006850:	20000bc8 	.word	0x20000bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006872:	f7fe fed1 	bl	8005618 <xTaskIncrementTick>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <xPortSysTickHandler+0x40>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f383 8811 	msr	BASEPRI, r3
}
 800688e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <vPortSetupTimerInterrupt+0x34>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <vPortSetupTimerInterrupt+0x38>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <vPortSetupTimerInterrupt+0x3c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <vPortSetupTimerInterrupt+0x40>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	4a09      	ldr	r2, [pc, #36]	; (80068e0 <vPortSetupTimerInterrupt+0x44>)
 80068ba:	3b01      	subs	r3, #1
 80068bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068be:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <vPortSetupTimerInterrupt+0x34>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	e000e010 	.word	0xe000e010
 80068d4:	e000e018 	.word	0xe000e018
 80068d8:	20000000 	.word	0x20000000
 80068dc:	10624dd3 	.word	0x10624dd3
 80068e0:	e000e014 	.word	0xe000e014

080068e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068f4 <vPortEnableVFP+0x10>
 80068e8:	6801      	ldr	r1, [r0, #0]
 80068ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068ee:	6001      	str	r1, [r0, #0]
 80068f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068f2:	bf00      	nop
 80068f4:	e000ed88 	.word	0xe000ed88

080068f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d914      	bls.n	8006934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <vPortValidateInterruptPriority+0x70>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <vPortValidateInterruptPriority+0x74>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	7afa      	ldrb	r2, [r7, #11]
 800691a:	429a      	cmp	r2, r3
 800691c:	d20a      	bcs.n	8006934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <vPortValidateInterruptPriority+0x78>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <vPortValidateInterruptPriority+0x7c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d90a      	bls.n	800695a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	603b      	str	r3, [r7, #0]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <vPortValidateInterruptPriority+0x60>
	}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e3f0 	.word	0xe000e3f0
 800696c:	200011f4 	.word	0x200011f4
 8006970:	e000ed0c 	.word	0xe000ed0c
 8006974:	200011f8 	.word	0x200011f8

08006978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006984:	f7fe fd8c 	bl	80054a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006988:	4b5b      	ldr	r3, [pc, #364]	; (8006af8 <pvPortMalloc+0x180>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006990:	f000 f920 	bl	8006bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006994:	4b59      	ldr	r3, [pc, #356]	; (8006afc <pvPortMalloc+0x184>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8093 	bne.w	8006ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01d      	beq.n	80069e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069a8:	2208      	movs	r2, #8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f023 0307 	bic.w	r3, r3, #7
 80069c0:	3308      	adds	r3, #8
 80069c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <pvPortMalloc+0x6c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	617b      	str	r3, [r7, #20]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d06e      	beq.n	8006ac8 <pvPortMalloc+0x150>
 80069ea:	4b45      	ldr	r3, [pc, #276]	; (8006b00 <pvPortMalloc+0x188>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d869      	bhi.n	8006ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069f4:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <pvPortMalloc+0x18c>)
 80069f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <pvPortMalloc+0x18c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069fe:	e004      	b.n	8006a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <pvPortMalloc+0xa4>
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1f1      	bne.n	8006a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a1c:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <pvPortMalloc+0x180>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d050      	beq.n	8006ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	2308      	movs	r3, #8
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d91f      	bls.n	8006a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <pvPortMalloc+0xf8>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	613b      	str	r3, [r7, #16]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a82:	69b8      	ldr	r0, [r7, #24]
 8006a84:	f000 f908 	bl	8006c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <pvPortMalloc+0x188>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <pvPortMalloc+0x188>)
 8006a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a96:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <pvPortMalloc+0x188>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <pvPortMalloc+0x190>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d203      	bcs.n	8006aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <pvPortMalloc+0x188>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <pvPortMalloc+0x190>)
 8006aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <pvPortMalloc+0x184>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <pvPortMalloc+0x194>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <pvPortMalloc+0x194>)
 8006ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ac8:	f7fe fcf8 	bl	80054bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <pvPortMalloc+0x174>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60fb      	str	r3, [r7, #12]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <pvPortMalloc+0x172>
	return pvReturn;
 8006aec:	69fb      	ldr	r3, [r7, #28]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3728      	adds	r7, #40	; 0x28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20001dbc 	.word	0x20001dbc
 8006afc:	20001dd0 	.word	0x20001dd0
 8006b00:	20001dc0 	.word	0x20001dc0
 8006b04:	20001db4 	.word	0x20001db4
 8006b08:	20001dc4 	.word	0x20001dc4
 8006b0c:	20001dc8 	.word	0x20001dc8

08006b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04d      	beq.n	8006bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b22:	2308      	movs	r3, #8
 8006b24:	425b      	negs	r3, r3
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <vPortFree+0xb8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <vPortFree+0x44>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <vPortFree+0x62>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60bb      	str	r3, [r7, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <vPortFree+0xb8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01e      	beq.n	8006bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11a      	bne.n	8006bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <vPortFree+0xb8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b98:	f7fe fc82 	bl	80054a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <vPortFree+0xbc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <vPortFree+0xbc>)
 8006ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006baa:	6938      	ldr	r0, [r7, #16]
 8006bac:	f000 f874 	bl	8006c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <vPortFree+0xc0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <vPortFree+0xc0>)
 8006bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bba:	f7fe fc7f 	bl	80054bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20001dd0 	.word	0x20001dd0
 8006bcc:	20001dc0 	.word	0x20001dc0
 8006bd0:	20001dcc 	.word	0x20001dcc

08006bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <prvHeapInit+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <prvHeapInit+0xac>)
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <prvHeapInit+0xb0>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <prvHeapInit+0xb0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c20:	2208      	movs	r2, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <prvHeapInit+0xb4>)
 8006c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <prvHeapInit+0xb4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvHeapInit+0xb4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <prvHeapInit+0xb8>)
 8006c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <prvHeapInit+0xbc>)
 8006c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <prvHeapInit+0xc0>)
 8006c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	200011fc 	.word	0x200011fc
 8006c84:	20001db4 	.word	0x20001db4
 8006c88:	20001dbc 	.word	0x20001dbc
 8006c8c:	20001dc4 	.word	0x20001dc4
 8006c90:	20001dc0 	.word	0x20001dc0
 8006c94:	20001dd0 	.word	0x20001dd0

08006c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <prvInsertBlockIntoFreeList+0x14>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d8f7      	bhi.n	8006ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d108      	bne.n	8006cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d118      	bne.n	8006d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d00d      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e003      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20001db4 	.word	0x20001db4
 8006d48:	20001dbc 	.word	0x20001dbc

08006d4c <__errno>:
 8006d4c:	4b01      	ldr	r3, [pc, #4]	; (8006d54 <__errno+0x8>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000010 	.word	0x20000010

08006d58 <std>:
 8006d58:	2300      	movs	r3, #0
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d66:	6083      	str	r3, [r0, #8]
 8006d68:	8181      	strh	r1, [r0, #12]
 8006d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d6c:	81c2      	strh	r2, [r0, #14]
 8006d6e:	6183      	str	r3, [r0, #24]
 8006d70:	4619      	mov	r1, r3
 8006d72:	2208      	movs	r2, #8
 8006d74:	305c      	adds	r0, #92	; 0x5c
 8006d76:	f000 f91a 	bl	8006fae <memset>
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <std+0x38>)
 8006d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <std+0x3c>)
 8006d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <std+0x40>)
 8006d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <std+0x44>)
 8006d88:	6224      	str	r4, [r4, #32]
 8006d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08007b9d 	.word	0x08007b9d
 8006d94:	08007bbf 	.word	0x08007bbf
 8006d98:	08007bf7 	.word	0x08007bf7
 8006d9c:	08007c1b 	.word	0x08007c1b

08006da0 <_cleanup_r>:
 8006da0:	4901      	ldr	r1, [pc, #4]	; (8006da8 <_cleanup_r+0x8>)
 8006da2:	f000 b8af 	b.w	8006f04 <_fwalk_reent>
 8006da6:	bf00      	nop
 8006da8:	08008be9 	.word	0x08008be9

08006dac <__sfmoreglue>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	2268      	movs	r2, #104	; 0x68
 8006db0:	1e4d      	subs	r5, r1, #1
 8006db2:	4355      	muls	r5, r2
 8006db4:	460e      	mov	r6, r1
 8006db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dba:	f000 f921 	bl	8007000 <_malloc_r>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	b140      	cbz	r0, 8006dd4 <__sfmoreglue+0x28>
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8006dc8:	300c      	adds	r0, #12
 8006dca:	60a0      	str	r0, [r4, #8]
 8006dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dd0:	f000 f8ed 	bl	8006fae <memset>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}

08006dd8 <__sfp_lock_acquire>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sfp_lock_acquire+0x8>)
 8006dda:	f000 b8d8 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 8006dde:	bf00      	nop
 8006de0:	20001dd5 	.word	0x20001dd5

08006de4 <__sfp_lock_release>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__sfp_lock_release+0x8>)
 8006de6:	f000 b8d3 	b.w	8006f90 <__retarget_lock_release_recursive>
 8006dea:	bf00      	nop
 8006dec:	20001dd5 	.word	0x20001dd5

08006df0 <__sinit_lock_acquire>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__sinit_lock_acquire+0x8>)
 8006df2:	f000 b8cc 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20001dd6 	.word	0x20001dd6

08006dfc <__sinit_lock_release>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__sinit_lock_release+0x8>)
 8006dfe:	f000 b8c7 	b.w	8006f90 <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20001dd6 	.word	0x20001dd6

08006e08 <__sinit>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f7ff fff0 	bl	8006df0 <__sinit_lock_acquire>
 8006e10:	69a3      	ldr	r3, [r4, #24]
 8006e12:	b11b      	cbz	r3, 8006e1c <__sinit+0x14>
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	f7ff bff0 	b.w	8006dfc <__sinit_lock_release>
 8006e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e20:	6523      	str	r3, [r4, #80]	; 0x50
 8006e22:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <__sinit+0x68>)
 8006e24:	4a13      	ldr	r2, [pc, #76]	; (8006e74 <__sinit+0x6c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	bf04      	itt	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	61a3      	streq	r3, [r4, #24]
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f820 	bl	8006e78 <__sfp>
 8006e38:	6060      	str	r0, [r4, #4]
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f81c 	bl	8006e78 <__sfp>
 8006e40:	60a0      	str	r0, [r4, #8]
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f818 	bl	8006e78 <__sfp>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	60e0      	str	r0, [r4, #12]
 8006e4c:	2104      	movs	r1, #4
 8006e4e:	6860      	ldr	r0, [r4, #4]
 8006e50:	f7ff ff82 	bl	8006d58 <std>
 8006e54:	68a0      	ldr	r0, [r4, #8]
 8006e56:	2201      	movs	r2, #1
 8006e58:	2109      	movs	r1, #9
 8006e5a:	f7ff ff7d 	bl	8006d58 <std>
 8006e5e:	68e0      	ldr	r0, [r4, #12]
 8006e60:	2202      	movs	r2, #2
 8006e62:	2112      	movs	r1, #18
 8006e64:	f7ff ff78 	bl	8006d58 <std>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	61a3      	str	r3, [r4, #24]
 8006e6c:	e7d2      	b.n	8006e14 <__sinit+0xc>
 8006e6e:	bf00      	nop
 8006e70:	08009b30 	.word	0x08009b30
 8006e74:	08006da1 	.word	0x08006da1

08006e78 <__sfp>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	f7ff ffac 	bl	8006dd8 <__sfp_lock_acquire>
 8006e80:	4b1e      	ldr	r3, [pc, #120]	; (8006efc <__sfp+0x84>)
 8006e82:	681e      	ldr	r6, [r3, #0]
 8006e84:	69b3      	ldr	r3, [r6, #24]
 8006e86:	b913      	cbnz	r3, 8006e8e <__sfp+0x16>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff ffbd 	bl	8006e08 <__sinit>
 8006e8e:	3648      	adds	r6, #72	; 0x48
 8006e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	d503      	bpl.n	8006ea0 <__sfp+0x28>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	b30b      	cbz	r3, 8006ee0 <__sfp+0x68>
 8006e9c:	6836      	ldr	r6, [r6, #0]
 8006e9e:	e7f7      	b.n	8006e90 <__sfp+0x18>
 8006ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ea4:	b9d5      	cbnz	r5, 8006edc <__sfp+0x64>
 8006ea6:	4b16      	ldr	r3, [pc, #88]	; (8006f00 <__sfp+0x88>)
 8006ea8:	60e3      	str	r3, [r4, #12]
 8006eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006eae:	6665      	str	r5, [r4, #100]	; 0x64
 8006eb0:	f000 f86c 	bl	8006f8c <__retarget_lock_init_recursive>
 8006eb4:	f7ff ff96 	bl	8006de4 <__sfp_lock_release>
 8006eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ec0:	6025      	str	r5, [r4, #0]
 8006ec2:	61a5      	str	r5, [r4, #24]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ecc:	f000 f86f 	bl	8006fae <memset>
 8006ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ed8:	4620      	mov	r0, r4
 8006eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006edc:	3468      	adds	r4, #104	; 0x68
 8006ede:	e7d9      	b.n	8006e94 <__sfp+0x1c>
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7ff ff62 	bl	8006dac <__sfmoreglue>
 8006ee8:	4604      	mov	r4, r0
 8006eea:	6030      	str	r0, [r6, #0]
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1d5      	bne.n	8006e9c <__sfp+0x24>
 8006ef0:	f7ff ff78 	bl	8006de4 <__sfp_lock_release>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	e7ee      	b.n	8006ed8 <__sfp+0x60>
 8006efa:	bf00      	nop
 8006efc:	08009b30 	.word	0x08009b30
 8006f00:	ffff0001 	.word	0xffff0001

08006f04 <_fwalk_reent>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	4606      	mov	r6, r0
 8006f0a:	4688      	mov	r8, r1
 8006f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f10:	2700      	movs	r7, #0
 8006f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f16:	f1b9 0901 	subs.w	r9, r9, #1
 8006f1a:	d505      	bpl.n	8006f28 <_fwalk_reent+0x24>
 8006f1c:	6824      	ldr	r4, [r4, #0]
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	d1f7      	bne.n	8006f12 <_fwalk_reent+0xe>
 8006f22:	4638      	mov	r0, r7
 8006f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f28:	89ab      	ldrh	r3, [r5, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d907      	bls.n	8006f3e <_fwalk_reent+0x3a>
 8006f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f32:	3301      	adds	r3, #1
 8006f34:	d003      	beq.n	8006f3e <_fwalk_reent+0x3a>
 8006f36:	4629      	mov	r1, r5
 8006f38:	4630      	mov	r0, r6
 8006f3a:	47c0      	blx	r8
 8006f3c:	4307      	orrs	r7, r0
 8006f3e:	3568      	adds	r5, #104	; 0x68
 8006f40:	e7e9      	b.n	8006f16 <_fwalk_reent+0x12>
	...

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f002 fd20 	bl	800999c <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	08009eb4 	.word	0x08009eb4
 8006f80:	08009eb4 	.word	0x08009eb4
 8006f84:	08009eb4 	.word	0x08009eb4
 8006f88:	08009eb8 	.word	0x08009eb8

08006f8c <__retarget_lock_init_recursive>:
 8006f8c:	4770      	bx	lr

08006f8e <__retarget_lock_acquire_recursive>:
 8006f8e:	4770      	bx	lr

08006f90 <__retarget_lock_release_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <memcpy>:
 8006f92:	440a      	add	r2, r1
 8006f94:	4291      	cmp	r1, r2
 8006f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f9a:	d100      	bne.n	8006f9e <memcpy+0xc>
 8006f9c:	4770      	bx	lr
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa8:	4291      	cmp	r1, r2
 8006faa:	d1f9      	bne.n	8006fa0 <memcpy+0xe>
 8006fac:	bd10      	pop	{r4, pc}

08006fae <memset>:
 8006fae:	4402      	add	r2, r0
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d100      	bne.n	8006fb8 <memset+0xa>
 8006fb6:	4770      	bx	lr
 8006fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbc:	e7f9      	b.n	8006fb2 <memset+0x4>
	...

08006fc0 <sbrk_aligned>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4e0e      	ldr	r6, [pc, #56]	; (8006ffc <sbrk_aligned+0x3c>)
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6831      	ldr	r1, [r6, #0]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b911      	cbnz	r1, 8006fd2 <sbrk_aligned+0x12>
 8006fcc:	f000 fdd6 	bl	8007b7c <_sbrk_r>
 8006fd0:	6030      	str	r0, [r6, #0]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 fdd1 	bl	8007b7c <_sbrk_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d00a      	beq.n	8006ff4 <sbrk_aligned+0x34>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d007      	beq.n	8006ff8 <sbrk_aligned+0x38>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fdc6 	bl	8007b7c <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d101      	bne.n	8006ff8 <sbrk_aligned+0x38>
 8006ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	20001ddc 	.word	0x20001ddc

08007000 <_malloc_r>:
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	1ccd      	adds	r5, r1, #3
 8007006:	f025 0503 	bic.w	r5, r5, #3
 800700a:	3508      	adds	r5, #8
 800700c:	2d0c      	cmp	r5, #12
 800700e:	bf38      	it	cc
 8007010:	250c      	movcc	r5, #12
 8007012:	2d00      	cmp	r5, #0
 8007014:	4607      	mov	r7, r0
 8007016:	db01      	blt.n	800701c <_malloc_r+0x1c>
 8007018:	42a9      	cmp	r1, r5
 800701a:	d905      	bls.n	8007028 <_malloc_r+0x28>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	2600      	movs	r6, #0
 8007022:	4630      	mov	r0, r6
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	4e2e      	ldr	r6, [pc, #184]	; (80070e4 <_malloc_r+0xe4>)
 800702a:	f001 fe9d 	bl	8008d68 <__malloc_lock>
 800702e:	6833      	ldr	r3, [r6, #0]
 8007030:	461c      	mov	r4, r3
 8007032:	bb34      	cbnz	r4, 8007082 <_malloc_r+0x82>
 8007034:	4629      	mov	r1, r5
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff ffc2 	bl	8006fc0 <sbrk_aligned>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	4604      	mov	r4, r0
 8007040:	d14d      	bne.n	80070de <_malloc_r+0xde>
 8007042:	6834      	ldr	r4, [r6, #0]
 8007044:	4626      	mov	r6, r4
 8007046:	2e00      	cmp	r6, #0
 8007048:	d140      	bne.n	80070cc <_malloc_r+0xcc>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	4631      	mov	r1, r6
 800704e:	4638      	mov	r0, r7
 8007050:	eb04 0803 	add.w	r8, r4, r3
 8007054:	f000 fd92 	bl	8007b7c <_sbrk_r>
 8007058:	4580      	cmp	r8, r0
 800705a:	d13a      	bne.n	80070d2 <_malloc_r+0xd2>
 800705c:	6821      	ldr	r1, [r4, #0]
 800705e:	3503      	adds	r5, #3
 8007060:	1a6d      	subs	r5, r5, r1
 8007062:	f025 0503 	bic.w	r5, r5, #3
 8007066:	3508      	adds	r5, #8
 8007068:	2d0c      	cmp	r5, #12
 800706a:	bf38      	it	cc
 800706c:	250c      	movcc	r5, #12
 800706e:	4629      	mov	r1, r5
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff ffa5 	bl	8006fc0 <sbrk_aligned>
 8007076:	3001      	adds	r0, #1
 8007078:	d02b      	beq.n	80070d2 <_malloc_r+0xd2>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	442b      	add	r3, r5
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	e00e      	b.n	80070a0 <_malloc_r+0xa0>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	1b52      	subs	r2, r2, r5
 8007086:	d41e      	bmi.n	80070c6 <_malloc_r+0xc6>
 8007088:	2a0b      	cmp	r2, #11
 800708a:	d916      	bls.n	80070ba <_malloc_r+0xba>
 800708c:	1961      	adds	r1, r4, r5
 800708e:	42a3      	cmp	r3, r4
 8007090:	6025      	str	r5, [r4, #0]
 8007092:	bf18      	it	ne
 8007094:	6059      	strne	r1, [r3, #4]
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	bf08      	it	eq
 800709a:	6031      	streq	r1, [r6, #0]
 800709c:	5162      	str	r2, [r4, r5]
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	4638      	mov	r0, r7
 80070a2:	f104 060b 	add.w	r6, r4, #11
 80070a6:	f001 fe65 	bl	8008d74 <__malloc_unlock>
 80070aa:	f026 0607 	bic.w	r6, r6, #7
 80070ae:	1d23      	adds	r3, r4, #4
 80070b0:	1af2      	subs	r2, r6, r3
 80070b2:	d0b6      	beq.n	8007022 <_malloc_r+0x22>
 80070b4:	1b9b      	subs	r3, r3, r6
 80070b6:	50a3      	str	r3, [r4, r2]
 80070b8:	e7b3      	b.n	8007022 <_malloc_r+0x22>
 80070ba:	6862      	ldr	r2, [r4, #4]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	bf0c      	ite	eq
 80070c0:	6032      	streq	r2, [r6, #0]
 80070c2:	605a      	strne	r2, [r3, #4]
 80070c4:	e7ec      	b.n	80070a0 <_malloc_r+0xa0>
 80070c6:	4623      	mov	r3, r4
 80070c8:	6864      	ldr	r4, [r4, #4]
 80070ca:	e7b2      	b.n	8007032 <_malloc_r+0x32>
 80070cc:	4634      	mov	r4, r6
 80070ce:	6876      	ldr	r6, [r6, #4]
 80070d0:	e7b9      	b.n	8007046 <_malloc_r+0x46>
 80070d2:	230c      	movs	r3, #12
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	4638      	mov	r0, r7
 80070d8:	f001 fe4c 	bl	8008d74 <__malloc_unlock>
 80070dc:	e7a1      	b.n	8007022 <_malloc_r+0x22>
 80070de:	6025      	str	r5, [r4, #0]
 80070e0:	e7de      	b.n	80070a0 <_malloc_r+0xa0>
 80070e2:	bf00      	nop
 80070e4:	20001dd8 	.word	0x20001dd8

080070e8 <__cvt>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	ec55 4b10 	vmov	r4, r5, d0
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	460e      	mov	r6, r1
 80070f4:	4619      	mov	r1, r3
 80070f6:	462b      	mov	r3, r5
 80070f8:	bfbb      	ittet	lt
 80070fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070fe:	461d      	movlt	r5, r3
 8007100:	2300      	movge	r3, #0
 8007102:	232d      	movlt	r3, #45	; 0x2d
 8007104:	700b      	strb	r3, [r1, #0]
 8007106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800710c:	4691      	mov	r9, r2
 800710e:	f023 0820 	bic.w	r8, r3, #32
 8007112:	bfbc      	itt	lt
 8007114:	4622      	movlt	r2, r4
 8007116:	4614      	movlt	r4, r2
 8007118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800711c:	d005      	beq.n	800712a <__cvt+0x42>
 800711e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007122:	d100      	bne.n	8007126 <__cvt+0x3e>
 8007124:	3601      	adds	r6, #1
 8007126:	2102      	movs	r1, #2
 8007128:	e000      	b.n	800712c <__cvt+0x44>
 800712a:	2103      	movs	r1, #3
 800712c:	ab03      	add	r3, sp, #12
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	ab02      	add	r3, sp, #8
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	ec45 4b10 	vmov	d0, r4, r5
 8007138:	4653      	mov	r3, sl
 800713a:	4632      	mov	r2, r6
 800713c:	f000 fee0 	bl	8007f00 <_dtoa_r>
 8007140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007144:	4607      	mov	r7, r0
 8007146:	d102      	bne.n	800714e <__cvt+0x66>
 8007148:	f019 0f01 	tst.w	r9, #1
 800714c:	d022      	beq.n	8007194 <__cvt+0xac>
 800714e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007152:	eb07 0906 	add.w	r9, r7, r6
 8007156:	d110      	bne.n	800717a <__cvt+0x92>
 8007158:	783b      	ldrb	r3, [r7, #0]
 800715a:	2b30      	cmp	r3, #48	; 0x30
 800715c:	d10a      	bne.n	8007174 <__cvt+0x8c>
 800715e:	2200      	movs	r2, #0
 8007160:	2300      	movs	r3, #0
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800716a:	b918      	cbnz	r0, 8007174 <__cvt+0x8c>
 800716c:	f1c6 0601 	rsb	r6, r6, #1
 8007170:	f8ca 6000 	str.w	r6, [sl]
 8007174:	f8da 3000 	ldr.w	r3, [sl]
 8007178:	4499      	add	r9, r3
 800717a:	2200      	movs	r2, #0
 800717c:	2300      	movs	r3, #0
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007186:	b108      	cbz	r0, 800718c <__cvt+0xa4>
 8007188:	f8cd 900c 	str.w	r9, [sp, #12]
 800718c:	2230      	movs	r2, #48	; 0x30
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	454b      	cmp	r3, r9
 8007192:	d307      	bcc.n	80071a4 <__cvt+0xbc>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007198:	1bdb      	subs	r3, r3, r7
 800719a:	4638      	mov	r0, r7
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	b004      	add	sp, #16
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e7f0      	b.n	800718e <__cvt+0xa6>

080071ac <__exponent>:
 80071ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ae:	4603      	mov	r3, r0
 80071b0:	2900      	cmp	r1, #0
 80071b2:	bfb8      	it	lt
 80071b4:	4249      	neglt	r1, r1
 80071b6:	f803 2b02 	strb.w	r2, [r3], #2
 80071ba:	bfb4      	ite	lt
 80071bc:	222d      	movlt	r2, #45	; 0x2d
 80071be:	222b      	movge	r2, #43	; 0x2b
 80071c0:	2909      	cmp	r1, #9
 80071c2:	7042      	strb	r2, [r0, #1]
 80071c4:	dd2a      	ble.n	800721c <__exponent+0x70>
 80071c6:	f10d 0407 	add.w	r4, sp, #7
 80071ca:	46a4      	mov	ip, r4
 80071cc:	270a      	movs	r7, #10
 80071ce:	46a6      	mov	lr, r4
 80071d0:	460a      	mov	r2, r1
 80071d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80071d6:	fb07 1516 	mls	r5, r7, r6, r1
 80071da:	3530      	adds	r5, #48	; 0x30
 80071dc:	2a63      	cmp	r2, #99	; 0x63
 80071de:	f104 34ff 	add.w	r4, r4, #4294967295
 80071e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071e6:	4631      	mov	r1, r6
 80071e8:	dcf1      	bgt.n	80071ce <__exponent+0x22>
 80071ea:	3130      	adds	r1, #48	; 0x30
 80071ec:	f1ae 0502 	sub.w	r5, lr, #2
 80071f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071f4:	1c44      	adds	r4, r0, #1
 80071f6:	4629      	mov	r1, r5
 80071f8:	4561      	cmp	r1, ip
 80071fa:	d30a      	bcc.n	8007212 <__exponent+0x66>
 80071fc:	f10d 0209 	add.w	r2, sp, #9
 8007200:	eba2 020e 	sub.w	r2, r2, lr
 8007204:	4565      	cmp	r5, ip
 8007206:	bf88      	it	hi
 8007208:	2200      	movhi	r2, #0
 800720a:	4413      	add	r3, r2
 800720c:	1a18      	subs	r0, r3, r0
 800720e:	b003      	add	sp, #12
 8007210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007216:	f804 2f01 	strb.w	r2, [r4, #1]!
 800721a:	e7ed      	b.n	80071f8 <__exponent+0x4c>
 800721c:	2330      	movs	r3, #48	; 0x30
 800721e:	3130      	adds	r1, #48	; 0x30
 8007220:	7083      	strb	r3, [r0, #2]
 8007222:	70c1      	strb	r1, [r0, #3]
 8007224:	1d03      	adds	r3, r0, #4
 8007226:	e7f1      	b.n	800720c <__exponent+0x60>

08007228 <_printf_float>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	ed2d 8b02 	vpush	{d8}
 8007230:	b08d      	sub	sp, #52	; 0x34
 8007232:	460c      	mov	r4, r1
 8007234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007238:	4616      	mov	r6, r2
 800723a:	461f      	mov	r7, r3
 800723c:	4605      	mov	r5, r0
 800723e:	f001 fd0f 	bl	8008c60 <_localeconv_r>
 8007242:	f8d0 a000 	ldr.w	sl, [r0]
 8007246:	4650      	mov	r0, sl
 8007248:	f7f8 ffc2 	bl	80001d0 <strlen>
 800724c:	2300      	movs	r3, #0
 800724e:	930a      	str	r3, [sp, #40]	; 0x28
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	f8d8 3000 	ldr.w	r3, [r8]
 8007258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800725c:	3307      	adds	r3, #7
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	f103 0208 	add.w	r2, r3, #8
 8007266:	f8c8 2000 	str.w	r2, [r8]
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007272:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007280:	ee08 0a10 	vmov	s16, r0
 8007284:	4b9f      	ldr	r3, [pc, #636]	; (8007504 <_printf_float+0x2dc>)
 8007286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	f7f9 fc4d 	bl	8000b2c <__aeabi_dcmpun>
 8007292:	bb88      	cbnz	r0, 80072f8 <_printf_float+0xd0>
 8007294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007298:	4b9a      	ldr	r3, [pc, #616]	; (8007504 <_printf_float+0x2dc>)
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	f7f9 fc27 	bl	8000af0 <__aeabi_dcmple>
 80072a2:	bb48      	cbnz	r0, 80072f8 <_printf_float+0xd0>
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f9 fc16 	bl	8000adc <__aeabi_dcmplt>
 80072b0:	b110      	cbz	r0, 80072b8 <_printf_float+0x90>
 80072b2:	232d      	movs	r3, #45	; 0x2d
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b8:	4b93      	ldr	r3, [pc, #588]	; (8007508 <_printf_float+0x2e0>)
 80072ba:	4894      	ldr	r0, [pc, #592]	; (800750c <_printf_float+0x2e4>)
 80072bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072c0:	bf94      	ite	ls
 80072c2:	4698      	movls	r8, r3
 80072c4:	4680      	movhi	r8, r0
 80072c6:	2303      	movs	r3, #3
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	f023 0204 	bic.w	r2, r3, #4
 80072d0:	6022      	str	r2, [r4, #0]
 80072d2:	f04f 0900 	mov.w	r9, #0
 80072d6:	9700      	str	r7, [sp, #0]
 80072d8:	4633      	mov	r3, r6
 80072da:	aa0b      	add	r2, sp, #44	; 0x2c
 80072dc:	4621      	mov	r1, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f9d8 	bl	8007694 <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	f040 8090 	bne.w	800740a <_printf_float+0x1e2>
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	b00d      	add	sp, #52	; 0x34
 80072f0:	ecbd 8b02 	vpop	{d8}
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f9 fc14 	bl	8000b2c <__aeabi_dcmpun>
 8007304:	b140      	cbz	r0, 8007318 <_printf_float+0xf0>
 8007306:	464b      	mov	r3, r9
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfbc      	itt	lt
 800730c:	232d      	movlt	r3, #45	; 0x2d
 800730e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007312:	487f      	ldr	r0, [pc, #508]	; (8007510 <_printf_float+0x2e8>)
 8007314:	4b7f      	ldr	r3, [pc, #508]	; (8007514 <_printf_float+0x2ec>)
 8007316:	e7d1      	b.n	80072bc <_printf_float+0x94>
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800731e:	9206      	str	r2, [sp, #24]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	d13f      	bne.n	80073a4 <_printf_float+0x17c>
 8007324:	2306      	movs	r3, #6
 8007326:	6063      	str	r3, [r4, #4]
 8007328:	9b05      	ldr	r3, [sp, #20]
 800732a:	6861      	ldr	r1, [r4, #4]
 800732c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007330:	2300      	movs	r3, #0
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	ab0a      	add	r3, sp, #40	; 0x28
 8007336:	e9cd b301 	strd	fp, r3, [sp, #4]
 800733a:	ab09      	add	r3, sp, #36	; 0x24
 800733c:	ec49 8b10 	vmov	d0, r8, r9
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff fecd 	bl	80070e8 <__cvt>
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007352:	2b47      	cmp	r3, #71	; 0x47
 8007354:	4680      	mov	r8, r0
 8007356:	d108      	bne.n	800736a <_printf_float+0x142>
 8007358:	1cc8      	adds	r0, r1, #3
 800735a:	db02      	blt.n	8007362 <_printf_float+0x13a>
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	4299      	cmp	r1, r3
 8007360:	dd41      	ble.n	80073e6 <_printf_float+0x1be>
 8007362:	f1ab 0b02 	sub.w	fp, fp, #2
 8007366:	fa5f fb8b 	uxtb.w	fp, fp
 800736a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800736e:	d820      	bhi.n	80073b2 <_printf_float+0x18a>
 8007370:	3901      	subs	r1, #1
 8007372:	465a      	mov	r2, fp
 8007374:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007378:	9109      	str	r1, [sp, #36]	; 0x24
 800737a:	f7ff ff17 	bl	80071ac <__exponent>
 800737e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007380:	1813      	adds	r3, r2, r0
 8007382:	2a01      	cmp	r2, #1
 8007384:	4681      	mov	r9, r0
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	dc02      	bgt.n	8007390 <_printf_float+0x168>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	07d2      	lsls	r2, r2, #31
 800738e:	d501      	bpl.n	8007394 <_printf_float+0x16c>
 8007390:	3301      	adds	r3, #1
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007398:	2b00      	cmp	r3, #0
 800739a:	d09c      	beq.n	80072d6 <_printf_float+0xae>
 800739c:	232d      	movs	r3, #45	; 0x2d
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a2:	e798      	b.n	80072d6 <_printf_float+0xae>
 80073a4:	9a06      	ldr	r2, [sp, #24]
 80073a6:	2a47      	cmp	r2, #71	; 0x47
 80073a8:	d1be      	bne.n	8007328 <_printf_float+0x100>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1bc      	bne.n	8007328 <_printf_float+0x100>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e7b9      	b.n	8007326 <_printf_float+0xfe>
 80073b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073b6:	d118      	bne.n	80073ea <_printf_float+0x1c2>
 80073b8:	2900      	cmp	r1, #0
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	dd0b      	ble.n	80073d6 <_printf_float+0x1ae>
 80073be:	6121      	str	r1, [r4, #16]
 80073c0:	b913      	cbnz	r3, 80073c8 <_printf_float+0x1a0>
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	07d0      	lsls	r0, r2, #31
 80073c6:	d502      	bpl.n	80073ce <_printf_float+0x1a6>
 80073c8:	3301      	adds	r3, #1
 80073ca:	440b      	add	r3, r1
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80073d0:	f04f 0900 	mov.w	r9, #0
 80073d4:	e7de      	b.n	8007394 <_printf_float+0x16c>
 80073d6:	b913      	cbnz	r3, 80073de <_printf_float+0x1b6>
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	07d2      	lsls	r2, r2, #31
 80073dc:	d501      	bpl.n	80073e2 <_printf_float+0x1ba>
 80073de:	3302      	adds	r3, #2
 80073e0:	e7f4      	b.n	80073cc <_printf_float+0x1a4>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e7f2      	b.n	80073cc <_printf_float+0x1a4>
 80073e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ec:	4299      	cmp	r1, r3
 80073ee:	db05      	blt.n	80073fc <_printf_float+0x1d4>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	6121      	str	r1, [r4, #16]
 80073f4:	07d8      	lsls	r0, r3, #31
 80073f6:	d5ea      	bpl.n	80073ce <_printf_float+0x1a6>
 80073f8:	1c4b      	adds	r3, r1, #1
 80073fa:	e7e7      	b.n	80073cc <_printf_float+0x1a4>
 80073fc:	2900      	cmp	r1, #0
 80073fe:	bfd4      	ite	le
 8007400:	f1c1 0202 	rsble	r2, r1, #2
 8007404:	2201      	movgt	r2, #1
 8007406:	4413      	add	r3, r2
 8007408:	e7e0      	b.n	80073cc <_printf_float+0x1a4>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	055a      	lsls	r2, r3, #21
 800740e:	d407      	bmi.n	8007420 <_printf_float+0x1f8>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	4642      	mov	r2, r8
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d12c      	bne.n	8007478 <_printf_float+0x250>
 800741e:	e764      	b.n	80072ea <_printf_float+0xc2>
 8007420:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007424:	f240 80e0 	bls.w	80075e8 <_printf_float+0x3c0>
 8007428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	f7f9 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007434:	2800      	cmp	r0, #0
 8007436:	d034      	beq.n	80074a2 <_printf_float+0x27a>
 8007438:	4a37      	ldr	r2, [pc, #220]	; (8007518 <_printf_float+0x2f0>)
 800743a:	2301      	movs	r3, #1
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f af51 	beq.w	80072ea <_printf_float+0xc2>
 8007448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800744c:	429a      	cmp	r2, r3
 800744e:	db02      	blt.n	8007456 <_printf_float+0x22e>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	07d8      	lsls	r0, r3, #31
 8007454:	d510      	bpl.n	8007478 <_printf_float+0x250>
 8007456:	ee18 3a10 	vmov	r3, s16
 800745a:	4652      	mov	r2, sl
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f af41 	beq.w	80072ea <_printf_float+0xc2>
 8007468:	f04f 0800 	mov.w	r8, #0
 800746c:	f104 091a 	add.w	r9, r4, #26
 8007470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007472:	3b01      	subs	r3, #1
 8007474:	4543      	cmp	r3, r8
 8007476:	dc09      	bgt.n	800748c <_printf_float+0x264>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	079b      	lsls	r3, r3, #30
 800747c:	f100 8105 	bmi.w	800768a <_printf_float+0x462>
 8007480:	68e0      	ldr	r0, [r4, #12]
 8007482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007484:	4298      	cmp	r0, r3
 8007486:	bfb8      	it	lt
 8007488:	4618      	movlt	r0, r3
 800748a:	e730      	b.n	80072ee <_printf_float+0xc6>
 800748c:	2301      	movs	r3, #1
 800748e:	464a      	mov	r2, r9
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f af27 	beq.w	80072ea <_printf_float+0xc2>
 800749c:	f108 0801 	add.w	r8, r8, #1
 80074a0:	e7e6      	b.n	8007470 <_printf_float+0x248>
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dc39      	bgt.n	800751c <_printf_float+0x2f4>
 80074a8:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <_printf_float+0x2f0>)
 80074aa:	2301      	movs	r3, #1
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f af19 	beq.w	80072ea <_printf_float+0xc2>
 80074b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074bc:	4313      	orrs	r3, r2
 80074be:	d102      	bne.n	80074c6 <_printf_float+0x29e>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	07d9      	lsls	r1, r3, #31
 80074c4:	d5d8      	bpl.n	8007478 <_printf_float+0x250>
 80074c6:	ee18 3a10 	vmov	r3, s16
 80074ca:	4652      	mov	r2, sl
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	f43f af09 	beq.w	80072ea <_printf_float+0xc2>
 80074d8:	f04f 0900 	mov.w	r9, #0
 80074dc:	f104 0a1a 	add.w	sl, r4, #26
 80074e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e2:	425b      	negs	r3, r3
 80074e4:	454b      	cmp	r3, r9
 80074e6:	dc01      	bgt.n	80074ec <_printf_float+0x2c4>
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	e792      	b.n	8007412 <_printf_float+0x1ea>
 80074ec:	2301      	movs	r3, #1
 80074ee:	4652      	mov	r2, sl
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f aef7 	beq.w	80072ea <_printf_float+0xc2>
 80074fc:	f109 0901 	add.w	r9, r9, #1
 8007500:	e7ee      	b.n	80074e0 <_printf_float+0x2b8>
 8007502:	bf00      	nop
 8007504:	7fefffff 	.word	0x7fefffff
 8007508:	08009b34 	.word	0x08009b34
 800750c:	08009b38 	.word	0x08009b38
 8007510:	08009b40 	.word	0x08009b40
 8007514:	08009b3c 	.word	0x08009b3c
 8007518:	08009b44 	.word	0x08009b44
 800751c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007520:	429a      	cmp	r2, r3
 8007522:	bfa8      	it	ge
 8007524:	461a      	movge	r2, r3
 8007526:	2a00      	cmp	r2, #0
 8007528:	4691      	mov	r9, r2
 800752a:	dc37      	bgt.n	800759c <_printf_float+0x374>
 800752c:	f04f 0b00 	mov.w	fp, #0
 8007530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007534:	f104 021a 	add.w	r2, r4, #26
 8007538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	eba3 0309 	sub.w	r3, r3, r9
 8007540:	455b      	cmp	r3, fp
 8007542:	dc33      	bgt.n	80075ac <_printf_float+0x384>
 8007544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007548:	429a      	cmp	r2, r3
 800754a:	db3b      	blt.n	80075c4 <_printf_float+0x39c>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07da      	lsls	r2, r3, #31
 8007550:	d438      	bmi.n	80075c4 <_printf_float+0x39c>
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	9a05      	ldr	r2, [sp, #20]
 8007556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007558:	1a9a      	subs	r2, r3, r2
 800755a:	eba3 0901 	sub.w	r9, r3, r1
 800755e:	4591      	cmp	r9, r2
 8007560:	bfa8      	it	ge
 8007562:	4691      	movge	r9, r2
 8007564:	f1b9 0f00 	cmp.w	r9, #0
 8007568:	dc35      	bgt.n	80075d6 <_printf_float+0x3ae>
 800756a:	f04f 0800 	mov.w	r8, #0
 800756e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007572:	f104 0a1a 	add.w	sl, r4, #26
 8007576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800757a:	1a9b      	subs	r3, r3, r2
 800757c:	eba3 0309 	sub.w	r3, r3, r9
 8007580:	4543      	cmp	r3, r8
 8007582:	f77f af79 	ble.w	8007478 <_printf_float+0x250>
 8007586:	2301      	movs	r3, #1
 8007588:	4652      	mov	r2, sl
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	f43f aeaa 	beq.w	80072ea <_printf_float+0xc2>
 8007596:	f108 0801 	add.w	r8, r8, #1
 800759a:	e7ec      	b.n	8007576 <_printf_float+0x34e>
 800759c:	4613      	mov	r3, r2
 800759e:	4631      	mov	r1, r6
 80075a0:	4642      	mov	r2, r8
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	d1c0      	bne.n	800752c <_printf_float+0x304>
 80075aa:	e69e      	b.n	80072ea <_printf_float+0xc2>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	9205      	str	r2, [sp, #20]
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f ae97 	beq.w	80072ea <_printf_float+0xc2>
 80075bc:	9a05      	ldr	r2, [sp, #20]
 80075be:	f10b 0b01 	add.w	fp, fp, #1
 80075c2:	e7b9      	b.n	8007538 <_printf_float+0x310>
 80075c4:	ee18 3a10 	vmov	r3, s16
 80075c8:	4652      	mov	r2, sl
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1be      	bne.n	8007552 <_printf_float+0x32a>
 80075d4:	e689      	b.n	80072ea <_printf_float+0xc2>
 80075d6:	9a05      	ldr	r2, [sp, #20]
 80075d8:	464b      	mov	r3, r9
 80075da:	4442      	add	r2, r8
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	d1c1      	bne.n	800756a <_printf_float+0x342>
 80075e6:	e680      	b.n	80072ea <_printf_float+0xc2>
 80075e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ea:	2a01      	cmp	r2, #1
 80075ec:	dc01      	bgt.n	80075f2 <_printf_float+0x3ca>
 80075ee:	07db      	lsls	r3, r3, #31
 80075f0:	d538      	bpl.n	8007664 <_printf_float+0x43c>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4642      	mov	r2, r8
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f ae74 	beq.w	80072ea <_printf_float+0xc2>
 8007602:	ee18 3a10 	vmov	r3, s16
 8007606:	4652      	mov	r2, sl
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	f43f ae6b 	beq.w	80072ea <_printf_float+0xc2>
 8007614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	f7f9 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007620:	b9d8      	cbnz	r0, 800765a <_printf_float+0x432>
 8007622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007624:	f108 0201 	add.w	r2, r8, #1
 8007628:	3b01      	subs	r3, #1
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	d10e      	bne.n	8007652 <_printf_float+0x42a>
 8007634:	e659      	b.n	80072ea <_printf_float+0xc2>
 8007636:	2301      	movs	r3, #1
 8007638:	4652      	mov	r2, sl
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f ae52 	beq.w	80072ea <_printf_float+0xc2>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764c:	3b01      	subs	r3, #1
 800764e:	4543      	cmp	r3, r8
 8007650:	dcf1      	bgt.n	8007636 <_printf_float+0x40e>
 8007652:	464b      	mov	r3, r9
 8007654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007658:	e6dc      	b.n	8007414 <_printf_float+0x1ec>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	f104 0a1a 	add.w	sl, r4, #26
 8007662:	e7f2      	b.n	800764a <_printf_float+0x422>
 8007664:	2301      	movs	r3, #1
 8007666:	4642      	mov	r2, r8
 8007668:	e7df      	b.n	800762a <_printf_float+0x402>
 800766a:	2301      	movs	r3, #1
 800766c:	464a      	mov	r2, r9
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	f43f ae38 	beq.w	80072ea <_printf_float+0xc2>
 800767a:	f108 0801 	add.w	r8, r8, #1
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007682:	1a5b      	subs	r3, r3, r1
 8007684:	4543      	cmp	r3, r8
 8007686:	dcf0      	bgt.n	800766a <_printf_float+0x442>
 8007688:	e6fa      	b.n	8007480 <_printf_float+0x258>
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	f104 0919 	add.w	r9, r4, #25
 8007692:	e7f4      	b.n	800767e <_printf_float+0x456>

08007694 <_printf_common>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	4616      	mov	r6, r2
 800769a:	4699      	mov	r9, r3
 800769c:	688a      	ldr	r2, [r1, #8]
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	bfb8      	it	lt
 80076a8:	4613      	movlt	r3, r2
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076b0:	4607      	mov	r7, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b10a      	cbz	r2, 80076ba <_printf_common+0x26>
 80076b6:	3301      	adds	r3, #1
 80076b8:	6033      	str	r3, [r6, #0]
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	0699      	lsls	r1, r3, #26
 80076be:	bf42      	ittt	mi
 80076c0:	6833      	ldrmi	r3, [r6, #0]
 80076c2:	3302      	addmi	r3, #2
 80076c4:	6033      	strmi	r3, [r6, #0]
 80076c6:	6825      	ldr	r5, [r4, #0]
 80076c8:	f015 0506 	ands.w	r5, r5, #6
 80076cc:	d106      	bne.n	80076dc <_printf_common+0x48>
 80076ce:	f104 0a19 	add.w	sl, r4, #25
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	6832      	ldr	r2, [r6, #0]
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	42ab      	cmp	r3, r5
 80076da:	dc26      	bgt.n	800772a <_printf_common+0x96>
 80076dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076e0:	1e13      	subs	r3, r2, #0
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	bf18      	it	ne
 80076e6:	2301      	movne	r3, #1
 80076e8:	0692      	lsls	r2, r2, #26
 80076ea:	d42b      	bmi.n	8007744 <_printf_common+0xb0>
 80076ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076f0:	4649      	mov	r1, r9
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c0      	blx	r8
 80076f6:	3001      	adds	r0, #1
 80076f8:	d01e      	beq.n	8007738 <_printf_common+0xa4>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	68e5      	ldr	r5, [r4, #12]
 80076fe:	6832      	ldr	r2, [r6, #0]
 8007700:	f003 0306 	and.w	r3, r3, #6
 8007704:	2b04      	cmp	r3, #4
 8007706:	bf08      	it	eq
 8007708:	1aad      	subeq	r5, r5, r2
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	6922      	ldr	r2, [r4, #16]
 800770e:	bf0c      	ite	eq
 8007710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007714:	2500      	movne	r5, #0
 8007716:	4293      	cmp	r3, r2
 8007718:	bfc4      	itt	gt
 800771a:	1a9b      	subgt	r3, r3, r2
 800771c:	18ed      	addgt	r5, r5, r3
 800771e:	2600      	movs	r6, #0
 8007720:	341a      	adds	r4, #26
 8007722:	42b5      	cmp	r5, r6
 8007724:	d11a      	bne.n	800775c <_printf_common+0xc8>
 8007726:	2000      	movs	r0, #0
 8007728:	e008      	b.n	800773c <_printf_common+0xa8>
 800772a:	2301      	movs	r3, #1
 800772c:	4652      	mov	r2, sl
 800772e:	4649      	mov	r1, r9
 8007730:	4638      	mov	r0, r7
 8007732:	47c0      	blx	r8
 8007734:	3001      	adds	r0, #1
 8007736:	d103      	bne.n	8007740 <_printf_common+0xac>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	3501      	adds	r5, #1
 8007742:	e7c6      	b.n	80076d2 <_printf_common+0x3e>
 8007744:	18e1      	adds	r1, r4, r3
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	2030      	movs	r0, #48	; 0x30
 800774a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800774e:	4422      	add	r2, r4
 8007750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007758:	3302      	adds	r3, #2
 800775a:	e7c7      	b.n	80076ec <_printf_common+0x58>
 800775c:	2301      	movs	r3, #1
 800775e:	4622      	mov	r2, r4
 8007760:	4649      	mov	r1, r9
 8007762:	4638      	mov	r0, r7
 8007764:	47c0      	blx	r8
 8007766:	3001      	adds	r0, #1
 8007768:	d0e6      	beq.n	8007738 <_printf_common+0xa4>
 800776a:	3601      	adds	r6, #1
 800776c:	e7d9      	b.n	8007722 <_printf_common+0x8e>
	...

08007770 <_printf_i>:
 8007770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	7e0f      	ldrb	r7, [r1, #24]
 8007776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007778:	2f78      	cmp	r7, #120	; 0x78
 800777a:	4691      	mov	r9, r2
 800777c:	4680      	mov	r8, r0
 800777e:	460c      	mov	r4, r1
 8007780:	469a      	mov	sl, r3
 8007782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007786:	d807      	bhi.n	8007798 <_printf_i+0x28>
 8007788:	2f62      	cmp	r7, #98	; 0x62
 800778a:	d80a      	bhi.n	80077a2 <_printf_i+0x32>
 800778c:	2f00      	cmp	r7, #0
 800778e:	f000 80d8 	beq.w	8007942 <_printf_i+0x1d2>
 8007792:	2f58      	cmp	r7, #88	; 0x58
 8007794:	f000 80a3 	beq.w	80078de <_printf_i+0x16e>
 8007798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800779c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077a0:	e03a      	b.n	8007818 <_printf_i+0xa8>
 80077a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077a6:	2b15      	cmp	r3, #21
 80077a8:	d8f6      	bhi.n	8007798 <_printf_i+0x28>
 80077aa:	a101      	add	r1, pc, #4	; (adr r1, 80077b0 <_printf_i+0x40>)
 80077ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077b0:	08007809 	.word	0x08007809
 80077b4:	0800781d 	.word	0x0800781d
 80077b8:	08007799 	.word	0x08007799
 80077bc:	08007799 	.word	0x08007799
 80077c0:	08007799 	.word	0x08007799
 80077c4:	08007799 	.word	0x08007799
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007799 	.word	0x08007799
 80077d0:	08007799 	.word	0x08007799
 80077d4:	08007799 	.word	0x08007799
 80077d8:	08007799 	.word	0x08007799
 80077dc:	08007929 	.word	0x08007929
 80077e0:	0800784d 	.word	0x0800784d
 80077e4:	0800790b 	.word	0x0800790b
 80077e8:	08007799 	.word	0x08007799
 80077ec:	08007799 	.word	0x08007799
 80077f0:	0800794b 	.word	0x0800794b
 80077f4:	08007799 	.word	0x08007799
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	08007799 	.word	0x08007799
 8007800:	08007799 	.word	0x08007799
 8007804:	08007913 	.word	0x08007913
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	602a      	str	r2, [r5, #0]
 8007810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007818:	2301      	movs	r3, #1
 800781a:	e0a3      	b.n	8007964 <_printf_i+0x1f4>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	6829      	ldr	r1, [r5, #0]
 8007820:	0606      	lsls	r6, r0, #24
 8007822:	f101 0304 	add.w	r3, r1, #4
 8007826:	d50a      	bpl.n	800783e <_printf_i+0xce>
 8007828:	680e      	ldr	r6, [r1, #0]
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	2e00      	cmp	r6, #0
 800782e:	da03      	bge.n	8007838 <_printf_i+0xc8>
 8007830:	232d      	movs	r3, #45	; 0x2d
 8007832:	4276      	negs	r6, r6
 8007834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007838:	485e      	ldr	r0, [pc, #376]	; (80079b4 <_printf_i+0x244>)
 800783a:	230a      	movs	r3, #10
 800783c:	e019      	b.n	8007872 <_printf_i+0x102>
 800783e:	680e      	ldr	r6, [r1, #0]
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007846:	bf18      	it	ne
 8007848:	b236      	sxthne	r6, r6
 800784a:	e7ef      	b.n	800782c <_printf_i+0xbc>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	6820      	ldr	r0, [r4, #0]
 8007850:	1d19      	adds	r1, r3, #4
 8007852:	6029      	str	r1, [r5, #0]
 8007854:	0601      	lsls	r1, r0, #24
 8007856:	d501      	bpl.n	800785c <_printf_i+0xec>
 8007858:	681e      	ldr	r6, [r3, #0]
 800785a:	e002      	b.n	8007862 <_printf_i+0xf2>
 800785c:	0646      	lsls	r6, r0, #25
 800785e:	d5fb      	bpl.n	8007858 <_printf_i+0xe8>
 8007860:	881e      	ldrh	r6, [r3, #0]
 8007862:	4854      	ldr	r0, [pc, #336]	; (80079b4 <_printf_i+0x244>)
 8007864:	2f6f      	cmp	r7, #111	; 0x6f
 8007866:	bf0c      	ite	eq
 8007868:	2308      	moveq	r3, #8
 800786a:	230a      	movne	r3, #10
 800786c:	2100      	movs	r1, #0
 800786e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007872:	6865      	ldr	r5, [r4, #4]
 8007874:	60a5      	str	r5, [r4, #8]
 8007876:	2d00      	cmp	r5, #0
 8007878:	bfa2      	ittt	ge
 800787a:	6821      	ldrge	r1, [r4, #0]
 800787c:	f021 0104 	bicge.w	r1, r1, #4
 8007880:	6021      	strge	r1, [r4, #0]
 8007882:	b90e      	cbnz	r6, 8007888 <_printf_i+0x118>
 8007884:	2d00      	cmp	r5, #0
 8007886:	d04d      	beq.n	8007924 <_printf_i+0x1b4>
 8007888:	4615      	mov	r5, r2
 800788a:	fbb6 f1f3 	udiv	r1, r6, r3
 800788e:	fb03 6711 	mls	r7, r3, r1, r6
 8007892:	5dc7      	ldrb	r7, [r0, r7]
 8007894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007898:	4637      	mov	r7, r6
 800789a:	42bb      	cmp	r3, r7
 800789c:	460e      	mov	r6, r1
 800789e:	d9f4      	bls.n	800788a <_printf_i+0x11a>
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d10b      	bne.n	80078bc <_printf_i+0x14c>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	07de      	lsls	r6, r3, #31
 80078a8:	d508      	bpl.n	80078bc <_printf_i+0x14c>
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	6861      	ldr	r1, [r4, #4]
 80078ae:	4299      	cmp	r1, r3
 80078b0:	bfde      	ittt	le
 80078b2:	2330      	movle	r3, #48	; 0x30
 80078b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078bc:	1b52      	subs	r2, r2, r5
 80078be:	6122      	str	r2, [r4, #16]
 80078c0:	f8cd a000 	str.w	sl, [sp]
 80078c4:	464b      	mov	r3, r9
 80078c6:	aa03      	add	r2, sp, #12
 80078c8:	4621      	mov	r1, r4
 80078ca:	4640      	mov	r0, r8
 80078cc:	f7ff fee2 	bl	8007694 <_printf_common>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d14c      	bne.n	800796e <_printf_i+0x1fe>
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	b004      	add	sp, #16
 80078da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078de:	4835      	ldr	r0, [pc, #212]	; (80079b4 <_printf_i+0x244>)
 80078e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078e4:	6829      	ldr	r1, [r5, #0]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ec:	6029      	str	r1, [r5, #0]
 80078ee:	061d      	lsls	r5, r3, #24
 80078f0:	d514      	bpl.n	800791c <_printf_i+0x1ac>
 80078f2:	07df      	lsls	r7, r3, #31
 80078f4:	bf44      	itt	mi
 80078f6:	f043 0320 	orrmi.w	r3, r3, #32
 80078fa:	6023      	strmi	r3, [r4, #0]
 80078fc:	b91e      	cbnz	r6, 8007906 <_printf_i+0x196>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	f023 0320 	bic.w	r3, r3, #32
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	2310      	movs	r3, #16
 8007908:	e7b0      	b.n	800786c <_printf_i+0xfc>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	f043 0320 	orr.w	r3, r3, #32
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	2378      	movs	r3, #120	; 0x78
 8007914:	4828      	ldr	r0, [pc, #160]	; (80079b8 <_printf_i+0x248>)
 8007916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800791a:	e7e3      	b.n	80078e4 <_printf_i+0x174>
 800791c:	0659      	lsls	r1, r3, #25
 800791e:	bf48      	it	mi
 8007920:	b2b6      	uxthmi	r6, r6
 8007922:	e7e6      	b.n	80078f2 <_printf_i+0x182>
 8007924:	4615      	mov	r5, r2
 8007926:	e7bb      	b.n	80078a0 <_printf_i+0x130>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	6826      	ldr	r6, [r4, #0]
 800792c:	6961      	ldr	r1, [r4, #20]
 800792e:	1d18      	adds	r0, r3, #4
 8007930:	6028      	str	r0, [r5, #0]
 8007932:	0635      	lsls	r5, r6, #24
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	d501      	bpl.n	800793c <_printf_i+0x1cc>
 8007938:	6019      	str	r1, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0x1d2>
 800793c:	0670      	lsls	r0, r6, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0x1c8>
 8007940:	8019      	strh	r1, [r3, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	4615      	mov	r5, r2
 8007948:	e7ba      	b.n	80078c0 <_printf_i+0x150>
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	602a      	str	r2, [r5, #0]
 8007950:	681d      	ldr	r5, [r3, #0]
 8007952:	6862      	ldr	r2, [r4, #4]
 8007954:	2100      	movs	r1, #0
 8007956:	4628      	mov	r0, r5
 8007958:	f7f8 fc42 	bl	80001e0 <memchr>
 800795c:	b108      	cbz	r0, 8007962 <_printf_i+0x1f2>
 800795e:	1b40      	subs	r0, r0, r5
 8007960:	6060      	str	r0, [r4, #4]
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	2300      	movs	r3, #0
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800796c:	e7a8      	b.n	80078c0 <_printf_i+0x150>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	462a      	mov	r2, r5
 8007972:	4649      	mov	r1, r9
 8007974:	4640      	mov	r0, r8
 8007976:	47d0      	blx	sl
 8007978:	3001      	adds	r0, #1
 800797a:	d0ab      	beq.n	80078d4 <_printf_i+0x164>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	079b      	lsls	r3, r3, #30
 8007980:	d413      	bmi.n	80079aa <_printf_i+0x23a>
 8007982:	68e0      	ldr	r0, [r4, #12]
 8007984:	9b03      	ldr	r3, [sp, #12]
 8007986:	4298      	cmp	r0, r3
 8007988:	bfb8      	it	lt
 800798a:	4618      	movlt	r0, r3
 800798c:	e7a4      	b.n	80078d8 <_printf_i+0x168>
 800798e:	2301      	movs	r3, #1
 8007990:	4632      	mov	r2, r6
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d09b      	beq.n	80078d4 <_printf_i+0x164>
 800799c:	3501      	adds	r5, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dcf2      	bgt.n	800798e <_printf_i+0x21e>
 80079a8:	e7eb      	b.n	8007982 <_printf_i+0x212>
 80079aa:	2500      	movs	r5, #0
 80079ac:	f104 0619 	add.w	r6, r4, #25
 80079b0:	e7f5      	b.n	800799e <_printf_i+0x22e>
 80079b2:	bf00      	nop
 80079b4:	08009b46 	.word	0x08009b46
 80079b8:	08009b57 	.word	0x08009b57

080079bc <_puts_r>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	460e      	mov	r6, r1
 80079c0:	4605      	mov	r5, r0
 80079c2:	b118      	cbz	r0, 80079cc <_puts_r+0x10>
 80079c4:	6983      	ldr	r3, [r0, #24]
 80079c6:	b90b      	cbnz	r3, 80079cc <_puts_r+0x10>
 80079c8:	f7ff fa1e 	bl	8006e08 <__sinit>
 80079cc:	69ab      	ldr	r3, [r5, #24]
 80079ce:	68ac      	ldr	r4, [r5, #8]
 80079d0:	b913      	cbnz	r3, 80079d8 <_puts_r+0x1c>
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7ff fa18 	bl	8006e08 <__sinit>
 80079d8:	4b2c      	ldr	r3, [pc, #176]	; (8007a8c <_puts_r+0xd0>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d120      	bne.n	8007a20 <_puts_r+0x64>
 80079de:	686c      	ldr	r4, [r5, #4]
 80079e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079e2:	07db      	lsls	r3, r3, #31
 80079e4:	d405      	bmi.n	80079f2 <_puts_r+0x36>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	0598      	lsls	r0, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_puts_r+0x36>
 80079ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ee:	f7ff face 	bl	8006f8e <__retarget_lock_acquire_recursive>
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	0719      	lsls	r1, r3, #28
 80079f6:	d51d      	bpl.n	8007a34 <_puts_r+0x78>
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	b1db      	cbz	r3, 8007a34 <_puts_r+0x78>
 80079fc:	3e01      	subs	r6, #1
 80079fe:	68a3      	ldr	r3, [r4, #8]
 8007a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a04:	3b01      	subs	r3, #1
 8007a06:	60a3      	str	r3, [r4, #8]
 8007a08:	bb39      	cbnz	r1, 8007a5a <_puts_r+0x9e>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da38      	bge.n	8007a80 <_puts_r+0xc4>
 8007a0e:	4622      	mov	r2, r4
 8007a10:	210a      	movs	r1, #10
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 f906 	bl	8007c24 <__swbuf_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d011      	beq.n	8007a40 <_puts_r+0x84>
 8007a1c:	250a      	movs	r5, #10
 8007a1e:	e011      	b.n	8007a44 <_puts_r+0x88>
 8007a20:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <_puts_r+0xd4>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d101      	bne.n	8007a2a <_puts_r+0x6e>
 8007a26:	68ac      	ldr	r4, [r5, #8]
 8007a28:	e7da      	b.n	80079e0 <_puts_r+0x24>
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <_puts_r+0xd8>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	bf08      	it	eq
 8007a30:	68ec      	ldreq	r4, [r5, #12]
 8007a32:	e7d5      	b.n	80079e0 <_puts_r+0x24>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f958 	bl	8007cec <__swsetup_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d0dd      	beq.n	80079fc <_puts_r+0x40>
 8007a40:	f04f 35ff 	mov.w	r5, #4294967295
 8007a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a46:	07da      	lsls	r2, r3, #31
 8007a48:	d405      	bmi.n	8007a56 <_puts_r+0x9a>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	059b      	lsls	r3, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_puts_r+0x9a>
 8007a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a52:	f7ff fa9d 	bl	8006f90 <__retarget_lock_release_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da04      	bge.n	8007a68 <_puts_r+0xac>
 8007a5e:	69a2      	ldr	r2, [r4, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	dc06      	bgt.n	8007a72 <_puts_r+0xb6>
 8007a64:	290a      	cmp	r1, #10
 8007a66:	d004      	beq.n	8007a72 <_puts_r+0xb6>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	7019      	strb	r1, [r3, #0]
 8007a70:	e7c5      	b.n	80079fe <_puts_r+0x42>
 8007a72:	4622      	mov	r2, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 f8d5 	bl	8007c24 <__swbuf_r>
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d1bf      	bne.n	80079fe <_puts_r+0x42>
 8007a7e:	e7df      	b.n	8007a40 <_puts_r+0x84>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	250a      	movs	r5, #10
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	701d      	strb	r5, [r3, #0]
 8007a8a:	e7db      	b.n	8007a44 <_puts_r+0x88>
 8007a8c:	08009af0 	.word	0x08009af0
 8007a90:	08009b10 	.word	0x08009b10
 8007a94:	08009ad0 	.word	0x08009ad0

08007a98 <puts>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <puts+0xc>)
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f7ff bf8d 	b.w	80079bc <_puts_r>
 8007aa2:	bf00      	nop
 8007aa4:	20000010 	.word	0x20000010

08007aa8 <cleanup_glue>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	460c      	mov	r4, r1
 8007aac:	6809      	ldr	r1, [r1, #0]
 8007aae:	4605      	mov	r5, r0
 8007ab0:	b109      	cbz	r1, 8007ab6 <cleanup_glue+0xe>
 8007ab2:	f7ff fff9 	bl	8007aa8 <cleanup_glue>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007abe:	f001 bcf9 	b.w	80094b4 <_free_r>
	...

08007ac4 <_reclaim_reent>:
 8007ac4:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <_reclaim_reent+0xb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4283      	cmp	r3, r0
 8007aca:	b570      	push	{r4, r5, r6, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	d051      	beq.n	8007b74 <_reclaim_reent+0xb0>
 8007ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ad2:	b143      	cbz	r3, 8007ae6 <_reclaim_reent+0x22>
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d14a      	bne.n	8007b70 <_reclaim_reent+0xac>
 8007ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007adc:	6819      	ldr	r1, [r3, #0]
 8007ade:	b111      	cbz	r1, 8007ae6 <_reclaim_reent+0x22>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f001 fce7 	bl	80094b4 <_free_r>
 8007ae6:	6961      	ldr	r1, [r4, #20]
 8007ae8:	b111      	cbz	r1, 8007af0 <_reclaim_reent+0x2c>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f001 fce2 	bl	80094b4 <_free_r>
 8007af0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007af2:	b111      	cbz	r1, 8007afa <_reclaim_reent+0x36>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 fcdd 	bl	80094b4 <_free_r>
 8007afa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007afc:	b111      	cbz	r1, 8007b04 <_reclaim_reent+0x40>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f001 fcd8 	bl	80094b4 <_free_r>
 8007b04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b06:	b111      	cbz	r1, 8007b0e <_reclaim_reent+0x4a>
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 fcd3 	bl	80094b4 <_free_r>
 8007b0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b10:	b111      	cbz	r1, 8007b18 <_reclaim_reent+0x54>
 8007b12:	4620      	mov	r0, r4
 8007b14:	f001 fcce 	bl	80094b4 <_free_r>
 8007b18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b1a:	b111      	cbz	r1, 8007b22 <_reclaim_reent+0x5e>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f001 fcc9 	bl	80094b4 <_free_r>
 8007b22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b24:	b111      	cbz	r1, 8007b2c <_reclaim_reent+0x68>
 8007b26:	4620      	mov	r0, r4
 8007b28:	f001 fcc4 	bl	80094b4 <_free_r>
 8007b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2e:	b111      	cbz	r1, 8007b36 <_reclaim_reent+0x72>
 8007b30:	4620      	mov	r0, r4
 8007b32:	f001 fcbf 	bl	80094b4 <_free_r>
 8007b36:	69a3      	ldr	r3, [r4, #24]
 8007b38:	b1e3      	cbz	r3, 8007b74 <_reclaim_reent+0xb0>
 8007b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	4798      	blx	r3
 8007b40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b42:	b1b9      	cbz	r1, 8007b74 <_reclaim_reent+0xb0>
 8007b44:	4620      	mov	r0, r4
 8007b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b4a:	f7ff bfad 	b.w	8007aa8 <cleanup_glue>
 8007b4e:	5949      	ldr	r1, [r1, r5]
 8007b50:	b941      	cbnz	r1, 8007b64 <_reclaim_reent+0xa0>
 8007b52:	3504      	adds	r5, #4
 8007b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b56:	2d80      	cmp	r5, #128	; 0x80
 8007b58:	68d9      	ldr	r1, [r3, #12]
 8007b5a:	d1f8      	bne.n	8007b4e <_reclaim_reent+0x8a>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f001 fca9 	bl	80094b4 <_free_r>
 8007b62:	e7ba      	b.n	8007ada <_reclaim_reent+0x16>
 8007b64:	680e      	ldr	r6, [r1, #0]
 8007b66:	4620      	mov	r0, r4
 8007b68:	f001 fca4 	bl	80094b4 <_free_r>
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	e7ef      	b.n	8007b50 <_reclaim_reent+0x8c>
 8007b70:	2500      	movs	r5, #0
 8007b72:	e7ef      	b.n	8007b54 <_reclaim_reent+0x90>
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	bf00      	nop
 8007b78:	20000010 	.word	0x20000010

08007b7c <_sbrk_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_sbrk_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f9 fe0e 	bl	80017a8 <_sbrk>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_sbrk_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_sbrk_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20001de0 	.word	0x20001de0

08007b9c <__sread>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	f001 fcd2 	bl	800954c <_read_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	bfab      	itete	ge
 8007bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bae:	89a3      	ldrhlt	r3, [r4, #12]
 8007bb0:	181b      	addge	r3, r3, r0
 8007bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bb6:	bfac      	ite	ge
 8007bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bba:	81a3      	strhlt	r3, [r4, #12]
 8007bbc:	bd10      	pop	{r4, pc}

08007bbe <__swrite>:
 8007bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	461f      	mov	r7, r3
 8007bc4:	898b      	ldrh	r3, [r1, #12]
 8007bc6:	05db      	lsls	r3, r3, #23
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4616      	mov	r6, r2
 8007bce:	d505      	bpl.n	8007bdc <__swrite+0x1e>
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f001 f846 	bl	8008c68 <_lseek_r>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	4628      	mov	r0, r5
 8007bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	f000 b869 	b.w	8007cc8 <_write_r>

08007bf6 <__sseek>:
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfe:	f001 f833 	bl	8008c68 <_lseek_r>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	bf15      	itete	ne
 8007c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c12:	81a3      	strheq	r3, [r4, #12]
 8007c14:	bf18      	it	ne
 8007c16:	81a3      	strhne	r3, [r4, #12]
 8007c18:	bd10      	pop	{r4, pc}

08007c1a <__sclose>:
 8007c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1e:	f000 b8d3 	b.w	8007dc8 <_close_r>
	...

08007c24 <__swbuf_r>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	460e      	mov	r6, r1
 8007c28:	4614      	mov	r4, r2
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b118      	cbz	r0, 8007c36 <__swbuf_r+0x12>
 8007c2e:	6983      	ldr	r3, [r0, #24]
 8007c30:	b90b      	cbnz	r3, 8007c36 <__swbuf_r+0x12>
 8007c32:	f7ff f8e9 	bl	8006e08 <__sinit>
 8007c36:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <__swbuf_r+0x98>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d12b      	bne.n	8007c94 <__swbuf_r+0x70>
 8007c3c:	686c      	ldr	r4, [r5, #4]
 8007c3e:	69a3      	ldr	r3, [r4, #24]
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	071a      	lsls	r2, r3, #28
 8007c46:	d52f      	bpl.n	8007ca8 <__swbuf_r+0x84>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	b36b      	cbz	r3, 8007ca8 <__swbuf_r+0x84>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	1ac0      	subs	r0, r0, r3
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	b2f6      	uxtb	r6, r6
 8007c56:	4283      	cmp	r3, r0
 8007c58:	4637      	mov	r7, r6
 8007c5a:	dc04      	bgt.n	8007c66 <__swbuf_r+0x42>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 ffc2 	bl	8008be8 <_fflush_r>
 8007c64:	bb30      	cbnz	r0, 8007cb4 <__swbuf_r+0x90>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	701e      	strb	r6, [r3, #0]
 8007c74:	6963      	ldr	r3, [r4, #20]
 8007c76:	3001      	adds	r0, #1
 8007c78:	4283      	cmp	r3, r0
 8007c7a:	d004      	beq.n	8007c86 <__swbuf_r+0x62>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d506      	bpl.n	8007c90 <__swbuf_r+0x6c>
 8007c82:	2e0a      	cmp	r6, #10
 8007c84:	d104      	bne.n	8007c90 <__swbuf_r+0x6c>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 ffad 	bl	8008be8 <_fflush_r>
 8007c8e:	b988      	cbnz	r0, 8007cb4 <__swbuf_r+0x90>
 8007c90:	4638      	mov	r0, r7
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <__swbuf_r+0x9c>)
 8007c96:	429c      	cmp	r4, r3
 8007c98:	d101      	bne.n	8007c9e <__swbuf_r+0x7a>
 8007c9a:	68ac      	ldr	r4, [r5, #8]
 8007c9c:	e7cf      	b.n	8007c3e <__swbuf_r+0x1a>
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <__swbuf_r+0xa0>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	bf08      	it	eq
 8007ca4:	68ec      	ldreq	r4, [r5, #12]
 8007ca6:	e7ca      	b.n	8007c3e <__swbuf_r+0x1a>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f81e 	bl	8007cec <__swsetup_r>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d0cb      	beq.n	8007c4c <__swbuf_r+0x28>
 8007cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8007cb8:	e7ea      	b.n	8007c90 <__swbuf_r+0x6c>
 8007cba:	bf00      	nop
 8007cbc:	08009af0 	.word	0x08009af0
 8007cc0:	08009b10 	.word	0x08009b10
 8007cc4:	08009ad0 	.word	0x08009ad0

08007cc8 <_write_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_write_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7f9 fd15 	bl	8001706 <_write>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_write_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_write_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20001de0 	.word	0x20001de0

08007cec <__swsetup_r>:
 8007cec:	4b32      	ldr	r3, [pc, #200]	; (8007db8 <__swsetup_r+0xcc>)
 8007cee:	b570      	push	{r4, r5, r6, lr}
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	b125      	cbz	r5, 8007d02 <__swsetup_r+0x16>
 8007cf8:	69ab      	ldr	r3, [r5, #24]
 8007cfa:	b913      	cbnz	r3, 8007d02 <__swsetup_r+0x16>
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f7ff f883 	bl	8006e08 <__sinit>
 8007d02:	4b2e      	ldr	r3, [pc, #184]	; (8007dbc <__swsetup_r+0xd0>)
 8007d04:	429c      	cmp	r4, r3
 8007d06:	d10f      	bne.n	8007d28 <__swsetup_r+0x3c>
 8007d08:	686c      	ldr	r4, [r5, #4]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d10:	0719      	lsls	r1, r3, #28
 8007d12:	d42c      	bmi.n	8007d6e <__swsetup_r+0x82>
 8007d14:	06dd      	lsls	r5, r3, #27
 8007d16:	d411      	bmi.n	8007d3c <__swsetup_r+0x50>
 8007d18:	2309      	movs	r3, #9
 8007d1a:	6033      	str	r3, [r6, #0]
 8007d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	f04f 30ff 	mov.w	r0, #4294967295
 8007d26:	e03e      	b.n	8007da6 <__swsetup_r+0xba>
 8007d28:	4b25      	ldr	r3, [pc, #148]	; (8007dc0 <__swsetup_r+0xd4>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d101      	bne.n	8007d32 <__swsetup_r+0x46>
 8007d2e:	68ac      	ldr	r4, [r5, #8]
 8007d30:	e7eb      	b.n	8007d0a <__swsetup_r+0x1e>
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <__swsetup_r+0xd8>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	bf08      	it	eq
 8007d38:	68ec      	ldreq	r4, [r5, #12]
 8007d3a:	e7e6      	b.n	8007d0a <__swsetup_r+0x1e>
 8007d3c:	0758      	lsls	r0, r3, #29
 8007d3e:	d512      	bpl.n	8007d66 <__swsetup_r+0x7a>
 8007d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d42:	b141      	cbz	r1, 8007d56 <__swsetup_r+0x6a>
 8007d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <__swsetup_r+0x66>
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f001 fbb1 	bl	80094b4 <_free_r>
 8007d52:	2300      	movs	r3, #0
 8007d54:	6363      	str	r3, [r4, #52]	; 0x34
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f043 0308 	orr.w	r3, r3, #8
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	b94b      	cbnz	r3, 8007d86 <__swsetup_r+0x9a>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7c:	d003      	beq.n	8007d86 <__swsetup_r+0x9a>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4630      	mov	r0, r6
 8007d82:	f000 ffa9 	bl	8008cd8 <__smakebuf_r>
 8007d86:	89a0      	ldrh	r0, [r4, #12]
 8007d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8c:	f010 0301 	ands.w	r3, r0, #1
 8007d90:	d00a      	beq.n	8007da8 <__swsetup_r+0xbc>
 8007d92:	2300      	movs	r3, #0
 8007d94:	60a3      	str	r3, [r4, #8]
 8007d96:	6963      	ldr	r3, [r4, #20]
 8007d98:	425b      	negs	r3, r3
 8007d9a:	61a3      	str	r3, [r4, #24]
 8007d9c:	6923      	ldr	r3, [r4, #16]
 8007d9e:	b943      	cbnz	r3, 8007db2 <__swsetup_r+0xc6>
 8007da0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007da4:	d1ba      	bne.n	8007d1c <__swsetup_r+0x30>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	0781      	lsls	r1, r0, #30
 8007daa:	bf58      	it	pl
 8007dac:	6963      	ldrpl	r3, [r4, #20]
 8007dae:	60a3      	str	r3, [r4, #8]
 8007db0:	e7f4      	b.n	8007d9c <__swsetup_r+0xb0>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e7f7      	b.n	8007da6 <__swsetup_r+0xba>
 8007db6:	bf00      	nop
 8007db8:	20000010 	.word	0x20000010
 8007dbc:	08009af0 	.word	0x08009af0
 8007dc0:	08009b10 	.word	0x08009b10
 8007dc4:	08009ad0 	.word	0x08009ad0

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 fcb3 	bl	800173e <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	20001de0 	.word	0x20001de0

08007de8 <quorem>:
 8007de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	6903      	ldr	r3, [r0, #16]
 8007dee:	690c      	ldr	r4, [r1, #16]
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	4607      	mov	r7, r0
 8007df4:	f2c0 8081 	blt.w	8007efa <quorem+0x112>
 8007df8:	3c01      	subs	r4, #1
 8007dfa:	f101 0814 	add.w	r8, r1, #20
 8007dfe:	f100 0514 	add.w	r5, r0, #20
 8007e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e10:	3301      	adds	r3, #1
 8007e12:	429a      	cmp	r2, r3
 8007e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e20:	d331      	bcc.n	8007e86 <quorem+0x9e>
 8007e22:	f04f 0e00 	mov.w	lr, #0
 8007e26:	4640      	mov	r0, r8
 8007e28:	46ac      	mov	ip, r5
 8007e2a:	46f2      	mov	sl, lr
 8007e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e30:	b293      	uxth	r3, r2
 8007e32:	fb06 e303 	mla	r3, r6, r3, lr
 8007e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007e40:	f8dc a000 	ldr.w	sl, [ip]
 8007e44:	0c12      	lsrs	r2, r2, #16
 8007e46:	fa13 f38a 	uxtah	r3, r3, sl
 8007e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	9b00      	ldr	r3, [sp, #0]
 8007e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e56:	b292      	uxth	r2, r2
 8007e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e64:	4581      	cmp	r9, r0
 8007e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e72:	d2db      	bcs.n	8007e2c <quorem+0x44>
 8007e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e78:	b92b      	cbnz	r3, 8007e86 <quorem+0x9e>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d32e      	bcc.n	8007ee2 <quorem+0xfa>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	4638      	mov	r0, r7
 8007e88:	f001 f9fc 	bl	8009284 <__mcmp>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	db24      	blt.n	8007eda <quorem+0xf2>
 8007e90:	3601      	adds	r6, #1
 8007e92:	4628      	mov	r0, r5
 8007e94:	f04f 0c00 	mov.w	ip, #0
 8007e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007ea0:	b293      	uxth	r3, r2
 8007ea2:	ebac 0303 	sub.w	r3, ip, r3
 8007ea6:	0c12      	lsrs	r2, r2, #16
 8007ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8007eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eba:	45c1      	cmp	r9, r8
 8007ebc:	f840 3b04 	str.w	r3, [r0], #4
 8007ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ec4:	d2e8      	bcs.n	8007e98 <quorem+0xb0>
 8007ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ece:	b922      	cbnz	r2, 8007eda <quorem+0xf2>
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	d30a      	bcc.n	8007eee <quorem+0x106>
 8007ed8:	613c      	str	r4, [r7, #16]
 8007eda:	4630      	mov	r0, r6
 8007edc:	b003      	add	sp, #12
 8007ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d1cc      	bne.n	8007e84 <quorem+0x9c>
 8007eea:	3c01      	subs	r4, #1
 8007eec:	e7c7      	b.n	8007e7e <quorem+0x96>
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <quorem+0xf0>
 8007ef6:	3c01      	subs	r4, #1
 8007ef8:	e7eb      	b.n	8007ed2 <quorem+0xea>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e7ee      	b.n	8007edc <quorem+0xf4>
	...

08007f00 <_dtoa_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	ed2d 8b04 	vpush	{d8-d9}
 8007f08:	ec57 6b10 	vmov	r6, r7, d0
 8007f0c:	b093      	sub	sp, #76	; 0x4c
 8007f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f14:	9106      	str	r1, [sp, #24]
 8007f16:	ee10 aa10 	vmov	sl, s0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f20:	46bb      	mov	fp, r7
 8007f22:	b975      	cbnz	r5, 8007f42 <_dtoa_r+0x42>
 8007f24:	2010      	movs	r0, #16
 8007f26:	f000 ff17 	bl	8008d58 <malloc>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f2e:	b920      	cbnz	r0, 8007f3a <_dtoa_r+0x3a>
 8007f30:	4ba7      	ldr	r3, [pc, #668]	; (80081d0 <_dtoa_r+0x2d0>)
 8007f32:	21ea      	movs	r1, #234	; 0xea
 8007f34:	48a7      	ldr	r0, [pc, #668]	; (80081d4 <_dtoa_r+0x2d4>)
 8007f36:	f001 fb1b 	bl	8009570 <__assert_func>
 8007f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f3e:	6005      	str	r5, [r0, #0]
 8007f40:	60c5      	str	r5, [r0, #12]
 8007f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f44:	6819      	ldr	r1, [r3, #0]
 8007f46:	b151      	cbz	r1, 8007f5e <_dtoa_r+0x5e>
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	604a      	str	r2, [r1, #4]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4093      	lsls	r3, r2
 8007f50:	608b      	str	r3, [r1, #8]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 ff54 	bl	8008e00 <_Bfree>
 8007f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	1e3b      	subs	r3, r7, #0
 8007f60:	bfaa      	itet	ge
 8007f62:	2300      	movge	r3, #0
 8007f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f68:	f8c8 3000 	strge.w	r3, [r8]
 8007f6c:	4b9a      	ldr	r3, [pc, #616]	; (80081d8 <_dtoa_r+0x2d8>)
 8007f6e:	bfbc      	itt	lt
 8007f70:	2201      	movlt	r2, #1
 8007f72:	f8c8 2000 	strlt.w	r2, [r8]
 8007f76:	ea33 030b 	bics.w	r3, r3, fp
 8007f7a:	d11b      	bne.n	8007fb4 <_dtoa_r+0xb4>
 8007f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f88:	4333      	orrs	r3, r6
 8007f8a:	f000 8592 	beq.w	8008ab2 <_dtoa_r+0xbb2>
 8007f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f90:	b963      	cbnz	r3, 8007fac <_dtoa_r+0xac>
 8007f92:	4b92      	ldr	r3, [pc, #584]	; (80081dc <_dtoa_r+0x2dc>)
 8007f94:	e022      	b.n	8007fdc <_dtoa_r+0xdc>
 8007f96:	4b92      	ldr	r3, [pc, #584]	; (80081e0 <_dtoa_r+0x2e0>)
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	9801      	ldr	r0, [sp, #4]
 8007fa2:	b013      	add	sp, #76	; 0x4c
 8007fa4:	ecbd 8b04 	vpop	{d8-d9}
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	4b8b      	ldr	r3, [pc, #556]	; (80081dc <_dtoa_r+0x2dc>)
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	3303      	adds	r3, #3
 8007fb2:	e7f3      	b.n	8007f9c <_dtoa_r+0x9c>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4650      	mov	r0, sl
 8007fba:	4659      	mov	r1, fp
 8007fbc:	f7f8 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc0:	ec4b ab19 	vmov	d9, sl, fp
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	b158      	cbz	r0, 8007fe0 <_dtoa_r+0xe0>
 8007fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fca:	2301      	movs	r3, #1
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 856b 	beq.w	8008aac <_dtoa_r+0xbac>
 8007fd6:	4883      	ldr	r0, [pc, #524]	; (80081e4 <_dtoa_r+0x2e4>)
 8007fd8:	6018      	str	r0, [r3, #0]
 8007fda:	1e43      	subs	r3, r0, #1
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	e7df      	b.n	8007fa0 <_dtoa_r+0xa0>
 8007fe0:	ec4b ab10 	vmov	d0, sl, fp
 8007fe4:	aa10      	add	r2, sp, #64	; 0x40
 8007fe6:	a911      	add	r1, sp, #68	; 0x44
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f001 f9f1 	bl	80093d0 <__d2b>
 8007fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007ff2:	ee08 0a10 	vmov	s16, r0
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	f000 8084 	beq.w	8008104 <_dtoa_r+0x204>
 8007ffc:	ee19 3a90 	vmov	r3, s19
 8008000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008008:	4656      	mov	r6, sl
 800800a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800800e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008016:	4b74      	ldr	r3, [pc, #464]	; (80081e8 <_dtoa_r+0x2e8>)
 8008018:	2200      	movs	r2, #0
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 f933 	bl	8000288 <__aeabi_dsub>
 8008022:	a365      	add	r3, pc, #404	; (adr r3, 80081b8 <_dtoa_r+0x2b8>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f7f8 fae6 	bl	80005f8 <__aeabi_dmul>
 800802c:	a364      	add	r3, pc, #400	; (adr r3, 80081c0 <_dtoa_r+0x2c0>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 f92b 	bl	800028c <__adddf3>
 8008036:	4606      	mov	r6, r0
 8008038:	4628      	mov	r0, r5
 800803a:	460f      	mov	r7, r1
 800803c:	f7f8 fa72 	bl	8000524 <__aeabi_i2d>
 8008040:	a361      	add	r3, pc, #388	; (adr r3, 80081c8 <_dtoa_r+0x2c8>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 fad7 	bl	80005f8 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 f91b 	bl	800028c <__adddf3>
 8008056:	4606      	mov	r6, r0
 8008058:	460f      	mov	r7, r1
 800805a:	f7f8 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800805e:	2200      	movs	r2, #0
 8008060:	9000      	str	r0, [sp, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 fd38 	bl	8000adc <__aeabi_dcmplt>
 800806c:	b150      	cbz	r0, 8008084 <_dtoa_r+0x184>
 800806e:	9800      	ldr	r0, [sp, #0]
 8008070:	f7f8 fa58 	bl	8000524 <__aeabi_i2d>
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	f7f8 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800807c:	b910      	cbnz	r0, 8008084 <_dtoa_r+0x184>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	9b00      	ldr	r3, [sp, #0]
 8008086:	2b16      	cmp	r3, #22
 8008088:	d85a      	bhi.n	8008140 <_dtoa_r+0x240>
 800808a:	9a00      	ldr	r2, [sp, #0]
 800808c:	4b57      	ldr	r3, [pc, #348]	; (80081ec <_dtoa_r+0x2ec>)
 800808e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	ec51 0b19 	vmov	r0, r1, d9
 800809a:	f7f8 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d050      	beq.n	8008144 <_dtoa_r+0x244>
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080ae:	1b5d      	subs	r5, r3, r5
 80080b0:	1e6b      	subs	r3, r5, #1
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	bf45      	ittet	mi
 80080b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80080ba:	9304      	strmi	r3, [sp, #16]
 80080bc:	2300      	movpl	r3, #0
 80080be:	2300      	movmi	r3, #0
 80080c0:	bf4c      	ite	mi
 80080c2:	9305      	strmi	r3, [sp, #20]
 80080c4:	9304      	strpl	r3, [sp, #16]
 80080c6:	9b00      	ldr	r3, [sp, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db3d      	blt.n	8008148 <_dtoa_r+0x248>
 80080cc:	9b05      	ldr	r3, [sp, #20]
 80080ce:	9a00      	ldr	r2, [sp, #0]
 80080d0:	920a      	str	r2, [sp, #40]	; 0x28
 80080d2:	4413      	add	r3, r2
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9307      	str	r3, [sp, #28]
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	2b09      	cmp	r3, #9
 80080de:	f200 8089 	bhi.w	80081f4 <_dtoa_r+0x2f4>
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	bfc4      	itt	gt
 80080e6:	3b04      	subgt	r3, #4
 80080e8:	9306      	strgt	r3, [sp, #24]
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	f1a3 0302 	sub.w	r3, r3, #2
 80080f0:	bfcc      	ite	gt
 80080f2:	2500      	movgt	r5, #0
 80080f4:	2501      	movle	r5, #1
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	f200 8087 	bhi.w	800820a <_dtoa_r+0x30a>
 80080fc:	e8df f003 	tbb	[pc, r3]
 8008100:	59383a2d 	.word	0x59383a2d
 8008104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008108:	441d      	add	r5, r3
 800810a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800810e:	2b20      	cmp	r3, #32
 8008110:	bfc1      	itttt	gt
 8008112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800811a:	fa0b f303 	lslgt.w	r3, fp, r3
 800811e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008122:	bfda      	itte	le
 8008124:	f1c3 0320 	rsble	r3, r3, #32
 8008128:	fa06 f003 	lslle.w	r0, r6, r3
 800812c:	4318      	orrgt	r0, r3
 800812e:	f7f8 f9e9 	bl	8000504 <__aeabi_ui2d>
 8008132:	2301      	movs	r3, #1
 8008134:	4606      	mov	r6, r0
 8008136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800813a:	3d01      	subs	r5, #1
 800813c:	930e      	str	r3, [sp, #56]	; 0x38
 800813e:	e76a      	b.n	8008016 <_dtoa_r+0x116>
 8008140:	2301      	movs	r3, #1
 8008142:	e7b2      	b.n	80080aa <_dtoa_r+0x1aa>
 8008144:	900b      	str	r0, [sp, #44]	; 0x2c
 8008146:	e7b1      	b.n	80080ac <_dtoa_r+0x1ac>
 8008148:	9b04      	ldr	r3, [sp, #16]
 800814a:	9a00      	ldr	r2, [sp, #0]
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	4253      	negs	r3, r2
 8008152:	9307      	str	r3, [sp, #28]
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	; 0x28
 8008158:	e7bf      	b.n	80080da <_dtoa_r+0x1da>
 800815a:	2300      	movs	r3, #0
 800815c:	9308      	str	r3, [sp, #32]
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	dc55      	bgt.n	8008210 <_dtoa_r+0x310>
 8008164:	2301      	movs	r3, #1
 8008166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800816a:	461a      	mov	r2, r3
 800816c:	9209      	str	r2, [sp, #36]	; 0x24
 800816e:	e00c      	b.n	800818a <_dtoa_r+0x28a>
 8008170:	2301      	movs	r3, #1
 8008172:	e7f3      	b.n	800815c <_dtoa_r+0x25c>
 8008174:	2300      	movs	r3, #0
 8008176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	9b00      	ldr	r3, [sp, #0]
 800817c:	4413      	add	r3, r2
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	3301      	adds	r3, #1
 8008182:	2b01      	cmp	r3, #1
 8008184:	9303      	str	r3, [sp, #12]
 8008186:	bfb8      	it	lt
 8008188:	2301      	movlt	r3, #1
 800818a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800818c:	2200      	movs	r2, #0
 800818e:	6042      	str	r2, [r0, #4]
 8008190:	2204      	movs	r2, #4
 8008192:	f102 0614 	add.w	r6, r2, #20
 8008196:	429e      	cmp	r6, r3
 8008198:	6841      	ldr	r1, [r0, #4]
 800819a:	d93d      	bls.n	8008218 <_dtoa_r+0x318>
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fdef 	bl	8008d80 <_Balloc>
 80081a2:	9001      	str	r0, [sp, #4]
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d13b      	bne.n	8008220 <_dtoa_r+0x320>
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <_dtoa_r+0x2f0>)
 80081aa:	4602      	mov	r2, r0
 80081ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081b0:	e6c0      	b.n	8007f34 <_dtoa_r+0x34>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e7df      	b.n	8008176 <_dtoa_r+0x276>
 80081b6:	bf00      	nop
 80081b8:	636f4361 	.word	0x636f4361
 80081bc:	3fd287a7 	.word	0x3fd287a7
 80081c0:	8b60c8b3 	.word	0x8b60c8b3
 80081c4:	3fc68a28 	.word	0x3fc68a28
 80081c8:	509f79fb 	.word	0x509f79fb
 80081cc:	3fd34413 	.word	0x3fd34413
 80081d0:	08009b75 	.word	0x08009b75
 80081d4:	08009b8c 	.word	0x08009b8c
 80081d8:	7ff00000 	.word	0x7ff00000
 80081dc:	08009b71 	.word	0x08009b71
 80081e0:	08009b68 	.word	0x08009b68
 80081e4:	08009b45 	.word	0x08009b45
 80081e8:	3ff80000 	.word	0x3ff80000
 80081ec:	08009c80 	.word	0x08009c80
 80081f0:	08009be7 	.word	0x08009be7
 80081f4:	2501      	movs	r5, #1
 80081f6:	2300      	movs	r3, #0
 80081f8:	9306      	str	r3, [sp, #24]
 80081fa:	9508      	str	r5, [sp, #32]
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	2312      	movs	r3, #18
 8008208:	e7b0      	b.n	800816c <_dtoa_r+0x26c>
 800820a:	2301      	movs	r3, #1
 800820c:	9308      	str	r3, [sp, #32]
 800820e:	e7f5      	b.n	80081fc <_dtoa_r+0x2fc>
 8008210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008216:	e7b8      	b.n	800818a <_dtoa_r+0x28a>
 8008218:	3101      	adds	r1, #1
 800821a:	6041      	str	r1, [r0, #4]
 800821c:	0052      	lsls	r2, r2, #1
 800821e:	e7b8      	b.n	8008192 <_dtoa_r+0x292>
 8008220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008222:	9a01      	ldr	r2, [sp, #4]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	2b0e      	cmp	r3, #14
 800822a:	f200 809d 	bhi.w	8008368 <_dtoa_r+0x468>
 800822e:	2d00      	cmp	r5, #0
 8008230:	f000 809a 	beq.w	8008368 <_dtoa_r+0x468>
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	dd32      	ble.n	80082a0 <_dtoa_r+0x3a0>
 800823a:	4ab7      	ldr	r2, [pc, #732]	; (8008518 <_dtoa_r+0x618>)
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	05d8      	lsls	r0, r3, #23
 800824c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008250:	d516      	bpl.n	8008280 <_dtoa_r+0x380>
 8008252:	4bb2      	ldr	r3, [pc, #712]	; (800851c <_dtoa_r+0x61c>)
 8008254:	ec51 0b19 	vmov	r0, r1, d9
 8008258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800825c:	f7f8 faf6 	bl	800084c <__aeabi_ddiv>
 8008260:	f007 070f 	and.w	r7, r7, #15
 8008264:	4682      	mov	sl, r0
 8008266:	468b      	mov	fp, r1
 8008268:	2503      	movs	r5, #3
 800826a:	4eac      	ldr	r6, [pc, #688]	; (800851c <_dtoa_r+0x61c>)
 800826c:	b957      	cbnz	r7, 8008284 <_dtoa_r+0x384>
 800826e:	4642      	mov	r2, r8
 8008270:	464b      	mov	r3, r9
 8008272:	4650      	mov	r0, sl
 8008274:	4659      	mov	r1, fp
 8008276:	f7f8 fae9 	bl	800084c <__aeabi_ddiv>
 800827a:	4682      	mov	sl, r0
 800827c:	468b      	mov	fp, r1
 800827e:	e028      	b.n	80082d2 <_dtoa_r+0x3d2>
 8008280:	2502      	movs	r5, #2
 8008282:	e7f2      	b.n	800826a <_dtoa_r+0x36a>
 8008284:	07f9      	lsls	r1, r7, #31
 8008286:	d508      	bpl.n	800829a <_dtoa_r+0x39a>
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008290:	f7f8 f9b2 	bl	80005f8 <__aeabi_dmul>
 8008294:	3501      	adds	r5, #1
 8008296:	4680      	mov	r8, r0
 8008298:	4689      	mov	r9, r1
 800829a:	107f      	asrs	r7, r7, #1
 800829c:	3608      	adds	r6, #8
 800829e:	e7e5      	b.n	800826c <_dtoa_r+0x36c>
 80082a0:	f000 809b 	beq.w	80083da <_dtoa_r+0x4da>
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	4f9d      	ldr	r7, [pc, #628]	; (800851c <_dtoa_r+0x61c>)
 80082a8:	425e      	negs	r6, r3
 80082aa:	4b9b      	ldr	r3, [pc, #620]	; (8008518 <_dtoa_r+0x618>)
 80082ac:	f006 020f 	and.w	r2, r6, #15
 80082b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	ec51 0b19 	vmov	r0, r1, d9
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	1136      	asrs	r6, r6, #4
 80082c2:	4682      	mov	sl, r0
 80082c4:	468b      	mov	fp, r1
 80082c6:	2300      	movs	r3, #0
 80082c8:	2502      	movs	r5, #2
 80082ca:	2e00      	cmp	r6, #0
 80082cc:	d17a      	bne.n	80083c4 <_dtoa_r+0x4c4>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1d3      	bne.n	800827a <_dtoa_r+0x37a>
 80082d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8082 	beq.w	80083de <_dtoa_r+0x4de>
 80082da:	4b91      	ldr	r3, [pc, #580]	; (8008520 <_dtoa_r+0x620>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4650      	mov	r0, sl
 80082e0:	4659      	mov	r1, fp
 80082e2:	f7f8 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d079      	beq.n	80083de <_dtoa_r+0x4de>
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d076      	beq.n	80083de <_dtoa_r+0x4de>
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dd36      	ble.n	8008364 <_dtoa_r+0x464>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	1e5f      	subs	r7, r3, #1
 80082fe:	2200      	movs	r2, #0
 8008300:	4b88      	ldr	r3, [pc, #544]	; (8008524 <_dtoa_r+0x624>)
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	9e02      	ldr	r6, [sp, #8]
 8008308:	4682      	mov	sl, r0
 800830a:	468b      	mov	fp, r1
 800830c:	3501      	adds	r5, #1
 800830e:	4628      	mov	r0, r5
 8008310:	f7f8 f908 	bl	8000524 <__aeabi_i2d>
 8008314:	4652      	mov	r2, sl
 8008316:	465b      	mov	r3, fp
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	4b82      	ldr	r3, [pc, #520]	; (8008528 <_dtoa_r+0x628>)
 800831e:	2200      	movs	r2, #0
 8008320:	f7f7 ffb4 	bl	800028c <__adddf3>
 8008324:	46d0      	mov	r8, sl
 8008326:	46d9      	mov	r9, fp
 8008328:	4682      	mov	sl, r0
 800832a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800832e:	2e00      	cmp	r6, #0
 8008330:	d158      	bne.n	80083e4 <_dtoa_r+0x4e4>
 8008332:	4b7e      	ldr	r3, [pc, #504]	; (800852c <_dtoa_r+0x62c>)
 8008334:	2200      	movs	r2, #0
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	f7f7 ffa5 	bl	8000288 <__aeabi_dsub>
 800833e:	4652      	mov	r2, sl
 8008340:	465b      	mov	r3, fp
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	f7f8 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800834a:	2800      	cmp	r0, #0
 800834c:	f040 8295 	bne.w	800887a <_dtoa_r+0x97a>
 8008350:	4652      	mov	r2, sl
 8008352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f7f8 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	f040 8289 	bne.w	8008876 <_dtoa_r+0x976>
 8008364:	ec5b ab19 	vmov	sl, fp, d9
 8008368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836a:	2b00      	cmp	r3, #0
 800836c:	f2c0 8148 	blt.w	8008600 <_dtoa_r+0x700>
 8008370:	9a00      	ldr	r2, [sp, #0]
 8008372:	2a0e      	cmp	r2, #14
 8008374:	f300 8144 	bgt.w	8008600 <_dtoa_r+0x700>
 8008378:	4b67      	ldr	r3, [pc, #412]	; (8008518 <_dtoa_r+0x618>)
 800837a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800837e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	f280 80d5 	bge.w	8008534 <_dtoa_r+0x634>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f300 80d1 	bgt.w	8008534 <_dtoa_r+0x634>
 8008392:	f040 826f 	bne.w	8008874 <_dtoa_r+0x974>
 8008396:	4b65      	ldr	r3, [pc, #404]	; (800852c <_dtoa_r+0x62c>)
 8008398:	2200      	movs	r2, #0
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f8 f92b 	bl	80005f8 <__aeabi_dmul>
 80083a2:	4652      	mov	r2, sl
 80083a4:	465b      	mov	r3, fp
 80083a6:	f7f8 fbad 	bl	8000b04 <__aeabi_dcmpge>
 80083aa:	9e03      	ldr	r6, [sp, #12]
 80083ac:	4637      	mov	r7, r6
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f040 8245 	bne.w	800883e <_dtoa_r+0x93e>
 80083b4:	9d01      	ldr	r5, [sp, #4]
 80083b6:	2331      	movs	r3, #49	; 0x31
 80083b8:	f805 3b01 	strb.w	r3, [r5], #1
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	3301      	adds	r3, #1
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	e240      	b.n	8008846 <_dtoa_r+0x946>
 80083c4:	07f2      	lsls	r2, r6, #31
 80083c6:	d505      	bpl.n	80083d4 <_dtoa_r+0x4d4>
 80083c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083cc:	f7f8 f914 	bl	80005f8 <__aeabi_dmul>
 80083d0:	3501      	adds	r5, #1
 80083d2:	2301      	movs	r3, #1
 80083d4:	1076      	asrs	r6, r6, #1
 80083d6:	3708      	adds	r7, #8
 80083d8:	e777      	b.n	80082ca <_dtoa_r+0x3ca>
 80083da:	2502      	movs	r5, #2
 80083dc:	e779      	b.n	80082d2 <_dtoa_r+0x3d2>
 80083de:	9f00      	ldr	r7, [sp, #0]
 80083e0:	9e03      	ldr	r6, [sp, #12]
 80083e2:	e794      	b.n	800830e <_dtoa_r+0x40e>
 80083e4:	9901      	ldr	r1, [sp, #4]
 80083e6:	4b4c      	ldr	r3, [pc, #304]	; (8008518 <_dtoa_r+0x618>)
 80083e8:	4431      	add	r1, r6
 80083ea:	910d      	str	r1, [sp, #52]	; 0x34
 80083ec:	9908      	ldr	r1, [sp, #32]
 80083ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d043      	beq.n	8008482 <_dtoa_r+0x582>
 80083fa:	494d      	ldr	r1, [pc, #308]	; (8008530 <_dtoa_r+0x630>)
 80083fc:	2000      	movs	r0, #0
 80083fe:	f7f8 fa25 	bl	800084c <__aeabi_ddiv>
 8008402:	4652      	mov	r2, sl
 8008404:	465b      	mov	r3, fp
 8008406:	f7f7 ff3f 	bl	8000288 <__aeabi_dsub>
 800840a:	9d01      	ldr	r5, [sp, #4]
 800840c:	4682      	mov	sl, r0
 800840e:	468b      	mov	fp, r1
 8008410:	4649      	mov	r1, r9
 8008412:	4640      	mov	r0, r8
 8008414:	f7f8 fba0 	bl	8000b58 <__aeabi_d2iz>
 8008418:	4606      	mov	r6, r0
 800841a:	f7f8 f883 	bl	8000524 <__aeabi_i2d>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	3630      	adds	r6, #48	; 0x30
 800842c:	f805 6b01 	strb.w	r6, [r5], #1
 8008430:	4652      	mov	r2, sl
 8008432:	465b      	mov	r3, fp
 8008434:	4680      	mov	r8, r0
 8008436:	4689      	mov	r9, r1
 8008438:	f7f8 fb50 	bl	8000adc <__aeabi_dcmplt>
 800843c:	2800      	cmp	r0, #0
 800843e:	d163      	bne.n	8008508 <_dtoa_r+0x608>
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	4936      	ldr	r1, [pc, #216]	; (8008520 <_dtoa_r+0x620>)
 8008446:	2000      	movs	r0, #0
 8008448:	f7f7 ff1e 	bl	8000288 <__aeabi_dsub>
 800844c:	4652      	mov	r2, sl
 800844e:	465b      	mov	r3, fp
 8008450:	f7f8 fb44 	bl	8000adc <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	f040 80b5 	bne.w	80085c4 <_dtoa_r+0x6c4>
 800845a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800845c:	429d      	cmp	r5, r3
 800845e:	d081      	beq.n	8008364 <_dtoa_r+0x464>
 8008460:	4b30      	ldr	r3, [pc, #192]	; (8008524 <_dtoa_r+0x624>)
 8008462:	2200      	movs	r2, #0
 8008464:	4650      	mov	r0, sl
 8008466:	4659      	mov	r1, fp
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	4b2d      	ldr	r3, [pc, #180]	; (8008524 <_dtoa_r+0x624>)
 800846e:	4682      	mov	sl, r0
 8008470:	468b      	mov	fp, r1
 8008472:	4640      	mov	r0, r8
 8008474:	4649      	mov	r1, r9
 8008476:	2200      	movs	r2, #0
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4680      	mov	r8, r0
 800847e:	4689      	mov	r9, r1
 8008480:	e7c6      	b.n	8008410 <_dtoa_r+0x510>
 8008482:	4650      	mov	r0, sl
 8008484:	4659      	mov	r1, fp
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848c:	9d01      	ldr	r5, [sp, #4]
 800848e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008490:	4682      	mov	sl, r0
 8008492:	468b      	mov	fp, r1
 8008494:	4649      	mov	r1, r9
 8008496:	4640      	mov	r0, r8
 8008498:	f7f8 fb5e 	bl	8000b58 <__aeabi_d2iz>
 800849c:	4606      	mov	r6, r0
 800849e:	f7f8 f841 	bl	8000524 <__aeabi_i2d>
 80084a2:	3630      	adds	r6, #48	; 0x30
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f7 feec 	bl	8000288 <__aeabi_dsub>
 80084b0:	f805 6b01 	strb.w	r6, [r5], #1
 80084b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b6:	429d      	cmp	r5, r3
 80084b8:	4680      	mov	r8, r0
 80084ba:	4689      	mov	r9, r1
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	d124      	bne.n	800850c <_dtoa_r+0x60c>
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <_dtoa_r+0x630>)
 80084c4:	4650      	mov	r0, sl
 80084c6:	4659      	mov	r1, fp
 80084c8:	f7f7 fee0 	bl	800028c <__adddf3>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	f7f8 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d173      	bne.n	80085c4 <_dtoa_r+0x6c4>
 80084dc:	4652      	mov	r2, sl
 80084de:	465b      	mov	r3, fp
 80084e0:	4913      	ldr	r1, [pc, #76]	; (8008530 <_dtoa_r+0x630>)
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4640      	mov	r0, r8
 80084ee:	4649      	mov	r1, r9
 80084f0:	f7f8 faf4 	bl	8000adc <__aeabi_dcmplt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43f af35 	beq.w	8008364 <_dtoa_r+0x464>
 80084fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084fc:	1e6b      	subs	r3, r5, #1
 80084fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008504:	2b30      	cmp	r3, #48	; 0x30
 8008506:	d0f8      	beq.n	80084fa <_dtoa_r+0x5fa>
 8008508:	9700      	str	r7, [sp, #0]
 800850a:	e049      	b.n	80085a0 <_dtoa_r+0x6a0>
 800850c:	4b05      	ldr	r3, [pc, #20]	; (8008524 <_dtoa_r+0x624>)
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	e7bd      	b.n	8008494 <_dtoa_r+0x594>
 8008518:	08009c80 	.word	0x08009c80
 800851c:	08009c58 	.word	0x08009c58
 8008520:	3ff00000 	.word	0x3ff00000
 8008524:	40240000 	.word	0x40240000
 8008528:	401c0000 	.word	0x401c0000
 800852c:	40140000 	.word	0x40140000
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	9d01      	ldr	r5, [sp, #4]
 8008536:	4656      	mov	r6, sl
 8008538:	465f      	mov	r7, fp
 800853a:	4642      	mov	r2, r8
 800853c:	464b      	mov	r3, r9
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f8 f983 	bl	800084c <__aeabi_ddiv>
 8008546:	f7f8 fb07 	bl	8000b58 <__aeabi_d2iz>
 800854a:	4682      	mov	sl, r0
 800854c:	f7f7 ffea 	bl	8000524 <__aeabi_i2d>
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008564:	f7f7 fe90 	bl	8000288 <__aeabi_dsub>
 8008568:	f805 6b01 	strb.w	r6, [r5], #1
 800856c:	9e01      	ldr	r6, [sp, #4]
 800856e:	9f03      	ldr	r7, [sp, #12]
 8008570:	1bae      	subs	r6, r5, r6
 8008572:	42b7      	cmp	r7, r6
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	d135      	bne.n	80085e6 <_dtoa_r+0x6e6>
 800857a:	f7f7 fe87 	bl	800028c <__adddf3>
 800857e:	4642      	mov	r2, r8
 8008580:	464b      	mov	r3, r9
 8008582:	4606      	mov	r6, r0
 8008584:	460f      	mov	r7, r1
 8008586:	f7f8 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800858a:	b9d0      	cbnz	r0, 80085c2 <_dtoa_r+0x6c2>
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f7f8 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008598:	b110      	cbz	r0, 80085a0 <_dtoa_r+0x6a0>
 800859a:	f01a 0f01 	tst.w	sl, #1
 800859e:	d110      	bne.n	80085c2 <_dtoa_r+0x6c2>
 80085a0:	4620      	mov	r0, r4
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	f000 fc2b 	bl	8008e00 <_Bfree>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9800      	ldr	r0, [sp, #0]
 80085ae:	702b      	strb	r3, [r5, #0]
 80085b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b2:	3001      	adds	r0, #1
 80085b4:	6018      	str	r0, [r3, #0]
 80085b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f43f acf1 	beq.w	8007fa0 <_dtoa_r+0xa0>
 80085be:	601d      	str	r5, [r3, #0]
 80085c0:	e4ee      	b.n	8007fa0 <_dtoa_r+0xa0>
 80085c2:	9f00      	ldr	r7, [sp, #0]
 80085c4:	462b      	mov	r3, r5
 80085c6:	461d      	mov	r5, r3
 80085c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085cc:	2a39      	cmp	r2, #57	; 0x39
 80085ce:	d106      	bne.n	80085de <_dtoa_r+0x6de>
 80085d0:	9a01      	ldr	r2, [sp, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d1f7      	bne.n	80085c6 <_dtoa_r+0x6c6>
 80085d6:	9901      	ldr	r1, [sp, #4]
 80085d8:	2230      	movs	r2, #48	; 0x30
 80085da:	3701      	adds	r7, #1
 80085dc:	700a      	strb	r2, [r1, #0]
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	3201      	adds	r2, #1
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	e790      	b.n	8008508 <_dtoa_r+0x608>
 80085e6:	4ba6      	ldr	r3, [pc, #664]	; (8008880 <_dtoa_r+0x980>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	f7f8 f805 	bl	80005f8 <__aeabi_dmul>
 80085ee:	2200      	movs	r2, #0
 80085f0:	2300      	movs	r3, #0
 80085f2:	4606      	mov	r6, r0
 80085f4:	460f      	mov	r7, r1
 80085f6:	f7f8 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d09d      	beq.n	800853a <_dtoa_r+0x63a>
 80085fe:	e7cf      	b.n	80085a0 <_dtoa_r+0x6a0>
 8008600:	9a08      	ldr	r2, [sp, #32]
 8008602:	2a00      	cmp	r2, #0
 8008604:	f000 80d7 	beq.w	80087b6 <_dtoa_r+0x8b6>
 8008608:	9a06      	ldr	r2, [sp, #24]
 800860a:	2a01      	cmp	r2, #1
 800860c:	f300 80ba 	bgt.w	8008784 <_dtoa_r+0x884>
 8008610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008612:	2a00      	cmp	r2, #0
 8008614:	f000 80b2 	beq.w	800877c <_dtoa_r+0x87c>
 8008618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800861c:	9e07      	ldr	r6, [sp, #28]
 800861e:	9d04      	ldr	r5, [sp, #16]
 8008620:	9a04      	ldr	r2, [sp, #16]
 8008622:	441a      	add	r2, r3
 8008624:	9204      	str	r2, [sp, #16]
 8008626:	9a05      	ldr	r2, [sp, #20]
 8008628:	2101      	movs	r1, #1
 800862a:	441a      	add	r2, r3
 800862c:	4620      	mov	r0, r4
 800862e:	9205      	str	r2, [sp, #20]
 8008630:	f000 fc9e 	bl	8008f70 <__i2b>
 8008634:	4607      	mov	r7, r0
 8008636:	2d00      	cmp	r5, #0
 8008638:	dd0c      	ble.n	8008654 <_dtoa_r+0x754>
 800863a:	9b05      	ldr	r3, [sp, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd09      	ble.n	8008654 <_dtoa_r+0x754>
 8008640:	42ab      	cmp	r3, r5
 8008642:	9a04      	ldr	r2, [sp, #16]
 8008644:	bfa8      	it	ge
 8008646:	462b      	movge	r3, r5
 8008648:	1ad2      	subs	r2, r2, r3
 800864a:	9204      	str	r2, [sp, #16]
 800864c:	9a05      	ldr	r2, [sp, #20]
 800864e:	1aed      	subs	r5, r5, r3
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	b31b      	cbz	r3, 80086a0 <_dtoa_r+0x7a0>
 8008658:	9b08      	ldr	r3, [sp, #32]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 80af 	beq.w	80087be <_dtoa_r+0x8be>
 8008660:	2e00      	cmp	r6, #0
 8008662:	dd13      	ble.n	800868c <_dtoa_r+0x78c>
 8008664:	4639      	mov	r1, r7
 8008666:	4632      	mov	r2, r6
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fd41 	bl	80090f0 <__pow5mult>
 800866e:	ee18 2a10 	vmov	r2, s16
 8008672:	4601      	mov	r1, r0
 8008674:	4607      	mov	r7, r0
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fc90 	bl	8008f9c <__multiply>
 800867c:	ee18 1a10 	vmov	r1, s16
 8008680:	4680      	mov	r8, r0
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fbbc 	bl	8008e00 <_Bfree>
 8008688:	ee08 8a10 	vmov	s16, r8
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	1b9a      	subs	r2, r3, r6
 8008690:	d006      	beq.n	80086a0 <_dtoa_r+0x7a0>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	4620      	mov	r0, r4
 8008698:	f000 fd2a 	bl	80090f0 <__pow5mult>
 800869c:	ee08 0a10 	vmov	s16, r0
 80086a0:	2101      	movs	r1, #1
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 fc64 	bl	8008f70 <__i2b>
 80086a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	4606      	mov	r6, r0
 80086ae:	f340 8088 	ble.w	80087c2 <_dtoa_r+0x8c2>
 80086b2:	461a      	mov	r2, r3
 80086b4:	4601      	mov	r1, r0
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fd1a 	bl	80090f0 <__pow5mult>
 80086bc:	9b06      	ldr	r3, [sp, #24]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	4606      	mov	r6, r0
 80086c2:	f340 8081 	ble.w	80087c8 <_dtoa_r+0x8c8>
 80086c6:	f04f 0800 	mov.w	r8, #0
 80086ca:	6933      	ldr	r3, [r6, #16]
 80086cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086d0:	6918      	ldr	r0, [r3, #16]
 80086d2:	f000 fbfd 	bl	8008ed0 <__hi0bits>
 80086d6:	f1c0 0020 	rsb	r0, r0, #32
 80086da:	9b05      	ldr	r3, [sp, #20]
 80086dc:	4418      	add	r0, r3
 80086de:	f010 001f 	ands.w	r0, r0, #31
 80086e2:	f000 8092 	beq.w	800880a <_dtoa_r+0x90a>
 80086e6:	f1c0 0320 	rsb	r3, r0, #32
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	f340 808a 	ble.w	8008804 <_dtoa_r+0x904>
 80086f0:	f1c0 001c 	rsb	r0, r0, #28
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	4403      	add	r3, r0
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	4403      	add	r3, r0
 80086fe:	4405      	add	r5, r0
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd07      	ble.n	8008718 <_dtoa_r+0x818>
 8008708:	ee18 1a10 	vmov	r1, s16
 800870c:	461a      	mov	r2, r3
 800870e:	4620      	mov	r0, r4
 8008710:	f000 fd48 	bl	80091a4 <__lshift>
 8008714:	ee08 0a10 	vmov	s16, r0
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd05      	ble.n	800872a <_dtoa_r+0x82a>
 800871e:	4631      	mov	r1, r6
 8008720:	461a      	mov	r2, r3
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fd3e 	bl	80091a4 <__lshift>
 8008728:	4606      	mov	r6, r0
 800872a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d06e      	beq.n	800880e <_dtoa_r+0x90e>
 8008730:	ee18 0a10 	vmov	r0, s16
 8008734:	4631      	mov	r1, r6
 8008736:	f000 fda5 	bl	8009284 <__mcmp>
 800873a:	2800      	cmp	r0, #0
 800873c:	da67      	bge.n	800880e <_dtoa_r+0x90e>
 800873e:	9b00      	ldr	r3, [sp, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	ee18 1a10 	vmov	r1, s16
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	220a      	movs	r2, #10
 800874a:	2300      	movs	r3, #0
 800874c:	4620      	mov	r0, r4
 800874e:	f000 fb79 	bl	8008e44 <__multadd>
 8008752:	9b08      	ldr	r3, [sp, #32]
 8008754:	ee08 0a10 	vmov	s16, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 81b1 	beq.w	8008ac0 <_dtoa_r+0xbc0>
 800875e:	2300      	movs	r3, #0
 8008760:	4639      	mov	r1, r7
 8008762:	220a      	movs	r2, #10
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fb6d 	bl	8008e44 <__multadd>
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	4607      	mov	r7, r0
 8008770:	f300 808e 	bgt.w	8008890 <_dtoa_r+0x990>
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	2b02      	cmp	r3, #2
 8008778:	dc51      	bgt.n	800881e <_dtoa_r+0x91e>
 800877a:	e089      	b.n	8008890 <_dtoa_r+0x990>
 800877c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800877e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008782:	e74b      	b.n	800861c <_dtoa_r+0x71c>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	1e5e      	subs	r6, r3, #1
 8008788:	9b07      	ldr	r3, [sp, #28]
 800878a:	42b3      	cmp	r3, r6
 800878c:	bfbf      	itttt	lt
 800878e:	9b07      	ldrlt	r3, [sp, #28]
 8008790:	9607      	strlt	r6, [sp, #28]
 8008792:	1af2      	sublt	r2, r6, r3
 8008794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008796:	bfb6      	itet	lt
 8008798:	189b      	addlt	r3, r3, r2
 800879a:	1b9e      	subge	r6, r3, r6
 800879c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	bfb8      	it	lt
 80087a2:	2600      	movlt	r6, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bfb7      	itett	lt
 80087a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087b0:	1a9d      	sublt	r5, r3, r2
 80087b2:	2300      	movlt	r3, #0
 80087b4:	e734      	b.n	8008620 <_dtoa_r+0x720>
 80087b6:	9e07      	ldr	r6, [sp, #28]
 80087b8:	9d04      	ldr	r5, [sp, #16]
 80087ba:	9f08      	ldr	r7, [sp, #32]
 80087bc:	e73b      	b.n	8008636 <_dtoa_r+0x736>
 80087be:	9a07      	ldr	r2, [sp, #28]
 80087c0:	e767      	b.n	8008692 <_dtoa_r+0x792>
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	dc18      	bgt.n	80087fa <_dtoa_r+0x8fa>
 80087c8:	f1ba 0f00 	cmp.w	sl, #0
 80087cc:	d115      	bne.n	80087fa <_dtoa_r+0x8fa>
 80087ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087d2:	b993      	cbnz	r3, 80087fa <_dtoa_r+0x8fa>
 80087d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087d8:	0d1b      	lsrs	r3, r3, #20
 80087da:	051b      	lsls	r3, r3, #20
 80087dc:	b183      	cbz	r3, 8008800 <_dtoa_r+0x900>
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	3301      	adds	r3, #1
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	3301      	adds	r3, #1
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	f04f 0801 	mov.w	r8, #1
 80087ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af6a 	bne.w	80086ca <_dtoa_r+0x7ca>
 80087f6:	2001      	movs	r0, #1
 80087f8:	e76f      	b.n	80086da <_dtoa_r+0x7da>
 80087fa:	f04f 0800 	mov.w	r8, #0
 80087fe:	e7f6      	b.n	80087ee <_dtoa_r+0x8ee>
 8008800:	4698      	mov	r8, r3
 8008802:	e7f4      	b.n	80087ee <_dtoa_r+0x8ee>
 8008804:	f43f af7d 	beq.w	8008702 <_dtoa_r+0x802>
 8008808:	4618      	mov	r0, r3
 800880a:	301c      	adds	r0, #28
 800880c:	e772      	b.n	80086f4 <_dtoa_r+0x7f4>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc37      	bgt.n	8008884 <_dtoa_r+0x984>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	2b02      	cmp	r3, #2
 8008818:	dd34      	ble.n	8008884 <_dtoa_r+0x984>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	b96b      	cbnz	r3, 800883e <_dtoa_r+0x93e>
 8008822:	4631      	mov	r1, r6
 8008824:	2205      	movs	r2, #5
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fb0c 	bl	8008e44 <__multadd>
 800882c:	4601      	mov	r1, r0
 800882e:	4606      	mov	r6, r0
 8008830:	ee18 0a10 	vmov	r0, s16
 8008834:	f000 fd26 	bl	8009284 <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	f73f adbb 	bgt.w	80083b4 <_dtoa_r+0x4b4>
 800883e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008840:	9d01      	ldr	r5, [sp, #4]
 8008842:	43db      	mvns	r3, r3
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	f04f 0800 	mov.w	r8, #0
 800884a:	4631      	mov	r1, r6
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fad7 	bl	8008e00 <_Bfree>
 8008852:	2f00      	cmp	r7, #0
 8008854:	f43f aea4 	beq.w	80085a0 <_dtoa_r+0x6a0>
 8008858:	f1b8 0f00 	cmp.w	r8, #0
 800885c:	d005      	beq.n	800886a <_dtoa_r+0x96a>
 800885e:	45b8      	cmp	r8, r7
 8008860:	d003      	beq.n	800886a <_dtoa_r+0x96a>
 8008862:	4641      	mov	r1, r8
 8008864:	4620      	mov	r0, r4
 8008866:	f000 facb 	bl	8008e00 <_Bfree>
 800886a:	4639      	mov	r1, r7
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fac7 	bl	8008e00 <_Bfree>
 8008872:	e695      	b.n	80085a0 <_dtoa_r+0x6a0>
 8008874:	2600      	movs	r6, #0
 8008876:	4637      	mov	r7, r6
 8008878:	e7e1      	b.n	800883e <_dtoa_r+0x93e>
 800887a:	9700      	str	r7, [sp, #0]
 800887c:	4637      	mov	r7, r6
 800887e:	e599      	b.n	80083b4 <_dtoa_r+0x4b4>
 8008880:	40240000 	.word	0x40240000
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80ca 	beq.w	8008a20 <_dtoa_r+0xb20>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	2d00      	cmp	r5, #0
 8008892:	dd05      	ble.n	80088a0 <_dtoa_r+0x9a0>
 8008894:	4639      	mov	r1, r7
 8008896:	462a      	mov	r2, r5
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fc83 	bl	80091a4 <__lshift>
 800889e:	4607      	mov	r7, r0
 80088a0:	f1b8 0f00 	cmp.w	r8, #0
 80088a4:	d05b      	beq.n	800895e <_dtoa_r+0xa5e>
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fa69 	bl	8008d80 <_Balloc>
 80088ae:	4605      	mov	r5, r0
 80088b0:	b928      	cbnz	r0, 80088be <_dtoa_r+0x9be>
 80088b2:	4b87      	ldr	r3, [pc, #540]	; (8008ad0 <_dtoa_r+0xbd0>)
 80088b4:	4602      	mov	r2, r0
 80088b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088ba:	f7ff bb3b 	b.w	8007f34 <_dtoa_r+0x34>
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	3202      	adds	r2, #2
 80088c2:	0092      	lsls	r2, r2, #2
 80088c4:	f107 010c 	add.w	r1, r7, #12
 80088c8:	300c      	adds	r0, #12
 80088ca:	f7fe fb62 	bl	8006f92 <memcpy>
 80088ce:	2201      	movs	r2, #1
 80088d0:	4629      	mov	r1, r5
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fc66 	bl	80091a4 <__lshift>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	f103 0901 	add.w	r9, r3, #1
 80088de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088e2:	4413      	add	r3, r2
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	f00a 0301 	and.w	r3, sl, #1
 80088ea:	46b8      	mov	r8, r7
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	4607      	mov	r7, r0
 80088f0:	4631      	mov	r1, r6
 80088f2:	ee18 0a10 	vmov	r0, s16
 80088f6:	f7ff fa77 	bl	8007de8 <quorem>
 80088fa:	4641      	mov	r1, r8
 80088fc:	9002      	str	r0, [sp, #8]
 80088fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008902:	ee18 0a10 	vmov	r0, s16
 8008906:	f000 fcbd 	bl	8009284 <__mcmp>
 800890a:	463a      	mov	r2, r7
 800890c:	9003      	str	r0, [sp, #12]
 800890e:	4631      	mov	r1, r6
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fcd3 	bl	80092bc <__mdiff>
 8008916:	68c2      	ldr	r2, [r0, #12]
 8008918:	f109 3bff 	add.w	fp, r9, #4294967295
 800891c:	4605      	mov	r5, r0
 800891e:	bb02      	cbnz	r2, 8008962 <_dtoa_r+0xa62>
 8008920:	4601      	mov	r1, r0
 8008922:	ee18 0a10 	vmov	r0, s16
 8008926:	f000 fcad 	bl	8009284 <__mcmp>
 800892a:	4602      	mov	r2, r0
 800892c:	4629      	mov	r1, r5
 800892e:	4620      	mov	r0, r4
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	f000 fa65 	bl	8008e00 <_Bfree>
 8008936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800893a:	ea43 0102 	orr.w	r1, r3, r2
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	430b      	orrs	r3, r1
 8008942:	464d      	mov	r5, r9
 8008944:	d10f      	bne.n	8008966 <_dtoa_r+0xa66>
 8008946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800894a:	d02a      	beq.n	80089a2 <_dtoa_r+0xaa2>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	dd02      	ble.n	8008958 <_dtoa_r+0xa58>
 8008952:	9b02      	ldr	r3, [sp, #8]
 8008954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008958:	f88b a000 	strb.w	sl, [fp]
 800895c:	e775      	b.n	800884a <_dtoa_r+0x94a>
 800895e:	4638      	mov	r0, r7
 8008960:	e7ba      	b.n	80088d8 <_dtoa_r+0x9d8>
 8008962:	2201      	movs	r2, #1
 8008964:	e7e2      	b.n	800892c <_dtoa_r+0xa2c>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	db04      	blt.n	8008976 <_dtoa_r+0xa76>
 800896c:	9906      	ldr	r1, [sp, #24]
 800896e:	430b      	orrs	r3, r1
 8008970:	9904      	ldr	r1, [sp, #16]
 8008972:	430b      	orrs	r3, r1
 8008974:	d122      	bne.n	80089bc <_dtoa_r+0xabc>
 8008976:	2a00      	cmp	r2, #0
 8008978:	ddee      	ble.n	8008958 <_dtoa_r+0xa58>
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fc0f 	bl	80091a4 <__lshift>
 8008986:	4631      	mov	r1, r6
 8008988:	ee08 0a10 	vmov	s16, r0
 800898c:	f000 fc7a 	bl	8009284 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dc03      	bgt.n	800899c <_dtoa_r+0xa9c>
 8008994:	d1e0      	bne.n	8008958 <_dtoa_r+0xa58>
 8008996:	f01a 0f01 	tst.w	sl, #1
 800899a:	d0dd      	beq.n	8008958 <_dtoa_r+0xa58>
 800899c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089a0:	d1d7      	bne.n	8008952 <_dtoa_r+0xa52>
 80089a2:	2339      	movs	r3, #57	; 0x39
 80089a4:	f88b 3000 	strb.w	r3, [fp]
 80089a8:	462b      	mov	r3, r5
 80089aa:	461d      	mov	r5, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089b2:	2a39      	cmp	r2, #57	; 0x39
 80089b4:	d071      	beq.n	8008a9a <_dtoa_r+0xb9a>
 80089b6:	3201      	adds	r2, #1
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	e746      	b.n	800884a <_dtoa_r+0x94a>
 80089bc:	2a00      	cmp	r2, #0
 80089be:	dd07      	ble.n	80089d0 <_dtoa_r+0xad0>
 80089c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089c4:	d0ed      	beq.n	80089a2 <_dtoa_r+0xaa2>
 80089c6:	f10a 0301 	add.w	r3, sl, #1
 80089ca:	f88b 3000 	strb.w	r3, [fp]
 80089ce:	e73c      	b.n	800884a <_dtoa_r+0x94a>
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089d6:	4599      	cmp	r9, r3
 80089d8:	d047      	beq.n	8008a6a <_dtoa_r+0xb6a>
 80089da:	ee18 1a10 	vmov	r1, s16
 80089de:	2300      	movs	r3, #0
 80089e0:	220a      	movs	r2, #10
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fa2e 	bl	8008e44 <__multadd>
 80089e8:	45b8      	cmp	r8, r7
 80089ea:	ee08 0a10 	vmov	s16, r0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	f04f 020a 	mov.w	r2, #10
 80089f6:	4641      	mov	r1, r8
 80089f8:	4620      	mov	r0, r4
 80089fa:	d106      	bne.n	8008a0a <_dtoa_r+0xb0a>
 80089fc:	f000 fa22 	bl	8008e44 <__multadd>
 8008a00:	4680      	mov	r8, r0
 8008a02:	4607      	mov	r7, r0
 8008a04:	f109 0901 	add.w	r9, r9, #1
 8008a08:	e772      	b.n	80088f0 <_dtoa_r+0x9f0>
 8008a0a:	f000 fa1b 	bl	8008e44 <__multadd>
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4680      	mov	r8, r0
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fa14 	bl	8008e44 <__multadd>
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	e7f1      	b.n	8008a04 <_dtoa_r+0xb04>
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	9302      	str	r3, [sp, #8]
 8008a24:	9d01      	ldr	r5, [sp, #4]
 8008a26:	ee18 0a10 	vmov	r0, s16
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	f7ff f9dc 	bl	8007de8 <quorem>
 8008a30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a34:	9b01      	ldr	r3, [sp, #4]
 8008a36:	f805 ab01 	strb.w	sl, [r5], #1
 8008a3a:	1aea      	subs	r2, r5, r3
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	dd09      	ble.n	8008a56 <_dtoa_r+0xb56>
 8008a42:	ee18 1a10 	vmov	r1, s16
 8008a46:	2300      	movs	r3, #0
 8008a48:	220a      	movs	r2, #10
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 f9fa 	bl	8008e44 <__multadd>
 8008a50:	ee08 0a10 	vmov	s16, r0
 8008a54:	e7e7      	b.n	8008a26 <_dtoa_r+0xb26>
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfc8      	it	gt
 8008a5c:	461d      	movgt	r5, r3
 8008a5e:	9b01      	ldr	r3, [sp, #4]
 8008a60:	bfd8      	it	le
 8008a62:	2501      	movle	r5, #1
 8008a64:	441d      	add	r5, r3
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	ee18 1a10 	vmov	r1, s16
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fb97 	bl	80091a4 <__lshift>
 8008a76:	4631      	mov	r1, r6
 8008a78:	ee08 0a10 	vmov	s16, r0
 8008a7c:	f000 fc02 	bl	8009284 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	dc91      	bgt.n	80089a8 <_dtoa_r+0xaa8>
 8008a84:	d102      	bne.n	8008a8c <_dtoa_r+0xb8c>
 8008a86:	f01a 0f01 	tst.w	sl, #1
 8008a8a:	d18d      	bne.n	80089a8 <_dtoa_r+0xaa8>
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	461d      	mov	r5, r3
 8008a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a94:	2a30      	cmp	r2, #48	; 0x30
 8008a96:	d0fa      	beq.n	8008a8e <_dtoa_r+0xb8e>
 8008a98:	e6d7      	b.n	800884a <_dtoa_r+0x94a>
 8008a9a:	9a01      	ldr	r2, [sp, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d184      	bne.n	80089aa <_dtoa_r+0xaaa>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	2331      	movs	r3, #49	; 0x31
 8008aa8:	7013      	strb	r3, [r2, #0]
 8008aaa:	e6ce      	b.n	800884a <_dtoa_r+0x94a>
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <_dtoa_r+0xbd4>)
 8008aae:	f7ff ba95 	b.w	8007fdc <_dtoa_r+0xdc>
 8008ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f aa6e 	bne.w	8007f96 <_dtoa_r+0x96>
 8008aba:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <_dtoa_r+0xbd8>)
 8008abc:	f7ff ba8e 	b.w	8007fdc <_dtoa_r+0xdc>
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dcae      	bgt.n	8008a24 <_dtoa_r+0xb24>
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	f73f aea8 	bgt.w	800881e <_dtoa_r+0x91e>
 8008ace:	e7a9      	b.n	8008a24 <_dtoa_r+0xb24>
 8008ad0:	08009be7 	.word	0x08009be7
 8008ad4:	08009b44 	.word	0x08009b44
 8008ad8:	08009b68 	.word	0x08009b68

08008adc <__sflush_r>:
 8008adc:	898a      	ldrh	r2, [r1, #12]
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	0710      	lsls	r0, r2, #28
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	d458      	bmi.n	8008b9c <__sflush_r+0xc0>
 8008aea:	684b      	ldr	r3, [r1, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dc05      	bgt.n	8008afc <__sflush_r+0x20>
 8008af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dc02      	bgt.n	8008afc <__sflush_r+0x20>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	d0f9      	beq.n	8008af6 <__sflush_r+0x1a>
 8008b02:	2300      	movs	r3, #0
 8008b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b08:	682f      	ldr	r7, [r5, #0]
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	d032      	beq.n	8008b74 <__sflush_r+0x98>
 8008b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	075a      	lsls	r2, r3, #29
 8008b14:	d505      	bpl.n	8008b22 <__sflush_r+0x46>
 8008b16:	6863      	ldr	r3, [r4, #4]
 8008b18:	1ac0      	subs	r0, r0, r3
 8008b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b1c:	b10b      	cbz	r3, 8008b22 <__sflush_r+0x46>
 8008b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b20:	1ac0      	subs	r0, r0, r3
 8008b22:	2300      	movs	r3, #0
 8008b24:	4602      	mov	r2, r0
 8008b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b28:	6a21      	ldr	r1, [r4, #32]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b0      	blx	r6
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	d106      	bne.n	8008b42 <__sflush_r+0x66>
 8008b34:	6829      	ldr	r1, [r5, #0]
 8008b36:	291d      	cmp	r1, #29
 8008b38:	d82c      	bhi.n	8008b94 <__sflush_r+0xb8>
 8008b3a:	4a2a      	ldr	r2, [pc, #168]	; (8008be4 <__sflush_r+0x108>)
 8008b3c:	40ca      	lsrs	r2, r1
 8008b3e:	07d6      	lsls	r6, r2, #31
 8008b40:	d528      	bpl.n	8008b94 <__sflush_r+0xb8>
 8008b42:	2200      	movs	r2, #0
 8008b44:	6062      	str	r2, [r4, #4]
 8008b46:	04d9      	lsls	r1, r3, #19
 8008b48:	6922      	ldr	r2, [r4, #16]
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	d504      	bpl.n	8008b58 <__sflush_r+0x7c>
 8008b4e:	1c42      	adds	r2, r0, #1
 8008b50:	d101      	bne.n	8008b56 <__sflush_r+0x7a>
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	b903      	cbnz	r3, 8008b58 <__sflush_r+0x7c>
 8008b56:	6560      	str	r0, [r4, #84]	; 0x54
 8008b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5a:	602f      	str	r7, [r5, #0]
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	d0ca      	beq.n	8008af6 <__sflush_r+0x1a>
 8008b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b64:	4299      	cmp	r1, r3
 8008b66:	d002      	beq.n	8008b6e <__sflush_r+0x92>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f000 fca3 	bl	80094b4 <_free_r>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	6360      	str	r0, [r4, #52]	; 0x34
 8008b72:	e7c1      	b.n	8008af8 <__sflush_r+0x1c>
 8008b74:	6a21      	ldr	r1, [r4, #32]
 8008b76:	2301      	movs	r3, #1
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	1c41      	adds	r1, r0, #1
 8008b7e:	d1c7      	bne.n	8008b10 <__sflush_r+0x34>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0c4      	beq.n	8008b10 <__sflush_r+0x34>
 8008b86:	2b1d      	cmp	r3, #29
 8008b88:	d001      	beq.n	8008b8e <__sflush_r+0xb2>
 8008b8a:	2b16      	cmp	r3, #22
 8008b8c:	d101      	bne.n	8008b92 <__sflush_r+0xb6>
 8008b8e:	602f      	str	r7, [r5, #0]
 8008b90:	e7b1      	b.n	8008af6 <__sflush_r+0x1a>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	e7ad      	b.n	8008af8 <__sflush_r+0x1c>
 8008b9c:	690f      	ldr	r7, [r1, #16]
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	d0a9      	beq.n	8008af6 <__sflush_r+0x1a>
 8008ba2:	0793      	lsls	r3, r2, #30
 8008ba4:	680e      	ldr	r6, [r1, #0]
 8008ba6:	bf08      	it	eq
 8008ba8:	694b      	ldreq	r3, [r1, #20]
 8008baa:	600f      	str	r7, [r1, #0]
 8008bac:	bf18      	it	ne
 8008bae:	2300      	movne	r3, #0
 8008bb0:	eba6 0807 	sub.w	r8, r6, r7
 8008bb4:	608b      	str	r3, [r1, #8]
 8008bb6:	f1b8 0f00 	cmp.w	r8, #0
 8008bba:	dd9c      	ble.n	8008af6 <__sflush_r+0x1a>
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bc0:	4643      	mov	r3, r8
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b0      	blx	r6
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dc06      	bgt.n	8008bda <__sflush_r+0xfe>
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	e78e      	b.n	8008af8 <__sflush_r+0x1c>
 8008bda:	4407      	add	r7, r0
 8008bdc:	eba8 0800 	sub.w	r8, r8, r0
 8008be0:	e7e9      	b.n	8008bb6 <__sflush_r+0xda>
 8008be2:	bf00      	nop
 8008be4:	20400001 	.word	0x20400001

08008be8 <_fflush_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	690b      	ldr	r3, [r1, #16]
 8008bec:	4605      	mov	r5, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_fflush_r+0x10>
 8008bf2:	2500      	movs	r5, #0
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	b118      	cbz	r0, 8008c02 <_fflush_r+0x1a>
 8008bfa:	6983      	ldr	r3, [r0, #24]
 8008bfc:	b90b      	cbnz	r3, 8008c02 <_fflush_r+0x1a>
 8008bfe:	f7fe f903 	bl	8006e08 <__sinit>
 8008c02:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <_fflush_r+0x6c>)
 8008c04:	429c      	cmp	r4, r3
 8008c06:	d11b      	bne.n	8008c40 <_fflush_r+0x58>
 8008c08:	686c      	ldr	r4, [r5, #4]
 8008c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0ef      	beq.n	8008bf2 <_fflush_r+0xa>
 8008c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c14:	07d0      	lsls	r0, r2, #31
 8008c16:	d404      	bmi.n	8008c22 <_fflush_r+0x3a>
 8008c18:	0599      	lsls	r1, r3, #22
 8008c1a:	d402      	bmi.n	8008c22 <_fflush_r+0x3a>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1e:	f7fe f9b6 	bl	8006f8e <__retarget_lock_acquire_recursive>
 8008c22:	4628      	mov	r0, r5
 8008c24:	4621      	mov	r1, r4
 8008c26:	f7ff ff59 	bl	8008adc <__sflush_r>
 8008c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c2c:	07da      	lsls	r2, r3, #31
 8008c2e:	4605      	mov	r5, r0
 8008c30:	d4e0      	bmi.n	8008bf4 <_fflush_r+0xc>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	059b      	lsls	r3, r3, #22
 8008c36:	d4dd      	bmi.n	8008bf4 <_fflush_r+0xc>
 8008c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c3a:	f7fe f9a9 	bl	8006f90 <__retarget_lock_release_recursive>
 8008c3e:	e7d9      	b.n	8008bf4 <_fflush_r+0xc>
 8008c40:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <_fflush_r+0x70>)
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d101      	bne.n	8008c4a <_fflush_r+0x62>
 8008c46:	68ac      	ldr	r4, [r5, #8]
 8008c48:	e7df      	b.n	8008c0a <_fflush_r+0x22>
 8008c4a:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <_fflush_r+0x74>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	bf08      	it	eq
 8008c50:	68ec      	ldreq	r4, [r5, #12]
 8008c52:	e7da      	b.n	8008c0a <_fflush_r+0x22>
 8008c54:	08009af0 	.word	0x08009af0
 8008c58:	08009b10 	.word	0x08009b10
 8008c5c:	08009ad0 	.word	0x08009ad0

08008c60 <_localeconv_r>:
 8008c60:	4800      	ldr	r0, [pc, #0]	; (8008c64 <_localeconv_r+0x4>)
 8008c62:	4770      	bx	lr
 8008c64:	20000164 	.word	0x20000164

08008c68 <_lseek_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d07      	ldr	r5, [pc, #28]	; (8008c88 <_lseek_r+0x20>)
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f7f8 fd88 	bl	800178c <_lseek>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_lseek_r+0x1e>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_lseek_r+0x1e>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20001de0 	.word	0x20001de0

08008c8c <__swhatbuf_r>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	460e      	mov	r6, r1
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	2900      	cmp	r1, #0
 8008c96:	b096      	sub	sp, #88	; 0x58
 8008c98:	4614      	mov	r4, r2
 8008c9a:	461d      	mov	r5, r3
 8008c9c:	da08      	bge.n	8008cb0 <__swhatbuf_r+0x24>
 8008c9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	061a      	lsls	r2, r3, #24
 8008ca8:	d410      	bmi.n	8008ccc <__swhatbuf_r+0x40>
 8008caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cae:	e00e      	b.n	8008cce <__swhatbuf_r+0x42>
 8008cb0:	466a      	mov	r2, sp
 8008cb2:	f000 fc8d 	bl	80095d0 <_fstat_r>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	dbf1      	blt.n	8008c9e <__swhatbuf_r+0x12>
 8008cba:	9a01      	ldr	r2, [sp, #4]
 8008cbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cc4:	425a      	negs	r2, r3
 8008cc6:	415a      	adcs	r2, r3
 8008cc8:	602a      	str	r2, [r5, #0]
 8008cca:	e7ee      	b.n	8008caa <__swhatbuf_r+0x1e>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	2000      	movs	r0, #0
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	b016      	add	sp, #88	; 0x58
 8008cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cd8 <__smakebuf_r>:
 8008cd8:	898b      	ldrh	r3, [r1, #12]
 8008cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cdc:	079d      	lsls	r5, r3, #30
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	d507      	bpl.n	8008cf4 <__smakebuf_r+0x1c>
 8008ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	2301      	movs	r3, #1
 8008cee:	6163      	str	r3, [r4, #20]
 8008cf0:	b002      	add	sp, #8
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	ab01      	add	r3, sp, #4
 8008cf6:	466a      	mov	r2, sp
 8008cf8:	f7ff ffc8 	bl	8008c8c <__swhatbuf_r>
 8008cfc:	9900      	ldr	r1, [sp, #0]
 8008cfe:	4605      	mov	r5, r0
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7fe f97d 	bl	8007000 <_malloc_r>
 8008d06:	b948      	cbnz	r0, 8008d1c <__smakebuf_r+0x44>
 8008d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0c:	059a      	lsls	r2, r3, #22
 8008d0e:	d4ef      	bmi.n	8008cf0 <__smakebuf_r+0x18>
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	f043 0302 	orr.w	r3, r3, #2
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	e7e3      	b.n	8008ce4 <__smakebuf_r+0xc>
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <__smakebuf_r+0x7c>)
 8008d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	6020      	str	r0, [r4, #0]
 8008d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	6163      	str	r3, [r4, #20]
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	6120      	str	r0, [r4, #16]
 8008d32:	b15b      	cbz	r3, 8008d4c <__smakebuf_r+0x74>
 8008d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f000 fc5b 	bl	80095f4 <_isatty_r>
 8008d3e:	b128      	cbz	r0, 8008d4c <__smakebuf_r+0x74>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	89a0      	ldrh	r0, [r4, #12]
 8008d4e:	4305      	orrs	r5, r0
 8008d50:	81a5      	strh	r5, [r4, #12]
 8008d52:	e7cd      	b.n	8008cf0 <__smakebuf_r+0x18>
 8008d54:	08006da1 	.word	0x08006da1

08008d58 <malloc>:
 8008d58:	4b02      	ldr	r3, [pc, #8]	; (8008d64 <malloc+0xc>)
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	f7fe b94f 	b.w	8007000 <_malloc_r>
 8008d62:	bf00      	nop
 8008d64:	20000010 	.word	0x20000010

08008d68 <__malloc_lock>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__malloc_lock+0x8>)
 8008d6a:	f7fe b910 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20001dd4 	.word	0x20001dd4

08008d74 <__malloc_unlock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_unlock+0x8>)
 8008d76:	f7fe b90b 	b.w	8006f90 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20001dd4 	.word	0x20001dd4

08008d80 <_Balloc>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d84:	4604      	mov	r4, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	b976      	cbnz	r6, 8008da8 <_Balloc+0x28>
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	f7ff ffe4 	bl	8008d58 <malloc>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6260      	str	r0, [r4, #36]	; 0x24
 8008d94:	b920      	cbnz	r0, 8008da0 <_Balloc+0x20>
 8008d96:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <_Balloc+0x78>)
 8008d98:	4818      	ldr	r0, [pc, #96]	; (8008dfc <_Balloc+0x7c>)
 8008d9a:	2166      	movs	r1, #102	; 0x66
 8008d9c:	f000 fbe8 	bl	8009570 <__assert_func>
 8008da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da4:	6006      	str	r6, [r0, #0]
 8008da6:	60c6      	str	r6, [r0, #12]
 8008da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008daa:	68f3      	ldr	r3, [r6, #12]
 8008dac:	b183      	cbz	r3, 8008dd0 <_Balloc+0x50>
 8008dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008db6:	b9b8      	cbnz	r0, 8008de8 <_Balloc+0x68>
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f605 	lsl.w	r6, r1, r5
 8008dbe:	1d72      	adds	r2, r6, #5
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fb60 	bl	8009488 <_calloc_r>
 8008dc8:	b160      	cbz	r0, 8008de4 <_Balloc+0x64>
 8008dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dce:	e00e      	b.n	8008dee <_Balloc+0x6e>
 8008dd0:	2221      	movs	r2, #33	; 0x21
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fb57 	bl	8009488 <_calloc_r>
 8008dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ddc:	60f0      	str	r0, [r6, #12]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <_Balloc+0x2e>
 8008de4:	2000      	movs	r0, #0
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	6802      	ldr	r2, [r0, #0]
 8008dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dee:	2300      	movs	r3, #0
 8008df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008df4:	e7f7      	b.n	8008de6 <_Balloc+0x66>
 8008df6:	bf00      	nop
 8008df8:	08009b75 	.word	0x08009b75
 8008dfc:	08009bf8 	.word	0x08009bf8

08008e00 <_Bfree>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e04:	4605      	mov	r5, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	b976      	cbnz	r6, 8008e28 <_Bfree+0x28>
 8008e0a:	2010      	movs	r0, #16
 8008e0c:	f7ff ffa4 	bl	8008d58 <malloc>
 8008e10:	4602      	mov	r2, r0
 8008e12:	6268      	str	r0, [r5, #36]	; 0x24
 8008e14:	b920      	cbnz	r0, 8008e20 <_Bfree+0x20>
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <_Bfree+0x3c>)
 8008e18:	4809      	ldr	r0, [pc, #36]	; (8008e40 <_Bfree+0x40>)
 8008e1a:	218a      	movs	r1, #138	; 0x8a
 8008e1c:	f000 fba8 	bl	8009570 <__assert_func>
 8008e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e24:	6006      	str	r6, [r0, #0]
 8008e26:	60c6      	str	r6, [r0, #12]
 8008e28:	b13c      	cbz	r4, 8008e3a <_Bfree+0x3a>
 8008e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e2c:	6862      	ldr	r2, [r4, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e34:	6021      	str	r1, [r4, #0]
 8008e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	08009b75 	.word	0x08009b75
 8008e40:	08009bf8 	.word	0x08009bf8

08008e44 <__multadd>:
 8008e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e48:	690d      	ldr	r5, [r1, #16]
 8008e4a:	4607      	mov	r7, r0
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	461e      	mov	r6, r3
 8008e50:	f101 0c14 	add.w	ip, r1, #20
 8008e54:	2000      	movs	r0, #0
 8008e56:	f8dc 3000 	ldr.w	r3, [ip]
 8008e5a:	b299      	uxth	r1, r3
 8008e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e60:	0c1e      	lsrs	r6, r3, #16
 8008e62:	0c0b      	lsrs	r3, r1, #16
 8008e64:	fb02 3306 	mla	r3, r2, r6, r3
 8008e68:	b289      	uxth	r1, r1
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e70:	4285      	cmp	r5, r0
 8008e72:	f84c 1b04 	str.w	r1, [ip], #4
 8008e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e7a:	dcec      	bgt.n	8008e56 <__multadd+0x12>
 8008e7c:	b30e      	cbz	r6, 8008ec2 <__multadd+0x7e>
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	dc19      	bgt.n	8008eb8 <__multadd+0x74>
 8008e84:	6861      	ldr	r1, [r4, #4]
 8008e86:	4638      	mov	r0, r7
 8008e88:	3101      	adds	r1, #1
 8008e8a:	f7ff ff79 	bl	8008d80 <_Balloc>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	b928      	cbnz	r0, 8008e9e <__multadd+0x5a>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <__multadd+0x84>)
 8008e96:	480d      	ldr	r0, [pc, #52]	; (8008ecc <__multadd+0x88>)
 8008e98:	21b5      	movs	r1, #181	; 0xb5
 8008e9a:	f000 fb69 	bl	8009570 <__assert_func>
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	3202      	adds	r2, #2
 8008ea2:	f104 010c 	add.w	r1, r4, #12
 8008ea6:	0092      	lsls	r2, r2, #2
 8008ea8:	300c      	adds	r0, #12
 8008eaa:	f7fe f872 	bl	8006f92 <memcpy>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff ffa5 	bl	8008e00 <_Bfree>
 8008eb6:	4644      	mov	r4, r8
 8008eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	615e      	str	r6, [r3, #20]
 8008ec0:	6125      	str	r5, [r4, #16]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec8:	08009be7 	.word	0x08009be7
 8008ecc:	08009bf8 	.word	0x08009bf8

08008ed0 <__hi0bits>:
 8008ed0:	0c03      	lsrs	r3, r0, #16
 8008ed2:	041b      	lsls	r3, r3, #16
 8008ed4:	b9d3      	cbnz	r3, 8008f0c <__hi0bits+0x3c>
 8008ed6:	0400      	lsls	r0, r0, #16
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ede:	bf04      	itt	eq
 8008ee0:	0200      	lsleq	r0, r0, #8
 8008ee2:	3308      	addeq	r3, #8
 8008ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ee8:	bf04      	itt	eq
 8008eea:	0100      	lsleq	r0, r0, #4
 8008eec:	3304      	addeq	r3, #4
 8008eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ef2:	bf04      	itt	eq
 8008ef4:	0080      	lsleq	r0, r0, #2
 8008ef6:	3302      	addeq	r3, #2
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	db05      	blt.n	8008f08 <__hi0bits+0x38>
 8008efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f00:	f103 0301 	add.w	r3, r3, #1
 8008f04:	bf08      	it	eq
 8008f06:	2320      	moveq	r3, #32
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4770      	bx	lr
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e7e4      	b.n	8008eda <__hi0bits+0xa>

08008f10 <__lo0bits>:
 8008f10:	6803      	ldr	r3, [r0, #0]
 8008f12:	f013 0207 	ands.w	r2, r3, #7
 8008f16:	4601      	mov	r1, r0
 8008f18:	d00b      	beq.n	8008f32 <__lo0bits+0x22>
 8008f1a:	07da      	lsls	r2, r3, #31
 8008f1c:	d423      	bmi.n	8008f66 <__lo0bits+0x56>
 8008f1e:	0798      	lsls	r0, r3, #30
 8008f20:	bf49      	itett	mi
 8008f22:	085b      	lsrmi	r3, r3, #1
 8008f24:	089b      	lsrpl	r3, r3, #2
 8008f26:	2001      	movmi	r0, #1
 8008f28:	600b      	strmi	r3, [r1, #0]
 8008f2a:	bf5c      	itt	pl
 8008f2c:	600b      	strpl	r3, [r1, #0]
 8008f2e:	2002      	movpl	r0, #2
 8008f30:	4770      	bx	lr
 8008f32:	b298      	uxth	r0, r3
 8008f34:	b9a8      	cbnz	r0, 8008f62 <__lo0bits+0x52>
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	2010      	movs	r0, #16
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	b90a      	cbnz	r2, 8008f42 <__lo0bits+0x32>
 8008f3e:	3008      	adds	r0, #8
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	071a      	lsls	r2, r3, #28
 8008f44:	bf04      	itt	eq
 8008f46:	091b      	lsreq	r3, r3, #4
 8008f48:	3004      	addeq	r0, #4
 8008f4a:	079a      	lsls	r2, r3, #30
 8008f4c:	bf04      	itt	eq
 8008f4e:	089b      	lsreq	r3, r3, #2
 8008f50:	3002      	addeq	r0, #2
 8008f52:	07da      	lsls	r2, r3, #31
 8008f54:	d403      	bmi.n	8008f5e <__lo0bits+0x4e>
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	f100 0001 	add.w	r0, r0, #1
 8008f5c:	d005      	beq.n	8008f6a <__lo0bits+0x5a>
 8008f5e:	600b      	str	r3, [r1, #0]
 8008f60:	4770      	bx	lr
 8008f62:	4610      	mov	r0, r2
 8008f64:	e7e9      	b.n	8008f3a <__lo0bits+0x2a>
 8008f66:	2000      	movs	r0, #0
 8008f68:	4770      	bx	lr
 8008f6a:	2020      	movs	r0, #32
 8008f6c:	4770      	bx	lr
	...

08008f70 <__i2b>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	460c      	mov	r4, r1
 8008f74:	2101      	movs	r1, #1
 8008f76:	f7ff ff03 	bl	8008d80 <_Balloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <__i2b+0x1a>
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <__i2b+0x24>)
 8008f80:	4805      	ldr	r0, [pc, #20]	; (8008f98 <__i2b+0x28>)
 8008f82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f86:	f000 faf3 	bl	8009570 <__assert_func>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	6144      	str	r4, [r0, #20]
 8008f8e:	6103      	str	r3, [r0, #16]
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	bf00      	nop
 8008f94:	08009be7 	.word	0x08009be7
 8008f98:	08009bf8 	.word	0x08009bf8

08008f9c <__multiply>:
 8008f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	4691      	mov	r9, r2
 8008fa2:	690a      	ldr	r2, [r1, #16]
 8008fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	bfb8      	it	lt
 8008fac:	460b      	movlt	r3, r1
 8008fae:	460c      	mov	r4, r1
 8008fb0:	bfbc      	itt	lt
 8008fb2:	464c      	movlt	r4, r9
 8008fb4:	4699      	movlt	r9, r3
 8008fb6:	6927      	ldr	r7, [r4, #16]
 8008fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fbc:	68a3      	ldr	r3, [r4, #8]
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	eb07 060a 	add.w	r6, r7, sl
 8008fc4:	42b3      	cmp	r3, r6
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	bfb8      	it	lt
 8008fca:	3101      	addlt	r1, #1
 8008fcc:	f7ff fed8 	bl	8008d80 <_Balloc>
 8008fd0:	b930      	cbnz	r0, 8008fe0 <__multiply+0x44>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4b44      	ldr	r3, [pc, #272]	; (80090e8 <__multiply+0x14c>)
 8008fd6:	4845      	ldr	r0, [pc, #276]	; (80090ec <__multiply+0x150>)
 8008fd8:	f240 115d 	movw	r1, #349	; 0x15d
 8008fdc:	f000 fac8 	bl	8009570 <__assert_func>
 8008fe0:	f100 0514 	add.w	r5, r0, #20
 8008fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fe8:	462b      	mov	r3, r5
 8008fea:	2200      	movs	r2, #0
 8008fec:	4543      	cmp	r3, r8
 8008fee:	d321      	bcc.n	8009034 <__multiply+0x98>
 8008ff0:	f104 0314 	add.w	r3, r4, #20
 8008ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ff8:	f109 0314 	add.w	r3, r9, #20
 8008ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009000:	9202      	str	r2, [sp, #8]
 8009002:	1b3a      	subs	r2, r7, r4
 8009004:	3a15      	subs	r2, #21
 8009006:	f022 0203 	bic.w	r2, r2, #3
 800900a:	3204      	adds	r2, #4
 800900c:	f104 0115 	add.w	r1, r4, #21
 8009010:	428f      	cmp	r7, r1
 8009012:	bf38      	it	cc
 8009014:	2204      	movcc	r2, #4
 8009016:	9201      	str	r2, [sp, #4]
 8009018:	9a02      	ldr	r2, [sp, #8]
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d80c      	bhi.n	800903a <__multiply+0x9e>
 8009020:	2e00      	cmp	r6, #0
 8009022:	dd03      	ble.n	800902c <__multiply+0x90>
 8009024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05a      	beq.n	80090e2 <__multiply+0x146>
 800902c:	6106      	str	r6, [r0, #16]
 800902e:	b005      	add	sp, #20
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	f843 2b04 	str.w	r2, [r3], #4
 8009038:	e7d8      	b.n	8008fec <__multiply+0x50>
 800903a:	f8b3 a000 	ldrh.w	sl, [r3]
 800903e:	f1ba 0f00 	cmp.w	sl, #0
 8009042:	d024      	beq.n	800908e <__multiply+0xf2>
 8009044:	f104 0e14 	add.w	lr, r4, #20
 8009048:	46a9      	mov	r9, r5
 800904a:	f04f 0c00 	mov.w	ip, #0
 800904e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009052:	f8d9 1000 	ldr.w	r1, [r9]
 8009056:	fa1f fb82 	uxth.w	fp, r2
 800905a:	b289      	uxth	r1, r1
 800905c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009064:	f8d9 2000 	ldr.w	r2, [r9]
 8009068:	4461      	add	r1, ip
 800906a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800906e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009076:	b289      	uxth	r1, r1
 8009078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800907c:	4577      	cmp	r7, lr
 800907e:	f849 1b04 	str.w	r1, [r9], #4
 8009082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009086:	d8e2      	bhi.n	800904e <__multiply+0xb2>
 8009088:	9a01      	ldr	r2, [sp, #4]
 800908a:	f845 c002 	str.w	ip, [r5, r2]
 800908e:	9a03      	ldr	r2, [sp, #12]
 8009090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009094:	3304      	adds	r3, #4
 8009096:	f1b9 0f00 	cmp.w	r9, #0
 800909a:	d020      	beq.n	80090de <__multiply+0x142>
 800909c:	6829      	ldr	r1, [r5, #0]
 800909e:	f104 0c14 	add.w	ip, r4, #20
 80090a2:	46ae      	mov	lr, r5
 80090a4:	f04f 0a00 	mov.w	sl, #0
 80090a8:	f8bc b000 	ldrh.w	fp, [ip]
 80090ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090b0:	fb09 220b 	mla	r2, r9, fp, r2
 80090b4:	4492      	add	sl, r2
 80090b6:	b289      	uxth	r1, r1
 80090b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090bc:	f84e 1b04 	str.w	r1, [lr], #4
 80090c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090c4:	f8be 1000 	ldrh.w	r1, [lr]
 80090c8:	0c12      	lsrs	r2, r2, #16
 80090ca:	fb09 1102 	mla	r1, r9, r2, r1
 80090ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090d2:	4567      	cmp	r7, ip
 80090d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090d8:	d8e6      	bhi.n	80090a8 <__multiply+0x10c>
 80090da:	9a01      	ldr	r2, [sp, #4]
 80090dc:	50a9      	str	r1, [r5, r2]
 80090de:	3504      	adds	r5, #4
 80090e0:	e79a      	b.n	8009018 <__multiply+0x7c>
 80090e2:	3e01      	subs	r6, #1
 80090e4:	e79c      	b.n	8009020 <__multiply+0x84>
 80090e6:	bf00      	nop
 80090e8:	08009be7 	.word	0x08009be7
 80090ec:	08009bf8 	.word	0x08009bf8

080090f0 <__pow5mult>:
 80090f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f4:	4615      	mov	r5, r2
 80090f6:	f012 0203 	ands.w	r2, r2, #3
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	d007      	beq.n	8009110 <__pow5mult+0x20>
 8009100:	4c25      	ldr	r4, [pc, #148]	; (8009198 <__pow5mult+0xa8>)
 8009102:	3a01      	subs	r2, #1
 8009104:	2300      	movs	r3, #0
 8009106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800910a:	f7ff fe9b 	bl	8008e44 <__multadd>
 800910e:	4607      	mov	r7, r0
 8009110:	10ad      	asrs	r5, r5, #2
 8009112:	d03d      	beq.n	8009190 <__pow5mult+0xa0>
 8009114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009116:	b97c      	cbnz	r4, 8009138 <__pow5mult+0x48>
 8009118:	2010      	movs	r0, #16
 800911a:	f7ff fe1d 	bl	8008d58 <malloc>
 800911e:	4602      	mov	r2, r0
 8009120:	6270      	str	r0, [r6, #36]	; 0x24
 8009122:	b928      	cbnz	r0, 8009130 <__pow5mult+0x40>
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <__pow5mult+0xac>)
 8009126:	481e      	ldr	r0, [pc, #120]	; (80091a0 <__pow5mult+0xb0>)
 8009128:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800912c:	f000 fa20 	bl	8009570 <__assert_func>
 8009130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009134:	6004      	str	r4, [r0, #0]
 8009136:	60c4      	str	r4, [r0, #12]
 8009138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800913c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009140:	b94c      	cbnz	r4, 8009156 <__pow5mult+0x66>
 8009142:	f240 2171 	movw	r1, #625	; 0x271
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ff12 	bl	8008f70 <__i2b>
 800914c:	2300      	movs	r3, #0
 800914e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009152:	4604      	mov	r4, r0
 8009154:	6003      	str	r3, [r0, #0]
 8009156:	f04f 0900 	mov.w	r9, #0
 800915a:	07eb      	lsls	r3, r5, #31
 800915c:	d50a      	bpl.n	8009174 <__pow5mult+0x84>
 800915e:	4639      	mov	r1, r7
 8009160:	4622      	mov	r2, r4
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ff1a 	bl	8008f9c <__multiply>
 8009168:	4639      	mov	r1, r7
 800916a:	4680      	mov	r8, r0
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff fe47 	bl	8008e00 <_Bfree>
 8009172:	4647      	mov	r7, r8
 8009174:	106d      	asrs	r5, r5, #1
 8009176:	d00b      	beq.n	8009190 <__pow5mult+0xa0>
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	b938      	cbnz	r0, 800918c <__pow5mult+0x9c>
 800917c:	4622      	mov	r2, r4
 800917e:	4621      	mov	r1, r4
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff ff0b 	bl	8008f9c <__multiply>
 8009186:	6020      	str	r0, [r4, #0]
 8009188:	f8c0 9000 	str.w	r9, [r0]
 800918c:	4604      	mov	r4, r0
 800918e:	e7e4      	b.n	800915a <__pow5mult+0x6a>
 8009190:	4638      	mov	r0, r7
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009196:	bf00      	nop
 8009198:	08009d48 	.word	0x08009d48
 800919c:	08009b75 	.word	0x08009b75
 80091a0:	08009bf8 	.word	0x08009bf8

080091a4 <__lshift>:
 80091a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	460c      	mov	r4, r1
 80091aa:	6849      	ldr	r1, [r1, #4]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	4607      	mov	r7, r0
 80091b6:	4691      	mov	r9, r2
 80091b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091bc:	f108 0601 	add.w	r6, r8, #1
 80091c0:	42b3      	cmp	r3, r6
 80091c2:	db0b      	blt.n	80091dc <__lshift+0x38>
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7ff fddb 	bl	8008d80 <_Balloc>
 80091ca:	4605      	mov	r5, r0
 80091cc:	b948      	cbnz	r0, 80091e2 <__lshift+0x3e>
 80091ce:	4602      	mov	r2, r0
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <__lshift+0xd8>)
 80091d2:	482b      	ldr	r0, [pc, #172]	; (8009280 <__lshift+0xdc>)
 80091d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091d8:	f000 f9ca 	bl	8009570 <__assert_func>
 80091dc:	3101      	adds	r1, #1
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	e7ee      	b.n	80091c0 <__lshift+0x1c>
 80091e2:	2300      	movs	r3, #0
 80091e4:	f100 0114 	add.w	r1, r0, #20
 80091e8:	f100 0210 	add.w	r2, r0, #16
 80091ec:	4618      	mov	r0, r3
 80091ee:	4553      	cmp	r3, sl
 80091f0:	db37      	blt.n	8009262 <__lshift+0xbe>
 80091f2:	6920      	ldr	r0, [r4, #16]
 80091f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091f8:	f104 0314 	add.w	r3, r4, #20
 80091fc:	f019 091f 	ands.w	r9, r9, #31
 8009200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009204:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009208:	d02f      	beq.n	800926a <__lshift+0xc6>
 800920a:	f1c9 0e20 	rsb	lr, r9, #32
 800920e:	468a      	mov	sl, r1
 8009210:	f04f 0c00 	mov.w	ip, #0
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	fa02 f209 	lsl.w	r2, r2, r9
 800921a:	ea42 020c 	orr.w	r2, r2, ip
 800921e:	f84a 2b04 	str.w	r2, [sl], #4
 8009222:	f853 2b04 	ldr.w	r2, [r3], #4
 8009226:	4298      	cmp	r0, r3
 8009228:	fa22 fc0e 	lsr.w	ip, r2, lr
 800922c:	d8f2      	bhi.n	8009214 <__lshift+0x70>
 800922e:	1b03      	subs	r3, r0, r4
 8009230:	3b15      	subs	r3, #21
 8009232:	f023 0303 	bic.w	r3, r3, #3
 8009236:	3304      	adds	r3, #4
 8009238:	f104 0215 	add.w	r2, r4, #21
 800923c:	4290      	cmp	r0, r2
 800923e:	bf38      	it	cc
 8009240:	2304      	movcc	r3, #4
 8009242:	f841 c003 	str.w	ip, [r1, r3]
 8009246:	f1bc 0f00 	cmp.w	ip, #0
 800924a:	d001      	beq.n	8009250 <__lshift+0xac>
 800924c:	f108 0602 	add.w	r6, r8, #2
 8009250:	3e01      	subs	r6, #1
 8009252:	4638      	mov	r0, r7
 8009254:	612e      	str	r6, [r5, #16]
 8009256:	4621      	mov	r1, r4
 8009258:	f7ff fdd2 	bl	8008e00 <_Bfree>
 800925c:	4628      	mov	r0, r5
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	f842 0f04 	str.w	r0, [r2, #4]!
 8009266:	3301      	adds	r3, #1
 8009268:	e7c1      	b.n	80091ee <__lshift+0x4a>
 800926a:	3904      	subs	r1, #4
 800926c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009270:	f841 2f04 	str.w	r2, [r1, #4]!
 8009274:	4298      	cmp	r0, r3
 8009276:	d8f9      	bhi.n	800926c <__lshift+0xc8>
 8009278:	e7ea      	b.n	8009250 <__lshift+0xac>
 800927a:	bf00      	nop
 800927c:	08009be7 	.word	0x08009be7
 8009280:	08009bf8 	.word	0x08009bf8

08009284 <__mcmp>:
 8009284:	b530      	push	{r4, r5, lr}
 8009286:	6902      	ldr	r2, [r0, #16]
 8009288:	690c      	ldr	r4, [r1, #16]
 800928a:	1b12      	subs	r2, r2, r4
 800928c:	d10e      	bne.n	80092ac <__mcmp+0x28>
 800928e:	f100 0314 	add.w	r3, r0, #20
 8009292:	3114      	adds	r1, #20
 8009294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800929c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092a4:	42a5      	cmp	r5, r4
 80092a6:	d003      	beq.n	80092b0 <__mcmp+0x2c>
 80092a8:	d305      	bcc.n	80092b6 <__mcmp+0x32>
 80092aa:	2201      	movs	r2, #1
 80092ac:	4610      	mov	r0, r2
 80092ae:	bd30      	pop	{r4, r5, pc}
 80092b0:	4283      	cmp	r3, r0
 80092b2:	d3f3      	bcc.n	800929c <__mcmp+0x18>
 80092b4:	e7fa      	b.n	80092ac <__mcmp+0x28>
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ba:	e7f7      	b.n	80092ac <__mcmp+0x28>

080092bc <__mdiff>:
 80092bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460c      	mov	r4, r1
 80092c2:	4606      	mov	r6, r0
 80092c4:	4611      	mov	r1, r2
 80092c6:	4620      	mov	r0, r4
 80092c8:	4690      	mov	r8, r2
 80092ca:	f7ff ffdb 	bl	8009284 <__mcmp>
 80092ce:	1e05      	subs	r5, r0, #0
 80092d0:	d110      	bne.n	80092f4 <__mdiff+0x38>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fd53 	bl	8008d80 <_Balloc>
 80092da:	b930      	cbnz	r0, 80092ea <__mdiff+0x2e>
 80092dc:	4b3a      	ldr	r3, [pc, #232]	; (80093c8 <__mdiff+0x10c>)
 80092de:	4602      	mov	r2, r0
 80092e0:	f240 2132 	movw	r1, #562	; 0x232
 80092e4:	4839      	ldr	r0, [pc, #228]	; (80093cc <__mdiff+0x110>)
 80092e6:	f000 f943 	bl	8009570 <__assert_func>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f4:	bfa4      	itt	ge
 80092f6:	4643      	movge	r3, r8
 80092f8:	46a0      	movge	r8, r4
 80092fa:	4630      	mov	r0, r6
 80092fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009300:	bfa6      	itte	ge
 8009302:	461c      	movge	r4, r3
 8009304:	2500      	movge	r5, #0
 8009306:	2501      	movlt	r5, #1
 8009308:	f7ff fd3a 	bl	8008d80 <_Balloc>
 800930c:	b920      	cbnz	r0, 8009318 <__mdiff+0x5c>
 800930e:	4b2e      	ldr	r3, [pc, #184]	; (80093c8 <__mdiff+0x10c>)
 8009310:	4602      	mov	r2, r0
 8009312:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009316:	e7e5      	b.n	80092e4 <__mdiff+0x28>
 8009318:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800931c:	6926      	ldr	r6, [r4, #16]
 800931e:	60c5      	str	r5, [r0, #12]
 8009320:	f104 0914 	add.w	r9, r4, #20
 8009324:	f108 0514 	add.w	r5, r8, #20
 8009328:	f100 0e14 	add.w	lr, r0, #20
 800932c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009330:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009334:	f108 0210 	add.w	r2, r8, #16
 8009338:	46f2      	mov	sl, lr
 800933a:	2100      	movs	r1, #0
 800933c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009340:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009344:	fa1f f883 	uxth.w	r8, r3
 8009348:	fa11 f18b 	uxtah	r1, r1, fp
 800934c:	0c1b      	lsrs	r3, r3, #16
 800934e:	eba1 0808 	sub.w	r8, r1, r8
 8009352:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009356:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800935a:	fa1f f888 	uxth.w	r8, r8
 800935e:	1419      	asrs	r1, r3, #16
 8009360:	454e      	cmp	r6, r9
 8009362:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009366:	f84a 3b04 	str.w	r3, [sl], #4
 800936a:	d8e7      	bhi.n	800933c <__mdiff+0x80>
 800936c:	1b33      	subs	r3, r6, r4
 800936e:	3b15      	subs	r3, #21
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3304      	adds	r3, #4
 8009376:	3415      	adds	r4, #21
 8009378:	42a6      	cmp	r6, r4
 800937a:	bf38      	it	cc
 800937c:	2304      	movcc	r3, #4
 800937e:	441d      	add	r5, r3
 8009380:	4473      	add	r3, lr
 8009382:	469e      	mov	lr, r3
 8009384:	462e      	mov	r6, r5
 8009386:	4566      	cmp	r6, ip
 8009388:	d30e      	bcc.n	80093a8 <__mdiff+0xec>
 800938a:	f10c 0203 	add.w	r2, ip, #3
 800938e:	1b52      	subs	r2, r2, r5
 8009390:	f022 0203 	bic.w	r2, r2, #3
 8009394:	3d03      	subs	r5, #3
 8009396:	45ac      	cmp	ip, r5
 8009398:	bf38      	it	cc
 800939a:	2200      	movcc	r2, #0
 800939c:	441a      	add	r2, r3
 800939e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093a2:	b17b      	cbz	r3, 80093c4 <__mdiff+0x108>
 80093a4:	6107      	str	r7, [r0, #16]
 80093a6:	e7a3      	b.n	80092f0 <__mdiff+0x34>
 80093a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80093ac:	fa11 f288 	uxtah	r2, r1, r8
 80093b0:	1414      	asrs	r4, r2, #16
 80093b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093b6:	b292      	uxth	r2, r2
 80093b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093bc:	f84e 2b04 	str.w	r2, [lr], #4
 80093c0:	1421      	asrs	r1, r4, #16
 80093c2:	e7e0      	b.n	8009386 <__mdiff+0xca>
 80093c4:	3f01      	subs	r7, #1
 80093c6:	e7ea      	b.n	800939e <__mdiff+0xe2>
 80093c8:	08009be7 	.word	0x08009be7
 80093cc:	08009bf8 	.word	0x08009bf8

080093d0 <__d2b>:
 80093d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	4689      	mov	r9, r1
 80093d6:	2101      	movs	r1, #1
 80093d8:	ec57 6b10 	vmov	r6, r7, d0
 80093dc:	4690      	mov	r8, r2
 80093de:	f7ff fccf 	bl	8008d80 <_Balloc>
 80093e2:	4604      	mov	r4, r0
 80093e4:	b930      	cbnz	r0, 80093f4 <__d2b+0x24>
 80093e6:	4602      	mov	r2, r0
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <__d2b+0xb0>)
 80093ea:	4826      	ldr	r0, [pc, #152]	; (8009484 <__d2b+0xb4>)
 80093ec:	f240 310a 	movw	r1, #778	; 0x30a
 80093f0:	f000 f8be 	bl	8009570 <__assert_func>
 80093f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093fc:	bb35      	cbnz	r5, 800944c <__d2b+0x7c>
 80093fe:	2e00      	cmp	r6, #0
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	d028      	beq.n	8009456 <__d2b+0x86>
 8009404:	4668      	mov	r0, sp
 8009406:	9600      	str	r6, [sp, #0]
 8009408:	f7ff fd82 	bl	8008f10 <__lo0bits>
 800940c:	9900      	ldr	r1, [sp, #0]
 800940e:	b300      	cbz	r0, 8009452 <__d2b+0x82>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	f1c0 0320 	rsb	r3, r0, #32
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	430b      	orrs	r3, r1
 800941c:	40c2      	lsrs	r2, r0
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	9201      	str	r2, [sp, #4]
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	61a3      	str	r3, [r4, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bf14      	ite	ne
 800942a:	2202      	movne	r2, #2
 800942c:	2201      	moveq	r2, #1
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	b1d5      	cbz	r5, 8009468 <__d2b+0x98>
 8009432:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009436:	4405      	add	r5, r0
 8009438:	f8c9 5000 	str.w	r5, [r9]
 800943c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009440:	f8c8 0000 	str.w	r0, [r8]
 8009444:	4620      	mov	r0, r4
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009450:	e7d5      	b.n	80093fe <__d2b+0x2e>
 8009452:	6161      	str	r1, [r4, #20]
 8009454:	e7e5      	b.n	8009422 <__d2b+0x52>
 8009456:	a801      	add	r0, sp, #4
 8009458:	f7ff fd5a 	bl	8008f10 <__lo0bits>
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	6163      	str	r3, [r4, #20]
 8009460:	2201      	movs	r2, #1
 8009462:	6122      	str	r2, [r4, #16]
 8009464:	3020      	adds	r0, #32
 8009466:	e7e3      	b.n	8009430 <__d2b+0x60>
 8009468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800946c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009470:	f8c9 0000 	str.w	r0, [r9]
 8009474:	6918      	ldr	r0, [r3, #16]
 8009476:	f7ff fd2b 	bl	8008ed0 <__hi0bits>
 800947a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800947e:	e7df      	b.n	8009440 <__d2b+0x70>
 8009480:	08009be7 	.word	0x08009be7
 8009484:	08009bf8 	.word	0x08009bf8

08009488 <_calloc_r>:
 8009488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800948a:	fba1 2402 	umull	r2, r4, r1, r2
 800948e:	b94c      	cbnz	r4, 80094a4 <_calloc_r+0x1c>
 8009490:	4611      	mov	r1, r2
 8009492:	9201      	str	r2, [sp, #4]
 8009494:	f7fd fdb4 	bl	8007000 <_malloc_r>
 8009498:	9a01      	ldr	r2, [sp, #4]
 800949a:	4605      	mov	r5, r0
 800949c:	b930      	cbnz	r0, 80094ac <_calloc_r+0x24>
 800949e:	4628      	mov	r0, r5
 80094a0:	b003      	add	sp, #12
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	220c      	movs	r2, #12
 80094a6:	6002      	str	r2, [r0, #0]
 80094a8:	2500      	movs	r5, #0
 80094aa:	e7f8      	b.n	800949e <_calloc_r+0x16>
 80094ac:	4621      	mov	r1, r4
 80094ae:	f7fd fd7e 	bl	8006fae <memset>
 80094b2:	e7f4      	b.n	800949e <_calloc_r+0x16>

080094b4 <_free_r>:
 80094b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094b6:	2900      	cmp	r1, #0
 80094b8:	d044      	beq.n	8009544 <_free_r+0x90>
 80094ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094be:	9001      	str	r0, [sp, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f1a1 0404 	sub.w	r4, r1, #4
 80094c6:	bfb8      	it	lt
 80094c8:	18e4      	addlt	r4, r4, r3
 80094ca:	f7ff fc4d 	bl	8008d68 <__malloc_lock>
 80094ce:	4a1e      	ldr	r2, [pc, #120]	; (8009548 <_free_r+0x94>)
 80094d0:	9801      	ldr	r0, [sp, #4]
 80094d2:	6813      	ldr	r3, [r2, #0]
 80094d4:	b933      	cbnz	r3, 80094e4 <_free_r+0x30>
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	6014      	str	r4, [r2, #0]
 80094da:	b003      	add	sp, #12
 80094dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094e0:	f7ff bc48 	b.w	8008d74 <__malloc_unlock>
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	d908      	bls.n	80094fa <_free_r+0x46>
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	428b      	cmp	r3, r1
 80094ee:	bf01      	itttt	eq
 80094f0:	6819      	ldreq	r1, [r3, #0]
 80094f2:	685b      	ldreq	r3, [r3, #4]
 80094f4:	1949      	addeq	r1, r1, r5
 80094f6:	6021      	streq	r1, [r4, #0]
 80094f8:	e7ed      	b.n	80094d6 <_free_r+0x22>
 80094fa:	461a      	mov	r2, r3
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b10b      	cbz	r3, 8009504 <_free_r+0x50>
 8009500:	42a3      	cmp	r3, r4
 8009502:	d9fa      	bls.n	80094fa <_free_r+0x46>
 8009504:	6811      	ldr	r1, [r2, #0]
 8009506:	1855      	adds	r5, r2, r1
 8009508:	42a5      	cmp	r5, r4
 800950a:	d10b      	bne.n	8009524 <_free_r+0x70>
 800950c:	6824      	ldr	r4, [r4, #0]
 800950e:	4421      	add	r1, r4
 8009510:	1854      	adds	r4, r2, r1
 8009512:	42a3      	cmp	r3, r4
 8009514:	6011      	str	r1, [r2, #0]
 8009516:	d1e0      	bne.n	80094da <_free_r+0x26>
 8009518:	681c      	ldr	r4, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	6053      	str	r3, [r2, #4]
 800951e:	4421      	add	r1, r4
 8009520:	6011      	str	r1, [r2, #0]
 8009522:	e7da      	b.n	80094da <_free_r+0x26>
 8009524:	d902      	bls.n	800952c <_free_r+0x78>
 8009526:	230c      	movs	r3, #12
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	e7d6      	b.n	80094da <_free_r+0x26>
 800952c:	6825      	ldr	r5, [r4, #0]
 800952e:	1961      	adds	r1, r4, r5
 8009530:	428b      	cmp	r3, r1
 8009532:	bf04      	itt	eq
 8009534:	6819      	ldreq	r1, [r3, #0]
 8009536:	685b      	ldreq	r3, [r3, #4]
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	bf04      	itt	eq
 800953c:	1949      	addeq	r1, r1, r5
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	6054      	str	r4, [r2, #4]
 8009542:	e7ca      	b.n	80094da <_free_r+0x26>
 8009544:	b003      	add	sp, #12
 8009546:	bd30      	pop	{r4, r5, pc}
 8009548:	20001dd8 	.word	0x20001dd8

0800954c <_read_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	; (800956c <_read_r+0x20>)
 8009550:	4604      	mov	r4, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7f8 f8b6 	bl	80016cc <_read>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_read_r+0x1e>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_read_r+0x1e>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20001de0 	.word	0x20001de0

08009570 <__assert_func>:
 8009570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009572:	4614      	mov	r4, r2
 8009574:	461a      	mov	r2, r3
 8009576:	4b09      	ldr	r3, [pc, #36]	; (800959c <__assert_func+0x2c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4605      	mov	r5, r0
 800957c:	68d8      	ldr	r0, [r3, #12]
 800957e:	b14c      	cbz	r4, 8009594 <__assert_func+0x24>
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <__assert_func+0x30>)
 8009582:	9100      	str	r1, [sp, #0]
 8009584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009588:	4906      	ldr	r1, [pc, #24]	; (80095a4 <__assert_func+0x34>)
 800958a:	462b      	mov	r3, r5
 800958c:	f000 f80e 	bl	80095ac <fiprintf>
 8009590:	f000 f9b9 	bl	8009906 <abort>
 8009594:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <__assert_func+0x38>)
 8009596:	461c      	mov	r4, r3
 8009598:	e7f3      	b.n	8009582 <__assert_func+0x12>
 800959a:	bf00      	nop
 800959c:	20000010 	.word	0x20000010
 80095a0:	08009d54 	.word	0x08009d54
 80095a4:	08009d61 	.word	0x08009d61
 80095a8:	08009d8f 	.word	0x08009d8f

080095ac <fiprintf>:
 80095ac:	b40e      	push	{r1, r2, r3}
 80095ae:	b503      	push	{r0, r1, lr}
 80095b0:	4601      	mov	r1, r0
 80095b2:	ab03      	add	r3, sp, #12
 80095b4:	4805      	ldr	r0, [pc, #20]	; (80095cc <fiprintf+0x20>)
 80095b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ba:	6800      	ldr	r0, [r0, #0]
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	f000 f865 	bl	800968c <_vfiprintf_r>
 80095c2:	b002      	add	sp, #8
 80095c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c8:	b003      	add	sp, #12
 80095ca:	4770      	bx	lr
 80095cc:	20000010 	.word	0x20000010

080095d0 <_fstat_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_fstat_r+0x20>)
 80095d4:	2300      	movs	r3, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	4608      	mov	r0, r1
 80095da:	4611      	mov	r1, r2
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f7f8 f8ba 	bl	8001756 <_fstat>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d102      	bne.n	80095ec <_fstat_r+0x1c>
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	b103      	cbz	r3, 80095ec <_fstat_r+0x1c>
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
 80095ee:	bf00      	nop
 80095f0:	20001de0 	.word	0x20001de0

080095f4 <_isatty_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d06      	ldr	r5, [pc, #24]	; (8009610 <_isatty_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	f7f8 f8b9 	bl	8001776 <_isatty>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_isatty_r+0x1a>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_isatty_r+0x1a>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	20001de0 	.word	0x20001de0

08009614 <__ascii_mbtowc>:
 8009614:	b082      	sub	sp, #8
 8009616:	b901      	cbnz	r1, 800961a <__ascii_mbtowc+0x6>
 8009618:	a901      	add	r1, sp, #4
 800961a:	b142      	cbz	r2, 800962e <__ascii_mbtowc+0x1a>
 800961c:	b14b      	cbz	r3, 8009632 <__ascii_mbtowc+0x1e>
 800961e:	7813      	ldrb	r3, [r2, #0]
 8009620:	600b      	str	r3, [r1, #0]
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	1e10      	subs	r0, r2, #0
 8009626:	bf18      	it	ne
 8009628:	2001      	movne	r0, #1
 800962a:	b002      	add	sp, #8
 800962c:	4770      	bx	lr
 800962e:	4610      	mov	r0, r2
 8009630:	e7fb      	b.n	800962a <__ascii_mbtowc+0x16>
 8009632:	f06f 0001 	mvn.w	r0, #1
 8009636:	e7f8      	b.n	800962a <__ascii_mbtowc+0x16>

08009638 <__sfputc_r>:
 8009638:	6893      	ldr	r3, [r2, #8]
 800963a:	3b01      	subs	r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	b410      	push	{r4}
 8009640:	6093      	str	r3, [r2, #8]
 8009642:	da08      	bge.n	8009656 <__sfputc_r+0x1e>
 8009644:	6994      	ldr	r4, [r2, #24]
 8009646:	42a3      	cmp	r3, r4
 8009648:	db01      	blt.n	800964e <__sfputc_r+0x16>
 800964a:	290a      	cmp	r1, #10
 800964c:	d103      	bne.n	8009656 <__sfputc_r+0x1e>
 800964e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009652:	f7fe bae7 	b.w	8007c24 <__swbuf_r>
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	1c58      	adds	r0, r3, #1
 800965a:	6010      	str	r0, [r2, #0]
 800965c:	7019      	strb	r1, [r3, #0]
 800965e:	4608      	mov	r0, r1
 8009660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009664:	4770      	bx	lr

08009666 <__sfputs_r>:
 8009666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	4614      	mov	r4, r2
 800966e:	18d5      	adds	r5, r2, r3
 8009670:	42ac      	cmp	r4, r5
 8009672:	d101      	bne.n	8009678 <__sfputs_r+0x12>
 8009674:	2000      	movs	r0, #0
 8009676:	e007      	b.n	8009688 <__sfputs_r+0x22>
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	463a      	mov	r2, r7
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff ffda 	bl	8009638 <__sfputc_r>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d1f3      	bne.n	8009670 <__sfputs_r+0xa>
 8009688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800968c <_vfiprintf_r>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	460d      	mov	r5, r1
 8009692:	b09d      	sub	sp, #116	; 0x74
 8009694:	4614      	mov	r4, r2
 8009696:	4698      	mov	r8, r3
 8009698:	4606      	mov	r6, r0
 800969a:	b118      	cbz	r0, 80096a4 <_vfiprintf_r+0x18>
 800969c:	6983      	ldr	r3, [r0, #24]
 800969e:	b90b      	cbnz	r3, 80096a4 <_vfiprintf_r+0x18>
 80096a0:	f7fd fbb2 	bl	8006e08 <__sinit>
 80096a4:	4b89      	ldr	r3, [pc, #548]	; (80098cc <_vfiprintf_r+0x240>)
 80096a6:	429d      	cmp	r5, r3
 80096a8:	d11b      	bne.n	80096e2 <_vfiprintf_r+0x56>
 80096aa:	6875      	ldr	r5, [r6, #4]
 80096ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ae:	07d9      	lsls	r1, r3, #31
 80096b0:	d405      	bmi.n	80096be <_vfiprintf_r+0x32>
 80096b2:	89ab      	ldrh	r3, [r5, #12]
 80096b4:	059a      	lsls	r2, r3, #22
 80096b6:	d402      	bmi.n	80096be <_vfiprintf_r+0x32>
 80096b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ba:	f7fd fc68 	bl	8006f8e <__retarget_lock_acquire_recursive>
 80096be:	89ab      	ldrh	r3, [r5, #12]
 80096c0:	071b      	lsls	r3, r3, #28
 80096c2:	d501      	bpl.n	80096c8 <_vfiprintf_r+0x3c>
 80096c4:	692b      	ldr	r3, [r5, #16]
 80096c6:	b9eb      	cbnz	r3, 8009704 <_vfiprintf_r+0x78>
 80096c8:	4629      	mov	r1, r5
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fe fb0e 	bl	8007cec <__swsetup_r>
 80096d0:	b1c0      	cbz	r0, 8009704 <_vfiprintf_r+0x78>
 80096d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d4:	07dc      	lsls	r4, r3, #31
 80096d6:	d50e      	bpl.n	80096f6 <_vfiprintf_r+0x6a>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	b01d      	add	sp, #116	; 0x74
 80096de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e2:	4b7b      	ldr	r3, [pc, #492]	; (80098d0 <_vfiprintf_r+0x244>)
 80096e4:	429d      	cmp	r5, r3
 80096e6:	d101      	bne.n	80096ec <_vfiprintf_r+0x60>
 80096e8:	68b5      	ldr	r5, [r6, #8]
 80096ea:	e7df      	b.n	80096ac <_vfiprintf_r+0x20>
 80096ec:	4b79      	ldr	r3, [pc, #484]	; (80098d4 <_vfiprintf_r+0x248>)
 80096ee:	429d      	cmp	r5, r3
 80096f0:	bf08      	it	eq
 80096f2:	68f5      	ldreq	r5, [r6, #12]
 80096f4:	e7da      	b.n	80096ac <_vfiprintf_r+0x20>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	0598      	lsls	r0, r3, #22
 80096fa:	d4ed      	bmi.n	80096d8 <_vfiprintf_r+0x4c>
 80096fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096fe:	f7fd fc47 	bl	8006f90 <__retarget_lock_release_recursive>
 8009702:	e7e9      	b.n	80096d8 <_vfiprintf_r+0x4c>
 8009704:	2300      	movs	r3, #0
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	2320      	movs	r3, #32
 800970a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800970e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009712:	2330      	movs	r3, #48	; 0x30
 8009714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098d8 <_vfiprintf_r+0x24c>
 8009718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800971c:	f04f 0901 	mov.w	r9, #1
 8009720:	4623      	mov	r3, r4
 8009722:	469a      	mov	sl, r3
 8009724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009728:	b10a      	cbz	r2, 800972e <_vfiprintf_r+0xa2>
 800972a:	2a25      	cmp	r2, #37	; 0x25
 800972c:	d1f9      	bne.n	8009722 <_vfiprintf_r+0x96>
 800972e:	ebba 0b04 	subs.w	fp, sl, r4
 8009732:	d00b      	beq.n	800974c <_vfiprintf_r+0xc0>
 8009734:	465b      	mov	r3, fp
 8009736:	4622      	mov	r2, r4
 8009738:	4629      	mov	r1, r5
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff93 	bl	8009666 <__sfputs_r>
 8009740:	3001      	adds	r0, #1
 8009742:	f000 80aa 	beq.w	800989a <_vfiprintf_r+0x20e>
 8009746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009748:	445a      	add	r2, fp
 800974a:	9209      	str	r2, [sp, #36]	; 0x24
 800974c:	f89a 3000 	ldrb.w	r3, [sl]
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 80a2 	beq.w	800989a <_vfiprintf_r+0x20e>
 8009756:	2300      	movs	r3, #0
 8009758:	f04f 32ff 	mov.w	r2, #4294967295
 800975c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009760:	f10a 0a01 	add.w	sl, sl, #1
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	9307      	str	r3, [sp, #28]
 8009768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800976c:	931a      	str	r3, [sp, #104]	; 0x68
 800976e:	4654      	mov	r4, sl
 8009770:	2205      	movs	r2, #5
 8009772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009776:	4858      	ldr	r0, [pc, #352]	; (80098d8 <_vfiprintf_r+0x24c>)
 8009778:	f7f6 fd32 	bl	80001e0 <memchr>
 800977c:	9a04      	ldr	r2, [sp, #16]
 800977e:	b9d8      	cbnz	r0, 80097b8 <_vfiprintf_r+0x12c>
 8009780:	06d1      	lsls	r1, r2, #27
 8009782:	bf44      	itt	mi
 8009784:	2320      	movmi	r3, #32
 8009786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978a:	0713      	lsls	r3, r2, #28
 800978c:	bf44      	itt	mi
 800978e:	232b      	movmi	r3, #43	; 0x2b
 8009790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009794:	f89a 3000 	ldrb.w	r3, [sl]
 8009798:	2b2a      	cmp	r3, #42	; 0x2a
 800979a:	d015      	beq.n	80097c8 <_vfiprintf_r+0x13c>
 800979c:	9a07      	ldr	r2, [sp, #28]
 800979e:	4654      	mov	r4, sl
 80097a0:	2000      	movs	r0, #0
 80097a2:	f04f 0c0a 	mov.w	ip, #10
 80097a6:	4621      	mov	r1, r4
 80097a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ac:	3b30      	subs	r3, #48	; 0x30
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d94e      	bls.n	8009850 <_vfiprintf_r+0x1c4>
 80097b2:	b1b0      	cbz	r0, 80097e2 <_vfiprintf_r+0x156>
 80097b4:	9207      	str	r2, [sp, #28]
 80097b6:	e014      	b.n	80097e2 <_vfiprintf_r+0x156>
 80097b8:	eba0 0308 	sub.w	r3, r0, r8
 80097bc:	fa09 f303 	lsl.w	r3, r9, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	46a2      	mov	sl, r4
 80097c6:	e7d2      	b.n	800976e <_vfiprintf_r+0xe2>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	1d19      	adds	r1, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9103      	str	r1, [sp, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfbb      	ittet	lt
 80097d4:	425b      	neglt	r3, r3
 80097d6:	f042 0202 	orrlt.w	r2, r2, #2
 80097da:	9307      	strge	r3, [sp, #28]
 80097dc:	9307      	strlt	r3, [sp, #28]
 80097de:	bfb8      	it	lt
 80097e0:	9204      	strlt	r2, [sp, #16]
 80097e2:	7823      	ldrb	r3, [r4, #0]
 80097e4:	2b2e      	cmp	r3, #46	; 0x2e
 80097e6:	d10c      	bne.n	8009802 <_vfiprintf_r+0x176>
 80097e8:	7863      	ldrb	r3, [r4, #1]
 80097ea:	2b2a      	cmp	r3, #42	; 0x2a
 80097ec:	d135      	bne.n	800985a <_vfiprintf_r+0x1ce>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	1d1a      	adds	r2, r3, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	9203      	str	r2, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfb8      	it	lt
 80097fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80097fe:	3402      	adds	r4, #2
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098e8 <_vfiprintf_r+0x25c>
 8009806:	7821      	ldrb	r1, [r4, #0]
 8009808:	2203      	movs	r2, #3
 800980a:	4650      	mov	r0, sl
 800980c:	f7f6 fce8 	bl	80001e0 <memchr>
 8009810:	b140      	cbz	r0, 8009824 <_vfiprintf_r+0x198>
 8009812:	2340      	movs	r3, #64	; 0x40
 8009814:	eba0 000a 	sub.w	r0, r0, sl
 8009818:	fa03 f000 	lsl.w	r0, r3, r0
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	4303      	orrs	r3, r0
 8009820:	3401      	adds	r4, #1
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009828:	482c      	ldr	r0, [pc, #176]	; (80098dc <_vfiprintf_r+0x250>)
 800982a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800982e:	2206      	movs	r2, #6
 8009830:	f7f6 fcd6 	bl	80001e0 <memchr>
 8009834:	2800      	cmp	r0, #0
 8009836:	d03f      	beq.n	80098b8 <_vfiprintf_r+0x22c>
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <_vfiprintf_r+0x254>)
 800983a:	bb1b      	cbnz	r3, 8009884 <_vfiprintf_r+0x1f8>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	3307      	adds	r3, #7
 8009840:	f023 0307 	bic.w	r3, r3, #7
 8009844:	3308      	adds	r3, #8
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984a:	443b      	add	r3, r7
 800984c:	9309      	str	r3, [sp, #36]	; 0x24
 800984e:	e767      	b.n	8009720 <_vfiprintf_r+0x94>
 8009850:	fb0c 3202 	mla	r2, ip, r2, r3
 8009854:	460c      	mov	r4, r1
 8009856:	2001      	movs	r0, #1
 8009858:	e7a5      	b.n	80097a6 <_vfiprintf_r+0x11a>
 800985a:	2300      	movs	r3, #0
 800985c:	3401      	adds	r4, #1
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	4619      	mov	r1, r3
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4620      	mov	r0, r4
 8009868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800986c:	3a30      	subs	r2, #48	; 0x30
 800986e:	2a09      	cmp	r2, #9
 8009870:	d903      	bls.n	800987a <_vfiprintf_r+0x1ee>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0c5      	beq.n	8009802 <_vfiprintf_r+0x176>
 8009876:	9105      	str	r1, [sp, #20]
 8009878:	e7c3      	b.n	8009802 <_vfiprintf_r+0x176>
 800987a:	fb0c 2101 	mla	r1, ip, r1, r2
 800987e:	4604      	mov	r4, r0
 8009880:	2301      	movs	r3, #1
 8009882:	e7f0      	b.n	8009866 <_vfiprintf_r+0x1da>
 8009884:	ab03      	add	r3, sp, #12
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	462a      	mov	r2, r5
 800988a:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <_vfiprintf_r+0x258>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	4630      	mov	r0, r6
 8009890:	f7fd fcca 	bl	8007228 <_printf_float>
 8009894:	4607      	mov	r7, r0
 8009896:	1c78      	adds	r0, r7, #1
 8009898:	d1d6      	bne.n	8009848 <_vfiprintf_r+0x1bc>
 800989a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	d405      	bmi.n	80098ac <_vfiprintf_r+0x220>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	059a      	lsls	r2, r3, #22
 80098a4:	d402      	bmi.n	80098ac <_vfiprintf_r+0x220>
 80098a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a8:	f7fd fb72 	bl	8006f90 <__retarget_lock_release_recursive>
 80098ac:	89ab      	ldrh	r3, [r5, #12]
 80098ae:	065b      	lsls	r3, r3, #25
 80098b0:	f53f af12 	bmi.w	80096d8 <_vfiprintf_r+0x4c>
 80098b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098b6:	e711      	b.n	80096dc <_vfiprintf_r+0x50>
 80098b8:	ab03      	add	r3, sp, #12
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	462a      	mov	r2, r5
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <_vfiprintf_r+0x258>)
 80098c0:	a904      	add	r1, sp, #16
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7fd ff54 	bl	8007770 <_printf_i>
 80098c8:	e7e4      	b.n	8009894 <_vfiprintf_r+0x208>
 80098ca:	bf00      	nop
 80098cc:	08009af0 	.word	0x08009af0
 80098d0:	08009b10 	.word	0x08009b10
 80098d4:	08009ad0 	.word	0x08009ad0
 80098d8:	08009d9a 	.word	0x08009d9a
 80098dc:	08009da4 	.word	0x08009da4
 80098e0:	08007229 	.word	0x08007229
 80098e4:	08009667 	.word	0x08009667
 80098e8:	08009da0 	.word	0x08009da0

080098ec <__ascii_wctomb>:
 80098ec:	b149      	cbz	r1, 8009902 <__ascii_wctomb+0x16>
 80098ee:	2aff      	cmp	r2, #255	; 0xff
 80098f0:	bf85      	ittet	hi
 80098f2:	238a      	movhi	r3, #138	; 0x8a
 80098f4:	6003      	strhi	r3, [r0, #0]
 80098f6:	700a      	strbls	r2, [r1, #0]
 80098f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80098fc:	bf98      	it	ls
 80098fe:	2001      	movls	r0, #1
 8009900:	4770      	bx	lr
 8009902:	4608      	mov	r0, r1
 8009904:	4770      	bx	lr

08009906 <abort>:
 8009906:	b508      	push	{r3, lr}
 8009908:	2006      	movs	r0, #6
 800990a:	f000 f82b 	bl	8009964 <raise>
 800990e:	2001      	movs	r0, #1
 8009910:	f7f7 fed2 	bl	80016b8 <_exit>

08009914 <_raise_r>:
 8009914:	291f      	cmp	r1, #31
 8009916:	b538      	push	{r3, r4, r5, lr}
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	d904      	bls.n	8009928 <_raise_r+0x14>
 800991e:	2316      	movs	r3, #22
 8009920:	6003      	str	r3, [r0, #0]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800992a:	b112      	cbz	r2, 8009932 <_raise_r+0x1e>
 800992c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009930:	b94b      	cbnz	r3, 8009946 <_raise_r+0x32>
 8009932:	4620      	mov	r0, r4
 8009934:	f000 f830 	bl	8009998 <_getpid_r>
 8009938:	462a      	mov	r2, r5
 800993a:	4601      	mov	r1, r0
 800993c:	4620      	mov	r0, r4
 800993e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009942:	f000 b817 	b.w	8009974 <_kill_r>
 8009946:	2b01      	cmp	r3, #1
 8009948:	d00a      	beq.n	8009960 <_raise_r+0x4c>
 800994a:	1c59      	adds	r1, r3, #1
 800994c:	d103      	bne.n	8009956 <_raise_r+0x42>
 800994e:	2316      	movs	r3, #22
 8009950:	6003      	str	r3, [r0, #0]
 8009952:	2001      	movs	r0, #1
 8009954:	e7e7      	b.n	8009926 <_raise_r+0x12>
 8009956:	2400      	movs	r4, #0
 8009958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800995c:	4628      	mov	r0, r5
 800995e:	4798      	blx	r3
 8009960:	2000      	movs	r0, #0
 8009962:	e7e0      	b.n	8009926 <_raise_r+0x12>

08009964 <raise>:
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <raise+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f7ff bfd3 	b.w	8009914 <_raise_r>
 800996e:	bf00      	nop
 8009970:	20000010 	.word	0x20000010

08009974 <_kill_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_kill_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f7f7 fe89 	bl	8001698 <_kill>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_kill_r+0x1c>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b103      	cbz	r3, 8009990 <_kill_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	20001de0 	.word	0x20001de0

08009998 <_getpid_r>:
 8009998:	f7f7 be76 	b.w	8001688 <_getpid>

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
