
Batonome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  20000074  08007218  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08007218  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f42  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f65  00000000  00000000  00040fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  000469b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f97  00000000  00000000  000482a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e491  00000000  00000000  0004c23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d639e  00000000  00000000  0006a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  00140ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007058 	.word	0x08007058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007058 	.word	0x08007058

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc43 	bl	8000d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f82e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f954 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f870 	bl	80005c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004e8:	f000 f8ac 	bl	8000644 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f8e8 	bl	80006c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f91c 	bl	800072c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  zigbee_Init();
 80004f4:	f000 fbec 	bl	8000cd0 <zigbee_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f003 ff32 	bl	8004360 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x54>)
 8000502:	f003 ff77 	bl	80043f4 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x60>)
 8000512:	f003 ff6f 	bl	80043f4 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f003 ff44 	bl	80043a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x4c>
 8000522:	bf00      	nop
 8000524:	080070a4 	.word	0x080070a4
 8000528:	080007d5 	.word	0x080007d5
 800052c:	200002a4 	.word	0x200002a4
 8000530:	080070c8 	.word	0x080070c8
 8000534:	080007df 	.word	0x080007df
 8000538:	200002a8 	.word	0x200002a8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fcba 	bl	8006ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f001 f837 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f952 	bl	8000814 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000570:	2310      	movs	r3, #16
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	; 0x60
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f879 	bl	8001680 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000594:	f000 f93e 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fc79 	bl	8001ea8 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005bc:	f000 f92a 	bl	8000814 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_I2C1_Init+0x74>)
 80005d4:	f640 6214 	movw	r2, #3604	; 0xe14
 80005d8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_I2C1_Init+0x74>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_I2C1_Init+0x74>)
 8000606:	f000 feb1 	bl	800136c <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f900 	bl	8000814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <MX_I2C1_Init+0x74>)
 8000618:	f000 ff37 	bl	800148a <HAL_I2CEx_ConfigAnalogFilter>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 f8f7 	bl	8000814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x74>)
 800062a:	f000 ff79 	bl	8001520 <HAL_I2CEx_ConfigDigitalFilter>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000634:	f000 f8ee 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000f4 	.word	0x200000f4
 8000640:	40005400 	.word	0x40005400

08000644 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_I2C3_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_I2C3_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000650:	f640 6214 	movw	r2, #3604	; 0xe14
 8000654:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_I2C3_Init+0x74>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2C3_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C3_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000682:	f000 fe73 	bl	800136c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f8c2 	bl	8000814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000694:	f000 fef9 	bl	800148a <HAL_I2CEx_ConfigAnalogFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800069e:	f000 f8b9 	bl	8000814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C3_Init+0x74>)
 80006a6:	f000 ff3b 	bl	8001520 <HAL_I2CEx_ConfigDigitalFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f000 f8b0 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000148 	.word	0x20000148
 80006bc:	40005c00 	.word	0x40005c00

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_USART1_UART_Init+0x64>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_USART1_UART_Init+0x60>)
 8000704:	f002 fb8e 	bl	8002e24 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f881 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, received_data, sizeof(received_data));  // activer les interruptions de réception pour huart1
 8000712:	2264      	movs	r2, #100	; 0x64
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <MX_USART1_UART_Init+0x68>)
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <MX_USART1_UART_Init+0x60>)
 8000718:	f002 fbd2 	bl	8002ec0 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000019c 	.word	0x2000019c
 8000724:	40013800 	.word	0x40013800
 8000728:	20000090 	.word	0x20000090

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	f002 fb58 	bl	8002e24 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f84b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000220 	.word	0x20000220
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x44>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x44>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x44>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x44>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x44>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x44>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80007dc:	e7fe      	b.n	80007dc <StartBlink01+0x8>

080007de <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f003 fe96 	bl	8004518 <osDelay>
 80007ec:	e7fb      	b.n	80007e6 <StartBlink02+0x8>
	...

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fac7 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40001000 	.word	0x40001000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_MspInit+0x4c>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	; 0x60
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_MspInit+0x4c>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x4c>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fb71 	bl	8000f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a2      	sub	sp, #136	; 0x88
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	2254      	movs	r2, #84	; 0x54
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f006 fb17 	bl	8006ec4 <memset>
  if(hi2c->Instance==I2C1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a4f      	ldr	r2, [pc, #316]	; (80009d8 <HAL_I2C_MspInit+0x168>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d13a      	bne.n	8000916 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fd51 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008b8:	f7ff ffac 	bl	8000814 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b47      	ldr	r3, [pc, #284]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c8:	4b44      	ldr	r3, [pc, #272]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e8:	2304      	movs	r3, #4
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 fbce 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fc:	4b37      	ldr	r3, [pc, #220]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	4a36      	ldr	r2, [pc, #216]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 8000902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000906:	6593      	str	r3, [r2, #88]	; 0x58
 8000908:	4b34      	ldr	r3, [pc, #208]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000914:	e05c      	b.n	80009d0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <HAL_I2C_MspInit+0x170>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d157      	bne.n	80009d0 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000926:	2300      	movs	r3, #0
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fd10 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800093a:	f7ff ff6b 	bl	8000814 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000972:	2312      	movs	r3, #18
 8000974:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000980:	2304      	movs	r3, #4
 8000982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fb82 	bl	8001098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000994:	2310      	movs	r3, #16
 8000996:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000998:	2312      	movs	r3, #18
 800099a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009a6:	2304      	movs	r3, #4
 80009a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <HAL_I2C_MspInit+0x174>)
 80009b4:	f000 fb70 	bl	8001098 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80009be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009c2:	6593      	str	r3, [r2, #88]	; 0x58
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_I2C_MspInit+0x16c>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3788      	adds	r7, #136	; 0x88
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40005c00 	.word	0x40005c00
 80009e4:	48000400 	.word	0x48000400

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0a0      	sub	sp, #128	; 0x80
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	2254      	movs	r2, #84	; 0x54
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f006 fa5b 	bl	8006ec4 <memset>
  if(huart->Instance==USART1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a41      	ldr	r2, [pc, #260]	; (8000b18 <HAL_UART_MspInit+0x130>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13e      	bne.n	8000a96 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fc95 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff fef0 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a38:	4a38      	ldr	r2, [pc, #224]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a64:	23c0      	movs	r3, #192	; 0xc0
 8000a66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a74:	2307      	movs	r3, #7
 8000a76:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4828      	ldr	r0, [pc, #160]	; (8000b20 <HAL_UART_MspInit+0x138>)
 8000a80:	f000 fb0a 	bl	8001098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2105      	movs	r1, #5
 8000a88:	2025      	movs	r0, #37	; 0x25
 8000a8a:	f000 fa5b 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a8e:	2025      	movs	r0, #37	; 0x25
 8000a90:	f000 fa74 	bl	8000f7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a94:	e03b      	b.n	8000b0e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_UART_MspInit+0x13c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d136      	bne.n	8000b0e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fc51 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ab8:	f7ff feac 	bl	8000814 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x134>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aec:	230c      	movs	r3, #12
 8000aee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afc:	2307      	movs	r3, #7
 8000afe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 fac5 	bl	8001098 <HAL_GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3780      	adds	r7, #128	; 0x80
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	40004400 	.word	0x40004400

08000b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <HAL_InitTick+0xe0>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	4a33      	ldr	r2, [pc, #204]	; (8000c08 <HAL_InitTick+0xe0>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6593      	str	r3, [r2, #88]	; 0x58
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <HAL_InitTick+0xe0>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4e:	f107 0210 	add.w	r2, r7, #16
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fb69 	bl	8002230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d103      	bne.n	8000b70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b68:	f001 fb36 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8000b6c:	6378      	str	r0, [r7, #52]	; 0x34
 8000b6e:	e004      	b.n	8000b7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b70:	f001 fb32 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8000b74:	4603      	mov	r3, r0
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b8a:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_InitTick+0xec>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_InitTick+0xe8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_InitTick+0xe8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bae:	4818      	ldr	r0, [pc, #96]	; (8000c10 <HAL_InitTick+0xe8>)
 8000bb0:	f001 feb8 	bl	8002924 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11b      	bne.n	8000bfa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc2:	4813      	ldr	r0, [pc, #76]	; (8000c10 <HAL_InitTick+0xe8>)
 8000bc4:	f001 ff10 	bl	80029e8 <HAL_TIM_Base_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d111      	bne.n	8000bfa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd6:	2036      	movs	r0, #54	; 0x36
 8000bd8:	f000 f9d0 	bl	8000f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d808      	bhi.n	8000bf4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	2036      	movs	r0, #54	; 0x36
 8000be8:	f000 f9ac 	bl	8000f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_InitTick+0xf0>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e002      	b.n	8000bfa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3738      	adds	r7, #56	; 0x38
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	200002ac 	.word	0x200002ac
 8000c14:	40001000 	.word	0x40001000
 8000c18:	20000004 	.word	0x20000004

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART1_IRQHandler+0x10>)
 8000c4e:	f002 f98d 	bl	8002f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000019c 	.word	0x2000019c

08000c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM6_DAC_IRQHandler+0x10>)
 8000c62:	f001 ff15 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200002ac 	.word	0x200002ac

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Vérifiez si l'interruption est pour UART2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <HAL_UART_RxCpltCallback+0x24>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d104      	bne.n	8000c8c <HAL_UART_RxCpltCallback+0x1c>
        // traitement des données reçues
        // ...
        HAL_UART_Receive_IT(&huart1, received_data, sizeof(received_data)); // redemande la réception pour continuer avec la suite des données
 8000c82:	2264      	movs	r2, #100	; 0x64
 8000c84:	4904      	ldr	r1, [pc, #16]	; (8000c98 <HAL_UART_RxCpltCallback+0x28>)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_RxCpltCallback+0x2c>)
 8000c88:	f002 f91a 	bl	8002ec0 <HAL_UART_Receive_IT>
    }
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	20000090 	.word	0x20000090
 8000c9c:	2000019c 	.word	0x2000019c

08000ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <StartZigbeeCom>:
    HAL_UART_Receive(&huart1, data, size, 100);
}


void StartZigbeeCom(void *argument)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */


  for(;;)
 8000ccc:	e7fe      	b.n	8000ccc <StartZigbeeCom+0x8>
	...

08000cd0 <zigbee_Init>:
  }
  /* USER CODE END 5 */
}

void zigbee_Init()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t zigbeeComHandle;
	const osThreadAttr_t zigbee_com_attributes = {
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2224      	movs	r2, #36	; 0x24
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 f8f1 	bl	8006ec4 <memset>
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <zigbee_Init+0x38>)
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	2318      	movs	r3, #24
 8000cee:	61bb      	str	r3, [r7, #24]
	  .name = "zigbee_com",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	zigbeeComHandle = osThreadNew(StartZigbeeCom, NULL, &zigbee_com_attributes);
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <zigbee_Init+0x3c>)
 8000cf8:	f003 fb7c 	bl	80043f4 <osThreadNew>
 8000cfc:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08007080 	.word	0x08007080
 8000d0c:	08000cc5 	.word	0x08000cc5

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffc4 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f006 f88d 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fbc7 	bl	80004d4 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d54:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8000d58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d5c:	20001ccc 	.word	0x20001ccc

08000d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>

08000d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8de 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff fed8 	bl	8000b28 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e001      	b.n	8000d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d84:	f7ff fd4c 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200002f8 	.word	0x200002f8

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200002f8 	.word	0x200002f8

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f56:	f7ff ff61 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff ffb1 	bl	8000ec8 <NVIC_EncodePriority>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff80 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff54 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e022      	b.n	8001008 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 020e 	bic.w	r2, r2, #14
 8000fd0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 021c 	and.w	r2, r3, #28
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d005      	beq.n	8001038 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e029      	b.n	800108c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
    }
  }
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e148      	b.n	800133a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 813a 	beq.w	8001334 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x40>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d017      	beq.n	8001176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0203 	and.w	r2, r3, #3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8094 	beq.w	8001334 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b52      	ldr	r3, [pc, #328]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6613      	str	r3, [r2, #96]	; 0x60
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x2c4>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1d4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_GPIO_Init+0x2c8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1d0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_GPIO_Init+0x2cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1cc>
 8001260:	2302      	movs	r3, #2
 8001262:	e004      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 8001264:	2307      	movs	r3, #7
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 800126c:	2300      	movs	r3, #0
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_GPIO_Init+0x2c4>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f aeaf 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e081      	b.n	8001482 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fa6c 	bl	8000870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d104      	bne.n	8001406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69d9      	ldr	r1, [r3, #28]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	d138      	bne.n	8001512 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e032      	b.n	8001514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2224      	movs	r2, #36	; 0x24
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001512:	2302      	movs	r3, #2
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d139      	bne.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001540:	2302      	movs	r3, #2
 8001542:	e033      	b.n	80015ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001572:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015aa:	2302      	movs	r3, #2
  }
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e2:	d130      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	d038      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2232      	movs	r2, #50	; 0x32
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	e002      	b.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162c:	d102      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d110      	bne.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e00f      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d007      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f000 bc02 	b.w	8001e98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80e4 	beq.w	800187e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_RCC_OscConfig+0x4c>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	f040 808b 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	f040 8087 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x64>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e3d9      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_RCC_OscConfig+0x7e>
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fc:	e005      	b.n	800170a <HAL_RCC_OscConfig+0x8a>
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170a:	4293      	cmp	r3, r2
 800170c:	d223      	bcs.n	8001756 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fdbe 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3ba      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	496d      	ldr	r1, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4968      	ldr	r1, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e025      	b.n	80017a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4960      	ldr	r1, [pc, #384]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	495b      	ldr	r1, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd7e 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e37a      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a2:	f000 fc81 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	4950      	ldr	r1, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80017b4:	5ccb      	ldrb	r3, [r1, r3]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <HAL_RCC_OscConfig+0x278>)
 80017c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9ae 	bl	8000b28 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d052      	beq.n	800187c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	e35e      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d032      	beq.n	8001848 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fae5 	bl	8000dbc <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f6:	f7ff fae1 	bl	8000dbc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e347      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4930      	ldr	r1, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	492b      	ldr	r1, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e01a      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001854:	f7ff fab2 	bl	8000dbc <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff faae 	bl	8000dbc <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e314      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1dc>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d073      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x21c>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d10e      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d10b      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d063      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d15f      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e2f1      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x24c>
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e025      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d114      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	080070ec 	.word	0x080070ec
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004
 8001900:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9c      	ldr	r2, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa4c 	bl	8000dbc <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fa48 	bl	8000dbc <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2ae      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fa38 	bl	8000dbc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fa34 	bl	8000dbc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e29a      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x2d0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d060      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x310>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d119      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d116      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x328>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e277      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4973      	ldr	r1, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e040      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f9f3 	bl	8000dbc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f9ef 	bl	8000dbc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e255      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	495f      	ldr	r1, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f9cf 	bl	8000dbc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f9cb 	bl	8000dbc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e231      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f9aa 	bl	8000dbc <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f9a6 	bl	8000dbc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e20c      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ec>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f98d 	bl	8000dbc <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f989 	bl	8000dbc <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1ef      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f950 	bl	8000dbc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff f94c 	bl	8000dbc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1b2      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d8>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b56:	e029      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d115      	bne.n	8001b8c <HAL_RCC_OscConfig+0x50c>
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	4b9a      	ldr	r3, [pc, #616]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a99      	ldr	r2, [pc, #612]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9c:	4b96      	ldr	r3, [pc, #600]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a95      	ldr	r2, [pc, #596]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f902 	bl	8000dbc <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f8fe 	bl	8000dbc <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e162      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ed      	beq.n	8001bbc <HAL_RCC_OscConfig+0x53c>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f8eb 	bl	8000dbc <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f8e7 	bl	8000dbc <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e14b      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ed      	bne.n	8001bea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c34:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3a:	4a6f      	ldr	r2, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f8ba 	bl	8000dbc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4c:	f7ff f8b6 	bl	8000dbc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e11c      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5e:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x5cc>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6e:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f89d 	bl	8000dbc <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7ff f899 	bl	8000dbc <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0ff      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80f3 	beq.w	8001e96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 80c9 	bne.w	8001e4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cba:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d12c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d123      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d11b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d113      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d06b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d062      	beq.n	8001df4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0ac      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2d      	ldr	r2, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d4a:	f7ff f837 	bl	8000dbc <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff f833 	bl	8000dbc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e099      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCC_OscConfig+0x77c>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d92:	0852      	lsrs	r2, r2, #1
 8001d94:	3a01      	subs	r2, #1
 8001d96:	0552      	lsls	r2, r2, #21
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0652      	lsls	r2, r2, #25
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001daa:	06d2      	lsls	r2, r2, #27
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4912      	ldr	r1, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dcc:	f7fe fff6 	bl	8000dbc <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe fff2 	bl	8000dbc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e058      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_OscConfig+0x778>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df2:	e050      	b.n	8001e96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04f      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d144      	bne.n	8001e96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e24:	f7fe ffca 	bl	8000dbc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ffc6 	bl	8000dbc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e02c      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x7ac>
 8001e4a:	e024      	b.n	8001e96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d01f      	beq.n	8001e92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ffad 	bl	8000dbc <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe ffa9 	bl	8000dbc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4905      	ldr	r1, [pc, #20]	; (8001ea0 <HAL_RCC_OscConfig+0x820>)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_OscConfig+0x824>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	e001      	b.n	8001e96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	feeefffc 	.word	0xfeeefffc

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0e7      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4970      	ldr	r1, [pc, #448]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b6e      	ldr	r3, [pc, #440]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0cf      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d908      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b63      	ldr	r3, [pc, #396]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4960      	ldr	r1, [pc, #384]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04c      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0a6      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e09a      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e08e      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e086      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4943      	ldr	r1, [pc, #268]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe ff14 	bl	8000dbc <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe ff10 	bl	8000dbc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e06e      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d208      	bcs.n	8001fee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	492b      	ldr	r1, [pc, #172]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d210      	bcs.n	800201e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4923      	ldr	r1, [pc, #140]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e036      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4918      	ldr	r1, [pc, #96]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4910      	ldr	r1, [pc, #64]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205c:	f000 f824 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	490b      	ldr	r1, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 800207a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1fc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fd51 	bl	8000b28 <HAL_InitTick>
 8002086:	4603      	mov	r3, r0
 8002088:	72fb      	strb	r3, [r7, #11]

  return status;
 800208a:	7afb      	ldrb	r3, [r7, #11]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	080070ec 	.word	0x080070ec
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x34>
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d121      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11e      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e005      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10d      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d102      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e004      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d101      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_RCC_GetSysClockFreq+0x114>)
 800212e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d134      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0xa6>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d003      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0xac>
 800214c:	e005      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002150:	617b      	str	r3, [r7, #20]
      break;
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002156:	617b      	str	r3, [r7, #20]
      break;
 8002158:	e002      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	3301      	adds	r3, #1
 800216c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	fb03 f202 	mul.w	r2, r3, r2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0e5b      	lsrs	r3, r3, #25
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	3301      	adds	r3, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a0:	69bb      	ldr	r3, [r7, #24]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08007104 	.word	0x08007104
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4904      	ldr	r1, [pc, #16]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	080070fc 	.word	0x080070fc

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002208:	f7ff ffda 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0adb      	lsrs	r3, r3, #11
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCC_GetPCLK2Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	080070fc 	.word	0x080070fc

08002230 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	220f      	movs	r2, #15
 800223e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCC_GetClockConfig+0x60>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40022000 	.word	0x40022000

08002294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022ac:	f7ff f984 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80022b0:	6178      	str	r0, [r7, #20]
 80022b2:	e014      	b.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff f974 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80022d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d10b      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d919      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2ba0      	cmp	r3, #160	; 0xa0
 80022f0:	d902      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e013      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e010      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d902      	bls.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e00a      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d102      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e004      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d101      	bne.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0207 	bic.w	r2, r3, #7
 8002328:	4909      	ldr	r1, [pc, #36]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002360:	2300      	movs	r3, #0
 8002362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236c:	2b00      	cmp	r3, #0
 800236e:	d031      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002378:	d01a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800237a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800237e:	d814      	bhi.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002388:	d10f      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002396:	e00c      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f9ce 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a8:	e003      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	74fb      	strb	r3, [r7, #19]
      break;
 80023ae:	e000      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b8:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	494e      	ldr	r1, [pc, #312]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ce:	e001      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 809e 	beq.w	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	; 0x58
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a39      	ldr	r2, [pc, #228]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002424:	f7fe fcca 	bl	8000dbc <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242a:	e009      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe fcc6 	bl	8000dbc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d902      	bls.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	74fb      	strb	r3, [r7, #19]
        break;
 800243e:	e005      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d15a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01e      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	429a      	cmp	r2, r3
 800246c:	d019      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002478:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800249a:	4a19      	ldr	r2, [pc, #100]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d016      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fc86 	bl	8000dbc <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	e00b      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fc82 	bl	8000dbc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d902      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	74fb      	strb	r3, [r7, #19]
            break;
 80024ca:	e006      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ec      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ee:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024f6:	e009      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
 80024fc:	e006      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250c:	7c7b      	ldrb	r3, [r7, #17]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4a89      	ldr	r2, [pc, #548]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252a:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 0203 	bic.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4980      	ldr	r1, [pc, #512]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 020c 	bic.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	4978      	ldr	r1, [pc, #480]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	496f      	ldr	r1, [pc, #444]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	4967      	ldr	r1, [pc, #412]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	495e      	ldr	r1, [pc, #376]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	4956      	ldr	r1, [pc, #344]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d028      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4945      	ldr	r1, [pc, #276]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002636:	d106      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002642:	60d3      	str	r3, [r2, #12]
 8002644:	e011      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264e:	d10c      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f872 	bl	8002740 <RCCEx_PLLSAI1_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d028      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	492d      	ldr	r1, [pc, #180]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002694:	d106      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a0:	60d3      	str	r3, [r2, #12]
 80026a2:	e011      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f843 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f2:	d10c      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	2102      	movs	r1, #2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f820 	bl	8002740 <RCCEx_PLLSAI1_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002730:	7cbb      	ldrb	r3, [r7, #18]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000

08002740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800275a:	4b71      	ldr	r3, [pc, #452]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
       ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002772:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
       ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d047      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d018      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x86>
 8002794:	2b03      	cmp	r3, #3
 8002796:	d825      	bhi.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x62>
 800279c:	2b02      	cmp	r3, #2
 800279e:	d009      	beq.n	80027b4 <RCCEx_PLLSAI1_Config+0x74>
 80027a0:	e020      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a2:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11d      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e01a      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b4:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e013      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e2:	e006      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e004      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	430b      	orrs	r3, r1
 8002810:	4943      	ldr	r1, [pc, #268]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17c      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fac8 	bl	8000dbc <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800282e:	e009      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002830:	f7fe fac4 	bl	8000dbc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	73fb      	strb	r3, [r7, #15]
        break;
 8002842:	e005      	b.n	8002850 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ef      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d15f      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d110      	bne.n	800287e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	06d2      	lsls	r2, r2, #27
 8002874:	430a      	orrs	r2, r1
 8002876:	492a      	ldr	r1, [pc, #168]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	610b      	str	r3, [r1, #16]
 800287c:	e027      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d112      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800288c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0552      	lsls	r2, r2, #21
 80028a0:	430a      	orrs	r2, r1
 80028a2:	491f      	ldr	r1, [pc, #124]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	610b      	str	r3, [r1, #16]
 80028a8:	e011      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6952      	ldr	r2, [r2, #20]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0652      	lsls	r2, r2, #25
 80028c6:	430a      	orrs	r2, r1
 80028c8:	4915      	ldr	r1, [pc, #84]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fa6f 	bl	8000dbc <HAL_GetTick>
 80028de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e0:	e009      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e2:	f7fe fa6b 	bl	8000dbc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d902      	bls.n	80028f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	73fb      	strb	r3, [r7, #15]
          break;
 80028f4:	e005      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e049      	b.n	80029ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f841 	bl	80029d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 f9dc 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e03b      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_TIM_Base_Start_IT+0x4e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_Base_Start_IT+0x4e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d115      	bne.n	8002a62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_TIM_Base_Start_IT+0xa4>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d015      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4e:	d011      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	e008      	b.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e000      	b.n	8002a76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	00010007 	.word	0x00010007

08002a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0202 	mvn.w	r2, #2
 8002abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f905 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8f7 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f908 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0204 	mvn.w	r2, #4
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8db 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8cd 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8de 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0208 	mvn.w	r2, #8
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8b1 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8a3 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8b4 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f887 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f879 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f88a 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0201 	mvn.w	r2, #1
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fdee 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b80      	cmp	r3, #128	; 0x80
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8de 	bl	8002dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8d1 	bl	8002e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d10e      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d107      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f838 	bl	8002d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d107      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0220 	mvn.w	r2, #32
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f891 	bl	8002de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x20>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <TIM_Base_SetConfig+0xc0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <TIM_Base_SetConfig+0xc4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_Base_SetConfig+0xa0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <TIM_Base_SetConfig+0xc0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <TIM_Base_SetConfig+0xc4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40014000 	.word	0x40014000
 8002de4:	40014400 	.word	0x40014400

08002de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e040      	b.n	8002eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fdce 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fb84 	bl	8003570 <UART_SetConfig>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fda4 	bl	80039c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe2b 	bl	8003b0c <UART_CheckIdleState>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d142      	bne.n	8002f5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Receive_IT+0x22>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e03b      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Receive_IT+0x34>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e034      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_UART_Receive_IT+0xa8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01f      	beq.n	8002f4c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	613b      	str	r3, [r7, #16]
   return(result);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	69f9      	ldr	r1, [r7, #28]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e6      	bne.n	8002f1a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fee8 	bl	8003d28 <UART_Start_Receive_IT>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3728      	adds	r7, #40	; 0x28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40008000 	.word	0x40008000

08002f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0ba      	sub	sp, #232	; 0xe8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d115      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00f      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 82a6 	beq.w	8003516 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
      }
      return;
 8002fd2:	e2a0      	b.n	8003516 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8117 	beq.w	800320c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fee:	4b85      	ldr	r3, [pc, #532]	; (8003204 <HAL_UART_IRQHandler+0x298>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 810a 	beq.w	800320c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d011      	beq.n	8003028 <HAL_UART_IRQHandler+0xbc>
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d011      	beq.n	8003058 <HAL_UART_IRQHandler+0xec>
 8003034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2202      	movs	r2, #2
 8003046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d011      	beq.n	8003088 <HAL_UART_IRQHandler+0x11c>
 8003064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2204      	movs	r2, #4
 8003076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307e:	f043 0202 	orr.w	r2, r3, #2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2208      	movs	r2, #8
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d012      	beq.n	80030f6 <HAL_UART_IRQHandler+0x18a>
 80030d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 820c 	beq.w	800351a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800310e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04f      	beq.n	80031ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 feb4 	bl	8003ebc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d141      	bne.n	80031e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3308      	adds	r3, #8
 8003168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800317c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800318e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800319a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1d9      	bne.n	8003162 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d013      	beq.n	80031de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a13      	ldr	r2, [pc, #76]	; (8003208 <HAL_UART_IRQHandler+0x29c>)
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ff26 	bl	8001014 <HAL_DMA_Abort_IT>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031d8:	4610      	mov	r0, r2
 80031da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	e00f      	b.n	80031fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9b0 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	e00b      	b.n	80031fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9ac 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	e007      	b.n	80031fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9a8 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031fc:	e18d      	b.n	800351a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fe:	bf00      	nop
    return;
 8003200:	e18b      	b.n	800351a <HAL_UART_IRQHandler+0x5ae>
 8003202:	bf00      	nop
 8003204:	04000120 	.word	0x04000120
 8003208:	08003f83 	.word	0x08003f83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 8146 	bne.w	80034a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 813f 	beq.w	80034a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8138 	beq.w	80034a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	f040 80b4 	bne.w	80033b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003256:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 815f 	beq.w	800351e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800326a:	429a      	cmp	r2, r3
 800326c:	f080 8157 	bcs.w	800351e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8085 	bne.w	8003396 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1da      	bne.n	800328c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3308      	adds	r3, #8
 80032dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3308      	adds	r3, #8
 80032f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800330c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e1      	bne.n	80032d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800333c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e3      	bne.n	8003312 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	f023 0310 	bic.w	r3, r3, #16
 800336a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003378:	65bb      	str	r3, [r7, #88]	; 0x58
 800337a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800337e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e4      	bne.n	8003356 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fe01 	bl	8000f98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8d4 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033b0:	e0b5      	b.n	800351e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a7 	beq.w	8003522 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80033d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a2 	beq.w	8003522 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003400:	647b      	str	r3, [r7, #68]	; 0x44
 8003402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800340e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e4      	bne.n	80033de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3308      	adds	r3, #8
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	623b      	str	r3, [r7, #32]
   return(result);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3308      	adds	r3, #8
 8003434:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003438:	633a      	str	r2, [r7, #48]	; 0x30
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60fb      	str	r3, [r7, #12]
   return(result);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	617b      	str	r3, [r7, #20]
   return(result);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e4      	bne.n	800345e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f85c 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034a0:	e03f      	b.n	8003522 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <HAL_UART_IRQHandler+0x560>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fefc 	bl	80042c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034ca:	e02d      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01c      	beq.n	8003526 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
    }
    return;
 80034f4:	e017      	b.n	8003526 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_UART_IRQHandler+0x5bc>
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fd4d 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003514:	e008      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003516:	bf00      	nop
 8003518:	e006      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
    return;
 800351a:	bf00      	nop
 800351c:	e004      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
      return;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003526:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003528:	37e8      	adds	r7, #232	; 0xe8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop

08003530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b08a      	sub	sp, #40	; 0x28
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4bb4      	ldr	r3, [pc, #720]	; (8003870 <UART_SetConfig+0x300>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4aa9      	ldr	r2, [pc, #676]	; (8003874 <UART_SetConfig+0x304>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4313      	orrs	r3, r2
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4aa0      	ldr	r2, [pc, #640]	; (8003878 <UART_SetConfig+0x308>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d126      	bne.n	8003648 <UART_SetConfig+0xd8>
 80035fa:	4ba0      	ldr	r3, [pc, #640]	; (800387c <UART_SetConfig+0x30c>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d81b      	bhi.n	8003640 <UART_SetConfig+0xd0>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0xa0>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003631 	.word	0x08003631
 8003618:	08003629 	.word	0x08003629
 800361c:	08003639 	.word	0x08003639
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e080      	b.n	800372a <UART_SetConfig+0x1ba>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e07c      	b.n	800372a <UART_SetConfig+0x1ba>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e078      	b.n	800372a <UART_SetConfig+0x1ba>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e074      	b.n	800372a <UART_SetConfig+0x1ba>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	e070      	b.n	800372a <UART_SetConfig+0x1ba>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a8c      	ldr	r2, [pc, #560]	; (8003880 <UART_SetConfig+0x310>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d138      	bne.n	80036c4 <UART_SetConfig+0x154>
 8003652:	4b8a      	ldr	r3, [pc, #552]	; (800387c <UART_SetConfig+0x30c>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d82d      	bhi.n	80036bc <UART_SetConfig+0x14c>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <UART_SetConfig+0xf8>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036bd 	.word	0x080036bd
 8003670:	080036bd 	.word	0x080036bd
 8003674:	080036bd 	.word	0x080036bd
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036bd 	.word	0x080036bd
 8003684:	080036bd 	.word	0x080036bd
 8003688:	080036a5 	.word	0x080036a5
 800368c:	080036bd 	.word	0x080036bd
 8003690:	080036bd 	.word	0x080036bd
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036b5 	.word	0x080036b5
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e042      	b.n	800372a <UART_SetConfig+0x1ba>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e03e      	b.n	800372a <UART_SetConfig+0x1ba>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e03a      	b.n	800372a <UART_SetConfig+0x1ba>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e036      	b.n	800372a <UART_SetConfig+0x1ba>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e032      	b.n	800372a <UART_SetConfig+0x1ba>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6a      	ldr	r2, [pc, #424]	; (8003874 <UART_SetConfig+0x304>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12a      	bne.n	8003724 <UART_SetConfig+0x1b4>
 80036ce:	4b6b      	ldr	r3, [pc, #428]	; (800387c <UART_SetConfig+0x30c>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036dc:	d01a      	beq.n	8003714 <UART_SetConfig+0x1a4>
 80036de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0x1ac>
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d00c      	beq.n	8003704 <UART_SetConfig+0x194>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d815      	bhi.n	800371c <UART_SetConfig+0x1ac>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <UART_SetConfig+0x18c>
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d008      	beq.n	800370c <UART_SetConfig+0x19c>
 80036fa:	e00f      	b.n	800371c <UART_SetConfig+0x1ac>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e012      	b.n	800372a <UART_SetConfig+0x1ba>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e00e      	b.n	800372a <UART_SetConfig+0x1ba>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e00a      	b.n	800372a <UART_SetConfig+0x1ba>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e006      	b.n	800372a <UART_SetConfig+0x1ba>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x1ba>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a51      	ldr	r2, [pc, #324]	; (8003874 <UART_SetConfig+0x304>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d17a      	bne.n	800382a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003738:	2b08      	cmp	r3, #8
 800373a:	d824      	bhi.n	8003786 <UART_SetConfig+0x216>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x1d4>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003787 	.word	0x08003787
 800374c:	08003771 	.word	0x08003771
 8003750:	08003787 	.word	0x08003787
 8003754:	08003777 	.word	0x08003777
 8003758:	08003787 	.word	0x08003787
 800375c:	08003787 	.word	0x08003787
 8003760:	08003787 	.word	0x08003787
 8003764:	0800377f 	.word	0x0800377f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7fe fd36 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 800376c:	61f8      	str	r0, [r7, #28]
        break;
 800376e:	e010      	b.n	8003792 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b44      	ldr	r3, [pc, #272]	; (8003884 <UART_SetConfig+0x314>)
 8003772:	61fb      	str	r3, [r7, #28]
        break;
 8003774:	e00d      	b.n	8003792 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7fe fc97 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800377a:	61f8      	str	r0, [r7, #28]
        break;
 800377c:	e009      	b.n	8003792 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	61fb      	str	r3, [r7, #28]
        break;
 8003784:	e005      	b.n	8003792 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8107 	beq.w	80039a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d305      	bcc.n	80037b6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d903      	bls.n	80037be <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037bc:	e0f4      	b.n	80039a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2200      	movs	r2, #0
 80037c2:	461c      	mov	r4, r3
 80037c4:	4615      	mov	r5, r2
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	022b      	lsls	r3, r5, #8
 80037d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037d4:	0222      	lsls	r2, r4, #8
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	6849      	ldr	r1, [r1, #4]
 80037da:	0849      	lsrs	r1, r1, #1
 80037dc:	2000      	movs	r0, #0
 80037de:	4688      	mov	r8, r1
 80037e0:	4681      	mov	r9, r0
 80037e2:	eb12 0a08 	adds.w	sl, r2, r8
 80037e6:	eb43 0b09 	adc.w	fp, r3, r9
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f8:	4650      	mov	r0, sl
 80037fa:	4659      	mov	r1, fp
 80037fc:	f7fc fce8 	bl	80001d0 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380e:	d308      	bcc.n	8003822 <UART_SetConfig+0x2b2>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003816:	d204      	bcs.n	8003822 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	e0c2      	b.n	80039a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003828:	e0be      	b.n	80039a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d16a      	bne.n	800390a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003838:	2b08      	cmp	r3, #8
 800383a:	d834      	bhi.n	80038a6 <UART_SetConfig+0x336>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x2d4>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003869 	.word	0x08003869
 8003848:	08003889 	.word	0x08003889
 800384c:	08003891 	.word	0x08003891
 8003850:	080038a7 	.word	0x080038a7
 8003854:	08003897 	.word	0x08003897
 8003858:	080038a7 	.word	0x080038a7
 800385c:	080038a7 	.word	0x080038a7
 8003860:	080038a7 	.word	0x080038a7
 8003864:	0800389f 	.word	0x0800389f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7fe fcb6 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 800386c:	61f8      	str	r0, [r7, #28]
        break;
 800386e:	e020      	b.n	80038b2 <UART_SetConfig+0x342>
 8003870:	efff69f3 	.word	0xefff69f3
 8003874:	40008000 	.word	0x40008000
 8003878:	40013800 	.word	0x40013800
 800387c:	40021000 	.word	0x40021000
 8003880:	40004400 	.word	0x40004400
 8003884:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003888:	f7fe fcbc 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 800388c:	61f8      	str	r0, [r7, #28]
        break;
 800388e:	e010      	b.n	80038b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003890:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <UART_SetConfig+0x454>)
 8003892:	61fb      	str	r3, [r7, #28]
        break;
 8003894:	e00d      	b.n	80038b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003896:	f7fe fc07 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800389a:	61f8      	str	r0, [r7, #28]
        break;
 800389c:	e009      	b.n	80038b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a2:	61fb      	str	r3, [r7, #28]
        break;
 80038a4:	e005      	b.n	80038b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d077      	beq.n	80039a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005a      	lsls	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d916      	bls.n	8003902 <UART_SetConfig+0x392>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d212      	bcs.n	8003902 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f023 030f 	bic.w	r3, r3, #15
 80038e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	8afb      	ldrh	r3, [r7, #22]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	8afa      	ldrh	r2, [r7, #22]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	e052      	b.n	80039a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003908:	e04e      	b.n	80039a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390e:	2b08      	cmp	r3, #8
 8003910:	d827      	bhi.n	8003962 <UART_SetConfig+0x3f2>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x3a8>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800393d 	.word	0x0800393d
 800391c:	08003945 	.word	0x08003945
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003963 	.word	0x08003963
 8003928:	08003953 	.word	0x08003953
 800392c:	08003963 	.word	0x08003963
 8003930:	08003963 	.word	0x08003963
 8003934:	08003963 	.word	0x08003963
 8003938:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe fc4c 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e014      	b.n	800396e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7fe fc5e 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8003948:	61f8      	str	r0, [r7, #28]
        break;
 800394a:	e010      	b.n	800396e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <UART_SetConfig+0x454>)
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e00d      	b.n	800396e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7fe fba9 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8003956:	61f8      	str	r0, [r7, #28]
        break;
 8003958:	e009      	b.n	800396e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e005      	b.n	800396e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800396c:	bf00      	nop
    }

    if (pclk != 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	085a      	lsrs	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	441a      	add	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d909      	bls.n	80039a2 <UART_SetConfig+0x432>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d205      	bcs.n	80039a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	e002      	b.n	80039a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	00f42400 	.word	0x00f42400

080039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01a      	beq.n	8003ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d10a      	bne.n	8003ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b1c:	f7fd f94e 	bl	8000dbc <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d10e      	bne.n	8003b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f82d 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e023      	b.n	8003b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d10e      	bne.n	8003b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f817 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e00d      	b.n	8003b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b09c      	sub	sp, #112	; 0x70
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	e0a5      	b.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	f000 80a1 	beq.w	8003cfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd f8ff 	bl	8000dbc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d13e      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be4:	667b      	str	r3, [r7, #100]	; 0x64
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c22:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e5      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e067      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d04f      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d147      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
 8003c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cc8:	623a      	str	r2, [r7, #32]
 8003cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	69f9      	ldr	r1, [r7, #28]
 8003cce:	6a3a      	ldr	r2, [r7, #32]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e010      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f43f af4a 	beq.w	8003bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3770      	adds	r7, #112	; 0x70
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b097      	sub	sp, #92	; 0x5c
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d10e      	bne.n	8003d7a <UART_Start_Receive_IT+0x52>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <UART_Start_Receive_IT+0x48>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d6e:	e02d      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	22ff      	movs	r2, #255	; 0xff
 8003d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d78:	e028      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <UART_Start_Receive_IT+0x76>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <UART_Start_Receive_IT+0x6c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	22ff      	movs	r2, #255	; 0xff
 8003d8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d92:	e01b      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	227f      	movs	r2, #127	; 0x7f
 8003d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d9c:	e016      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da6:	d10d      	bne.n	8003dc4 <UART_Start_Receive_IT+0x9c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <UART_Start_Receive_IT+0x92>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	227f      	movs	r2, #127	; 0x7f
 8003db4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003db8:	e008      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dc2:	e003      	b.n	8003dcc <UART_Start_Receive_IT+0xa4>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2222      	movs	r2, #34	; 0x22
 8003dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	657b      	str	r3, [r7, #84]	; 0x54
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d107      	bne.n	8003e28 <UART_Start_Receive_IT+0x100>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <UART_Start_Receive_IT+0x18c>)
 8003e24:	665a      	str	r2, [r3, #100]	; 0x64
 8003e26:	e002      	b.n	8003e2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <UART_Start_Receive_IT+0x190>)
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e6      	bne.n	8003e3e <UART_Start_Receive_IT+0x116>
 8003e70:	e018      	b.n	8003ea4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f043 0320 	orr.w	r3, r3, #32
 8003e86:	653b      	str	r3, [r7, #80]	; 0x50
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e6      	bne.n	8003e72 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	375c      	adds	r7, #92	; 0x5c
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	08004163 	.word	0x08004163
 8003eb8:	08004003 	.word	0x08004003

08003ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b095      	sub	sp, #84	; 0x54
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e6      	bne.n	8003ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3308      	adds	r3, #8
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d118      	bne.n	8003f64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f76:	bf00      	nop
 8003f78:	3754      	adds	r7, #84	; 0x54
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff facf 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b088      	sub	sp, #32
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6979      	ldr	r1, [r7, #20]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fa9b 	bl	8003530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffa:	bf00      	nop
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b096      	sub	sp, #88	; 0x58
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004010:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004018:	2b22      	cmp	r3, #34	; 0x22
 800401a:	f040 8094 	bne.w	8004146 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004024:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004028:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800402c:	b2d9      	uxtb	r1, r3
 800402e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004032:	b2da      	uxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	400a      	ands	r2, r1
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d179      	bne.n	800415a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800408a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	623b      	str	r3, [r7, #32]
   return(result);
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b8:	633a      	str	r2, [r7, #48]	; 0x30
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d12e      	bne.n	800413e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0310 	bic.w	r3, r3, #16
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	617b      	str	r3, [r7, #20]
   return(result);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e6      	bne.n	80040e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d103      	bne.n	800412e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fa0e 	bl	8003558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800413c:	e00d      	b.n	800415a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fd96 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8004144:	e009      	b.n	800415a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	8b1b      	ldrh	r3, [r3, #24]
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	b292      	uxth	r2, r2
 8004158:	831a      	strh	r2, [r3, #24]
}
 800415a:	bf00      	nop
 800415c:	3758      	adds	r7, #88	; 0x58
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b096      	sub	sp, #88	; 0x58
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004170:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	2b22      	cmp	r3, #34	; 0x22
 800417a:	f040 8094 	bne.w	80042a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004184:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800418e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004192:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004196:	4013      	ands	r3, r2
 8004198:	b29a      	uxth	r2, r3
 800419a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	1c9a      	adds	r2, r3, #2
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d179      	bne.n	80042ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
 80041e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e6      	bne.n	80041c6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	61fb      	str	r3, [r7, #28]
   return(result);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b01      	cmp	r3, #1
 800423e:	d12e      	bne.n	800429e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	60bb      	str	r3, [r7, #8]
   return(result);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0310 	bic.w	r3, r3, #16
 800425a:	647b      	str	r3, [r7, #68]	; 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6979      	ldr	r1, [r7, #20]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	613b      	str	r3, [r7, #16]
   return(result);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d103      	bne.n	800428e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff f95e 	bl	8003558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800429c:	e00d      	b.n	80042ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc fce6 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 80042a4:	e009      	b.n	80042ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	8b1b      	ldrh	r3, [r3, #24]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0208 	orr.w	r2, r2, #8
 80042b6:	b292      	uxth	r2, r2
 80042b8:	831a      	strh	r2, [r3, #24]
}
 80042ba:	bf00      	nop
 80042bc:	3758      	adds	r7, #88	; 0x58
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <__NVIC_SetPriority>:
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db0a      	blt.n	8004302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	490c      	ldr	r1, [pc, #48]	; (8004324 <__NVIC_SetPriority+0x4c>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	0112      	lsls	r2, r2, #4
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004300:	e00a      	b.n	8004318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4908      	ldr	r1, [pc, #32]	; (8004328 <__NVIC_SetPriority+0x50>)
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	3b04      	subs	r3, #4
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	440b      	add	r3, r1
 8004316:	761a      	strb	r2, [r3, #24]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000e100 	.word	0xe000e100
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SysTick_Handler+0x1c>)
 8004332:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004334:	f001 fd28 	bl	8005d88 <xTaskGetSchedulerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800433e:	f002 fb13 	bl	8006968 <xPortSysTickHandler>
  }
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	e000e010 	.word	0xe000e010

0800434c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004350:	2100      	movs	r1, #0
 8004352:	f06f 0004 	mvn.w	r0, #4
 8004356:	f7ff ffbf 	bl	80042d8 <__NVIC_SetPriority>
#endif
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004366:	f3ef 8305 	mrs	r3, IPSR
 800436a:	603b      	str	r3, [r7, #0]
  return(result);
 800436c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004372:	f06f 0305 	mvn.w	r3, #5
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	e00c      	b.n	8004394 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <osKernelInitialize+0x44>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <osKernelInitialize+0x44>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004388:	2300      	movs	r3, #0
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e002      	b.n	8004394 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004394:	687b      	ldr	r3, [r7, #4]
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	200002fc 	.word	0x200002fc

080043a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ae:	f3ef 8305 	mrs	r3, IPSR
 80043b2:	603b      	str	r3, [r7, #0]
  return(result);
 80043b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ba:	f06f 0305 	mvn.w	r3, #5
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	e010      	b.n	80043e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <osKernelStart+0x48>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d109      	bne.n	80043de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043ca:	f7ff ffbf 	bl	800434c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <osKernelStart+0x48>)
 80043d0:	2202      	movs	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043d4:	f001 f87c 	bl	80054d0 <vTaskStartScheduler>
      stat = osOK;
 80043d8:	2300      	movs	r3, #0
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	e002      	b.n	80043e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043e4:	687b      	ldr	r3, [r7, #4]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200002fc 	.word	0x200002fc

080043f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08e      	sub	sp, #56	; 0x38
 80043f8:	af04      	add	r7, sp, #16
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004404:	f3ef 8305 	mrs	r3, IPSR
 8004408:	617b      	str	r3, [r7, #20]
  return(result);
 800440a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800440c:	2b00      	cmp	r3, #0
 800440e:	d17e      	bne.n	800450e <osThreadNew+0x11a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d07b      	beq.n	800450e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800441a:	2318      	movs	r3, #24
 800441c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d045      	beq.n	80044ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <osThreadNew+0x48>
        name = attr->name;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <osThreadNew+0x6e>
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	2b38      	cmp	r3, #56	; 0x38
 8004454:	d805      	bhi.n	8004462 <osThreadNew+0x6e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <osThreadNew+0x72>
        return (NULL);
 8004462:	2300      	movs	r3, #0
 8004464:	e054      	b.n	8004510 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00e      	beq.n	800449c <osThreadNew+0xa8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2bbb      	cmp	r3, #187	; 0xbb
 8004484:	d90a      	bls.n	800449c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <osThreadNew+0xa8>
        mem = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e010      	b.n	80044be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <osThreadNew+0xca>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <osThreadNew+0xca>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <osThreadNew+0xca>
          mem = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e001      	b.n	80044be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d110      	bne.n	80044e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044cc:	9202      	str	r2, [sp, #8]
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fe0c 	bl	80050f8 <xTaskCreateStatic>
 80044e0:	4603      	mov	r3, r0
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e013      	b.n	800450e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d110      	bne.n	800450e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fe57 	bl	80051b2 <xTaskCreate>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d001      	beq.n	800450e <osThreadNew+0x11a>
            hTask = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800450e:	693b      	ldr	r3, [r7, #16]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	; 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004520:	f3ef 8305 	mrs	r3, IPSR
 8004524:	60bb      	str	r3, [r7, #8]
  return(result);
 8004526:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <osDelay+0x1c>
    stat = osErrorISR;
 800452c:	f06f 0305 	mvn.w	r3, #5
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e007      	b.n	8004544 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <osDelay+0x2c>
      vTaskDelay(ticks);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 ff92 	bl	8005468 <vTaskDelay>
    }
  }

  return (stat);
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <vApplicationGetIdleTaskMemory+0x2c>)
 8004560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a06      	ldr	r2, [pc, #24]	; (8004580 <vApplicationGetIdleTaskMemory+0x30>)
 8004566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000300 	.word	0x20000300
 8004580:	200003bc 	.word	0x200003bc

08004584 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004594:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <vApplicationGetTimerTaskMemory+0x30>)
 800459a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a2:	601a      	str	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	200005bc 	.word	0x200005bc
 80045b4:	20000678 	.word	0x20000678

080045b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f103 0208 	add.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f103 0208 	add.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d103      	bne.n	800467a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e00c      	b.n	8004694 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3308      	adds	r3, #8
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e002      	b.n	8004688 <vListInsert+0x2e>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d2f6      	bcs.n	8004682 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6892      	ldr	r2, [r2, #8]
 80046e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d103      	bne.n	8004700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800474a:	f002 f87b 	bl	8006844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	441a      	add	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	3b01      	subs	r3, #1
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	22ff      	movs	r2, #255	; 0xff
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d114      	bne.n	80047ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3310      	adds	r3, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f929 	bl	8005a04 <xTaskRemoveFromEventList>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047b8:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <xQueueGenericReset+0xcc>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	e009      	b.n	80047de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3310      	adds	r3, #16
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fef2 	bl	80045b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff feed 	bl	80045b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047de:	f002 f861 	bl	80068a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08e      	sub	sp, #56	; 0x38
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <xQueueGenericCreateStatic+0x52>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <xQueueGenericCreateStatic+0x56>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueGenericCreateStatic+0x58>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	623b      	str	r3, [r7, #32]
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <xQueueGenericCreateStatic+0x7e>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <xQueueGenericCreateStatic+0x82>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xQueueGenericCreateStatic+0x84>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	61fb      	str	r3, [r7, #28]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800488e:	2350      	movs	r3, #80	; 0x50
 8004890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b50      	cmp	r3, #80	; 0x50
 8004896:	d00a      	beq.n	80048ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	61bb      	str	r3, [r7, #24]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f805 	bl	80048e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048d8:	4618      	mov	r0, r3
 80048da:	3730      	adds	r7, #48	; 0x30
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e002      	b.n	8004902 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800490e:	2101      	movs	r1, #1
 8004910:	69b8      	ldr	r0, [r7, #24]
 8004912:	f7ff ff05 	bl	8004720 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004936:	2300      	movs	r3, #0
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <xQueueGenericSend+0x32>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <xQueueGenericSend+0x40>
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <xQueueGenericSend+0x44>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <xQueueGenericSend+0x46>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <xQueueGenericSend+0x60>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d103      	bne.n	8004996 <xQueueGenericSend+0x6e>
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <xQueueGenericSend+0x72>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <xQueueGenericSend+0x74>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	623b      	str	r3, [r7, #32]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049b6:	f001 f9e7 	bl	8005d88 <xTaskGetSchedulerState>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <xQueueGenericSend+0x9e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <xQueueGenericSend+0xa2>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericSend+0xa4>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	61fb      	str	r3, [r7, #28]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049e6:	f001 ff2d 	bl	8006844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <xQueueGenericSend+0xd4>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d129      	bne.n	8004a50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a02:	f000 fa0b 	bl	8004e1c <prvCopyDataToQueue>
 8004a06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fff5 	bl	8005a04 <xTaskRemoveFromEventList>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a20:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <xQueueGenericSend+0x1f8>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	e00a      	b.n	8004a48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <xQueueGenericSend+0x1f8>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a48:	f001 ff2c 	bl	80068a4 <vPortExitCritical>
				return pdPASS;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e063      	b.n	8004b18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a56:	f001 ff25 	bl	80068a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e05c      	b.n	8004b18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 f82f 	bl	8005acc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a72:	f001 ff17 	bl	80068a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a76:	f000 fd9b 	bl	80055b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a7a:	f001 fee3 	bl	8006844 <vPortEnterCritical>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d103      	bne.n	8004a94 <xQueueGenericSend+0x16c>
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d103      	bne.n	8004aaa <xQueueGenericSend+0x182>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aaa:	f001 fefb 	bl	80068a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aae:	1d3a      	adds	r2, r7, #4
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f81e 	bl	8005af8 <xTaskCheckForTimeOut>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d124      	bne.n	8004b0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac4:	f000 faa2 	bl	800500c <prvIsQueueFull>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 ff44 	bl	8005964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ade:	f000 fa2d 	bl	8004f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ae2:	f000 fd73 	bl	80055cc <xTaskResumeAll>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f af7c 	bne.w	80049e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <xQueueGenericSend+0x1f8>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	e772      	b.n	80049e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b02:	f000 fa1b 	bl	8004f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b06:	f000 fd61 	bl	80055cc <xTaskResumeAll>
 8004b0a:	e76c      	b.n	80049e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0e:	f000 fa15 	bl	8004f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b12:	f000 fd5b 	bl	80055cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3738      	adds	r7, #56	; 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b090      	sub	sp, #64	; 0x40
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <xQueueGenericSendFromISR+0x3c>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <xQueueGenericSendFromISR+0x40>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <xQueueGenericSendFromISR+0x42>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d103      	bne.n	8004b8e <xQueueGenericSendFromISR+0x6a>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <xQueueGenericSendFromISR+0x6e>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueGenericSendFromISR+0x70>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	623b      	str	r3, [r7, #32]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bae:	f001 ff2b 	bl	8006a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <xQueueGenericSendFromISR+0xbc>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d12f      	bne.n	8004c40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bf6:	f000 f911 	bl	8004e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d112      	bne.n	8004c2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d016      	beq.n	8004c3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fef7 	bl	8005a04 <xTaskRemoveFromEventList>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e007      	b.n	8004c3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c2e:	3301      	adds	r3, #1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	b25a      	sxtb	r2, r3
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c3e:	e001      	b.n	8004c44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3740      	adds	r7, #64	; 0x40
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <xQueueReceive+0x30>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	623b      	str	r3, [r7, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <xQueueReceive+0x3e>
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <xQueueReceive+0x42>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueReceive+0x44>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xQueueReceive+0x5e>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	61fb      	str	r3, [r7, #28]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cba:	f001 f865 	bl	8005d88 <xTaskGetSchedulerState>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xQueueReceive+0x6e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueReceive+0x72>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueReceive+0x74>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueReceive+0x8e>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61bb      	str	r3, [r7, #24]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cea:	f001 fdab 	bl	8006844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01f      	beq.n	8004d3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f8f7 	bl	8004ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00f      	beq.n	8004d32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	3310      	adds	r3, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe74 	bl	8005a04 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d22:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <xQueueReceive+0x1bc>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d32:	f001 fdb7 	bl	80068a4 <vPortExitCritical>
				return pdPASS;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e069      	b.n	8004e0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d40:	f001 fdb0 	bl	80068a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e062      	b.n	8004e0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 feba 	bl	8005acc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5c:	f001 fda2 	bl	80068a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d60:	f000 fc26 	bl	80055b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d64:	f001 fd6e 	bl	8006844 <vPortEnterCritical>
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6e:	b25b      	sxtb	r3, r3
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <xQueueReceive+0x122>
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d103      	bne.n	8004d94 <xQueueReceive+0x138>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d94:	f001 fd86 	bl	80068a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d98:	1d3a      	adds	r2, r7, #4
 8004d9a:	f107 0310 	add.w	r3, r7, #16
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fea9 	bl	8005af8 <xTaskCheckForTimeOut>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d123      	bne.n	8004df4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dae:	f000 f917 	bl	8004fe0 <prvIsQueueEmpty>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fdcf 	bl	8005964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc8:	f000 f8b8 	bl	8004f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dcc:	f000 fbfe 	bl	80055cc <xTaskResumeAll>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d189      	bne.n	8004cea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <xQueueReceive+0x1bc>)
 8004dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	e780      	b.n	8004cea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f000 f8a7 	bl	8004f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dee:	f000 fbed 	bl	80055cc <xTaskResumeAll>
 8004df2:	e77a      	b.n	8004cea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df6:	f000 f8a1 	bl	8004f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dfa:	f000 fbe7 	bl	80055cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e00:	f000 f8ee 	bl	8004fe0 <prvIsQueueEmpty>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f43f af6f 	beq.w	8004cea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3730      	adds	r7, #48	; 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d14d      	bne.n	8004ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ffbc 	bl	8005dc4 <xTaskPriorityDisinherit>
 8004e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	e043      	b.n	8004ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d119      	bne.n	8004e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6858      	ldr	r0, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	461a      	mov	r2, r3
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	f002 f81e 	bl	8006ea8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d32b      	bcc.n	8004ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e026      	b.n	8004ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68d8      	ldr	r0, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	f002 f804 	bl	8006ea8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d207      	bcs.n	8004ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d105      	bne.n	8004ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d018      	beq.n	8004f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	441a      	add	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d303      	bcc.n	8004f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68d9      	ldr	r1, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6838      	ldr	r0, [r7, #0]
 8004f30:	f001 ffba 	bl	8006ea8 <memcpy>
	}
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f44:	f001 fc7e 	bl	8006844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f50:	e011      	b.n	8004f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fd50 	bl	8005a04 <xTaskRemoveFromEventList>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f6a:	f000 fe27 	bl	8005bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dce9      	bgt.n	8004f52 <prvUnlockQueue+0x16>
 8004f7e:	e000      	b.n	8004f82 <prvUnlockQueue+0x46>
					break;
 8004f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 fc8b 	bl	80068a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f8e:	f001 fc59 	bl	8006844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f9a:	e011      	b.n	8004fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fd2b 	bl	8005a04 <xTaskRemoveFromEventList>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fb4:	f000 fe02 	bl	8005bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dce9      	bgt.n	8004f9c <prvUnlockQueue+0x60>
 8004fc8:	e000      	b.n	8004fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	22ff      	movs	r2, #255	; 0xff
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fd4:	f001 fc66 	bl	80068a4 <vPortExitCritical>
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fe8:	f001 fc2c 	bl	8006844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e001      	b.n	8004ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ffe:	f001 fc51 	bl	80068a4 <vPortExitCritical>

	return xReturn;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005014:	f001 fc16 	bl	8006844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	429a      	cmp	r2, r3
 8005022:	d102      	bne.n	800502a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e001      	b.n	800502e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fc39 	bl	80068a4 <vPortExitCritical>

	return xReturn;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e014      	b.n	8005076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800504c:	4a0f      	ldr	r2, [pc, #60]	; (800508c <vQueueAddToRegistry+0x50>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005058:	490c      	ldr	r1, [pc, #48]	; (800508c <vQueueAddToRegistry+0x50>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <vQueueAddToRegistry+0x50>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800506e:	e006      	b.n	800507e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b07      	cmp	r3, #7
 800507a:	d9e7      	bls.n	800504c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000a78 	.word	0x20000a78

08005090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050a0:	f001 fbd0 	bl	8006844 <vPortEnterCritical>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d103      	bne.n	80050ba <vQueueWaitForMessageRestricted+0x2a>
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d103      	bne.n	80050d0 <vQueueWaitForMessageRestricted+0x40>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d0:	f001 fbe8 	bl	80068a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3324      	adds	r3, #36	; 0x24
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fc61 	bl	80059ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff26 	bl	8004f3c <prvUnlockQueue>
	}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08e      	sub	sp, #56	; 0x38
 80050fc:	af04      	add	r7, sp, #16
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xTaskCreateStatic+0x2a>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	623b      	str	r3, [r7, #32]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xTaskCreateStatic+0x46>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	61fb      	str	r3, [r7, #28]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800513e:	23bc      	movs	r3, #188	; 0xbc
 8005140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2bbc      	cmp	r3, #188	; 0xbc
 8005146:	d00a      	beq.n	800515e <xTaskCreateStatic+0x66>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	61bb      	str	r3, [r7, #24]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800515e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01e      	beq.n	80051a4 <xTaskCreateStatic+0xac>
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005174:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2202      	movs	r2, #2
 800517a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800517e:	2300      	movs	r3, #0
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	f107 0314 	add.w	r3, r7, #20
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f850 	bl	800523c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519e:	f000 f8f3 	bl	8005388 <prvAddNewTaskToReadyList>
 80051a2:	e001      	b.n	80051a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b08c      	sub	sp, #48	; 0x30
 80051b6:	af04      	add	r7, sp, #16
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fc5e 	bl	8006a88 <pvPortMalloc>
 80051cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051d4:	20bc      	movs	r0, #188	; 0xbc
 80051d6:	f001 fc57 	bl	8006a88 <pvPortMalloc>
 80051da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
 80051e8:	e005      	b.n	80051f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f001 fd18 	bl	8006c20 <vPortFree>
 80051f0:	e001      	b.n	80051f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	2300      	movs	r3, #0
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f80e 	bl	800523c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005220:	69f8      	ldr	r0, [r7, #28]
 8005222:	f000 f8b1 	bl	8005388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005226:	2301      	movs	r3, #1
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e002      	b.n	8005232 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800522c:	f04f 33ff 	mov.w	r3, #4294967295
 8005230:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005232:	69bb      	ldr	r3, [r7, #24]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	461a      	mov	r2, r3
 8005254:	21a5      	movs	r1, #165	; 0xa5
 8005256:	f001 fe35 	bl	8006ec4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005264:	3b01      	subs	r3, #1
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <prvInitialiseNewTask+0x58>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	617b      	str	r3, [r7, #20]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01f      	beq.n	80052da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	e012      	b.n	80052c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	7819      	ldrb	r1, [r3, #0]
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	3334      	adds	r3, #52	; 0x34
 80052b0:	460a      	mov	r2, r1
 80052b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d006      	beq.n	80052ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b0f      	cmp	r3, #15
 80052ca:	d9e9      	bls.n	80052a0 <prvInitialiseNewTask+0x64>
 80052cc:	e000      	b.n	80052d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80052ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d8:	e003      	b.n	80052e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	2b37      	cmp	r3, #55	; 0x37
 80052e6:	d901      	bls.n	80052ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052e8:	2337      	movs	r3, #55	; 0x37
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f978 	bl	80045f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	3318      	adds	r3, #24
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff f973 	bl	80045f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	3354      	adds	r3, #84	; 0x54
 800533c:	2260      	movs	r2, #96	; 0x60
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f001 fdbf 	bl	8006ec4 <memset>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	4a0c      	ldr	r2, [pc, #48]	; (800537c <prvInitialiseNewTask+0x140>)
 800534a:	659a      	str	r2, [r3, #88]	; 0x58
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <prvInitialiseNewTask+0x144>)
 8005350:	65da      	str	r2, [r3, #92]	; 0x5c
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <prvInitialiseNewTask+0x148>)
 8005356:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	69b8      	ldr	r0, [r7, #24]
 800535e:	f001 f941 	bl	80065e4 <pxPortInitialiseStack>
 8005362:	4602      	mov	r2, r0
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005374:	bf00      	nop
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	08007154 	.word	0x08007154
 8005380:	08007174 	.word	0x08007174
 8005384:	08007134 	.word	0x08007134

08005388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005390:	f001 fa58 	bl	8006844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005394:	4b2d      	ldr	r3, [pc, #180]	; (800544c <prvAddNewTaskToReadyList+0xc4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a2c      	ldr	r2, [pc, #176]	; (800544c <prvAddNewTaskToReadyList+0xc4>)
 800539c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800539e:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053ac:	4b27      	ldr	r3, [pc, #156]	; (800544c <prvAddNewTaskToReadyList+0xc4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d110      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053b4:	f000 fc26 	bl	8005c04 <prvInitialiseTaskLists>
 80053b8:	e00d      	b.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <prvAddNewTaskToReadyList+0xcc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d802      	bhi.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <prvAddNewTaskToReadyList+0xd4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <prvAddNewTaskToReadyList+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a18      	ldr	r2, [pc, #96]	; (800545c <prvAddNewTaskToReadyList+0xd4>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <prvAddNewTaskToReadyList+0xd8>)
 800540a:	441a      	add	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7ff f8fd 	bl	8004612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005418:	f001 fa44 	bl	80068a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <prvAddNewTaskToReadyList+0xcc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <prvAddNewTaskToReadyList+0xc8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	429a      	cmp	r2, r3
 8005430:	d207      	bcs.n	8005442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <prvAddNewTaskToReadyList+0xdc>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000f8c 	.word	0x20000f8c
 8005450:	20000ab8 	.word	0x20000ab8
 8005454:	20000f98 	.word	0x20000f98
 8005458:	20000fa8 	.word	0x20000fa8
 800545c:	20000f94 	.word	0x20000f94
 8005460:	20000abc 	.word	0x20000abc
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <vTaskDelay+0x60>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <vTaskDelay+0x30>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60bb      	str	r3, [r7, #8]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005498:	f000 f88a 	bl	80055b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fcfe 	bl	8005ea0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054a4:	f000 f892 	bl	80055cc <xTaskResumeAll>
 80054a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <vTaskDelay+0x64>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000fb4 	.word	0x20000fb4
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054de:	463a      	mov	r2, r7
 80054e0:	1d39      	adds	r1, r7, #4
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f832 	bl	8004550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	9202      	str	r2, [sp, #8]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	460a      	mov	r2, r1
 80054fe:	4924      	ldr	r1, [pc, #144]	; (8005590 <vTaskStartScheduler+0xc0>)
 8005500:	4824      	ldr	r0, [pc, #144]	; (8005594 <vTaskStartScheduler+0xc4>)
 8005502:	f7ff fdf9 	bl	80050f8 <xTaskCreateStatic>
 8005506:	4603      	mov	r3, r0
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <vTaskStartScheduler+0xc8>)
 800550a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800550c:	4b22      	ldr	r3, [pc, #136]	; (8005598 <vTaskStartScheduler+0xc8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e001      	b.n	800551e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d102      	bne.n	800552a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005524:	f000 fd10 	bl	8005f48 <xTimerCreateTimerTask>
 8005528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d11b      	bne.n	8005568 <vTaskStartScheduler+0x98>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	613b      	str	r3, [r7, #16]
}
 8005542:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005544:	4b15      	ldr	r3, [pc, #84]	; (800559c <vTaskStartScheduler+0xcc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3354      	adds	r3, #84	; 0x54
 800554a:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <vTaskStartScheduler+0xd0>)
 800554c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <vTaskStartScheduler+0xd4>)
 8005550:	f04f 32ff 	mov.w	r2, #4294967295
 8005554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <vTaskStartScheduler+0xd8>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <vTaskStartScheduler+0xdc>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005562:	f001 f8cd 	bl	8006700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005566:	e00e      	b.n	8005586 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d10a      	bne.n	8005586 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	60fb      	str	r3, [r7, #12]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <vTaskStartScheduler+0xb4>
}
 8005586:	bf00      	nop
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	0800708c 	.word	0x0800708c
 8005594:	08005bd5 	.word	0x08005bd5
 8005598:	20000fb0 	.word	0x20000fb0
 800559c:	20000ab8 	.word	0x20000ab8
 80055a0:	20000010 	.word	0x20000010
 80055a4:	20000fac 	.word	0x20000fac
 80055a8:	20000f98 	.word	0x20000f98
 80055ac:	20000f90 	.word	0x20000f90

080055b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <vTaskSuspendAll+0x18>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	4a03      	ldr	r2, [pc, #12]	; (80055c8 <vTaskSuspendAll+0x18>)
 80055bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000fb4 	.word	0x20000fb4

080055cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055da:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <xTaskResumeAll+0x118>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	603b      	str	r3, [r7, #0]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055f8:	f001 f924 	bl	8006844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <xTaskResumeAll+0x118>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	4a38      	ldr	r2, [pc, #224]	; (80056e4 <xTaskResumeAll+0x118>)
 8005604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <xTaskResumeAll+0x118>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d162      	bne.n	80056d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <xTaskResumeAll+0x11c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d05e      	beq.n	80056d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005616:	e02f      	b.n	8005678 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <xTaskResumeAll+0x120>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3318      	adds	r3, #24
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff f851 	bl	80046cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff f84c 	bl	80046cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <xTaskResumeAll+0x124>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d903      	bls.n	8005648 <xTaskResumeAll+0x7c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <xTaskResumeAll+0x124>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <xTaskResumeAll+0x128>)
 8005656:	441a      	add	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fe ffd7 	bl	8004612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	4b23      	ldr	r3, [pc, #140]	; (80056f8 <xTaskResumeAll+0x12c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <xTaskResumeAll+0x130>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <xTaskResumeAll+0x120>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1cb      	bne.n	8005618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005686:	f000 fb5f 	bl	8005d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800568a:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <xTaskResumeAll+0x134>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005696:	f000 f847 	bl	8005728 <xTaskIncrementTick>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056a0:	4b16      	ldr	r3, [pc, #88]	; (80056fc <xTaskResumeAll+0x130>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f1      	bne.n	8005696 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <xTaskResumeAll+0x134>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056b8:	4b10      	ldr	r3, [pc, #64]	; (80056fc <xTaskResumeAll+0x130>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056c4:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <xTaskResumeAll+0x138>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056d4:	f001 f8e6 	bl	80068a4 <vPortExitCritical>

	return xAlreadyYielded;
 80056d8:	68bb      	ldr	r3, [r7, #8]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000fb4 	.word	0x20000fb4
 80056e8:	20000f8c 	.word	0x20000f8c
 80056ec:	20000f4c 	.word	0x20000f4c
 80056f0:	20000f94 	.word	0x20000f94
 80056f4:	20000abc 	.word	0x20000abc
 80056f8:	20000ab8 	.word	0x20000ab8
 80056fc:	20000fa0 	.word	0x20000fa0
 8005700:	20000f9c 	.word	0x20000f9c
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <xTaskGetTickCount+0x1c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005714:	687b      	ldr	r3, [r7, #4]
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000f90 	.word	0x20000f90

08005728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005732:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <xTaskIncrementTick+0x148>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 808f 	bne.w	800585a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800573c:	4b4d      	ldr	r3, [pc, #308]	; (8005874 <xTaskIncrementTick+0x14c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005744:	4a4b      	ldr	r2, [pc, #300]	; (8005874 <xTaskIncrementTick+0x14c>)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d120      	bne.n	8005792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005750:	4b49      	ldr	r3, [pc, #292]	; (8005878 <xTaskIncrementTick+0x150>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <xTaskIncrementTick+0x48>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xTaskIncrementTick+0x46>
 8005770:	4b41      	ldr	r3, [pc, #260]	; (8005878 <xTaskIncrementTick+0x150>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <xTaskIncrementTick+0x154>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <xTaskIncrementTick+0x150>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4a3f      	ldr	r2, [pc, #252]	; (800587c <xTaskIncrementTick+0x154>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b3e      	ldr	r3, [pc, #248]	; (8005880 <xTaskIncrementTick+0x158>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <xTaskIncrementTick+0x158>)
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	f000 fadb 	bl	8005d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005792:	4b3c      	ldr	r3, [pc, #240]	; (8005884 <xTaskIncrementTick+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d349      	bcc.n	8005830 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <xTaskIncrementTick+0x15c>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	601a      	str	r2, [r3, #0]
					break;
 80057ae:	e03f      	b.n	8005830 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <xTaskIncrementTick+0x150>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d203      	bcs.n	80057d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c8:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <xTaskIncrementTick+0x15c>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057ce:	e02f      	b.n	8005830 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe ff79 	bl	80046cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	3318      	adds	r3, #24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ff70 	bl	80046cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <xTaskIncrementTick+0x160>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d903      	bls.n	8005800 <xTaskIncrementTick+0xd8>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <xTaskIncrementTick+0x160>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <xTaskIncrementTick+0x164>)
 800580e:	441a      	add	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7fe fefb 	bl	8004612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <xTaskIncrementTick+0x168>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	429a      	cmp	r2, r3
 8005828:	d3b8      	bcc.n	800579c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582e:	e7b5      	b.n	800579c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005830:	4b17      	ldr	r3, [pc, #92]	; (8005890 <xTaskIncrementTick+0x168>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	4915      	ldr	r1, [pc, #84]	; (800588c <xTaskIncrementTick+0x164>)
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d901      	bls.n	800584c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <xTaskIncrementTick+0x16c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e004      	b.n	8005864 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <xTaskIncrementTick+0x170>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3301      	adds	r3, #1
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <xTaskIncrementTick+0x170>)
 8005862:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000fb4 	.word	0x20000fb4
 8005874:	20000f90 	.word	0x20000f90
 8005878:	20000f44 	.word	0x20000f44
 800587c:	20000f48 	.word	0x20000f48
 8005880:	20000fa4 	.word	0x20000fa4
 8005884:	20000fac 	.word	0x20000fac
 8005888:	20000f94 	.word	0x20000f94
 800588c:	20000abc 	.word	0x20000abc
 8005890:	20000ab8 	.word	0x20000ab8
 8005894:	20000fa0 	.word	0x20000fa0
 8005898:	20000f9c 	.word	0x20000f9c

0800589c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058a2:	4b2a      	ldr	r3, [pc, #168]	; (800594c <vTaskSwitchContext+0xb0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058aa:	4b29      	ldr	r3, [pc, #164]	; (8005950 <vTaskSwitchContext+0xb4>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b0:	e046      	b.n	8005940 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058b2:	4b27      	ldr	r3, [pc, #156]	; (8005950 <vTaskSwitchContext+0xb4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b26      	ldr	r3, [pc, #152]	; (8005954 <vTaskSwitchContext+0xb8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e010      	b.n	80058e2 <vTaskSwitchContext+0x46>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <vTaskSwitchContext+0x40>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	607b      	str	r3, [r7, #4]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <vTaskSwitchContext+0x3e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	491d      	ldr	r1, [pc, #116]	; (8005958 <vTaskSwitchContext+0xbc>)
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0e4      	beq.n	80058c0 <vTaskSwitchContext+0x24>
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <vTaskSwitchContext+0xbc>)
 8005902:	4413      	add	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3308      	adds	r3, #8
 8005918:	429a      	cmp	r2, r3
 800591a:	d104      	bne.n	8005926 <vTaskSwitchContext+0x8a>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a0b      	ldr	r2, [pc, #44]	; (800595c <vTaskSwitchContext+0xc0>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <vTaskSwitchContext+0xb8>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <vTaskSwitchContext+0xc0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3354      	adds	r3, #84	; 0x54
 800593c:	4a08      	ldr	r2, [pc, #32]	; (8005960 <vTaskSwitchContext+0xc4>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000fb4 	.word	0x20000fb4
 8005950:	20000fa0 	.word	0x20000fa0
 8005954:	20000f94 	.word	0x20000f94
 8005958:	20000abc 	.word	0x20000abc
 800595c:	20000ab8 	.word	0x20000ab8
 8005960:	20000010 	.word	0x20000010

08005964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <vTaskPlaceOnEventList+0x44>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3318      	adds	r3, #24
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fe fe61 	bl	800465a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005998:	2101      	movs	r1, #1
 800599a:	6838      	ldr	r0, [r7, #0]
 800599c:	f000 fa80 	bl	8005ea0 <prvAddCurrentTaskToDelayedList>
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000ab8 	.word	0x20000ab8

080059ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d4:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <vTaskPlaceOnEventListRestricted+0x54>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3318      	adds	r3, #24
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7fe fe18 	bl	8004612 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	68b8      	ldr	r0, [r7, #8]
 80059f2:	f000 fa55 	bl	8005ea0 <prvAddCurrentTaskToDelayedList>
	}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000ab8 	.word	0x20000ab8

08005a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60fb      	str	r3, [r7, #12]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fe49 	bl	80046cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <xTaskRemoveFromEventList+0xb0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11d      	bne.n	8005a7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fe40 	bl	80046cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <xTaskRemoveFromEventList+0xb4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <xTaskRemoveFromEventList+0x5c>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <xTaskRemoveFromEventList+0xb4>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a13      	ldr	r2, [pc, #76]	; (8005abc <xTaskRemoveFromEventList+0xb8>)
 8005a6e:	441a      	add	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fe fdcb 	bl	8004612 <vListInsertEnd>
 8005a7c:	e005      	b.n	8005a8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3318      	adds	r3, #24
 8005a82:	4619      	mov	r1, r3
 8005a84:	480e      	ldr	r0, [pc, #56]	; (8005ac0 <xTaskRemoveFromEventList+0xbc>)
 8005a86:	f7fe fdc4 	bl	8004612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <xTaskRemoveFromEventList+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d905      	bls.n	8005aa4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <xTaskRemoveFromEventList+0xc4>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e001      	b.n	8005aa8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000fb4 	.word	0x20000fb4
 8005ab8:	20000f94 	.word	0x20000f94
 8005abc:	20000abc 	.word	0x20000abc
 8005ac0:	20000f4c 	.word	0x20000f4c
 8005ac4:	20000ab8 	.word	0x20000ab8
 8005ac8:	20000fa0 	.word	0x20000fa0

08005acc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <vTaskInternalSetTimeOutState+0x24>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <vTaskInternalSetTimeOutState+0x28>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	605a      	str	r2, [r3, #4]
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20000fa4 	.word	0x20000fa4
 8005af4:	20000f90 	.word	0x20000f90

08005af8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	613b      	str	r3, [r7, #16]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b3a:	f000 fe83 	bl	8006844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <xTaskCheckForTimeOut+0xbc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d102      	bne.n	8005b5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e023      	b.n	8005ba6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <xTaskCheckForTimeOut+0xc0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d007      	beq.n	8005b7a <xTaskCheckForTimeOut+0x82>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e015      	b.n	8005ba6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d20b      	bcs.n	8005b9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1ad2      	subs	r2, r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff9b 	bl	8005acc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e004      	b.n	8005ba6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ba6:	f000 fe7d 	bl	80068a4 <vPortExitCritical>

	return xReturn;
 8005baa:	69fb      	ldr	r3, [r7, #28]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000f90 	.word	0x20000f90
 8005bb8:	20000fa4 	.word	0x20000fa4

08005bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <vTaskMissedYield+0x14>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20000fa0 	.word	0x20000fa0

08005bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bdc:	f000 f852 	bl	8005c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <prvIdleTask+0x28>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d9f9      	bls.n	8005bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <prvIdleTask+0x2c>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf8:	e7f0      	b.n	8005bdc <prvIdleTask+0x8>
 8005bfa:	bf00      	nop
 8005bfc:	20000abc 	.word	0x20000abc
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	e00c      	b.n	8005c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <prvInitialiseTaskLists+0x60>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fcca 	bl	80045b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b37      	cmp	r3, #55	; 0x37
 8005c2e:	d9ef      	bls.n	8005c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c30:	480d      	ldr	r0, [pc, #52]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c32:	f7fe fcc1 	bl	80045b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c36:	480d      	ldr	r0, [pc, #52]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c38:	f7fe fcbe 	bl	80045b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c3c:	480c      	ldr	r0, [pc, #48]	; (8005c70 <prvInitialiseTaskLists+0x6c>)
 8005c3e:	f7fe fcbb 	bl	80045b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c42:	480c      	ldr	r0, [pc, #48]	; (8005c74 <prvInitialiseTaskLists+0x70>)
 8005c44:	f7fe fcb8 	bl	80045b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c48:	480b      	ldr	r0, [pc, #44]	; (8005c78 <prvInitialiseTaskLists+0x74>)
 8005c4a:	f7fe fcb5 	bl	80045b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <prvInitialiseTaskLists+0x78>)
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvInitialiseTaskLists+0x7c>)
 8005c56:	4a05      	ldr	r2, [pc, #20]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000abc 	.word	0x20000abc
 8005c68:	20000f1c 	.word	0x20000f1c
 8005c6c:	20000f30 	.word	0x20000f30
 8005c70:	20000f4c 	.word	0x20000f4c
 8005c74:	20000f60 	.word	0x20000f60
 8005c78:	20000f78 	.word	0x20000f78
 8005c7c:	20000f44 	.word	0x20000f44
 8005c80:	20000f48 	.word	0x20000f48

08005c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8a:	e019      	b.n	8005cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c8c:	f000 fdda 	bl	8006844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <prvCheckTasksWaitingTermination+0x50>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fd15 	bl	80046cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cb6:	f000 fdf5 	bl	80068a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f810 	bl	8005ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e1      	bne.n	8005c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000f60 	.word	0x20000f60
 8005cd8:	20000f8c 	.word	0x20000f8c
 8005cdc:	20000f74 	.word	0x20000f74

08005ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3354      	adds	r3, #84	; 0x54
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f8ff 	bl	8006ef0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ff8d 	bl	8006c20 <vPortFree>
				vPortFree( pxTCB );
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 ff8a 	bl	8006c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d0c:	e018      	b.n	8005d40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d103      	bne.n	8005d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 ff81 	bl	8006c20 <vPortFree>
	}
 8005d1e:	e00f      	b.n	8005d40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d00a      	beq.n	8005d40 <prvDeleteTCB+0x60>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <prvDeleteTCB+0x5e>
	}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d60:	e008      	b.n	8005d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000f44 	.word	0x20000f44
 8005d84:	20000fac 	.word	0x20000fac

08005d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <xTaskGetSchedulerState+0x34>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d96:	2301      	movs	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	e008      	b.n	8005dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <xTaskGetSchedulerState+0x38>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005da4:	2302      	movs	r3, #2
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e001      	b.n	8005dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dae:	687b      	ldr	r3, [r7, #4]
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	20000f98 	.word	0x20000f98
 8005dc0:	20000fb4 	.word	0x20000fb4

08005dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d056      	beq.n	8005e88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <xTaskPriorityDisinherit+0xd0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d00a      	beq.n	8005dfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60bb      	str	r3, [r7, #8]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	1e5a      	subs	r2, r3, #1
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d02c      	beq.n	8005e88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d128      	bne.n	8005e88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fc46 	bl	80046cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <xTaskPriorityDisinherit+0xd4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d903      	bls.n	8005e68 <xTaskPriorityDisinherit+0xa4>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <xTaskPriorityDisinherit+0xd4>)
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <xTaskPriorityDisinherit+0xd8>)
 8005e76:	441a      	add	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fe fbc7 	bl	8004612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e88:	697b      	ldr	r3, [r7, #20]
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000ab8 	.word	0x20000ab8
 8005e98:	20000f94 	.word	0x20000f94
 8005e9c:	20000abc 	.word	0x20000abc

08005ea0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eaa:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <prvAddCurrentTaskToDelayedList+0x90>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb0:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fc08 	bl	80046cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d10a      	bne.n	8005eda <prvAddCurrentTaskToDelayedList+0x3a>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eca:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4819      	ldr	r0, [pc, #100]	; (8005f38 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ed4:	f7fe fb9d 	bl	8004612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ed8:	e026      	b.n	8005f28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ee2:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d209      	bcs.n	8005f06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe fbab 	bl	800465a <vListInsert>
}
 8005f04:	e010      	b.n	8005f28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	f7fe fba1 	bl	800465a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d202      	bcs.n	8005f28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f22:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6013      	str	r3, [r2, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000f90 	.word	0x20000f90
 8005f34:	20000ab8 	.word	0x20000ab8
 8005f38:	20000f78 	.word	0x20000f78
 8005f3c:	20000f48 	.word	0x20000f48
 8005f40:	20000f44 	.word	0x20000f44
 8005f44:	20000fac 	.word	0x20000fac

08005f48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f52:	f000 fb07 	bl	8006564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f56:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <xTimerCreateTimerTask+0x80>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d021      	beq.n	8005fa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f66:	1d3a      	adds	r2, r7, #4
 8005f68:	f107 0108 	add.w	r1, r7, #8
 8005f6c:	f107 030c 	add.w	r3, r7, #12
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe fb07 	bl	8004584 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	9202      	str	r2, [sp, #8]
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	2302      	movs	r3, #2
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	460a      	mov	r2, r1
 8005f88:	4910      	ldr	r1, [pc, #64]	; (8005fcc <xTimerCreateTimerTask+0x84>)
 8005f8a:	4811      	ldr	r0, [pc, #68]	; (8005fd0 <xTimerCreateTimerTask+0x88>)
 8005f8c:	f7ff f8b4 	bl	80050f8 <xTaskCreateStatic>
 8005f90:	4603      	mov	r3, r0
 8005f92:	4a10      	ldr	r2, [pc, #64]	; (8005fd4 <xTimerCreateTimerTask+0x8c>)
 8005f94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <xTimerCreateTimerTask+0x8c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	613b      	str	r3, [r7, #16]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fbe:	697b      	ldr	r3, [r7, #20]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000fe8 	.word	0x20000fe8
 8005fcc:	08007094 	.word	0x08007094
 8005fd0:	0800610d 	.word	0x0800610d
 8005fd4:	20000fec 	.word	0x20000fec

08005fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	623b      	str	r3, [r7, #32]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <xTimerGenericCommand+0x98>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02a      	beq.n	8006064 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b05      	cmp	r3, #5
 800601e:	dc18      	bgt.n	8006052 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006020:	f7ff feb2 	bl	8005d88 <xTaskGetSchedulerState>
 8006024:	4603      	mov	r3, r0
 8006026:	2b02      	cmp	r3, #2
 8006028:	d109      	bne.n	800603e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <xTimerGenericCommand+0x98>)
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f107 0110 	add.w	r1, r7, #16
 8006032:	2300      	movs	r3, #0
 8006034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006036:	f7fe fc77 	bl	8004928 <xQueueGenericSend>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
 800603c:	e012      	b.n	8006064 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <xTimerGenericCommand+0x98>)
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f107 0110 	add.w	r1, r7, #16
 8006046:	2300      	movs	r3, #0
 8006048:	2200      	movs	r2, #0
 800604a:	f7fe fc6d 	bl	8004928 <xQueueGenericSend>
 800604e:	6278      	str	r0, [r7, #36]	; 0x24
 8006050:	e008      	b.n	8006064 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <xTimerGenericCommand+0x98>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f107 0110 	add.w	r1, r7, #16
 800605a:	2300      	movs	r3, #0
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	f7fe fd61 	bl	8004b24 <xQueueGenericSendFromISR>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000fe8 	.word	0x20000fe8

08006074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af02      	add	r7, sp, #8
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607e:	4b22      	ldr	r3, [pc, #136]	; (8006108 <prvProcessExpiredTimer+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3304      	adds	r3, #4
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fb1d 	bl	80046cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d022      	beq.n	80060e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	18d1      	adds	r1, r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	6978      	ldr	r0, [r7, #20]
 80060ae:	f000 f8d1 	bl	8006254 <prvInsertTimerInActiveList>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01f      	beq.n	80060f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060b8:	2300      	movs	r3, #0
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2300      	movs	r3, #0
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	2100      	movs	r1, #0
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f7ff ff88 	bl	8005fd8 <xTimerGenericCommand>
 80060c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d113      	bne.n	80060f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	6978      	ldr	r0, [r7, #20]
 80060fe:	4798      	blx	r3
}
 8006100:	bf00      	nop
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000fe0 	.word	0x20000fe0

0800610c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f857 	bl	80061cc <prvGetNextExpireTime>
 800611e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f803 	bl	8006130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800612a:	f000 f8d5 	bl	80062d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800612e:	e7f1      	b.n	8006114 <prvTimerTask+0x8>

08006130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800613a:	f7ff fa39 	bl	80055b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f866 	bl	8006214 <prvSampleTimeNow>
 8006148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d130      	bne.n	80061b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <prvProcessTimerOrBlockTask+0x3c>
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	429a      	cmp	r2, r3
 800615c:	d806      	bhi.n	800616c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800615e:	f7ff fa35 	bl	80055cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff85 	bl	8006074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800616a:	e024      	b.n	80061b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <prvProcessTimerOrBlockTask+0x90>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <prvProcessTimerOrBlockTask+0x50>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <prvProcessTimerOrBlockTask+0x52>
 8006180:	2300      	movs	r3, #0
 8006182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <prvProcessTimerOrBlockTask+0x94>)
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	f7fe ff7d 	bl	8005090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006196:	f7ff fa19 	bl	80055cc <xTaskResumeAll>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <prvProcessTimerOrBlockTask+0x98>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
}
 80061b0:	e001      	b.n	80061b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061b2:	f7ff fa0b 	bl	80055cc <xTaskResumeAll>
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000fe4 	.word	0x20000fe4
 80061c4:	20000fe8 	.word	0x20000fe8
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <prvGetNextExpireTime+0x44>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <prvGetNextExpireTime+0x16>
 80061de:	2201      	movs	r2, #1
 80061e0:	e000      	b.n	80061e4 <prvGetNextExpireTime+0x18>
 80061e2:	2200      	movs	r2, #0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <prvGetNextExpireTime+0x44>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e001      	b.n	8006200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000fe0 	.word	0x20000fe0

08006214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800621c:	f7ff fa74 	bl	8005708 <xTaskGetTickCount>
 8006220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006222:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <prvSampleTimeNow+0x3c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d205      	bcs.n	8006238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800622c:	f000 f936 	bl	800649c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e002      	b.n	800623e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800623e:	4a04      	ldr	r2, [pc, #16]	; (8006250 <prvSampleTimeNow+0x3c>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000ff0 	.word	0x20000ff0

08006254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d812      	bhi.n	80062a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	429a      	cmp	r2, r3
 8006286:	d302      	bcc.n	800628e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006288:	2301      	movs	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e01b      	b.n	80062c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <prvInsertTimerInActiveList+0x7c>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fe f9de 	bl	800465a <vListInsert>
 800629e:	e012      	b.n	80062c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d206      	bcs.n	80062b6 <prvInsertTimerInActiveList+0x62>
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e007      	b.n	80062c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <prvInsertTimerInActiveList+0x80>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fe f9ca 	bl	800465a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062c6:	697b      	ldr	r3, [r7, #20]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000fe4 	.word	0x20000fe4
 80062d4:	20000fe0 	.word	0x20000fe0

080062d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	; 0x38
 80062dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062de:	e0ca      	b.n	8006476 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da18      	bge.n	8006318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	3304      	adds	r3, #4
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	61fb      	str	r3, [r7, #28]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630e:	6850      	ldr	r0, [r2, #4]
 8006310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006312:	6892      	ldr	r2, [r2, #8]
 8006314:	4611      	mov	r1, r2
 8006316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f2c0 80aa 	blt.w	8006474 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe f9cb 	bl	80046cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006336:	463b      	mov	r3, r7
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff6b 	bl	8006214 <prvSampleTimeNow>
 800633e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b09      	cmp	r3, #9
 8006344:	f200 8097 	bhi.w	8006476 <prvProcessReceivedCommands+0x19e>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <prvProcessReceivedCommands+0x78>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006379 	.word	0x08006379
 8006354:	08006379 	.word	0x08006379
 8006358:	08006379 	.word	0x08006379
 800635c:	080063ed 	.word	0x080063ed
 8006360:	08006401 	.word	0x08006401
 8006364:	0800644b 	.word	0x0800644b
 8006368:	08006379 	.word	0x08006379
 800636c:	08006379 	.word	0x08006379
 8006370:	080063ed 	.word	0x080063ed
 8006374:	08006401 	.word	0x08006401
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	18d1      	adds	r1, r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006398:	f7ff ff5c 	bl	8006254 <prvInsertTimerInActiveList>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d069      	beq.n	8006476 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05e      	beq.n	8006476 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	441a      	add	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f7ff fe05 	bl	8005fd8 <xTimerGenericCommand>
 80063ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d14f      	bne.n	8006476 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	61bb      	str	r3, [r7, #24]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063fe:	e03a      	b.n	8006476 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	617b      	str	r3, [r7, #20]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	18d1      	adds	r1, r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006444:	f7ff ff06 	bl	8006254 <prvInsertTimerInActiveList>
					break;
 8006448:	e015      	b.n	8006476 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645a:	f000 fbe1 	bl	8006c20 <vPortFree>
 800645e:	e00a      	b.n	8006476 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006472:	e000      	b.n	8006476 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <prvProcessReceivedCommands+0x1c0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	1d39      	adds	r1, r7, #4
 800647c:	2200      	movs	r2, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fbec 	bl	8004c5c <xQueueReceive>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	f47f af2a 	bne.w	80062e0 <prvProcessReceivedCommands+0x8>
	}
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	3730      	adds	r7, #48	; 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000fe8 	.word	0x20000fe8

0800649c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064a2:	e048      	b.n	8006536 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <prvSwitchTimerLists+0xc0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b2b      	ldr	r3, [pc, #172]	; (800655c <prvSwitchTimerLists+0xc0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe f905 	bl	80046cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02e      	beq.n	8006536 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90e      	bls.n	8006508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064f6:	4b19      	ldr	r3, [pc, #100]	; (800655c <prvSwitchTimerLists+0xc0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fe f8aa 	bl	800465a <vListInsert>
 8006506:	e016      	b.n	8006536 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006508:	2300      	movs	r3, #0
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fd60 	bl	8005fd8 <xTimerGenericCommand>
 8006518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	603b      	str	r3, [r7, #0]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <prvSwitchTimerLists+0xc0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1b1      	bne.n	80064a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <prvSwitchTimerLists+0xc0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <prvSwitchTimerLists+0xc4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a04      	ldr	r2, [pc, #16]	; (800655c <prvSwitchTimerLists+0xc0>)
 800654c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800654e:	4a04      	ldr	r2, [pc, #16]	; (8006560 <prvSwitchTimerLists+0xc4>)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	6013      	str	r3, [r2, #0]
}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000fe0 	.word	0x20000fe0
 8006560:	20000fe4 	.word	0x20000fe4

08006564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800656a:	f000 f96b 	bl	8006844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800656e:	4b15      	ldr	r3, [pc, #84]	; (80065c4 <prvCheckForValidListAndQueue+0x60>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d120      	bne.n	80065b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006576:	4814      	ldr	r0, [pc, #80]	; (80065c8 <prvCheckForValidListAndQueue+0x64>)
 8006578:	f7fe f81e 	bl	80045b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800657c:	4813      	ldr	r0, [pc, #76]	; (80065cc <prvCheckForValidListAndQueue+0x68>)
 800657e:	f7fe f81b 	bl	80045b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <prvCheckForValidListAndQueue+0x6c>)
 8006584:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <prvCheckForValidListAndQueue+0x64>)
 8006586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <prvCheckForValidListAndQueue+0x70>)
 800658a:	4a10      	ldr	r2, [pc, #64]	; (80065cc <prvCheckForValidListAndQueue+0x68>)
 800658c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <prvCheckForValidListAndQueue+0x74>)
 8006594:	4a11      	ldr	r2, [pc, #68]	; (80065dc <prvCheckForValidListAndQueue+0x78>)
 8006596:	2110      	movs	r1, #16
 8006598:	200a      	movs	r0, #10
 800659a:	f7fe f929 	bl	80047f0 <xQueueGenericCreateStatic>
 800659e:	4603      	mov	r3, r0
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <prvCheckForValidListAndQueue+0x60>)
 80065a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <prvCheckForValidListAndQueue+0x60>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <prvCheckForValidListAndQueue+0x60>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	490b      	ldr	r1, [pc, #44]	; (80065e0 <prvCheckForValidListAndQueue+0x7c>)
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fd42 	bl	800503c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065b8:	f000 f974 	bl	80068a4 <vPortExitCritical>
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000fe8 	.word	0x20000fe8
 80065c8:	20000fb8 	.word	0x20000fb8
 80065cc:	20000fcc 	.word	0x20000fcc
 80065d0:	20000fe0 	.word	0x20000fe0
 80065d4:	20000fe4 	.word	0x20000fe4
 80065d8:	20001094 	.word	0x20001094
 80065dc:	20000ff4 	.word	0x20000ff4
 80065e0:	0800709c 	.word	0x0800709c

080065e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b04      	subs	r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006614:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <pxPortInitialiseStack+0x64>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b14      	subs	r3, #20
 800661e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f06f 0202 	mvn.w	r2, #2
 8006632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3b20      	subs	r3, #32
 8006638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	0800664d 	.word	0x0800664d

0800664c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <prvTaskExitError+0x54>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d00a      	beq.n	8006676 <prvTaskExitError+0x2a>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <prvTaskExitError+0x28>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	60bb      	str	r3, [r7, #8]
}
 8006688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800668a:	bf00      	nop
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0fc      	beq.n	800668c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	2000000c 	.word	0x2000000c
	...

080066b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <pxCurrentTCBConst2>)
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	6808      	ldr	r0, [r1, #0]
 80066b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	f380 8809 	msr	PSP, r0
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	4770      	bx	lr
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst2>:
 80066d0:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066d8:	4808      	ldr	r0, [pc, #32]	; (80066fc <prvPortStartFirstTask+0x24>)
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f380 8808 	msr	MSP, r0
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8814 	msr	CONTROL, r0
 80066ea:	b662      	cpsie	i
 80066ec:	b661      	cpsie	f
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	df00      	svc	0
 80066f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066fa:	bf00      	nop
 80066fc:	e000ed08 	.word	0xe000ed08

08006700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006706:	4b46      	ldr	r3, [pc, #280]	; (8006820 <xPortStartScheduler+0x120>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a46      	ldr	r2, [pc, #280]	; (8006824 <xPortStartScheduler+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10a      	bne.n	8006726 <xPortStartScheduler+0x26>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006726:	4b3e      	ldr	r3, [pc, #248]	; (8006820 <xPortStartScheduler+0x120>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <xPortStartScheduler+0x128>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10a      	bne.n	8006746 <xPortStartScheduler+0x46>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006746:	4b39      	ldr	r3, [pc, #228]	; (800682c <xPortStartScheduler+0x12c>)
 8006748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	22ff      	movs	r2, #255	; 0xff
 8006756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006768:	b2da      	uxtb	r2, r3
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <xPortStartScheduler+0x130>)
 800676c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <xPortStartScheduler+0x134>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006774:	e009      	b.n	800678a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <xPortStartScheduler+0x134>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3b01      	subs	r3, #1
 800677c:	4a2d      	ldr	r2, [pc, #180]	; (8006834 <xPortStartScheduler+0x134>)
 800677e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d0ef      	beq.n	8006776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006796:	4b27      	ldr	r3, [pc, #156]	; (8006834 <xPortStartScheduler+0x134>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1c3 0307 	rsb	r3, r3, #7
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d00a      	beq.n	80067b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60bb      	str	r3, [r7, #8]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067b8:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <xPortStartScheduler+0x134>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <xPortStartScheduler+0x134>)
 80067c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <xPortStartScheduler+0x134>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ca:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <xPortStartScheduler+0x134>)
 80067cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067d6:	4b18      	ldr	r3, [pc, #96]	; (8006838 <xPortStartScheduler+0x138>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <xPortStartScheduler+0x138>)
 80067dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <xPortStartScheduler+0x138>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a14      	ldr	r2, [pc, #80]	; (8006838 <xPortStartScheduler+0x138>)
 80067e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067ee:	f000 f8dd 	bl	80069ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <xPortStartScheduler+0x13c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067f8:	f000 f8fc 	bl	80069f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <xPortStartScheduler+0x140>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <xPortStartScheduler+0x140>)
 8006802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006808:	f7ff ff66 	bl	80066d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800680c:	f7ff f846 	bl	800589c <vTaskSwitchContext>
	prvTaskExitError();
 8006810:	f7ff ff1c 	bl	800664c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	e000ed00 	.word	0xe000ed00
 8006824:	410fc271 	.word	0x410fc271
 8006828:	410fc270 	.word	0x410fc270
 800682c:	e000e400 	.word	0xe000e400
 8006830:	200010e4 	.word	0x200010e4
 8006834:	200010e8 	.word	0x200010e8
 8006838:	e000ed20 	.word	0xe000ed20
 800683c:	2000000c 	.word	0x2000000c
 8006840:	e000ef34 	.word	0xe000ef34

08006844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	607b      	str	r3, [r7, #4]
}
 800685c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <vPortEnterCritical+0x58>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a0d      	ldr	r2, [pc, #52]	; (800689c <vPortEnterCritical+0x58>)
 8006866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006868:	4b0c      	ldr	r3, [pc, #48]	; (800689c <vPortEnterCritical+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d10f      	bne.n	8006890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <vPortEnterCritical+0x5c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <vPortEnterCritical+0x4c>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	603b      	str	r3, [r7, #0]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <vPortEnterCritical+0x4a>
	}
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	2000000c 	.word	0x2000000c
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <vPortExitCritical+0x50>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <vPortExitCritical+0x24>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <vPortExitCritical+0x50>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <vPortExitCritical+0x50>)
 80068d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <vPortExitCritical+0x50>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <vPortExitCritical+0x42>
 80068da:	2300      	movs	r3, #0
 80068dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f383 8811 	msr	BASEPRI, r3
}
 80068e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	2000000c 	.word	0x2000000c
	...

08006900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006900:	f3ef 8009 	mrs	r0, PSP
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <pxCurrentTCBConst>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	f01e 0f10 	tst.w	lr, #16
 8006910:	bf08      	it	eq
 8006912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	6010      	str	r0, [r2, #0]
 800691c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006924:	f380 8811 	msr	BASEPRI, r0
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f7fe ffb4 	bl	800589c <vTaskSwitchContext>
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	f380 8811 	msr	BASEPRI, r0
 800693c:	bc09      	pop	{r0, r3}
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006946:	f01e 0f10 	tst.w	lr, #16
 800694a:	bf08      	it	eq
 800694c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006950:	f380 8809 	msr	PSP, r0
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst>:
 8006960:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006982:	f7fe fed1 	bl	8005728 <xTaskIncrementTick>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <xPortSysTickHandler+0x40>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <vPortSetupTimerInterrupt+0x34>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <vPortSetupTimerInterrupt+0x38>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <vPortSetupTimerInterrupt+0x3c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <vPortSetupTimerInterrupt+0x40>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <vPortSetupTimerInterrupt+0x44>)
 80069ca:	3b01      	subs	r3, #1
 80069cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ce:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <vPortSetupTimerInterrupt+0x34>)
 80069d0:	2207      	movs	r2, #7
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	e000e010 	.word	0xe000e010
 80069e4:	e000e018 	.word	0xe000e018
 80069e8:	20000000 	.word	0x20000000
 80069ec:	10624dd3 	.word	0x10624dd3
 80069f0:	e000e014 	.word	0xe000e014

080069f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a04 <vPortEnableVFP+0x10>
 80069f8:	6801      	ldr	r1, [r0, #0]
 80069fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069fe:	6001      	str	r1, [r0, #0]
 8006a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a02:	bf00      	nop
 8006a04:	e000ed88 	.word	0xe000ed88

08006a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a0e:	f3ef 8305 	mrs	r3, IPSR
 8006a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	d914      	bls.n	8006a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a1a:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <vPortValidateInterruptPriority+0x70>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a24:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <vPortValidateInterruptPriority+0x74>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	7afa      	ldrb	r2, [r7, #11]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d20a      	bcs.n	8006a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <vPortValidateInterruptPriority+0x78>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <vPortValidateInterruptPriority+0x7c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d90a      	bls.n	8006a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	603b      	str	r3, [r7, #0]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <vPortValidateInterruptPriority+0x60>
	}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000e3f0 	.word	0xe000e3f0
 8006a7c:	200010e4 	.word	0x200010e4
 8006a80:	e000ed0c 	.word	0xe000ed0c
 8006a84:	200010e8 	.word	0x200010e8

08006a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a94:	f7fe fd8c 	bl	80055b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a98:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <pvPortMalloc+0x180>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006aa0:	f000 f920 	bl	8006ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006aa4:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <pvPortMalloc+0x184>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 8093 	bne.w	8006bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01d      	beq.n	8006af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ab8:	2208      	movs	r2, #8
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d014      	beq.n	8006af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f023 0307 	bic.w	r3, r3, #7
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	617b      	str	r3, [r7, #20]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d06e      	beq.n	8006bd8 <pvPortMalloc+0x150>
 8006afa:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <pvPortMalloc+0x188>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d869      	bhi.n	8006bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b04:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <pvPortMalloc+0x18c>)
 8006b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b08:	4b42      	ldr	r3, [pc, #264]	; (8006c14 <pvPortMalloc+0x18c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b0e:	e004      	b.n	8006b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d903      	bls.n	8006b2c <pvPortMalloc+0xa4>
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f1      	bne.n	8006b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b2c:	4b36      	ldr	r3, [pc, #216]	; (8006c08 <pvPortMalloc+0x180>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d050      	beq.n	8006bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	2308      	movs	r3, #8
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d91f      	bls.n	8006b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <pvPortMalloc+0xf8>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	613b      	str	r3, [r7, #16]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b92:	69b8      	ldr	r0, [r7, #24]
 8006b94:	f000 f908 	bl	8006da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <pvPortMalloc+0x188>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <pvPortMalloc+0x188>)
 8006ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <pvPortMalloc+0x188>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <pvPortMalloc+0x190>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d203      	bcs.n	8006bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bb2:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <pvPortMalloc+0x188>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <pvPortMalloc+0x190>)
 8006bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <pvPortMalloc+0x184>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <pvPortMalloc+0x194>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <pvPortMalloc+0x194>)
 8006bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bd8:	f7fe fcf8 	bl	80055cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <pvPortMalloc+0x174>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60fb      	str	r3, [r7, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <pvPortMalloc+0x172>
	return pvReturn;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3728      	adds	r7, #40	; 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20001cac 	.word	0x20001cac
 8006c0c:	20001cc0 	.word	0x20001cc0
 8006c10:	20001cb0 	.word	0x20001cb0
 8006c14:	20001ca4 	.word	0x20001ca4
 8006c18:	20001cb4 	.word	0x20001cb4
 8006c1c:	20001cb8 	.word	0x20001cb8

08006c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04d      	beq.n	8006cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c32:	2308      	movs	r3, #8
 8006c34:	425b      	negs	r3, r3
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <vPortFree+0xb8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <vPortFree+0x44>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60fb      	str	r3, [r7, #12]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <vPortFree+0x62>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60bb      	str	r3, [r7, #8]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <vPortFree+0xb8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01e      	beq.n	8006cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11a      	bne.n	8006cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <vPortFree+0xb8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ca8:	f7fe fc82 	bl	80055b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <vPortFree+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <vPortFree+0xbc>)
 8006cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f000 f874 	bl	8006da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <vPortFree+0xc0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <vPortFree+0xc0>)
 8006cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cca:	f7fe fc7f 	bl	80055cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20001cc0 	.word	0x20001cc0
 8006cdc:	20001cb0 	.word	0x20001cb0
 8006ce0:	20001cbc 	.word	0x20001cbc

08006ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <prvHeapInit+0xac>)
 8006cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3307      	adds	r3, #7
 8006d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <prvHeapInit+0xac>)
 8006d14:	4413      	add	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <prvHeapInit+0xb0>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <prvHeapInit+0xb0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d30:	2208      	movs	r2, #8
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <prvHeapInit+0xb4>)
 8006d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <prvHeapInit+0xb4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <prvHeapInit+0xb4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <prvHeapInit+0xb4>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <prvHeapInit+0xb8>)
 8006d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <prvHeapInit+0xbc>)
 8006d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <prvHeapInit+0xc0>)
 8006d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	200010ec 	.word	0x200010ec
 8006d94:	20001ca4 	.word	0x20001ca4
 8006d98:	20001cac 	.word	0x20001cac
 8006d9c:	20001cb4 	.word	0x20001cb4
 8006da0:	20001cb0 	.word	0x20001cb0
 8006da4:	20001cc0 	.word	0x20001cc0

08006da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <prvInsertBlockIntoFreeList+0xac>)
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e002      	b.n	8006dbc <prvInsertBlockIntoFreeList+0x14>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d8f7      	bhi.n	8006db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d108      	bne.n	8006dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	441a      	add	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d118      	bne.n	8006e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <prvInsertBlockIntoFreeList+0xb0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d00d      	beq.n	8006e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	441a      	add	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e008      	b.n	8006e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvInsertBlockIntoFreeList+0xb0>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e003      	b.n	8006e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d002      	beq.n	8006e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20001ca4 	.word	0x20001ca4
 8006e58:	20001cac 	.word	0x20001cac

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f8f2 	bl	8007058 <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	0800719c 	.word	0x0800719c
 8006e98:	0800719c 	.word	0x0800719c
 8006e9c:	0800719c 	.word	0x0800719c
 8006ea0:	080071a0 	.word	0x080071a0

08006ea4 <__retarget_lock_acquire_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <__retarget_lock_release_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <memcpy>:
 8006ea8:	440a      	add	r2, r1
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eb0:	d100      	bne.n	8006eb4 <memcpy+0xc>
 8006eb2:	4770      	bx	lr
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	d1f9      	bne.n	8006eb6 <memcpy+0xe>
 8006ec2:	bd10      	pop	{r4, pc}

08006ec4 <memset>:
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d100      	bne.n	8006ece <memset+0xa>
 8006ecc:	4770      	bx	lr
 8006ece:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed2:	e7f9      	b.n	8006ec8 <memset+0x4>

08006ed4 <cleanup_glue>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	6809      	ldr	r1, [r1, #0]
 8006eda:	4605      	mov	r5, r0
 8006edc:	b109      	cbz	r1, 8006ee2 <cleanup_glue+0xe>
 8006ede:	f7ff fff9 	bl	8006ed4 <cleanup_glue>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eea:	f000 b869 	b.w	8006fc0 <_free_r>
	...

08006ef0 <_reclaim_reent>:
 8006ef0:	4b2c      	ldr	r3, [pc, #176]	; (8006fa4 <_reclaim_reent+0xb4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	b570      	push	{r4, r5, r6, lr}
 8006ef8:	4604      	mov	r4, r0
 8006efa:	d051      	beq.n	8006fa0 <_reclaim_reent+0xb0>
 8006efc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006efe:	b143      	cbz	r3, 8006f12 <_reclaim_reent+0x22>
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d14a      	bne.n	8006f9c <_reclaim_reent+0xac>
 8006f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f08:	6819      	ldr	r1, [r3, #0]
 8006f0a:	b111      	cbz	r1, 8006f12 <_reclaim_reent+0x22>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 f857 	bl	8006fc0 <_free_r>
 8006f12:	6961      	ldr	r1, [r4, #20]
 8006f14:	b111      	cbz	r1, 8006f1c <_reclaim_reent+0x2c>
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f852 	bl	8006fc0 <_free_r>
 8006f1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f1e:	b111      	cbz	r1, 8006f26 <_reclaim_reent+0x36>
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f84d 	bl	8006fc0 <_free_r>
 8006f26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f28:	b111      	cbz	r1, 8006f30 <_reclaim_reent+0x40>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f848 	bl	8006fc0 <_free_r>
 8006f30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f32:	b111      	cbz	r1, 8006f3a <_reclaim_reent+0x4a>
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 f843 	bl	8006fc0 <_free_r>
 8006f3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f3c:	b111      	cbz	r1, 8006f44 <_reclaim_reent+0x54>
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 f83e 	bl	8006fc0 <_free_r>
 8006f44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f46:	b111      	cbz	r1, 8006f4e <_reclaim_reent+0x5e>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 f839 	bl	8006fc0 <_free_r>
 8006f4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f50:	b111      	cbz	r1, 8006f58 <_reclaim_reent+0x68>
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 f834 	bl	8006fc0 <_free_r>
 8006f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5a:	b111      	cbz	r1, 8006f62 <_reclaim_reent+0x72>
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 f82f 	bl	8006fc0 <_free_r>
 8006f62:	69a3      	ldr	r3, [r4, #24]
 8006f64:	b1e3      	cbz	r3, 8006fa0 <_reclaim_reent+0xb0>
 8006f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4798      	blx	r3
 8006f6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f6e:	b1b9      	cbz	r1, 8006fa0 <_reclaim_reent+0xb0>
 8006f70:	4620      	mov	r0, r4
 8006f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f76:	f7ff bfad 	b.w	8006ed4 <cleanup_glue>
 8006f7a:	5949      	ldr	r1, [r1, r5]
 8006f7c:	b941      	cbnz	r1, 8006f90 <_reclaim_reent+0xa0>
 8006f7e:	3504      	adds	r5, #4
 8006f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f82:	2d80      	cmp	r5, #128	; 0x80
 8006f84:	68d9      	ldr	r1, [r3, #12]
 8006f86:	d1f8      	bne.n	8006f7a <_reclaim_reent+0x8a>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f819 	bl	8006fc0 <_free_r>
 8006f8e:	e7ba      	b.n	8006f06 <_reclaim_reent+0x16>
 8006f90:	680e      	ldr	r6, [r1, #0]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f814 	bl	8006fc0 <_free_r>
 8006f98:	4631      	mov	r1, r6
 8006f9a:	e7ef      	b.n	8006f7c <_reclaim_reent+0x8c>
 8006f9c:	2500      	movs	r5, #0
 8006f9e:	e7ef      	b.n	8006f80 <_reclaim_reent+0x90>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000010 	.word	0x20000010

08006fa8 <__malloc_lock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_lock+0x8>)
 8006faa:	f7ff bf7b 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20001cc4 	.word	0x20001cc4

08006fb4 <__malloc_unlock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__malloc_unlock+0x8>)
 8006fb6:	f7ff bf76 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	20001cc4 	.word	0x20001cc4

08006fc0 <_free_r>:
 8006fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d044      	beq.n	8007050 <_free_r+0x90>
 8006fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fca:	9001      	str	r0, [sp, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f1a1 0404 	sub.w	r4, r1, #4
 8006fd2:	bfb8      	it	lt
 8006fd4:	18e4      	addlt	r4, r4, r3
 8006fd6:	f7ff ffe7 	bl	8006fa8 <__malloc_lock>
 8006fda:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <_free_r+0x94>)
 8006fdc:	9801      	ldr	r0, [sp, #4]
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	b933      	cbnz	r3, 8006ff0 <_free_r+0x30>
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	6014      	str	r4, [r2, #0]
 8006fe6:	b003      	add	sp, #12
 8006fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fec:	f7ff bfe2 	b.w	8006fb4 <__malloc_unlock>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d908      	bls.n	8007006 <_free_r+0x46>
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	1961      	adds	r1, r4, r5
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	bf01      	itttt	eq
 8006ffc:	6819      	ldreq	r1, [r3, #0]
 8006ffe:	685b      	ldreq	r3, [r3, #4]
 8007000:	1949      	addeq	r1, r1, r5
 8007002:	6021      	streq	r1, [r4, #0]
 8007004:	e7ed      	b.n	8006fe2 <_free_r+0x22>
 8007006:	461a      	mov	r2, r3
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b10b      	cbz	r3, 8007010 <_free_r+0x50>
 800700c:	42a3      	cmp	r3, r4
 800700e:	d9fa      	bls.n	8007006 <_free_r+0x46>
 8007010:	6811      	ldr	r1, [r2, #0]
 8007012:	1855      	adds	r5, r2, r1
 8007014:	42a5      	cmp	r5, r4
 8007016:	d10b      	bne.n	8007030 <_free_r+0x70>
 8007018:	6824      	ldr	r4, [r4, #0]
 800701a:	4421      	add	r1, r4
 800701c:	1854      	adds	r4, r2, r1
 800701e:	42a3      	cmp	r3, r4
 8007020:	6011      	str	r1, [r2, #0]
 8007022:	d1e0      	bne.n	8006fe6 <_free_r+0x26>
 8007024:	681c      	ldr	r4, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	6053      	str	r3, [r2, #4]
 800702a:	4421      	add	r1, r4
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	e7da      	b.n	8006fe6 <_free_r+0x26>
 8007030:	d902      	bls.n	8007038 <_free_r+0x78>
 8007032:	230c      	movs	r3, #12
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	e7d6      	b.n	8006fe6 <_free_r+0x26>
 8007038:	6825      	ldr	r5, [r4, #0]
 800703a:	1961      	adds	r1, r4, r5
 800703c:	428b      	cmp	r3, r1
 800703e:	bf04      	itt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	6063      	str	r3, [r4, #4]
 8007046:	bf04      	itt	eq
 8007048:	1949      	addeq	r1, r1, r5
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	6054      	str	r4, [r2, #4]
 800704e:	e7ca      	b.n	8006fe6 <_free_r+0x26>
 8007050:	b003      	add	sp, #12
 8007052:	bd30      	pop	{r4, r5, pc}
 8007054:	20001cc8 	.word	0x20001cc8

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
