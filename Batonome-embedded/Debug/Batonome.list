
Batonome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d84  08006d84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d8c  08006d8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  20000074  08006e08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  08006e08  00021c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e82  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f17  00000000  00000000  00040f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00044e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  000468a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f97  00000000  00000000  00048188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e473  00000000  00000000  0004c11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d639e  00000000  00000000  0006a592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ec  00000000  00000000  00140980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c48 	.word	0x08006c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006c48 	.word	0x08006c48

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc2f 	bl	8000d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f82e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f94e 	bl	8000780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f870 	bl	80005c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004e8:	f000 f8ac 	bl	8000644 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f8e8 	bl	80006c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f916 	bl	8000720 <MX_USART2_UART_Init>
  zigbee_Init();
 80004f4:	f000 fbd8 	bl	8000ca8 <zigbee_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f003 fd30 	bl	8003f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x54>)
 8000502:	f003 fd75 	bl	8003ff0 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x60>)
 8000512:	f003 fd6d 	bl	8003ff0 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f003 fd42 	bl	8003fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x4c>
 8000522:	bf00      	nop
 8000524:	08006c94 	.word	0x08006c94
 8000528:	080007c9 	.word	0x080007c9
 800052c:	20000240 	.word	0x20000240
 8000530:	08006cb8 	.word	0x08006cb8
 8000534:	080007d3 	.word	0x080007d3
 8000538:	20000244 	.word	0x20000244

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fab2 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f001 f823 	bl	80015ac <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f94c 	bl	8000808 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000570:	2310      	movs	r3, #16
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	; 0x60
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f865 	bl	8001658 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000594:	f000 f938 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fc65 	bl	8001e80 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005bc:	f000 f924 	bl	8000808 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_I2C1_Init+0x74>)
 80005d4:	f640 6214 	movw	r2, #3604	; 0xe14
 80005d8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_I2C1_Init+0x74>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_I2C1_Init+0x74>)
 8000606:	f000 fe9d 	bl	8001344 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f8fa 	bl	8000808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <MX_I2C1_Init+0x74>)
 8000618:	f000 ff23 	bl	8001462 <HAL_I2CEx_ConfigAnalogFilter>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 f8f1 	bl	8000808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x74>)
 800062a:	f000 ff65 	bl	80014f8 <HAL_I2CEx_ConfigDigitalFilter>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000634:	f000 f8e8 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000090 	.word	0x20000090
 8000640:	40005400 	.word	0x40005400

08000644 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_I2C3_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_I2C3_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000650:	f640 6214 	movw	r2, #3604	; 0xe14
 8000654:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_I2C3_Init+0x74>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2C3_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C3_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000682:	f000 fe5f 	bl	8001344 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f8bc 	bl	8000808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_I2C3_Init+0x74>)
 8000694:	f000 fee5 	bl	8001462 <HAL_I2CEx_ConfigAnalogFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800069e:	f000 f8b3 	bl	8000808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C3_Init+0x74>)
 80006a6:	f000 ff27 	bl	80014f8 <HAL_I2CEx_ConfigDigitalFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f000 f8aa 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000e4 	.word	0x200000e4
 80006bc:	40005c00 	.word	0x40005c00

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART1_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x58>)
 8000704:	f002 fb7a 	bl	8002dfc <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f87b 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000138 	.word	0x20000138
 800071c:	40013800 	.word	0x40013800

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_USART2_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000764:	f002 fb4a 	bl	8002dfc <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f84b 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001bc 	.word	0x200001bc
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_GPIO_Init+0x44>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_GPIO_Init+0x44>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_GPIO_Init+0x44>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <MX_GPIO_Init+0x44>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_GPIO_Init+0x44>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80007d0:	e7fe      	b.n	80007d0 <StartBlink01+0x8>

080007d2 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f003 fc9a 	bl	8004114 <osDelay>
 80007e0:	e7fb      	b.n	80007da <StartBlink02+0x8>
	...

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f000 fab9 	bl	8000d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40001000 	.word	0x40001000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_MspInit+0x4c>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	; 0x60
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_MspInit+0x4c>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x4c>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	; 0x58
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 fb63 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0a2      	sub	sp, #136	; 0x88
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2254      	movs	r2, #84	; 0x54
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f006 f915 	bl	8006ab4 <memset>
  if(hi2c->Instance==I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a4f      	ldr	r2, [pc, #316]	; (80009cc <HAL_I2C_MspInit+0x168>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d13a      	bne.n	800090a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fd43 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008ac:	f7ff ffac 	bl	8000808 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008dc:	2304      	movs	r3, #4
 80008de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fbc0 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	4a36      	ldr	r2, [pc, #216]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fa:	6593      	str	r3, [r2, #88]	; 0x58
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000908:	e05c      	b.n	80009c4 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a31      	ldr	r2, [pc, #196]	; (80009d4 <HAL_I2C_MspInit+0x170>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d157      	bne.n	80009c4 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000918:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800091a:	2300      	movs	r3, #0
 800091c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fd02 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800092e:	f7ff ff6b 	bl	8000808 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000966:	2312      	movs	r3, #18
 8000968:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000974:	2304      	movs	r3, #4
 8000976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fb74 	bl	8001070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000988:	2310      	movs	r3, #16
 800098a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800099a:	2304      	movs	r3, #4
 800099c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <HAL_I2C_MspInit+0x174>)
 80009a8:	f000 fb62 	bl	8001070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80009b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b6:	6593      	str	r3, [r2, #88]	; 0x58
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_I2C_MspInit+0x16c>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3788      	adds	r7, #136	; 0x88
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40005c00 	.word	0x40005c00
 80009d8:	48000400 	.word	0x48000400

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a0      	sub	sp, #128	; 0x80
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	2254      	movs	r2, #84	; 0x54
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f006 f859 	bl	8006ab4 <memset>
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <HAL_UART_MspInit+0x130>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13e      	bne.n	8000a8a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fc87 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff fef0 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2c:	4a38      	ldr	r2, [pc, #224]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6613      	str	r3, [r2, #96]	; 0x60
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a32      	ldr	r2, [pc, #200]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a58:	23c0      	movs	r3, #192	; 0xc0
 8000a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a70:	4619      	mov	r1, r3
 8000a72:	4828      	ldr	r0, [pc, #160]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a74:	f000 fafc 	bl	8001070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	2025      	movs	r0, #37	; 0x25
 8000a7e:	f000 fa4d 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a82:	2025      	movs	r0, #37	; 0x25
 8000a84:	f000 fa66 	bl	8000f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a88:	e03b      	b.n	8000b02 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <HAL_UART_MspInit+0x13c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d136      	bne.n	8000b02 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fc43 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000aac:	f7ff feac 	bl	8000808 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6593      	str	r3, [r2, #88]	; 0x58
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_UART_MspInit+0x134>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af0:	2307      	movs	r3, #7
 8000af2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 fab7 	bl	8001070 <HAL_GPIO_Init>
}
 8000b02:	bf00      	nop
 8000b04:	3780      	adds	r7, #128	; 0x80
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	40004400 	.word	0x40004400

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <HAL_InitTick+0xe0>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <HAL_InitTick+0xe0>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <HAL_InitTick+0xe0>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b42:	f107 0210 	add.w	r2, r7, #16
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fb5b 	bl	8002208 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5c:	f001 fb28 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8000b60:	6378      	str	r0, [r7, #52]	; 0x34
 8000b62:	e004      	b.n	8000b6e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b64:	f001 fb24 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <HAL_InitTick+0xe4>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	0c9b      	lsrs	r3, r3, #18
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_InitTick+0xec>)
 8000b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_InitTick+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <HAL_InitTick+0xe8>)
 8000ba4:	f001 feaa 	bl	80028fc <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d11b      	bne.n	8000bee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bb6:	4813      	ldr	r0, [pc, #76]	; (8000c04 <HAL_InitTick+0xe8>)
 8000bb8:	f001 ff02 	bl	80029c0 <HAL_TIM_Base_Start_IT>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d111      	bne.n	8000bee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bca:	2036      	movs	r0, #54	; 0x36
 8000bcc:	f000 f9c2 	bl	8000f54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d808      	bhi.n	8000be8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	2036      	movs	r0, #54	; 0x36
 8000bdc:	f000 f99e 	bl	8000f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_InitTick+0xf0>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e002      	b.n	8000bee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	20000248 	.word	0x20000248
 8000c08:	40001000 	.word	0x40001000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <USART1_IRQHandler+0x10>)
 8000c42:	f002 f9bd 	bl	8002fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000138 	.word	0x20000138

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f001 ff07 	bl	8002a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000248 	.word	0x20000248

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <StartZigbeeCom>:
    HAL_UART_Receive(&huart1, data, size, 100);
}


void StartZigbeeCom(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t received_data[100];
	received_data[0] = 0x02;
 8000c90:	2302      	movs	r3, #2
 8000c92:	733b      	strb	r3, [r7, #12]

  for(;;)
  {

	  HAL_UART_Transmit(&huart1, received_data, 1, 100);
 8000c94:	f107 010c 	add.w	r1, r7, #12
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4801      	ldr	r0, [pc, #4]	; (8000ca4 <StartZigbeeCom+0x1c>)
 8000c9e:	f002 f8fb 	bl	8002e98 <HAL_UART_Transmit>
 8000ca2:	e7f7      	b.n	8000c94 <StartZigbeeCom+0xc>
 8000ca4:	20000138 	.word	0x20000138

08000ca8 <zigbee_Init>:
  }
  /* USER CODE END 5 */
}

void zigbee_Init()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t zigbeeComHandle;
	const osThreadAttr_t zigbee_com_attributes = {
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 fefd 	bl	8006ab4 <memset>
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <zigbee_Init+0x38>)
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	2318      	movs	r3, #24
 8000cc6:	61bb      	str	r3, [r7, #24]
	  .name = "zigbee_com",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	zigbeeComHandle = osThreadNew(StartZigbeeCom, NULL, &zigbee_com_attributes);
 8000cc8:	463b      	mov	r3, r7
 8000cca:	461a      	mov	r2, r3
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <zigbee_Init+0x3c>)
 8000cd0:	f003 f98e 	bl	8003ff0 <osThreadNew>
 8000cd4:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08006c70 	.word	0x08006c70
 8000ce4:	08000c89 	.word	0x08000c89

08000ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cec:	f7ff ffba 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f005 fe99 	bl	8006a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1a:	f7ff fbdb 	bl	80004d4 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d2c:	08006d94 	.word	0x08006d94
  ldr r2, =_sbss
 8000d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d34:	20001c68 	.word	0x20001c68

08000d38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_IRQHandler>

08000d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8de 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f7ff fee6 	bl	8000b1c <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5c:	f7ff fd5a 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000294 	.word	0x20000294

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000294 	.word	0x20000294

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2e:	f7ff ff61 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffb1 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff80 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff54 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d008      	beq.n	8000f9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e022      	b.n	8000fe0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 020e 	bic.w	r2, r2, #14
 8000fa8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 021c 	and.w	r2, r3, #28
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d005      	beq.n	8001010 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e029      	b.n	8001064 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 020e 	bic.w	r2, r2, #14
 800101e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 021c 	and.w	r2, r3, #28
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
    }
  }
  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e148      	b.n	8001312 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 813a 	beq.w	800130c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x40>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d017      	beq.n	800114e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	6939      	ldr	r1, [r7, #16]
 800119e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0203 	and.w	r2, r3, #3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8094 	beq.w	800130c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b52      	ldr	r3, [pc, #328]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6613      	str	r3, [r2, #96]	; 0x60
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001226:	d00d      	beq.n	8001244 <HAL_GPIO_Init+0x1d4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a43      	ldr	r2, [pc, #268]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x1d0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a42      	ldr	r2, [pc, #264]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_GPIO_Init+0x1cc>
 8001238:	2302      	movs	r3, #2
 800123a:	e004      	b.n	8001246 <HAL_GPIO_Init+0x1d6>
 800123c:	2307      	movs	r3, #7
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x1d6>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_GPIO_Init+0x1d6>
 8001244:	2300      	movs	r3, #0
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001256:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012b2:	4a23      	ldr	r2, [pc, #140]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	f47f aeaf 	bne.w	8001080 <HAL_GPIO_Init+0x10>
  }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e081      	b.n	800145a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fa7a 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001394:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e006      	b.n	80013cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d104      	bne.n	80013de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001400:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69d9      	ldr	r1, [r3, #28]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	d138      	bne.n	80014ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001482:	2302      	movs	r3, #2
 8001484:	e032      	b.n	80014ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2224      	movs	r2, #36	; 0x24
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2220      	movs	r2, #32
 80014da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b20      	cmp	r3, #32
 800150c:	d139      	bne.n	8001582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001518:	2302      	movs	r3, #2
 800151a:	e033      	b.n	8001584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800154a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40007000 	.word	0x40007000

080015ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ba:	d130      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c8:	d038      	beq.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2232      	movs	r2, #50	; 0x32
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f0:	e002      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001604:	d102      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f2      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001618:	d110      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e00f      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162a:	d007      	beq.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001634:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000
 8001650:	20000000 	.word	0x20000000
 8001654:	431bde83 	.word	0x431bde83

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 bc02 	b.w	8001e70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4b96      	ldr	r3, [pc, #600]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001676:	4b94      	ldr	r3, [pc, #592]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80e4 	beq.w	8001856 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4c>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	f040 808b 	bne.w	80017b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 8087 	bne.w	80017b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a4:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x64>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e3d9      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_RCC_OscConfig+0x7e>
 80016cc:	4b7e      	ldr	r3, [pc, #504]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	e005      	b.n	80016e2 <HAL_RCC_OscConfig+0x8a>
 80016d6:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d223      	bcs.n	800172e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fdbe 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e3ba      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a72      	ldr	r2, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	496d      	ldr	r1, [pc, #436]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	4968      	ldr	r1, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e025      	b.n	800177a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172e:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4960      	ldr	r1, [pc, #384]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	495b      	ldr	r1, [pc, #364]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fd7e 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e37a      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177a:	f000 fc81 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4950      	ldr	r1, [pc, #320]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_RCC_OscConfig+0x278>)
 8001798:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800179a:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <HAL_RCC_OscConfig+0x27c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f9bc 	bl	8000b1c <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d052      	beq.n	8001854 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	e35e      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d032      	beq.n	8001820 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a42      	ldr	r2, [pc, #264]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fae5 	bl	8000d94 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ce:	f7ff fae1 	bl	8000d94 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e347      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4930      	ldr	r1, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	492b      	ldr	r1, [pc, #172]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
 800181e:	e01a      	b.n	8001856 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182c:	f7ff fab2 	bl	8000d94 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001834:	f7ff faae 	bl	8000d94 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e314      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1dc>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d073      	beq.n	800194a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x21c>
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d10e      	bne.n	800188c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d063      	beq.n	8001948 <HAL_RCC_OscConfig+0x2f0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d15f      	bne.n	8001948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e2f1      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x24c>
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e025      	b.n	80018f0 <HAL_RCC_OscConfig+0x298>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d114      	bne.n	80018d8 <HAL_RCC_OscConfig+0x280>
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a02      	ldr	r2, [pc, #8]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0x298>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08006cdc 	.word	0x08006cdc
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004
 80018d8:	4ba0      	ldr	r3, [pc, #640]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a9f      	ldr	r2, [pc, #636]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b9d      	ldr	r3, [pc, #628]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9c      	ldr	r2, [pc, #624]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa4c 	bl	8000d94 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fa48 	bl	8000d94 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e2ae      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x2a8>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa38 	bl	8000d94 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fa34 	bl	8000d94 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e29a      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193a:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x2d0>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d060      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x310>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d119      	bne.n	8001996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d116      	bne.n	8001996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001968:	4b7c      	ldr	r3, [pc, #496]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x328>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e277      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	4973      	ldr	r1, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001994:	e040      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d023      	beq.n	80019e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199e:	4b6f      	ldr	r3, [pc, #444]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f9f3 	bl	8000d94 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f9ef 	bl	8000d94 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e255      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	495f      	ldr	r1, [pc, #380]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f9cf 	bl	8000d94 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff f9cb 	bl	8000d94 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e231      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	4a4a      	ldr	r2, [pc, #296]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f9aa 	bl	8000d94 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff f9a6 	bl	8000d94 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e20c      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ef      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3ec>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6c:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff f98d 	bl	8000d94 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f989 	bl	8000d94 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1ef      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80a6 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10d      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d118      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af0:	f7ff f950 	bl	8000d94 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af8:	f7ff f94c 	bl	8000d94 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1b2      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4d8>
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2e:	e029      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_OscConfig+0x50c>
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	4b9a      	ldr	r3, [pc, #616]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a99      	ldr	r2, [pc, #612]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b74:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a95      	ldr	r2, [pc, #596]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d016      	beq.n	8001bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f902 	bl	8000d94 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f8fe 	bl	8000d94 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e162      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ed      	beq.n	8001b94 <HAL_RCC_OscConfig+0x53c>
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f8eb 	bl	8000d94 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff f8e7 	bl	8000d94 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e14b      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ed      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	4a77      	ldr	r2, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d03c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c12:	4a6f      	ldr	r2, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f8ba 	bl	8000d94 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7ff f8b6 	bl	8000d94 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e11c      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c36:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ef      	beq.n	8001c24 <HAL_RCC_OscConfig+0x5cc>
 8001c44:	e01b      	b.n	8001c7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c46:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4c:	4a60      	ldr	r2, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f89d 	bl	8000d94 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5e:	f7ff f899 	bl	8000d94 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0ff      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c70:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80f3 	beq.w	8001e6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 80c9 	bne.w	8001e24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0203 	and.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d12c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d123      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d11b      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d113      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d06b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d062      	beq.n	8001dcc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0ac      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d22:	f7ff f837 	bl	8000d94 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f833 	bl	8000d94 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e099      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d58:	3a01      	subs	r2, #1
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d62:	0212      	lsls	r2, r2, #8
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d6a:	0852      	lsrs	r2, r2, #1
 8001d6c:	3a01      	subs	r2, #1
 8001d6e:	0552      	lsls	r2, r2, #21
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d76:	0852      	lsrs	r2, r2, #1
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	0652      	lsls	r2, r2, #25
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d82:	06d2      	lsls	r2, r2, #27
 8001d84:	430a      	orrs	r2, r1
 8001d86:	4912      	ldr	r1, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da4:	f7fe fff6 	bl	8000d94 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fff2 	bl	8000d94 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e058      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_OscConfig+0x778>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dca:	e050      	b.n	8001e6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e04f      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d144      	bne.n	8001e6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dfc:	f7fe ffca 	bl	8000d94 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe ffc6 	bl	8000d94 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e02c      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x7ac>
 8001e22:	e024      	b.n	8001e6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d01f      	beq.n	8001e6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe ffad 	bl	8000d94 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ffa9 	bl	8000d94 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e00f      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4905      	ldr	r1, [pc, #20]	; (8001e78 <HAL_RCC_OscConfig+0x820>)
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x824>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
 8001e68:	e001      	b.n	8001e6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	feeefffc 	.word	0xfeeefffc

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0e7      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d910      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4970      	ldr	r1, [pc, #448]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b6e      	ldr	r3, [pc, #440]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0cf      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d908      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4960      	ldr	r1, [pc, #384]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d04c      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0a6      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e09a      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e08e      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e086      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4943      	ldr	r1, [pc, #268]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7fe ff14 	bl	8000d94 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe ff10 	bl	8000d94 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e06e      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d208      	bcs.n	8001fc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	492b      	ldr	r1, [pc, #172]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d210      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 0207 	bic.w	r2, r3, #7
 8001fdc:	4923      	ldr	r1, [pc, #140]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCC_ClockConfig+0x1ec>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e036      	b.n	8002064 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4918      	ldr	r1, [pc, #96]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4910      	ldr	r1, [pc, #64]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002034:	f000 f824 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	490b      	ldr	r1, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1f4>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1fc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fd5f 	bl	8000b1c <HAL_InitTick>
 800205e:	4603      	mov	r3, r0
 8002060:	72fb      	strb	r3, [r7, #11]

  return status;
 8002062:	7afb      	ldrb	r3, [r7, #11]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	08006cdc 	.word	0x08006cdc
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002098:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d121      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d11e      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020dc:	4a2b      	ldr	r2, [pc, #172]	; (800218c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_RCC_GetSysClockFreq+0x110>)
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e004      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d101      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_RCC_GetSysClockFreq+0x114>)
 8002106:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d134      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0xa6>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d003      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0xac>
 8002124:	e005      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_GetSysClockFreq+0x110>)
 8002128:	617b      	str	r3, [r7, #20]
      break;
 800212a:	e005      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0x114>)
 800212e:	617b      	str	r3, [r7, #20]
      break;
 8002130:	e002      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	617b      	str	r3, [r7, #20]
      break;
 8002136:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	0e5b      	lsrs	r3, r3, #25
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	3301      	adds	r3, #1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002178:	69bb      	ldr	r3, [r7, #24]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	08006cf4 	.word	0x08006cf4
 8002190:	00f42400 	.word	0x00f42400
 8002194:	007a1200 	.word	0x007a1200

08002198 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCC_GetHCLKFreq+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021b4:	f7ff fff0 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4904      	ldr	r1, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08006cec 	.word	0x08006cec

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e0:	f7ff ffda 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4904      	ldr	r1, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08006cec 	.word	0x08006cec

08002208 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	220f      	movs	r2, #15
 8002216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_GetClockConfig+0x5c>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_GetClockConfig+0x5c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_GetClockConfig+0x5c>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_GetClockConfig+0x5c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCC_GetClockConfig+0x60>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0207 	and.w	r2, r3, #7
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	601a      	str	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002284:	f7ff f984 	bl	8001590 <HAL_PWREx_GetVoltageRange>
 8002288:	6178      	str	r0, [r7, #20]
 800228a:	e014      	b.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a4:	f7ff f974 	bl	8001590 <HAL_PWREx_GetVoltageRange>
 80022a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022bc:	d10b      	bne.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d919      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2ba0      	cmp	r3, #160	; 0xa0
 80022c8:	d902      	bls.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ca:	2302      	movs	r3, #2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e013      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e010      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d902      	bls.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022dc:	2303      	movs	r3, #3
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e00a      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d102      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e8:	2302      	movs	r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e004      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d101      	bne.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 0207 	bic.w	r2, r3, #7
 8002300:	4909      	ldr	r1, [pc, #36]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002334:	2300      	movs	r3, #0
 8002336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002338:	2300      	movs	r3, #0
 800233a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002344:	2b00      	cmp	r3, #0
 8002346:	d031      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002350:	d01a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002356:	d814      	bhi.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002360:	d10f      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236e:	e00c      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f9ce 	bl	8002718 <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002380:	e003      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	74fb      	strb	r3, [r7, #19]
      break;
 8002386:	e000      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	494e      	ldr	r1, [pc, #312]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023a6:	e001      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809e 	beq.w	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a39      	ldr	r2, [pc, #228]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fcca 	bl	8000d94 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002402:	e009      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fcc6 	bl	8000d94 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d902      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	74fb      	strb	r3, [r7, #19]
        break;
 8002416:	e005      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d15a      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002434:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01e      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	429a      	cmp	r2, r3
 8002444:	d019      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002450:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fc86 	bl	8000d94 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe fc82 	bl	8000d94 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d902      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	74fb      	strb	r3, [r7, #19]
            break;
 80024a2:	e006      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ec      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e4:	7c7b      	ldrb	r3, [r7, #17]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b8a      	ldr	r3, [pc, #552]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a89      	ldr	r2, [pc, #548]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002502:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 0203 	bic.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4980      	ldr	r1, [pc, #512]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 020c 	bic.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	4978      	ldr	r1, [pc, #480]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	496f      	ldr	r1, [pc, #444]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	4967      	ldr	r1, [pc, #412]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	495e      	ldr	r1, [pc, #376]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4956      	ldr	r1, [pc, #344]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ce:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4945      	ldr	r1, [pc, #276]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260e:	d106      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261a:	60d3      	str	r3, [r2, #12]
 800261c:	e011      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d10c      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f872 	bl	8002718 <RCCEx_PLLSAI1_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d028      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	492d      	ldr	r1, [pc, #180]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266c:	d106      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a28      	ldr	r2, [pc, #160]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002678:	60d3      	str	r3, [r2, #12]
 800267a:	e011      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2101      	movs	r1, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f843 	bl	8002718 <RCCEx_PLLSAI1_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01c      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f820 	bl	8002718 <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002708:	7cbb      	ldrb	r3, [r7, #18]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002726:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d018      	beq.n	8002764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002732:	4b71      	ldr	r3, [pc, #452]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
       ||
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800274a:	4b6b      	ldr	r3, [pc, #428]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
       ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d047      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e044      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d018      	beq.n	800279e <RCCEx_PLLSAI1_Config+0x86>
 800276c:	2b03      	cmp	r3, #3
 800276e:	d825      	bhi.n	80027bc <RCCEx_PLLSAI1_Config+0xa4>
 8002770:	2b01      	cmp	r3, #1
 8002772:	d002      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x62>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d009      	beq.n	800278c <RCCEx_PLLSAI1_Config+0x74>
 8002778:	e020      	b.n	80027bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277a:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278a:	e01a      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800278c:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279c:	e013      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027aa:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ba:	e006      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e004      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c2:	bf00      	nop
 80027c4:	e002      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d2:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	430b      	orrs	r3, r1
 80027e8:	4943      	ldr	r1, [pc, #268]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d17c      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027f4:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fac8 	bl	8000d94 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002808:	f7fe fac4 	bl	8000d94 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
        break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ef      	bne.n	8002808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d15f      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d110      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800283c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	06d2      	lsls	r2, r2, #27
 800284c:	430a      	orrs	r2, r1
 800284e:	492a      	ldr	r1, [pc, #168]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
 8002854:	e027      	b.n	80028a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d112      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6912      	ldr	r2, [r2, #16]
 8002872:	0852      	lsrs	r2, r2, #1
 8002874:	3a01      	subs	r2, #1
 8002876:	0552      	lsls	r2, r2, #21
 8002878:	430a      	orrs	r2, r1
 800287a:	491f      	ldr	r1, [pc, #124]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	610b      	str	r3, [r1, #16]
 8002880:	e011      	b.n	80028a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800288a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	0211      	lsls	r1, r2, #8
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6952      	ldr	r2, [r2, #20]
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0652      	lsls	r2, r2, #25
 800289e:	430a      	orrs	r2, r1
 80028a0:	4915      	ldr	r1, [pc, #84]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe fa6f 	bl	8000d94 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b8:	e009      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028ba:	f7fe fa6b 	bl	8000d94 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d902      	bls.n	80028ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	73fb      	strb	r3, [r7, #15]
          break;
 80028cc:	e005      	b.n	80028da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ef      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e049      	b.n	80029a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f841 	bl	80029aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 f9dc 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d001      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e03b      	b.n	8002a50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_TIM_Base_Start_IT+0x9c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x4e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d004      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x4e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d115      	bne.n	8002a3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_TIM_Base_Start_IT+0xa4>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d015      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x8c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d011      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	e008      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e000      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40014000 	.word	0x40014000
 8002a64:	00010007 	.word	0x00010007

08002a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0202 	mvn.w	r2, #2
 8002a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f905 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8f7 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f908 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0204 	mvn.w	r2, #4
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8db 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8cd 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8de 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0208 	mvn.w	r2, #8
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8b1 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8a3 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8b4 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0210 	mvn.w	r2, #16
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2208      	movs	r2, #8
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f887 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f879 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f88a 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0201 	mvn.w	r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd fdfc 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8de 	bl	8002dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c26:	d10e      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8d1 	bl	8002de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d10e      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f838 	bl	8002ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0220 	mvn.w	r2, #32
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f891 	bl	8002dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_Base_SetConfig+0x20>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d108      	bne.n	8002d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <TIM_Base_SetConfig+0xc4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0xa0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0xa0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <TIM_Base_SetConfig+0xc4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400

08002dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e040      	b.n	8002e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fddc 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fbc2 	bl	80035c4 <UART_SetConfig>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e022      	b.n	8002e90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fde2 	bl	8003a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fe69 	bl	8003b60 <UART_CheckIdleState>
 8002e8e:	4603      	mov	r3, r0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	f040 8082 	bne.w	8002fb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_Transmit+0x26>
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e07a      	b.n	8002fb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_UART_Transmit+0x38>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e073      	b.n	8002fb8 <HAL_UART_Transmit+0x120>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2221      	movs	r2, #33	; 0x21
 8002ee4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fd ff55 	bl	8000d94 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x80>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f28:	e02d      	b.n	8002f86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fe5c 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e039      	b.n	8002fb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f56:	b292      	uxth	r2, r2
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e008      	b.n	8002f74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1cb      	bne.n	8002f2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2140      	movs	r1, #64	; 0x40
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fe28 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e005      	b.n	8002fb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0ba      	sub	sp, #232	; 0xe8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fee:	4013      	ands	r3, r2
 8002ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d115      	bne.n	8003028 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 82a6 	beq.w	800356a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
      }
      return;
 8003026:	e2a0      	b.n	800356a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8117 	beq.w	8003260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800303e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <HAL_UART_IRQHandler+0x298>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 810a 	beq.w	8003260 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_UART_IRQHandler+0xbc>
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_UART_IRQHandler+0xec>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d011      	beq.n	80030dc <HAL_UART_IRQHandler+0x11c>
 80030b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2204      	movs	r2, #4
 80030ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <HAL_UART_IRQHandler+0x18a>
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 820c 	beq.w	800356e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800319a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04f      	beq.n	8003242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fde9 	bl	8003d7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d141      	bne.n	800323a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1d9      	bne.n	80031b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <HAL_UART_IRQHandler+0x29c>)
 8003210:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fee8 	bl	8000fec <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00f      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9b0 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00b      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9ac 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e007      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9a8 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003250:	e18d      	b.n	800356e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003252:	bf00      	nop
    return;
 8003254:	e18b      	b.n	800356e <HAL_UART_IRQHandler+0x5ae>
 8003256:	bf00      	nop
 8003258:	04000120 	.word	0x04000120
 800325c:	08003e41 	.word	0x08003e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 8146 	bne.w	80034f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 813f 	beq.w	80034f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8138 	beq.w	80034f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	f040 80b4 	bne.w	8003406 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 815f 	beq.w	8003572 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032be:	429a      	cmp	r2, r3
 80032c0:	f080 8157 	bcs.w	8003572 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8085 	bne.w	80033ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800330a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800330e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1da      	bne.n	80032e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800334e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e1      	bne.n	800332a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800338a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800338c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e3      	bne.n	8003366 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e4      	bne.n	80033aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fdc3 	bl	8000f70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8d4 	bl	80035ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003404:	e0b5      	b.n	8003572 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003412:	b29b      	uxth	r3, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a7 	beq.w	8003576 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a2 	beq.w	8003576 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
 8003456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e4      	bne.n	8003432 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	623b      	str	r3, [r7, #32]
   return(result);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800348c:	633a      	str	r2, [r7, #48]	; 0x30
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e3      	bne.n	8003468 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0310 	bic.w	r3, r3, #16
 80034c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	617b      	str	r3, [r7, #20]
   return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e4      	bne.n	80034b2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f85c 	bl	80035ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034f4:	e03f      	b.n	8003576 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_UART_IRQHandler+0x560>
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003516:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fcd1 	bl	8003ec0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351e:	e02d      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
    }
    return;
 8003548:	e017      	b.n	800357a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <HAL_UART_IRQHandler+0x5bc>
 8003556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fc82 	bl	8003e6c <UART_EndTransmit_IT>
    return;
 8003568:	e008      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
      return;
 800356a:	bf00      	nop
 800356c:	e006      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
    return;
 800356e:	bf00      	nop
 8003570:	e004      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_UART_IRQHandler+0x5bc>
    return;
 800357a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800357c:	37e8      	adds	r7, #232	; 0xe8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop

08003584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c8:	b08a      	sub	sp, #40	; 0x28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4bb4      	ldr	r3, [pc, #720]	; (80038c4 <UART_SetConfig+0x300>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4aa9      	ldr	r2, [pc, #676]	; (80038c8 <UART_SetConfig+0x304>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	4313      	orrs	r3, r2
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4aa0      	ldr	r2, [pc, #640]	; (80038cc <UART_SetConfig+0x308>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d126      	bne.n	800369c <UART_SetConfig+0xd8>
 800364e:	4ba0      	ldr	r3, [pc, #640]	; (80038d0 <UART_SetConfig+0x30c>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d81b      	bhi.n	8003694 <UART_SetConfig+0xd0>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0xa0>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003685 	.word	0x08003685
 800366c:	0800367d 	.word	0x0800367d
 8003670:	0800368d 	.word	0x0800368d
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e080      	b.n	800377e <UART_SetConfig+0x1ba>
 800367c:	2302      	movs	r3, #2
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e07c      	b.n	800377e <UART_SetConfig+0x1ba>
 8003684:	2304      	movs	r3, #4
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e078      	b.n	800377e <UART_SetConfig+0x1ba>
 800368c:	2308      	movs	r3, #8
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e074      	b.n	800377e <UART_SetConfig+0x1ba>
 8003694:	2310      	movs	r3, #16
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e070      	b.n	800377e <UART_SetConfig+0x1ba>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a8c      	ldr	r2, [pc, #560]	; (80038d4 <UART_SetConfig+0x310>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d138      	bne.n	8003718 <UART_SetConfig+0x154>
 80036a6:	4b8a      	ldr	r3, [pc, #552]	; (80038d0 <UART_SetConfig+0x30c>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d82d      	bhi.n	8003710 <UART_SetConfig+0x14c>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0xf8>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003711 	.word	0x08003711
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003701 	.word	0x08003701
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003711 	.word	0x08003711
 80036d8:	08003711 	.word	0x08003711
 80036dc:	080036f9 	.word	0x080036f9
 80036e0:	08003711 	.word	0x08003711
 80036e4:	08003711 	.word	0x08003711
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003709 	.word	0x08003709
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e042      	b.n	800377e <UART_SetConfig+0x1ba>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e03e      	b.n	800377e <UART_SetConfig+0x1ba>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e03a      	b.n	800377e <UART_SetConfig+0x1ba>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e036      	b.n	800377e <UART_SetConfig+0x1ba>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e032      	b.n	800377e <UART_SetConfig+0x1ba>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6a      	ldr	r2, [pc, #424]	; (80038c8 <UART_SetConfig+0x304>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12a      	bne.n	8003778 <UART_SetConfig+0x1b4>
 8003722:	4b6b      	ldr	r3, [pc, #428]	; (80038d0 <UART_SetConfig+0x30c>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800372c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003730:	d01a      	beq.n	8003768 <UART_SetConfig+0x1a4>
 8003732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0x1ac>
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373c:	d00c      	beq.n	8003758 <UART_SetConfig+0x194>
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003742:	d815      	bhi.n	8003770 <UART_SetConfig+0x1ac>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <UART_SetConfig+0x18c>
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d008      	beq.n	8003760 <UART_SetConfig+0x19c>
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x1ac>
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e012      	b.n	800377e <UART_SetConfig+0x1ba>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e00e      	b.n	800377e <UART_SetConfig+0x1ba>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e00a      	b.n	800377e <UART_SetConfig+0x1ba>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e006      	b.n	800377e <UART_SetConfig+0x1ba>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e002      	b.n	800377e <UART_SetConfig+0x1ba>
 8003778:	2310      	movs	r3, #16
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <UART_SetConfig+0x304>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d17a      	bne.n	800387e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800378c:	2b08      	cmp	r3, #8
 800378e:	d824      	bhi.n	80037da <UART_SetConfig+0x216>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x1d4>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037cb 	.word	0x080037cb
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037db 	.word	0x080037db
 80037b8:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fe fcf8 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80037c0:	61f8      	str	r0, [r7, #28]
        break;
 80037c2:	e010      	b.n	80037e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <UART_SetConfig+0x314>)
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe fc59 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 80037ce:	61f8      	str	r0, [r7, #28]
        break;
 80037d0:	e009      	b.n	80037e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	61fb      	str	r3, [r7, #28]
        break;
 80037d8:	e005      	b.n	80037e6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8107 	beq.w	80039fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d305      	bcc.n	800380a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	429a      	cmp	r2, r3
 8003808:	d903      	bls.n	8003812 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003810:	e0f4      	b.n	80039fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2200      	movs	r2, #0
 8003816:	461c      	mov	r4, r3
 8003818:	4615      	mov	r5, r2
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	022b      	lsls	r3, r5, #8
 8003824:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003828:	0222      	lsls	r2, r4, #8
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6849      	ldr	r1, [r1, #4]
 800382e:	0849      	lsrs	r1, r1, #1
 8003830:	2000      	movs	r0, #0
 8003832:	4688      	mov	r8, r1
 8003834:	4681      	mov	r9, r0
 8003836:	eb12 0a08 	adds.w	sl, r2, r8
 800383a:	eb43 0b09 	adc.w	fp, r3, r9
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384c:	4650      	mov	r0, sl
 800384e:	4659      	mov	r1, fp
 8003850:	f7fc fcbe 	bl	80001d0 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003862:	d308      	bcc.n	8003876 <UART_SetConfig+0x2b2>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386a:	d204      	bcs.n	8003876 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e0c2      	b.n	80039fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800387c:	e0be      	b.n	80039fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d16a      	bne.n	800395e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800388c:	2b08      	cmp	r3, #8
 800388e:	d834      	bhi.n	80038fa <UART_SetConfig+0x336>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0x2d4>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038dd 	.word	0x080038dd
 80038a0:	080038e5 	.word	0x080038e5
 80038a4:	080038fb 	.word	0x080038fb
 80038a8:	080038eb 	.word	0x080038eb
 80038ac:	080038fb 	.word	0x080038fb
 80038b0:	080038fb 	.word	0x080038fb
 80038b4:	080038fb 	.word	0x080038fb
 80038b8:	080038f3 	.word	0x080038f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038bc:	f7fe fc78 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80038c0:	61f8      	str	r0, [r7, #28]
        break;
 80038c2:	e020      	b.n	8003906 <UART_SetConfig+0x342>
 80038c4:	efff69f3 	.word	0xefff69f3
 80038c8:	40008000 	.word	0x40008000
 80038cc:	40013800 	.word	0x40013800
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40004400 	.word	0x40004400
 80038d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fc7e 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 80038e0:	61f8      	str	r0, [r7, #28]
        break;
 80038e2:	e010      	b.n	8003906 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <UART_SetConfig+0x454>)
 80038e6:	61fb      	str	r3, [r7, #28]
        break;
 80038e8:	e00d      	b.n	8003906 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7fe fbc9 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 80038ee:	61f8      	str	r0, [r7, #28]
        break;
 80038f0:	e009      	b.n	8003906 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f6:	61fb      	str	r3, [r7, #28]
        break;
 80038f8:	e005      	b.n	8003906 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003904:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d077      	beq.n	80039fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005a      	lsls	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	441a      	add	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d916      	bls.n	8003956 <UART_SetConfig+0x392>
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392e:	d212      	bcs.n	8003956 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f023 030f 	bic.w	r3, r3, #15
 8003938:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	b29a      	uxth	r2, r3
 8003946:	8afb      	ldrh	r3, [r7, #22]
 8003948:	4313      	orrs	r3, r2
 800394a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	8afa      	ldrh	r2, [r7, #22]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e052      	b.n	80039fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800395c:	e04e      	b.n	80039fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800395e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003962:	2b08      	cmp	r3, #8
 8003964:	d827      	bhi.n	80039b6 <UART_SetConfig+0x3f2>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0x3a8>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	08003991 	.word	0x08003991
 8003970:	08003999 	.word	0x08003999
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039b7 	.word	0x080039b7
 800397c:	080039a7 	.word	0x080039a7
 8003980:	080039b7 	.word	0x080039b7
 8003984:	080039b7 	.word	0x080039b7
 8003988:	080039b7 	.word	0x080039b7
 800398c:	080039af 	.word	0x080039af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7fe fc0e 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003994:	61f8      	str	r0, [r7, #28]
        break;
 8003996:	e014      	b.n	80039c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003998:	f7fe fc20 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 800399c:	61f8      	str	r0, [r7, #28]
        break;
 800399e:	e010      	b.n	80039c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <UART_SetConfig+0x454>)
 80039a2:	61fb      	str	r3, [r7, #28]
        break;
 80039a4:	e00d      	b.n	80039c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a6:	f7fe fb6b 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 80039aa:	61f8      	str	r0, [r7, #28]
        break;
 80039ac:	e009      	b.n	80039c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	61fb      	str	r3, [r7, #28]
        break;
 80039b4:	e005      	b.n	80039c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039c0:	bf00      	nop
    }

    if (pclk != 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d019      	beq.n	80039fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	085a      	lsrs	r2, r3, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	441a      	add	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d909      	bls.n	80039f6 <UART_SetConfig+0x432>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d205      	bcs.n	80039f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e002      	b.n	80039fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a16:	bf00      	nop
 8003a18:	00f42400 	.word	0x00f42400

08003a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d10a      	bne.n	8003b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b70:	f7fd f910 	bl	8000d94 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d10e      	bne.n	8003ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f82d 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e023      	b.n	8003bea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d10e      	bne.n	8003bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f817 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e00d      	b.n	8003bea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b09c      	sub	sp, #112	; 0x70
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	e0a5      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	f000 80a1 	beq.w	8003d50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fd f8c1 	bl	8000d94 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d13e      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c38:	667b      	str	r3, [r7, #100]	; 0x64
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e6      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3308      	adds	r3, #8
 8003c74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c76:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e5      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e067      	b.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d04f      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d147      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d1c:	623a      	str	r2, [r7, #32]
 8003d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	69f9      	ldr	r1, [r7, #28]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e5      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e010      	b.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	f43f af4a 	beq.w	8003c04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3770      	adds	r7, #112	; 0x70
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b095      	sub	sp, #84	; 0x54
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
 8003da2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d118      	bne.n	8003e22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e6      	bne.n	8003df0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e34:	bf00      	nop
 8003e36:	3754      	adds	r7, #84	; 0x54
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fb9a 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fb66 	bl	8003584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb8:	bf00      	nop
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <__NVIC_SetPriority>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Handler+0x1c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f30:	f001 fd28 	bl	8005984 <xTaskGetSchedulerState>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f3a:	f002 fb0d 	bl	8006558 <xPortSysTickHandler>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f06f 0004 	mvn.w	r0, #4
 8003f52:	f7ff ffbf 	bl	8003ed4 <__NVIC_SetPriority>
#endif
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	603b      	str	r3, [r7, #0]
  return(result);
 8003f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f6e:	f06f 0305 	mvn.w	r3, #5
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	e00c      	b.n	8003f90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <osKernelInitialize+0x44>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <osKernelInitialize+0x44>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	e002      	b.n	8003f90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000298 	.word	0x20000298

08003fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003faa:	f3ef 8305 	mrs	r3, IPSR
 8003fae:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fb6:	f06f 0305 	mvn.w	r3, #5
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e010      	b.n	8003fe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <osKernelStart+0x48>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d109      	bne.n	8003fda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fc6:	f7ff ffbf 	bl	8003f48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <osKernelStart+0x48>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fd0:	f001 f87c 	bl	80050cc <vTaskStartScheduler>
      stat = osOK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e002      	b.n	8003fe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fe0:	687b      	ldr	r3, [r7, #4]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000298 	.word	0x20000298

08003ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004000:	f3ef 8305 	mrs	r3, IPSR
 8004004:	617b      	str	r3, [r7, #20]
  return(result);
 8004006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004008:	2b00      	cmp	r3, #0
 800400a:	d17e      	bne.n	800410a <osThreadNew+0x11a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07b      	beq.n	800410a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004016:	2318      	movs	r3, #24
 8004018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d045      	beq.n	80040b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <osThreadNew+0x48>
        name = attr->name;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <osThreadNew+0x6e>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b38      	cmp	r3, #56	; 0x38
 8004050:	d805      	bhi.n	800405e <osThreadNew+0x6e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <osThreadNew+0x72>
        return (NULL);
 800405e:	2300      	movs	r3, #0
 8004060:	e054      	b.n	800410c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <osThreadNew+0xa8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2bbb      	cmp	r3, #187	; 0xbb
 8004080:	d90a      	bls.n	8004098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osThreadNew+0xa8>
        mem = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e010      	b.n	80040ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10c      	bne.n	80040ba <osThreadNew+0xca>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <osThreadNew+0xca>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <osThreadNew+0xca>
          mem = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e001      	b.n	80040ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d110      	bne.n	80040e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c8:	9202      	str	r2, [sp, #8]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fe0c 	bl	8004cf4 <xTaskCreateStatic>
 80040dc:	4603      	mov	r3, r0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e013      	b.n	800410a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d110      	bne.n	800410a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f107 0310 	add.w	r3, r7, #16
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fe57 	bl	8004dae <xTaskCreate>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <osThreadNew+0x11a>
            hTask = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800410a:	693b      	ldr	r3, [r7, #16]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411c:	f3ef 8305 	mrs	r3, IPSR
 8004120:	60bb      	str	r3, [r7, #8]
  return(result);
 8004122:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <osDelay+0x1c>
    stat = osErrorISR;
 8004128:	f06f 0305 	mvn.w	r3, #5
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e007      	b.n	8004140 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <osDelay+0x2c>
      vTaskDelay(ticks);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 ff92 	bl	8005064 <vTaskDelay>
    }
  }

  return (stat);
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <vApplicationGetIdleTaskMemory+0x2c>)
 800415c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a06      	ldr	r2, [pc, #24]	; (800417c <vApplicationGetIdleTaskMemory+0x30>)
 8004162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2000029c 	.word	0x2000029c
 800417c:	20000358 	.word	0x20000358

08004180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000558 	.word	0x20000558
 80041b0:	20000614 	.word	0x20000614

080041b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 0208 	add.w	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d103      	bne.n	8004276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00c      	b.n	8004290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3308      	adds	r3, #8
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e002      	b.n	8004284 <vListInsert+0x2e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d2f6      	bcs.n	800427e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d103      	bne.n	80042fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004346:	f002 f875 	bl	8006434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	3b01      	subs	r3, #1
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d114      	bne.n	80043c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01a      	beq.n	80043da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3310      	adds	r3, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 f929 	bl	8005600 <xTaskRemoveFromEventList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xQueueGenericReset+0xcc>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	e009      	b.n	80043da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3310      	adds	r3, #16
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fef2 	bl	80041b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff feed 	bl	80041b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043da:	f002 f85b 	bl	8006494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <xQueueGenericCreateStatic+0x52>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <xQueueGenericCreateStatic+0x56>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <xQueueGenericCreateStatic+0x58>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	623b      	str	r3, [r7, #32]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <xQueueGenericCreateStatic+0x7e>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueGenericCreateStatic+0x82>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericCreateStatic+0x84>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61fb      	str	r3, [r7, #28]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800448a:	2350      	movs	r3, #80	; 0x50
 800448c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d00a      	beq.n	80044aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61bb      	str	r3, [r7, #24]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f805 	bl	80044dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e002      	b.n	80044fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800450a:	2101      	movs	r1, #1
 800450c:	69b8      	ldr	r0, [r7, #24]
 800450e:	f7ff ff05 	bl	800431c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericSend+0x32>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <xQueueGenericSend+0x40>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xQueueGenericSend+0x44>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xQueueGenericSend+0x46>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xQueueGenericSend+0x60>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <xQueueGenericSend+0x6e>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <xQueueGenericSend+0x72>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueGenericSend+0x74>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b2:	f001 f9e7 	bl	8005984 <xTaskGetSchedulerState>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xQueueGenericSend+0x9e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <xQueueGenericSend+0xa2>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <xQueueGenericSend+0xa4>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61fb      	str	r3, [r7, #28]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e2:	f001 ff27 	bl	8006434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <xQueueGenericSend+0xd4>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d129      	bne.n	800464c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fa0b 	bl	8004a18 <prvCopyDataToQueue>
 8004602:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	3324      	adds	r3, #36	; 0x24
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fff5 	bl	8005600 <xTaskRemoveFromEventList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <xQueueGenericSend+0x1f8>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	e00a      	b.n	8004644 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <xQueueGenericSend+0x1f8>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004644:	f001 ff26 	bl	8006494 <vPortExitCritical>
				return pdPASS;
 8004648:	2301      	movs	r3, #1
 800464a:	e063      	b.n	8004714 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004652:	f001 ff1f 	bl	8006494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004656:	2300      	movs	r3, #0
 8004658:	e05c      	b.n	8004714 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f82f 	bl	80056c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800466e:	f001 ff11 	bl	8006494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004672:	f000 fd9b 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004676:	f001 fedd 	bl	8006434 <vPortEnterCritical>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004680:	b25b      	sxtb	r3, r3
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d103      	bne.n	8004690 <xQueueGenericSend+0x16c>
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004696:	b25b      	sxtb	r3, r3
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x182>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a6:	f001 fef5 	bl	8006494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046aa:	1d3a      	adds	r2, r7, #4
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f81e 	bl	80056f4 <xTaskCheckForTimeOut>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d124      	bne.n	8004708 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c0:	f000 faa2 	bl	8004c08 <prvIsQueueFull>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	3310      	adds	r3, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff44 	bl	8005560 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046da:	f000 fa2d 	bl	8004b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046de:	f000 fd73 	bl	80051c8 <xTaskResumeAll>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f af7c 	bne.w	80045e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <xQueueGenericSend+0x1f8>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	e772      	b.n	80045e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fe:	f000 fa1b 	bl	8004b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004702:	f000 fd61 	bl	80051c8 <xTaskResumeAll>
 8004706:	e76c      	b.n	80045e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fa15 	bl	8004b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800470e:	f000 fd5b 	bl	80051c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004714:	4618      	mov	r0, r3
 8004716:	3738      	adds	r7, #56	; 0x38
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b090      	sub	sp, #64	; 0x40
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <xQueueGenericSendFromISR+0x3c>
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGenericSendFromISR+0x40>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGenericSendFromISR+0x42>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <xQueueGenericSendFromISR+0x6a>
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <xQueueGenericSendFromISR+0x6e>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueGenericSendFromISR+0x70>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	623b      	str	r3, [r7, #32]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047aa:	f001 ff25 	bl	80065f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ae:	f3ef 8211 	mrs	r2, BASEPRI
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61fa      	str	r2, [r7, #28]
 80047c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xQueueGenericSendFromISR+0xbc>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d12f      	bne.n	800483c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047f2:	f000 f911 	bl	8004a18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d112      	bne.n	8004826 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fef7 	bl	8005600 <xTaskRemoveFromEventList>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e007      	b.n	8004836 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800482a:	3301      	adds	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	b25a      	sxtb	r2, r3
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004836:	2301      	movs	r3, #1
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800483a:	e001      	b.n	8004840 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800483c:	2300      	movs	r3, #0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800484a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800484e:	4618      	mov	r0, r3
 8004850:	3740      	adds	r7, #64	; 0x40
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <xQueueReceive+0x30>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	623b      	str	r3, [r7, #32]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueReceive+0x3e>
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xQueueReceive+0x42>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <xQueueReceive+0x44>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueReceive+0x5e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61fb      	str	r3, [r7, #28]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b6:	f001 f865 	bl	8005984 <xTaskGetSchedulerState>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <xQueueReceive+0x6e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueReceive+0x72>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueReceive+0x74>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueReceive+0x8e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61bb      	str	r3, [r7, #24]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e6:	f001 fda5 	bl	8006434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fa:	f000 f8f7 	bl	8004aec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1e5a      	subs	r2, r3, #1
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3310      	adds	r3, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe74 	bl	8005600 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <xQueueReceive+0x1bc>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800492e:	f001 fdb1 	bl	8006494 <vPortExitCritical>
				return pdPASS;
 8004932:	2301      	movs	r3, #1
 8004934:	e069      	b.n	8004a0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800493c:	f001 fdaa 	bl	8006494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004940:	2300      	movs	r3, #0
 8004942:	e062      	b.n	8004a0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800494a:	f107 0310 	add.w	r3, r7, #16
 800494e:	4618      	mov	r0, r3
 8004950:	f000 feba 	bl	80056c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004958:	f001 fd9c 	bl	8006494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800495c:	f000 fc26 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004960:	f001 fd68 	bl	8006434 <vPortEnterCritical>
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d103      	bne.n	800497a <xQueueReceive+0x122>
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004980:	b25b      	sxtb	r3, r3
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d103      	bne.n	8004990 <xQueueReceive+0x138>
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004990:	f001 fd80 	bl	8006494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004994:	1d3a      	adds	r2, r7, #4
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fea9 	bl	80056f4 <xTaskCheckForTimeOut>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d123      	bne.n	80049f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f000 f917 	bl	8004bdc <prvIsQueueEmpty>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	3324      	adds	r3, #36	; 0x24
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fdcf 	bl	8005560 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c4:	f000 f8b8 	bl	8004b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049c8:	f000 fbfe 	bl	80051c8 <xTaskResumeAll>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d189      	bne.n	80048e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <xQueueReceive+0x1bc>)
 80049d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	e780      	b.n	80048e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 f8a7 	bl	8004b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ea:	f000 fbed 	bl	80051c8 <xTaskResumeAll>
 80049ee:	e77a      	b.n	80048e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f8a1 	bl	8004b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049f6:	f000 fbe7 	bl	80051c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fc:	f000 f8ee 	bl	8004bdc <prvIsQueueEmpty>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f43f af6f 	beq.w	80048e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3730      	adds	r7, #48	; 0x30
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d14d      	bne.n	8004ada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ffbc 	bl	80059c0 <xTaskPriorityDisinherit>
 8004a48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	e043      	b.n	8004ada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d119      	bne.n	8004a8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6858      	ldr	r0, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	461a      	mov	r2, r3
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	f002 f818 	bl	8006a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d32b      	bcc.n	8004ada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	e026      	b.n	8004ada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68d8      	ldr	r0, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	f001 fffe 	bl	8006a98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d207      	bcs.n	8004ac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	425b      	negs	r3, r3
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d105      	bne.n	8004ada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ae2:	697b      	ldr	r3, [r7, #20]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	441a      	add	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d303      	bcc.n	8004b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68d9      	ldr	r1, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6838      	ldr	r0, [r7, #0]
 8004b2c:	f001 ffb4 	bl	8006a98 <memcpy>
	}
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b40:	f001 fc78 	bl	8006434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b4c:	e011      	b.n	8004b72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d012      	beq.n	8004b7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fd50 	bl	8005600 <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b66:	f000 fe27 	bl	80057b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	dce9      	bgt.n	8004b4e <prvUnlockQueue+0x16>
 8004b7a:	e000      	b.n	8004b7e <prvUnlockQueue+0x46>
					break;
 8004b7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b86:	f001 fc85 	bl	8006494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b8a:	f001 fc53 	bl	8006434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b96:	e011      	b.n	8004bbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fd2b 	bl	8005600 <xTaskRemoveFromEventList>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bb0:	f000 fe02 	bl	80057b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	dce9      	bgt.n	8004b98 <prvUnlockQueue+0x60>
 8004bc4:	e000      	b.n	8004bc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bd0:	f001 fc60 	bl	8006494 <vPortExitCritical>
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be4:	f001 fc26 	bl	8006434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e001      	b.n	8004bfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bfa:	f001 fc4b 	bl	8006494 <vPortExitCritical>

	return xReturn;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c10:	f001 fc10 	bl	8006434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d102      	bne.n	8004c26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e001      	b.n	8004c2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c2a:	f001 fc33 	bl	8006494 <vPortExitCritical>

	return xReturn;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e014      	b.n	8004c72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c48:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c54:	490c      	ldr	r1, [pc, #48]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c6a:	e006      	b.n	8004c7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b07      	cmp	r3, #7
 8004c76:	d9e7      	bls.n	8004c48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000a14 	.word	0x20000a14

08004c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c9c:	f001 fbca 	bl	8006434 <vPortEnterCritical>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d103      	bne.n	8004cb6 <vQueueWaitForMessageRestricted+0x2a>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d103      	bne.n	8004ccc <vQueueWaitForMessageRestricted+0x40>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ccc:	f001 fbe2 	bl	8006494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fc61 	bl	80055a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff26 	bl	8004b38 <prvUnlockQueue>
	}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af04      	add	r7, sp, #16
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xTaskCreateStatic+0x46>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	61fb      	str	r3, [r7, #28]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d3a:	23bc      	movs	r3, #188	; 0xbc
 8004d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2bbc      	cmp	r3, #188	; 0xbc
 8004d42:	d00a      	beq.n	8004d5a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01e      	beq.n	8004da0 <xTaskCreateStatic+0xac>
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9303      	str	r3, [sp, #12]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	f107 0314 	add.w	r3, r7, #20
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f850 	bl	8004e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9a:	f000 f8f3 	bl	8004f84 <prvAddNewTaskToReadyList>
 8004d9e:	e001      	b.n	8004da4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004da4:	697b      	ldr	r3, [r7, #20]
	}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08c      	sub	sp, #48	; 0x30
 8004db2:	af04      	add	r7, sp, #16
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fc58 	bl	8006678 <pvPortMalloc>
 8004dc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dd0:	20bc      	movs	r0, #188	; 0xbc
 8004dd2:	f001 fc51 	bl	8006678 <pvPortMalloc>
 8004dd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
 8004de4:	e005      	b.n	8004df2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f001 fd12 	bl	8006810 <vPortFree>
 8004dec:	e001      	b.n	8004df2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f80e 	bl	8004e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e1c:	69f8      	ldr	r0, [r7, #28]
 8004e1e:	f000 f8b1 	bl	8004f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e002      	b.n	8004e2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	21a5      	movs	r1, #165	; 0xa5
 8004e52:	f001 fe2f 	bl	8006ab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e60:	3b01      	subs	r3, #1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	617b      	str	r3, [r7, #20]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01f      	beq.n	8004ed6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e012      	b.n	8004ec2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3334      	adds	r3, #52	; 0x34
 8004eac:	460a      	mov	r2, r1
 8004eae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d006      	beq.n	8004eca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d9e9      	bls.n	8004e9c <prvInitialiseNewTask+0x64>
 8004ec8:	e000      	b.n	8004ecc <prvInitialiseNewTask+0x94>
			{
				break;
 8004eca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	e003      	b.n	8004ede <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	2b37      	cmp	r3, #55	; 0x37
 8004ee2:	d901      	bls.n	8004ee8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ee4:	2337      	movs	r3, #55	; 0x37
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f978 	bl	80041f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	3318      	adds	r3, #24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff f973 	bl	80041f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	3354      	adds	r3, #84	; 0x54
 8004f38:	2260      	movs	r2, #96	; 0x60
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fdb9 	bl	8006ab4 <memset>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <prvInitialiseNewTask+0x140>)
 8004f46:	659a      	str	r2, [r3, #88]	; 0x58
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <prvInitialiseNewTask+0x144>)
 8004f4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <prvInitialiseNewTask+0x148>)
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	69b8      	ldr	r0, [r7, #24]
 8004f5a:	f001 f941 	bl	80061e0 <pxPortInitialiseStack>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08006d44 	.word	0x08006d44
 8004f7c:	08006d64 	.word	0x08006d64
 8004f80:	08006d24 	.word	0x08006d24

08004f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f8c:	f001 fa52 	bl	8006434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	; (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	; (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d110      	bne.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb0:	f000 fc26 	bl	8005800 <prvInitialiseTaskLists>
 8004fb4:	e00d      	b.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fb6:	4b26      	ldr	r3, [pc, #152]	; (8005050 <prvAddNewTaskToReadyList+0xcc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d802      	bhi.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <prvAddNewTaskToReadyList+0xd4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d903      	bls.n	8004ff8 <prvAddNewTaskToReadyList+0x74>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a18      	ldr	r2, [pc, #96]	; (8005058 <prvAddNewTaskToReadyList+0xd4>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <prvAddNewTaskToReadyList+0xd8>)
 8005006:	441a      	add	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7ff f8fd 	bl	800420e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005014:	f001 fa3e 	bl	8006494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <prvAddNewTaskToReadyList+0xcc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <prvAddNewTaskToReadyList+0xc8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	429a      	cmp	r2, r3
 800502c:	d207      	bcs.n	800503e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <prvAddNewTaskToReadyList+0xdc>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000f28 	.word	0x20000f28
 800504c:	20000a54 	.word	0x20000a54
 8005050:	20000f34 	.word	0x20000f34
 8005054:	20000f44 	.word	0x20000f44
 8005058:	20000f30 	.word	0x20000f30
 800505c:	20000a58 	.word	0x20000a58
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d017      	beq.n	80050a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005076:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <vTaskDelay+0x60>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <vTaskDelay+0x30>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60bb      	str	r3, [r7, #8]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005094:	f000 f88a 	bl	80051ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005098:	2100      	movs	r1, #0
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fcfe 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050a0:	f000 f892 	bl	80051c8 <xTaskResumeAll>
 80050a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <vTaskDelay+0x64>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000f50 	.word	0x20000f50
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050da:	463a      	mov	r2, r7
 80050dc:	1d39      	adds	r1, r7, #4
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff f832 	bl	800414c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	9202      	str	r2, [sp, #8]
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	460a      	mov	r2, r1
 80050fa:	4924      	ldr	r1, [pc, #144]	; (800518c <vTaskStartScheduler+0xc0>)
 80050fc:	4824      	ldr	r0, [pc, #144]	; (8005190 <vTaskStartScheduler+0xc4>)
 80050fe:	f7ff fdf9 	bl	8004cf4 <xTaskCreateStatic>
 8005102:	4603      	mov	r3, r0
 8005104:	4a23      	ldr	r2, [pc, #140]	; (8005194 <vTaskStartScheduler+0xc8>)
 8005106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <vTaskStartScheduler+0xc8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e001      	b.n	800511a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005120:	f000 fd10 	bl	8005b44 <xTimerCreateTimerTask>
 8005124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d11b      	bne.n	8005164 <vTaskStartScheduler+0x98>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	613b      	str	r3, [r7, #16]
}
 800513e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005140:	4b15      	ldr	r3, [pc, #84]	; (8005198 <vTaskStartScheduler+0xcc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3354      	adds	r3, #84	; 0x54
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <vTaskStartScheduler+0xd0>)
 8005148:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <vTaskStartScheduler+0xd4>)
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <vTaskStartScheduler+0xd8>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <vTaskStartScheduler+0xdc>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800515e:	f001 f8c7 	bl	80062f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005162:	e00e      	b.n	8005182 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d10a      	bne.n	8005182 <vTaskStartScheduler+0xb6>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	60fb      	str	r3, [r7, #12]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <vTaskStartScheduler+0xb4>
}
 8005182:	bf00      	nop
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	08006c7c 	.word	0x08006c7c
 8005190:	080057d1 	.word	0x080057d1
 8005194:	20000f4c 	.word	0x20000f4c
 8005198:	20000a54 	.word	0x20000a54
 800519c:	20000010 	.word	0x20000010
 80051a0:	20000f48 	.word	0x20000f48
 80051a4:	20000f34 	.word	0x20000f34
 80051a8:	20000f2c 	.word	0x20000f2c

080051ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	20000f50 	.word	0x20000f50

080051c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051d6:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <xTaskResumeAll+0x118>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	603b      	str	r3, [r7, #0]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051f4:	f001 f91e 	bl	8006434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f8:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <xTaskResumeAll+0x118>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <xTaskResumeAll+0x118>)
 8005200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <xTaskResumeAll+0x118>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d162      	bne.n	80052d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <xTaskResumeAll+0x11c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d05e      	beq.n	80052d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005212:	e02f      	b.n	8005274 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <xTaskResumeAll+0x120>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3318      	adds	r3, #24
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff f851 	bl	80042c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f84c 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <xTaskResumeAll+0x124>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <xTaskResumeAll+0x7c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <xTaskResumeAll+0x124>)
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <xTaskResumeAll+0x128>)
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fe ffd7 	bl	800420e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <xTaskResumeAll+0x12c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <xTaskResumeAll+0x130>)
 8005270:	2201      	movs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xTaskResumeAll+0x120>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1cb      	bne.n	8005214 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005282:	f000 fb5f 	bl	8005944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <xTaskResumeAll+0x134>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005292:	f000 f847 	bl	8005324 <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <xTaskResumeAll+0x130>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f1      	bne.n	8005292 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <xTaskResumeAll+0x134>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <xTaskResumeAll+0x130>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <xTaskResumeAll+0x138>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052d0:	f001 f8e0 	bl	8006494 <vPortExitCritical>

	return xAlreadyYielded;
 80052d4:	68bb      	ldr	r3, [r7, #8]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000f50 	.word	0x20000f50
 80052e4:	20000f28 	.word	0x20000f28
 80052e8:	20000ee8 	.word	0x20000ee8
 80052ec:	20000f30 	.word	0x20000f30
 80052f0:	20000a58 	.word	0x20000a58
 80052f4:	20000a54 	.word	0x20000a54
 80052f8:	20000f3c 	.word	0x20000f3c
 80052fc:	20000f38 	.word	0x20000f38
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <xTaskGetTickCount+0x1c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005310:	687b      	ldr	r3, [r7, #4]
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000f2c 	.word	0x20000f2c

08005324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532e:	4b4f      	ldr	r3, [pc, #316]	; (800546c <xTaskIncrementTick+0x148>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 808f 	bne.w	8005456 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005338:	4b4d      	ldr	r3, [pc, #308]	; (8005470 <xTaskIncrementTick+0x14c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005340:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <xTaskIncrementTick+0x14c>)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d120      	bne.n	800538e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800534c:	4b49      	ldr	r3, [pc, #292]	; (8005474 <xTaskIncrementTick+0x150>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <xTaskIncrementTick+0x48>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	603b      	str	r3, [r7, #0]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xTaskIncrementTick+0x46>
 800536c:	4b41      	ldr	r3, [pc, #260]	; (8005474 <xTaskIncrementTick+0x150>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	4b41      	ldr	r3, [pc, #260]	; (8005478 <xTaskIncrementTick+0x154>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a3f      	ldr	r2, [pc, #252]	; (8005474 <xTaskIncrementTick+0x150>)
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <xTaskIncrementTick+0x154>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b3e      	ldr	r3, [pc, #248]	; (800547c <xTaskIncrementTick+0x158>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a3d      	ldr	r2, [pc, #244]	; (800547c <xTaskIncrementTick+0x158>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	f000 fadb 	bl	8005944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800538e:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <xTaskIncrementTick+0x15c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d349      	bcc.n	800542c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005398:	4b36      	ldr	r3, [pc, #216]	; (8005474 <xTaskIncrementTick+0x150>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <xTaskIncrementTick+0x15c>)
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295
 80053a8:	601a      	str	r2, [r3, #0]
					break;
 80053aa:	e03f      	b.n	800542c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ac:	4b31      	ldr	r3, [pc, #196]	; (8005474 <xTaskIncrementTick+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d203      	bcs.n	80053cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053c4:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <xTaskIncrementTick+0x15c>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053ca:	e02f      	b.n	800542c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe ff79 	bl	80042c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	3318      	adds	r3, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe ff70 	bl	80042c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b25      	ldr	r3, [pc, #148]	; (8005484 <xTaskIncrementTick+0x160>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <xTaskIncrementTick+0xd8>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <xTaskIncrementTick+0x160>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <xTaskIncrementTick+0x164>)
 800540a:	441a      	add	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe fefb 	bl	800420e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <xTaskIncrementTick+0x168>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d3b8      	bcc.n	8005398 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005426:	2301      	movs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542a:	e7b5      	b.n	8005398 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <xTaskIncrementTick+0x168>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	4915      	ldr	r1, [pc, #84]	; (8005488 <xTaskIncrementTick+0x164>)
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d901      	bls.n	8005448 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <xTaskIncrementTick+0x16c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e004      	b.n	8005460 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <xTaskIncrementTick+0x170>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <xTaskIncrementTick+0x170>)
 800545e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000f50 	.word	0x20000f50
 8005470:	20000f2c 	.word	0x20000f2c
 8005474:	20000ee0 	.word	0x20000ee0
 8005478:	20000ee4 	.word	0x20000ee4
 800547c:	20000f40 	.word	0x20000f40
 8005480:	20000f48 	.word	0x20000f48
 8005484:	20000f30 	.word	0x20000f30
 8005488:	20000a58 	.word	0x20000a58
 800548c:	20000a54 	.word	0x20000a54
 8005490:	20000f3c 	.word	0x20000f3c
 8005494:	20000f38 	.word	0x20000f38

08005498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800549e:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <vTaskSwitchContext+0xb0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054a6:	4b29      	ldr	r3, [pc, #164]	; (800554c <vTaskSwitchContext+0xb4>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ac:	e046      	b.n	800553c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80054ae:	4b27      	ldr	r3, [pc, #156]	; (800554c <vTaskSwitchContext+0xb4>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <vTaskSwitchContext+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e010      	b.n	80054de <vTaskSwitchContext+0x46>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vTaskSwitchContext+0x3e>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	491d      	ldr	r1, [pc, #116]	; (8005554 <vTaskSwitchContext+0xbc>)
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0e4      	beq.n	80054bc <vTaskSwitchContext+0x24>
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <vTaskSwitchContext+0xbc>)
 80054fe:	4413      	add	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	3308      	adds	r3, #8
 8005514:	429a      	cmp	r2, r3
 8005516:	d104      	bne.n	8005522 <vTaskSwitchContext+0x8a>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <vTaskSwitchContext+0xc0>)
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <vTaskSwitchContext+0xb8>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <vTaskSwitchContext+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3354      	adds	r3, #84	; 0x54
 8005538:	4a08      	ldr	r2, [pc, #32]	; (800555c <vTaskSwitchContext+0xc4>)
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000f50 	.word	0x20000f50
 800554c:	20000f3c 	.word	0x20000f3c
 8005550:	20000f30 	.word	0x20000f30
 8005554:	20000a58 	.word	0x20000a58
 8005558:	20000a54 	.word	0x20000a54
 800555c:	20000010 	.word	0x20000010

08005560 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	60fb      	str	r3, [r7, #12]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <vTaskPlaceOnEventList+0x44>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3318      	adds	r3, #24
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fe fe61 	bl	8004256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005594:	2101      	movs	r1, #1
 8005596:	6838      	ldr	r0, [r7, #0]
 8005598:	f000 fa80 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000a54 	.word	0x20000a54

080055a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	617b      	str	r3, [r7, #20]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <vTaskPlaceOnEventListRestricted+0x54>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3318      	adds	r3, #24
 80055d6:	4619      	mov	r1, r3
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7fe fe18 	bl	800420e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68b8      	ldr	r0, [r7, #8]
 80055ee:	f000 fa55 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
	}
 80055f2:	bf00      	nop
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000a54 	.word	0x20000a54

08005600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	60fb      	str	r3, [r7, #12]
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fe49 	bl	80042c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <xTaskRemoveFromEventList+0xb0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11d      	bne.n	800567a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3304      	adds	r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fe40 	bl	80042c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <xTaskRemoveFromEventList+0xb4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <xTaskRemoveFromEventList+0x5c>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <xTaskRemoveFromEventList+0xb4>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <xTaskRemoveFromEventList+0xb8>)
 800566a:	441a      	add	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fe fdcb 	bl	800420e <vListInsertEnd>
 8005678:	e005      	b.n	8005686 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3318      	adds	r3, #24
 800567e:	4619      	mov	r1, r3
 8005680:	480e      	ldr	r0, [pc, #56]	; (80056bc <xTaskRemoveFromEventList+0xbc>)
 8005682:	f7fe fdc4 	bl	800420e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <xTaskRemoveFromEventList+0xc0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	429a      	cmp	r2, r3
 8005692:	d905      	bls.n	80056a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <xTaskRemoveFromEventList+0xc4>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e001      	b.n	80056a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056a4:	697b      	ldr	r3, [r7, #20]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000f50 	.word	0x20000f50
 80056b4:	20000f30 	.word	0x20000f30
 80056b8:	20000a58 	.word	0x20000a58
 80056bc:	20000ee8 	.word	0x20000ee8
 80056c0:	20000a54 	.word	0x20000a54
 80056c4:	20000f3c 	.word	0x20000f3c

080056c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <vTaskInternalSetTimeOutState+0x24>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <vTaskInternalSetTimeOutState+0x28>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20000f40 	.word	0x20000f40
 80056f0:	20000f2c 	.word	0x20000f2c

080056f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	613b      	str	r3, [r7, #16]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60fb      	str	r3, [r7, #12]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005736:	f000 fe7d 	bl	8006434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <xTaskCheckForTimeOut+0xbc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d102      	bne.n	800575a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e023      	b.n	80057a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <xTaskCheckForTimeOut+0xc0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d007      	beq.n	8005776 <xTaskCheckForTimeOut+0x82>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e015      	b.n	80057a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d20b      	bcs.n	8005798 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff9b 	bl	80056c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e004      	b.n	80057a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057a2:	f000 fe77 	bl	8006494 <vPortExitCritical>

	return xReturn;
 80057a6:	69fb      	ldr	r3, [r7, #28]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000f2c 	.word	0x20000f2c
 80057b4:	20000f40 	.word	0x20000f40

080057b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <vTaskMissedYield+0x14>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000f3c 	.word	0x20000f3c

080057d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057d8:	f000 f852 	bl	8005880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <prvIdleTask+0x28>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d9f9      	bls.n	80057d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <prvIdleTask+0x2c>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057f4:	e7f0      	b.n	80057d8 <prvIdleTask+0x8>
 80057f6:	bf00      	nop
 80057f8:	20000a58 	.word	0x20000a58
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	e00c      	b.n	8005826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <prvInitialiseTaskLists+0x60>)
 8005818:	4413      	add	r3, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fcca 	bl	80041b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3301      	adds	r3, #1
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b37      	cmp	r3, #55	; 0x37
 800582a:	d9ef      	bls.n	800580c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800582c:	480d      	ldr	r0, [pc, #52]	; (8005864 <prvInitialiseTaskLists+0x64>)
 800582e:	f7fe fcc1 	bl	80041b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005832:	480d      	ldr	r0, [pc, #52]	; (8005868 <prvInitialiseTaskLists+0x68>)
 8005834:	f7fe fcbe 	bl	80041b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005838:	480c      	ldr	r0, [pc, #48]	; (800586c <prvInitialiseTaskLists+0x6c>)
 800583a:	f7fe fcbb 	bl	80041b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800583e:	480c      	ldr	r0, [pc, #48]	; (8005870 <prvInitialiseTaskLists+0x70>)
 8005840:	f7fe fcb8 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005844:	480b      	ldr	r0, [pc, #44]	; (8005874 <prvInitialiseTaskLists+0x74>)
 8005846:	f7fe fcb5 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <prvInitialiseTaskLists+0x78>)
 800584c:	4a05      	ldr	r2, [pc, #20]	; (8005864 <prvInitialiseTaskLists+0x64>)
 800584e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <prvInitialiseTaskLists+0x7c>)
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <prvInitialiseTaskLists+0x68>)
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000a58 	.word	0x20000a58
 8005864:	20000eb8 	.word	0x20000eb8
 8005868:	20000ecc 	.word	0x20000ecc
 800586c:	20000ee8 	.word	0x20000ee8
 8005870:	20000efc 	.word	0x20000efc
 8005874:	20000f14 	.word	0x20000f14
 8005878:	20000ee0 	.word	0x20000ee0
 800587c:	20000ee4 	.word	0x20000ee4

08005880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005886:	e019      	b.n	80058bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005888:	f000 fdd4 	bl	8006434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <prvCheckTasksWaitingTermination+0x50>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fd15 	bl	80042c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <prvCheckTasksWaitingTermination+0x54>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4a0b      	ldr	r2, [pc, #44]	; (80058d4 <prvCheckTasksWaitingTermination+0x54>)
 80058a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058b2:	f000 fdef 	bl	8006494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f810 	bl	80058dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e1      	bne.n	8005888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000efc 	.word	0x20000efc
 80058d4:	20000f28 	.word	0x20000f28
 80058d8:	20000f10 	.word	0x20000f10

080058dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3354      	adds	r3, #84	; 0x54
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f8f9 	bl	8006ae0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 ff87 	bl	8006810 <vPortFree>
				vPortFree( pxTCB );
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 ff84 	bl	8006810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005908:	e018      	b.n	800593c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005910:	2b01      	cmp	r3, #1
 8005912:	d103      	bne.n	800591c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 ff7b 	bl	8006810 <vPortFree>
	}
 800591a:	e00f      	b.n	800593c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005922:	2b02      	cmp	r3, #2
 8005924:	d00a      	beq.n	800593c <prvDeleteTCB+0x60>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <prvDeleteTCB+0x5e>
	}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800595c:	e008      	b.n	8005970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 800596e:	6013      	str	r3, [r2, #0]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20000ee0 	.word	0x20000ee0
 8005980:	20000f48 	.word	0x20000f48

08005984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <xTaskGetSchedulerState+0x34>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005992:	2301      	movs	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	e008      	b.n	80059aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <xTaskGetSchedulerState+0x38>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059a0:	2302      	movs	r3, #2
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	e001      	b.n	80059aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059aa:	687b      	ldr	r3, [r7, #4]
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	20000f34 	.word	0x20000f34
 80059bc:	20000f50 	.word	0x20000f50

080059c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d056      	beq.n	8005a84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <xTaskPriorityDisinherit+0xd0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d00a      	beq.n	80059f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60bb      	str	r3, [r7, #8]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d02c      	beq.n	8005a84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d128      	bne.n	8005a84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fc46 	bl	80042c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <xTaskPriorityDisinherit+0xd4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d903      	bls.n	8005a64 <xTaskPriorityDisinherit+0xa4>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <xTaskPriorityDisinherit+0xd4>)
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <xTaskPriorityDisinherit+0xd8>)
 8005a72:	441a      	add	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f7fe fbc7 	bl	800420e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a84:	697b      	ldr	r3, [r7, #20]
	}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000a54 	.word	0x20000a54
 8005a94:	20000f30 	.word	0x20000f30
 8005a98:	20000a58 	.word	0x20000a58

08005a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x90>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aac:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fc08 	bl	80042c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d10a      	bne.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4819      	ldr	r0, [pc, #100]	; (8005b34 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ad0:	f7fe fb9d 	bl	800420e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad4:	e026      	b.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d209      	bcs.n	8005b02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fe fbab 	bl	8004256 <vListInsert>
}
 8005b00:	e010      	b.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fba1 	bl	8004256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d202      	bcs.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6013      	str	r3, [r2, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000f2c 	.word	0x20000f2c
 8005b30:	20000a54 	.word	0x20000a54
 8005b34:	20000f14 	.word	0x20000f14
 8005b38:	20000ee4 	.word	0x20000ee4
 8005b3c:	20000ee0 	.word	0x20000ee0
 8005b40:	20000f48 	.word	0x20000f48

08005b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b4e:	f000 fb07 	bl	8006160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <xTimerCreateTimerTask+0x80>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d021      	beq.n	8005b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b62:	1d3a      	adds	r2, r7, #4
 8005b64:	f107 0108 	add.w	r1, r7, #8
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fb07 	bl	8004180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	9202      	str	r2, [sp, #8]
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	460a      	mov	r2, r1
 8005b84:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <xTimerCreateTimerTask+0x84>)
 8005b86:	4811      	ldr	r0, [pc, #68]	; (8005bcc <xTimerCreateTimerTask+0x88>)
 8005b88:	f7ff f8b4 	bl	8004cf4 <xTaskCreateStatic>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <xTimerCreateTimerTask+0x8c>)
 8005b90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTimerCreateTimerTask+0x8c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000f84 	.word	0x20000f84
 8005bc8:	08006c84 	.word	0x08006c84
 8005bcc:	08005d09 	.word	0x08005d09
 8005bd0:	20000f88 	.word	0x20000f88

08005bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <xTimerGenericCommand+0x98>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02a      	beq.n	8005c60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	dc18      	bgt.n	8005c4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c1c:	f7ff feb2 	bl	8005984 <xTaskGetSchedulerState>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d109      	bne.n	8005c3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <xTimerGenericCommand+0x98>)
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f107 0110 	add.w	r1, r7, #16
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c32:	f7fe fc77 	bl	8004524 <xQueueGenericSend>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24
 8005c38:	e012      	b.n	8005c60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <xTimerGenericCommand+0x98>)
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f107 0110 	add.w	r1, r7, #16
 8005c42:	2300      	movs	r3, #0
 8005c44:	2200      	movs	r2, #0
 8005c46:	f7fe fc6d 	bl	8004524 <xQueueGenericSend>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c4c:	e008      	b.n	8005c60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <xTimerGenericCommand+0x98>)
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f107 0110 	add.w	r1, r7, #16
 8005c56:	2300      	movs	r3, #0
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	f7fe fd61 	bl	8004720 <xQueueGenericSendFromISR>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3728      	adds	r7, #40	; 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000f84 	.word	0x20000f84

08005c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7a:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <prvProcessExpiredTimer+0x94>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fb1d 	bl	80042c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d022      	beq.n	8005ce2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	18d1      	adds	r1, r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f000 f8d1 	bl	8005e50 <prvInsertTimerInActiveList>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01f      	beq.n	8005cf4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f7ff ff88 	bl	8005bd4 <xTimerGenericCommand>
 8005cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d113      	bne.n	8005cf4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	6978      	ldr	r0, [r7, #20]
 8005cfa:	4798      	blx	r3
}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000f7c 	.word	0x20000f7c

08005d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f857 	bl	8005dc8 <prvGetNextExpireTime>
 8005d1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f803 	bl	8005d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d26:	f000 f8d5 	bl	8005ed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d2a:	e7f1      	b.n	8005d10 <prvTimerTask+0x8>

08005d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d36:	f7ff fa39 	bl	80051ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f866 	bl	8005e10 <prvSampleTimeNow>
 8005d44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d130      	bne.n	8005dae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <prvProcessTimerOrBlockTask+0x3c>
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d806      	bhi.n	8005d68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d5a:	f7ff fa35 	bl	80051c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff85 	bl	8005c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d66:	e024      	b.n	8005db2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <prvProcessTimerOrBlockTask+0x90>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <prvProcessTimerOrBlockTask+0x50>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <prvProcessTimerOrBlockTask+0x52>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <prvProcessTimerOrBlockTask+0x94>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f7fe ff7d 	bl	8004c8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d92:	f7ff fa19 	bl	80051c8 <xTaskResumeAll>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <prvProcessTimerOrBlockTask+0x98>)
 8005d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	f3bf 8f6f 	isb	sy
}
 8005dac:	e001      	b.n	8005db2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dae:	f7ff fa0b 	bl	80051c8 <xTaskResumeAll>
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000f80 	.word	0x20000f80
 8005dc0:	20000f84 	.word	0x20000f84
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <prvGetNextExpireTime+0x44>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <prvGetNextExpireTime+0x16>
 8005dda:	2201      	movs	r2, #1
 8005ddc:	e000      	b.n	8005de0 <prvGetNextExpireTime+0x18>
 8005dde:	2200      	movs	r2, #0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <prvGetNextExpireTime+0x44>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e001      	b.n	8005dfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000f7c 	.word	0x20000f7c

08005e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e18:	f7ff fa74 	bl	8005304 <xTaskGetTickCount>
 8005e1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvSampleTimeNow+0x3c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d205      	bcs.n	8005e34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e28:	f000 f936 	bl	8006098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e002      	b.n	8005e3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e3a:	4a04      	ldr	r2, [pc, #16]	; (8005e4c <prvSampleTimeNow+0x3c>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000f8c 	.word	0x20000f8c

08005e50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d812      	bhi.n	8005e9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d302      	bcc.n	8005e8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e01b      	b.n	8005ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <prvInsertTimerInActiveList+0x7c>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe f9de 	bl	8004256 <vListInsert>
 8005e9a:	e012      	b.n	8005ec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d206      	bcs.n	8005eb2 <prvInsertTimerInActiveList+0x62>
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e007      	b.n	8005ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <prvInsertTimerInActiveList+0x80>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fe f9ca 	bl	8004256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ec2:	697b      	ldr	r3, [r7, #20]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000f80 	.word	0x20000f80
 8005ed0:	20000f7c 	.word	0x20000f7c

08005ed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08e      	sub	sp, #56	; 0x38
 8005ed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eda:	e0ca      	b.n	8006072 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da18      	bge.n	8005f14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	61fb      	str	r3, [r7, #28]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f0a:	6850      	ldr	r0, [r2, #4]
 8005f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f0e:	6892      	ldr	r2, [r2, #8]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f2c0 80aa 	blt.w	8006070 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe f9cb 	bl	80042c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f32:	463b      	mov	r3, r7
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff ff6b 	bl	8005e10 <prvSampleTimeNow>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	f200 8097 	bhi.w	8006072 <prvProcessReceivedCommands+0x19e>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <prvProcessReceivedCommands+0x78>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005fe9 	.word	0x08005fe9
 8005f5c:	08005ffd 	.word	0x08005ffd
 8005f60:	08006047 	.word	0x08006047
 8005f64:	08005f75 	.word	0x08005f75
 8005f68:	08005f75 	.word	0x08005f75
 8005f6c:	08005fe9 	.word	0x08005fe9
 8005f70:	08005ffd 	.word	0x08005ffd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	18d1      	adds	r1, r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f94:	f7ff ff5c 	bl	8005e50 <prvInsertTimerInActiveList>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d069      	beq.n	8006072 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05e      	beq.n	8006072 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	441a      	add	r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc6:	f7ff fe05 	bl	8005bd4 <xTimerGenericCommand>
 8005fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d14f      	bne.n	8006072 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61bb      	str	r3, [r7, #24]
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ffa:	e03a      	b.n	8006072 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	b2da      	uxtb	r2, r3
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	617b      	str	r3, [r7, #20]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	18d1      	adds	r1, r2, r3
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006040:	f7ff ff06 	bl	8005e50 <prvInsertTimerInActiveList>
					break;
 8006044:	e015      	b.n	8006072 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006056:	f000 fbdb 	bl	8006810 <vPortFree>
 800605a:	e00a      	b.n	8006072 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800606e:	e000      	b.n	8006072 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006070:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <prvProcessReceivedCommands+0x1c0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	1d39      	adds	r1, r7, #4
 8006078:	2200      	movs	r2, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fbec 	bl	8004858 <xQueueReceive>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f af2a 	bne.w	8005edc <prvProcessReceivedCommands+0x8>
	}
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	3730      	adds	r7, #48	; 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000f84 	.word	0x20000f84

08006098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800609e:	e048      	b.n	8006132 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060a0:	4b2d      	ldr	r3, [pc, #180]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe f905 	bl	80042c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02e      	beq.n	8006132 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90e      	bls.n	8006104 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7fe f8aa 	bl	8004256 <vListInsert>
 8006102:	e016      	b.n	8006132 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006104:	2300      	movs	r3, #0
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2300      	movs	r3, #0
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fd60 	bl	8005bd4 <xTimerGenericCommand>
 8006114:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	603b      	str	r3, [r7, #0]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <prvSwitchTimerLists+0xc0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1b1      	bne.n	80060a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <prvSwitchTimerLists+0xc0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <prvSwitchTimerLists+0xc4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <prvSwitchTimerLists+0xc0>)
 8006148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800614a:	4a04      	ldr	r2, [pc, #16]	; (800615c <prvSwitchTimerLists+0xc4>)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000f7c 	.word	0x20000f7c
 800615c:	20000f80 	.word	0x20000f80

08006160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006166:	f000 f965 	bl	8006434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <prvCheckForValidListAndQueue+0x60>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d120      	bne.n	80061b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006172:	4814      	ldr	r0, [pc, #80]	; (80061c4 <prvCheckForValidListAndQueue+0x64>)
 8006174:	f7fe f81e 	bl	80041b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006178:	4813      	ldr	r0, [pc, #76]	; (80061c8 <prvCheckForValidListAndQueue+0x68>)
 800617a:	f7fe f81b 	bl	80041b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <prvCheckForValidListAndQueue+0x6c>)
 8006180:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <prvCheckForValidListAndQueue+0x64>)
 8006182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <prvCheckForValidListAndQueue+0x70>)
 8006186:	4a10      	ldr	r2, [pc, #64]	; (80061c8 <prvCheckForValidListAndQueue+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <prvCheckForValidListAndQueue+0x74>)
 8006190:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <prvCheckForValidListAndQueue+0x78>)
 8006192:	2110      	movs	r1, #16
 8006194:	200a      	movs	r0, #10
 8006196:	f7fe f929 	bl	80043ec <xQueueGenericCreateStatic>
 800619a:	4603      	mov	r3, r0
 800619c:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <prvCheckForValidListAndQueue+0x60>)
 800619e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvCheckForValidListAndQueue+0x60>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <prvCheckForValidListAndQueue+0x60>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	490b      	ldr	r1, [pc, #44]	; (80061dc <prvCheckForValidListAndQueue+0x7c>)
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fd42 	bl	8004c38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061b4:	f000 f96e 	bl	8006494 <vPortExitCritical>
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000f84 	.word	0x20000f84
 80061c4:	20000f54 	.word	0x20000f54
 80061c8:	20000f68 	.word	0x20000f68
 80061cc:	20000f7c 	.word	0x20000f7c
 80061d0:	20000f80 	.word	0x20000f80
 80061d4:	20001030 	.word	0x20001030
 80061d8:	20000f90 	.word	0x20000f90
 80061dc:	08006c8c 	.word	0x08006c8c

080061e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3b04      	subs	r3, #4
 80061f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <pxPortInitialiseStack+0x64>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b14      	subs	r3, #20
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b04      	subs	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f06f 0202 	mvn.w	r2, #2
 800622e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b20      	subs	r3, #32
 8006234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006236:	68fb      	ldr	r3, [r7, #12]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	08006249 	.word	0x08006249

08006248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <prvTaskExitError+0x54>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d00a      	beq.n	8006272 <prvTaskExitError+0x2a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <prvTaskExitError+0x28>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006286:	bf00      	nop
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0fc      	beq.n	8006288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	2000000c 	.word	0x2000000c

080062a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <pxCurrentTCBConst2>)
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	6808      	ldr	r0, [r1, #0]
 80062a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	f380 8809 	msr	PSP, r0
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	4770      	bx	lr
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst2>:
 80062c0:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062c8:	4808      	ldr	r0, [pc, #32]	; (80062ec <prvPortStartFirstTask+0x24>)
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	6800      	ldr	r0, [r0, #0]
 80062ce:	f380 8808 	msr	MSP, r0
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8814 	msr	CONTROL, r0
 80062da:	b662      	cpsie	i
 80062dc:	b661      	cpsie	f
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	df00      	svc	0
 80062e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ea:	bf00      	nop
 80062ec:	e000ed08 	.word	0xe000ed08

080062f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062f6:	4b46      	ldr	r3, [pc, #280]	; (8006410 <xPortStartScheduler+0x120>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a46      	ldr	r2, [pc, #280]	; (8006414 <xPortStartScheduler+0x124>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10a      	bne.n	8006316 <xPortStartScheduler+0x26>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <xPortStartScheduler+0x120>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a3f      	ldr	r2, [pc, #252]	; (8006418 <xPortStartScheduler+0x128>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10a      	bne.n	8006336 <xPortStartScheduler+0x46>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006336:	4b39      	ldr	r3, [pc, #228]	; (800641c <xPortStartScheduler+0x12c>)
 8006338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006358:	b2da      	uxtb	r2, r3
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <xPortStartScheduler+0x130>)
 800635c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800635e:	4b31      	ldr	r3, [pc, #196]	; (8006424 <xPortStartScheduler+0x134>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006364:	e009      	b.n	800637a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006366:	4b2f      	ldr	r3, [pc, #188]	; (8006424 <xPortStartScheduler+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <xPortStartScheduler+0x134>)
 800636e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d0ef      	beq.n	8006366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006386:	4b27      	ldr	r3, [pc, #156]	; (8006424 <xPortStartScheduler+0x134>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1c3 0307 	rsb	r3, r3, #7
 800638e:	2b04      	cmp	r3, #4
 8006390:	d00a      	beq.n	80063a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60bb      	str	r3, [r7, #8]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063a8:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <xPortStartScheduler+0x134>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <xPortStartScheduler+0x134>)
 80063b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063b2:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <xPortStartScheduler+0x134>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ba:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <xPortStartScheduler+0x134>)
 80063bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <xPortStartScheduler+0x138>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <xPortStartScheduler+0x138>)
 80063cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <xPortStartScheduler+0x138>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <xPortStartScheduler+0x138>)
 80063d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063de:	f000 f8dd 	bl	800659c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <xPortStartScheduler+0x13c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063e8:	f000 f8fc 	bl	80065e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063ec:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xPortStartScheduler+0x140>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <xPortStartScheduler+0x140>)
 80063f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063f8:	f7ff ff66 	bl	80062c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063fc:	f7ff f84c 	bl	8005498 <vTaskSwitchContext>
	prvTaskExitError();
 8006400:	f7ff ff22 	bl	8006248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	e000ed00 	.word	0xe000ed00
 8006414:	410fc271 	.word	0x410fc271
 8006418:	410fc270 	.word	0x410fc270
 800641c:	e000e400 	.word	0xe000e400
 8006420:	20001080 	.word	0x20001080
 8006424:	20001084 	.word	0x20001084
 8006428:	e000ed20 	.word	0xe000ed20
 800642c:	2000000c 	.word	0x2000000c
 8006430:	e000ef34 	.word	0xe000ef34

08006434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	607b      	str	r3, [r7, #4]
}
 800644c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <vPortEnterCritical+0x58>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <vPortEnterCritical+0x58>)
 8006456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <vPortEnterCritical+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d10f      	bne.n	8006480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <vPortEnterCritical+0x5c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <vPortEnterCritical+0x4c>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	603b      	str	r3, [r7, #0]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <vPortEnterCritical+0x4a>
	}
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <vPortExitCritical+0x50>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <vPortExitCritical+0x24>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <vPortExitCritical+0x50>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3b01      	subs	r3, #1
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <vPortExitCritical+0x50>)
 80064c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <vPortExitCritical+0x50>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <vPortExitCritical+0x42>
 80064ca:	2300      	movs	r3, #0
 80064cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	f383 8811 	msr	BASEPRI, r3
}
 80064d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000000c 	.word	0x2000000c
	...

080064f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064f0:	f3ef 8009 	mrs	r0, PSP
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4b15      	ldr	r3, [pc, #84]	; (8006550 <pxCurrentTCBConst>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f01e 0f10 	tst.w	lr, #16
 8006500:	bf08      	it	eq
 8006502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006514:	f380 8811 	msr	BASEPRI, r0
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f7fe ffba 	bl	8005498 <vTaskSwitchContext>
 8006524:	f04f 0000 	mov.w	r0, #0
 8006528:	f380 8811 	msr	BASEPRI, r0
 800652c:	bc09      	pop	{r0, r3}
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006536:	f01e 0f10 	tst.w	lr, #16
 800653a:	bf08      	it	eq
 800653c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006540:	f380 8809 	msr	PSP, r0
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst>:
 8006550:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006572:	f7fe fed7 	bl	8005324 <xTaskIncrementTick>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xPortSysTickHandler+0x40>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortSetupTimerInterrupt+0x34>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <vPortSetupTimerInterrupt+0x38>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <vPortSetupTimerInterrupt+0x3c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <vPortSetupTimerInterrupt+0x40>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	099b      	lsrs	r3, r3, #6
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <vPortSetupTimerInterrupt+0x44>)
 80065ba:	3b01      	subs	r3, #1
 80065bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <vPortSetupTimerInterrupt+0x34>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	e000e010 	.word	0xe000e010
 80065d4:	e000e018 	.word	0xe000e018
 80065d8:	20000000 	.word	0x20000000
 80065dc:	10624dd3 	.word	0x10624dd3
 80065e0:	e000e014 	.word	0xe000e014

080065e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065f4 <vPortEnableVFP+0x10>
 80065e8:	6801      	ldr	r1, [r0, #0]
 80065ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ee:	6001      	str	r1, [r0, #0]
 80065f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065f2:	bf00      	nop
 80065f4:	e000ed88 	.word	0xe000ed88

080065f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065fe:	f3ef 8305 	mrs	r3, IPSR
 8006602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d914      	bls.n	8006634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <vPortValidateInterruptPriority+0x70>)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006614:	4b15      	ldr	r3, [pc, #84]	; (800666c <vPortValidateInterruptPriority+0x74>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	7afa      	ldrb	r2, [r7, #11]
 800661a:	429a      	cmp	r2, r3
 800661c:	d20a      	bcs.n	8006634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <vPortValidateInterruptPriority+0x78>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <vPortValidateInterruptPriority+0x7c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d90a      	bls.n	800665a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	603b      	str	r3, [r7, #0]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <vPortValidateInterruptPriority+0x60>
	}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000e3f0 	.word	0xe000e3f0
 800666c:	20001080 	.word	0x20001080
 8006670:	e000ed0c 	.word	0xe000ed0c
 8006674:	20001084 	.word	0x20001084

08006678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006684:	f7fe fd92 	bl	80051ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006688:	4b5b      	ldr	r3, [pc, #364]	; (80067f8 <pvPortMalloc+0x180>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006690:	f000 f920 	bl	80068d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <pvPortMalloc+0x184>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 8093 	bne.w	80067c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01d      	beq.n	80066e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066a8:	2208      	movs	r2, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d014      	beq.n	80066e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <pvPortMalloc+0x6c>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	617b      	str	r3, [r7, #20]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d06e      	beq.n	80067c8 <pvPortMalloc+0x150>
 80066ea:	4b45      	ldr	r3, [pc, #276]	; (8006800 <pvPortMalloc+0x188>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d869      	bhi.n	80067c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066f4:	4b43      	ldr	r3, [pc, #268]	; (8006804 <pvPortMalloc+0x18c>)
 80066f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <pvPortMalloc+0x18c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066fe:	e004      	b.n	800670a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <pvPortMalloc+0xa4>
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f1      	bne.n	8006700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800671c:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <pvPortMalloc+0x180>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	429a      	cmp	r2, r3
 8006724:	d050      	beq.n	80067c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2208      	movs	r2, #8
 800672c:	4413      	add	r3, r2
 800672e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	2308      	movs	r3, #8
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	429a      	cmp	r2, r3
 8006746:	d91f      	bls.n	8006788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <pvPortMalloc+0xf8>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	613b      	str	r3, [r7, #16]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f000 f908 	bl	8006998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <pvPortMalloc+0x188>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <pvPortMalloc+0x188>)
 8006794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <pvPortMalloc+0x188>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <pvPortMalloc+0x190>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d203      	bcs.n	80067aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <pvPortMalloc+0x188>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a18      	ldr	r2, [pc, #96]	; (8006808 <pvPortMalloc+0x190>)
 80067a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <pvPortMalloc+0x184>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x194>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a11      	ldr	r2, [pc, #68]	; (800680c <pvPortMalloc+0x194>)
 80067c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067c8:	f7fe fcfe 	bl	80051c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <pvPortMalloc+0x174>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <pvPortMalloc+0x172>
	return pvReturn;
 80067ec:	69fb      	ldr	r3, [r7, #28]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3728      	adds	r7, #40	; 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20001c48 	.word	0x20001c48
 80067fc:	20001c5c 	.word	0x20001c5c
 8006800:	20001c4c 	.word	0x20001c4c
 8006804:	20001c40 	.word	0x20001c40
 8006808:	20001c50 	.word	0x20001c50
 800680c:	20001c54 	.word	0x20001c54

08006810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04d      	beq.n	80068be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006822:	2308      	movs	r3, #8
 8006824:	425b      	negs	r3, r3
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4413      	add	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <vPortFree+0xb8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <vPortFree+0x44>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <vPortFree+0x62>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	60bb      	str	r3, [r7, #8]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <vPortFree+0xb8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01e      	beq.n	80068be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11a      	bne.n	80068be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <vPortFree+0xb8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	43db      	mvns	r3, r3
 8006892:	401a      	ands	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006898:	f7fe fc88 	bl	80051ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <vPortFree+0xbc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <vPortFree+0xbc>)
 80068a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068aa:	6938      	ldr	r0, [r7, #16]
 80068ac:	f000 f874 	bl	8006998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <vPortFree+0xc0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a06      	ldr	r2, [pc, #24]	; (80068d0 <vPortFree+0xc0>)
 80068b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ba:	f7fe fc85 	bl	80051c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20001c5c 	.word	0x20001c5c
 80068cc:	20001c4c 	.word	0x20001c4c
 80068d0:	20001c58 	.word	0x20001c58

080068d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <prvHeapInit+0xac>)
 80068e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00c      	beq.n	8006908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0307 	bic.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <prvHeapInit+0xac>)
 8006904:	4413      	add	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <prvHeapInit+0xb0>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <prvHeapInit+0xb0>)
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	4413      	add	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006920:	2208      	movs	r2, #8
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a15      	ldr	r2, [pc, #84]	; (8006988 <prvHeapInit+0xb4>)
 8006934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <prvHeapInit+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <prvHeapInit+0xb4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvHeapInit+0xb4>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <prvHeapInit+0xb8>)
 8006962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a09      	ldr	r2, [pc, #36]	; (8006990 <prvHeapInit+0xbc>)
 800696a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <prvHeapInit+0xc0>)
 800696e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20001088 	.word	0x20001088
 8006984:	20001c40 	.word	0x20001c40
 8006988:	20001c48 	.word	0x20001c48
 800698c:	20001c50 	.word	0x20001c50
 8006990:	20001c4c 	.word	0x20001c4c
 8006994:	20001c5c 	.word	0x20001c5c

08006998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069a0:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <prvInsertBlockIntoFreeList+0xac>)
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <prvInsertBlockIntoFreeList+0x14>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d8f7      	bhi.n	80069a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4413      	add	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d108      	bne.n	80069da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	441a      	add	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d118      	bne.n	8006a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <prvInsertBlockIntoFreeList+0xb0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d00d      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	441a      	add	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e008      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <prvInsertBlockIntoFreeList+0xb0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e003      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d002      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20001c40 	.word	0x20001c40
 8006a48:	20001c48 	.word	0x20001c48

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4d0d      	ldr	r5, [pc, #52]	; (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	; (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1b64      	subs	r4, r4, r5
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2600      	movs	r6, #0
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4d0b      	ldr	r5, [pc, #44]	; (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	; (8006a90 <__libc_init_array+0x44>)
 8006a60:	f000 f8f2 	bl	8006c48 <_init>
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2600      	movs	r6, #0
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a74:	4798      	blx	r3
 8006a76:	3601      	adds	r6, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7e:	4798      	blx	r3
 8006a80:	3601      	adds	r6, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	08006d8c 	.word	0x08006d8c
 8006a88:	08006d8c 	.word	0x08006d8c
 8006a8c:	08006d8c 	.word	0x08006d8c
 8006a90:	08006d90 	.word	0x08006d90

08006a94 <__retarget_lock_acquire_recursive>:
 8006a94:	4770      	bx	lr

08006a96 <__retarget_lock_release_recursive>:
 8006a96:	4770      	bx	lr

08006a98 <memcpy>:
 8006a98:	440a      	add	r2, r1
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa0:	d100      	bne.n	8006aa4 <memcpy+0xc>
 8006aa2:	4770      	bx	lr
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	d1f9      	bne.n	8006aa6 <memcpy+0xe>
 8006ab2:	bd10      	pop	{r4, pc}

08006ab4 <memset>:
 8006ab4:	4402      	add	r2, r0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <cleanup_glue>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	6809      	ldr	r1, [r1, #0]
 8006aca:	4605      	mov	r5, r0
 8006acc:	b109      	cbz	r1, 8006ad2 <cleanup_glue+0xe>
 8006ace:	f7ff fff9 	bl	8006ac4 <cleanup_glue>
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ada:	f000 b869 	b.w	8006bb0 <_free_r>
	...

08006ae0 <_reclaim_reent>:
 8006ae0:	4b2c      	ldr	r3, [pc, #176]	; (8006b94 <_reclaim_reent+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4283      	cmp	r3, r0
 8006ae6:	b570      	push	{r4, r5, r6, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	d051      	beq.n	8006b90 <_reclaim_reent+0xb0>
 8006aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006aee:	b143      	cbz	r3, 8006b02 <_reclaim_reent+0x22>
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d14a      	bne.n	8006b8c <_reclaim_reent+0xac>
 8006af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	b111      	cbz	r1, 8006b02 <_reclaim_reent+0x22>
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f857 	bl	8006bb0 <_free_r>
 8006b02:	6961      	ldr	r1, [r4, #20]
 8006b04:	b111      	cbz	r1, 8006b0c <_reclaim_reent+0x2c>
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f852 	bl	8006bb0 <_free_r>
 8006b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b0e:	b111      	cbz	r1, 8006b16 <_reclaim_reent+0x36>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 f84d 	bl	8006bb0 <_free_r>
 8006b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b18:	b111      	cbz	r1, 8006b20 <_reclaim_reent+0x40>
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f848 	bl	8006bb0 <_free_r>
 8006b20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b22:	b111      	cbz	r1, 8006b2a <_reclaim_reent+0x4a>
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 f843 	bl	8006bb0 <_free_r>
 8006b2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b2c:	b111      	cbz	r1, 8006b34 <_reclaim_reent+0x54>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f83e 	bl	8006bb0 <_free_r>
 8006b34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b36:	b111      	cbz	r1, 8006b3e <_reclaim_reent+0x5e>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 f839 	bl	8006bb0 <_free_r>
 8006b3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b40:	b111      	cbz	r1, 8006b48 <_reclaim_reent+0x68>
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f834 	bl	8006bb0 <_free_r>
 8006b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4a:	b111      	cbz	r1, 8006b52 <_reclaim_reent+0x72>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 f82f 	bl	8006bb0 <_free_r>
 8006b52:	69a3      	ldr	r3, [r4, #24]
 8006b54:	b1e3      	cbz	r3, 8006b90 <_reclaim_reent+0xb0>
 8006b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4798      	blx	r3
 8006b5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b5e:	b1b9      	cbz	r1, 8006b90 <_reclaim_reent+0xb0>
 8006b60:	4620      	mov	r0, r4
 8006b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b66:	f7ff bfad 	b.w	8006ac4 <cleanup_glue>
 8006b6a:	5949      	ldr	r1, [r1, r5]
 8006b6c:	b941      	cbnz	r1, 8006b80 <_reclaim_reent+0xa0>
 8006b6e:	3504      	adds	r5, #4
 8006b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b72:	2d80      	cmp	r5, #128	; 0x80
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	d1f8      	bne.n	8006b6a <_reclaim_reent+0x8a>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 f819 	bl	8006bb0 <_free_r>
 8006b7e:	e7ba      	b.n	8006af6 <_reclaim_reent+0x16>
 8006b80:	680e      	ldr	r6, [r1, #0]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f814 	bl	8006bb0 <_free_r>
 8006b88:	4631      	mov	r1, r6
 8006b8a:	e7ef      	b.n	8006b6c <_reclaim_reent+0x8c>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	e7ef      	b.n	8006b70 <_reclaim_reent+0x90>
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	bf00      	nop
 8006b94:	20000010 	.word	0x20000010

08006b98 <__malloc_lock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__malloc_lock+0x8>)
 8006b9a:	f7ff bf7b 	b.w	8006a94 <__retarget_lock_acquire_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20001c60 	.word	0x20001c60

08006ba4 <__malloc_unlock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__malloc_unlock+0x8>)
 8006ba6:	f7ff bf76 	b.w	8006a96 <__retarget_lock_release_recursive>
 8006baa:	bf00      	nop
 8006bac:	20001c60 	.word	0x20001c60

08006bb0 <_free_r>:
 8006bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	d044      	beq.n	8006c40 <_free_r+0x90>
 8006bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bba:	9001      	str	r0, [sp, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8006bc2:	bfb8      	it	lt
 8006bc4:	18e4      	addlt	r4, r4, r3
 8006bc6:	f7ff ffe7 	bl	8006b98 <__malloc_lock>
 8006bca:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <_free_r+0x94>)
 8006bcc:	9801      	ldr	r0, [sp, #4]
 8006bce:	6813      	ldr	r3, [r2, #0]
 8006bd0:	b933      	cbnz	r3, 8006be0 <_free_r+0x30>
 8006bd2:	6063      	str	r3, [r4, #4]
 8006bd4:	6014      	str	r4, [r2, #0]
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bdc:	f7ff bfe2 	b.w	8006ba4 <__malloc_unlock>
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	d908      	bls.n	8006bf6 <_free_r+0x46>
 8006be4:	6825      	ldr	r5, [r4, #0]
 8006be6:	1961      	adds	r1, r4, r5
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf01      	itttt	eq
 8006bec:	6819      	ldreq	r1, [r3, #0]
 8006bee:	685b      	ldreq	r3, [r3, #4]
 8006bf0:	1949      	addeq	r1, r1, r5
 8006bf2:	6021      	streq	r1, [r4, #0]
 8006bf4:	e7ed      	b.n	8006bd2 <_free_r+0x22>
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	b10b      	cbz	r3, 8006c00 <_free_r+0x50>
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d9fa      	bls.n	8006bf6 <_free_r+0x46>
 8006c00:	6811      	ldr	r1, [r2, #0]
 8006c02:	1855      	adds	r5, r2, r1
 8006c04:	42a5      	cmp	r5, r4
 8006c06:	d10b      	bne.n	8006c20 <_free_r+0x70>
 8006c08:	6824      	ldr	r4, [r4, #0]
 8006c0a:	4421      	add	r1, r4
 8006c0c:	1854      	adds	r4, r2, r1
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	6011      	str	r1, [r2, #0]
 8006c12:	d1e0      	bne.n	8006bd6 <_free_r+0x26>
 8006c14:	681c      	ldr	r4, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	6053      	str	r3, [r2, #4]
 8006c1a:	4421      	add	r1, r4
 8006c1c:	6011      	str	r1, [r2, #0]
 8006c1e:	e7da      	b.n	8006bd6 <_free_r+0x26>
 8006c20:	d902      	bls.n	8006c28 <_free_r+0x78>
 8006c22:	230c      	movs	r3, #12
 8006c24:	6003      	str	r3, [r0, #0]
 8006c26:	e7d6      	b.n	8006bd6 <_free_r+0x26>
 8006c28:	6825      	ldr	r5, [r4, #0]
 8006c2a:	1961      	adds	r1, r4, r5
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	bf04      	itt	eq
 8006c30:	6819      	ldreq	r1, [r3, #0]
 8006c32:	685b      	ldreq	r3, [r3, #4]
 8006c34:	6063      	str	r3, [r4, #4]
 8006c36:	bf04      	itt	eq
 8006c38:	1949      	addeq	r1, r1, r5
 8006c3a:	6021      	streq	r1, [r4, #0]
 8006c3c:	6054      	str	r4, [r2, #4]
 8006c3e:	e7ca      	b.n	8006bd6 <_free_r+0x26>
 8006c40:	b003      	add	sp, #12
 8006c42:	bd30      	pop	{r4, r5, pc}
 8006c44:	20001c64 	.word	0x20001c64

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
