
Batonome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  20000074  08006c7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  08006c7c  00021c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020438  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d48  00000000  00000000  000404dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00044228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00045c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b79  00000000  00000000  00047510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001daab  00000000  00000000  0004b089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6325  00000000  00000000  00068b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ee59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007250  00000000  00000000  0013eeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ac8 	.word	0x08006ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006ac8 	.word	0x08006ac8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbfd 	bl	8000cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f82c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f94c 	bl	800077c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f86e 	bl	80005c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004e8:	f000 f8aa 	bl	8000640 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f8e6 	bl	80006bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f914 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fc6c 	bl	8003dd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <main+0x4c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x50>)
 80004fe:	f003 fcb1 	bl	8003e64 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x54>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x58>)
 800050a:	2100      	movs	r1, #0
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x5c>)
 800050e:	f003 fca9 	bl	8003e64 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <main+0x60>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f003 fc7e 	bl	8003e18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x48>
 800051e:	bf00      	nop
 8000520:	08006b08 	.word	0x08006b08
 8000524:	080007c5 	.word	0x080007c5
 8000528:	20000240 	.word	0x20000240
 800052c:	08006b2c 	.word	0x08006b2c
 8000530:	080007cf 	.word	0x080007cf
 8000534:	20000244 	.word	0x20000244

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 f9f4 	bl	8006934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f000 fff3 	bl	8001548 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f94c 	bl	8000804 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056c:	2310      	movs	r3, #16
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f835 	bl	80015f4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000590:	f000 f938 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fc35 	bl	8001e1c <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b8:	f000 f924 	bl	8000804 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	; 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80005d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_I2C1_Init+0x74>)
 80005de:	2201      	movs	r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_I2C1_Init+0x74>)
 8000602:	f000 fe6d 	bl	80012e0 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8fa 	bl	8000804 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000610:	2100      	movs	r1, #0
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <MX_I2C1_Init+0x74>)
 8000614:	f000 fef3 	bl	80013fe <HAL_I2CEx_ConfigAnalogFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800061e:	f000 f8f1 	bl	8000804 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_I2C1_Init+0x74>)
 8000626:	f000 ff35 	bl	8001494 <HAL_I2CEx_ConfigDigitalFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 f8e8 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000090 	.word	0x20000090
 800063c:	40005400 	.word	0x40005400

08000640 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C3_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C3_Init+0x74>)
 800064c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000650:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_I2C3_Init+0x74>)
 800065a:	2201      	movs	r2, #1
 800065c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_I2C3_Init+0x74>)
 800067e:	f000 fe2f 	bl	80012e0 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f8bc 	bl	8000804 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C3_Init+0x74>)
 8000690:	f000 feb5 	bl	80013fe <HAL_I2CEx_ConfigAnalogFilter>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800069a:	f000 f8b3 	bl	8000804 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C3_Init+0x74>)
 80006a2:	f000 fef7 	bl	8001494 <HAL_I2CEx_ConfigDigitalFilter>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006ac:	f000 f8aa 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000e4 	.word	0x200000e4
 80006b8:	40005c00 	.word	0x40005c00

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART1_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x58>)
 8000700:	f002 fb4a 	bl	8002d98 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f87b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000138 	.word	0x20000138
 8000718:	40013800 	.word	0x40013800

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART2_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000760:	f002 fb1a 	bl	8002d98 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f84b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200001bc 	.word	0x200001bc
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_GPIO_Init+0x44>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <MX_GPIO_Init+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_GPIO_Init+0x44>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_GPIO_Init+0x44>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <MX_GPIO_Init+0x44>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x44>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80007cc:	e7fe      	b.n	80007cc <StartBlink01+0x8>

080007ce <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f003 fbd6 	bl	8003f88 <osDelay>
 80007dc:	e7fb      	b.n	80007d6 <StartBlink02+0x8>
	...

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 fa89 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40001000 	.word	0x40001000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_MspInit+0x4c>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6613      	str	r3, [r2, #96]	; 0x60
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_MspInit+0x4c>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x4c>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6593      	str	r3, [r2, #88]	; 0x58
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 fb33 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0a2      	sub	sp, #136	; 0x88
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	2254      	movs	r2, #84	; 0x54
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f006 f857 	bl	8006934 <memset>
  if(hi2c->Instance==I2C1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a4f      	ldr	r2, [pc, #316]	; (80009c8 <HAL_I2C_MspInit+0x168>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d13a      	bne.n	8000906 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fd13 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008a8:	f7ff ffac 	bl	8000804 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	4a46      	ldr	r2, [pc, #280]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b8:	4b44      	ldr	r3, [pc, #272]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ca:	2312      	movs	r3, #18
 80008cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d8:	2304      	movs	r3, #4
 80008da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f000 fb90 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f6:	6593      	str	r3, [r2, #88]	; 0x58
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000904:	e05c      	b.n	80009c0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_I2C_MspInit+0x170>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d157      	bne.n	80009c0 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000916:	2300      	movs	r3, #0
 8000918:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fcd2 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800092a:	f7ff ff6b 	bl	8000804 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000970:	2304      	movs	r3, #4
 8000972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fb44 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000984:	2310      	movs	r3, #16
 8000986:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000996:	2304      	movs	r3, #4
 8000998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <HAL_I2C_MspInit+0x174>)
 80009a4:	f000 fb32 	bl	800100c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80009ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b2:	6593      	str	r3, [r2, #88]	; 0x58
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_I2C_MspInit+0x16c>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3788      	adds	r7, #136	; 0x88
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40005c00 	.word	0x40005c00
 80009d4:	48000400 	.word	0x48000400

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0a0      	sub	sp, #128	; 0x80
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	2254      	movs	r2, #84	; 0x54
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 ff9b 	bl	8006934 <memset>
  if(huart->Instance==USART1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a41      	ldr	r2, [pc, #260]	; (8000b08 <HAL_UART_MspInit+0x130>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13e      	bne.n	8000a86 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fc57 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff fef0 	bl	8000804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a54:	23c0      	movs	r3, #192	; 0xc0
 8000a56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a64:	2307      	movs	r3, #7
 8000a66:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4828      	ldr	r0, [pc, #160]	; (8000b10 <HAL_UART_MspInit+0x138>)
 8000a70:	f000 facc 	bl	800100c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2105      	movs	r1, #5
 8000a78:	2025      	movs	r0, #37	; 0x25
 8000a7a:	f000 fa1d 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a7e:	2025      	movs	r0, #37	; 0x25
 8000a80:	f000 fa36 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	e03b      	b.n	8000afe <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d136      	bne.n	8000afe <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fc13 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000aa8:	f7ff feac 	bl	8000804 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_UART_MspInit+0x134>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000adc:	230c      	movs	r3, #12
 8000ade:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aec:	2307      	movs	r3, #7
 8000aee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fa87 	bl	800100c <HAL_GPIO_Init>
}
 8000afe:	bf00      	nop
 8000b00:	3780      	adds	r7, #128	; 0x80
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	40004400 	.word	0x40004400

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a33      	ldr	r2, [pc, #204]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3e:	f107 0210 	add.w	r2, r7, #16
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fb2b 	bl	80021a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d103      	bne.n	8000b60 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b58:	f001 faf8 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8000b5c:	6378      	str	r0, [r7, #52]	; 0x34
 8000b5e:	e004      	b.n	8000b6a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b60:	f001 faf4 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_InitTick+0xe4>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <HAL_InitTick+0xec>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <HAL_InitTick+0xe8>)
 8000ba0:	f001 fe7a 	bl	8002898 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d11b      	bne.n	8000bea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bb2:	4813      	ldr	r0, [pc, #76]	; (8000c00 <HAL_InitTick+0xe8>)
 8000bb4:	f001 fed2 	bl	800295c <HAL_TIM_Base_Start_IT>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d111      	bne.n	8000bea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc6:	2036      	movs	r0, #54	; 0x36
 8000bc8:	f000 f992 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d808      	bhi.n	8000be4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	2036      	movs	r0, #54	; 0x36
 8000bd8:	f000 f96e 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_InitTick+0xf0>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e002      	b.n	8000bea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	20000248 	.word	0x20000248
 8000c04:	40001000 	.word	0x40001000
 8000c08:	20000004 	.word	0x20000004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <USART1_IRQHandler+0x10>)
 8000c3e:	f002 f8f9 	bl	8002e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000138 	.word	0x20000138

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f001 fed7 	bl	8002a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000248 	.word	0x20000248

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c88:	f7ff ffea 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	; (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f005 fe0b 	bl	80068cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff fc0d 	bl	80004d4 <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cc8:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 8000ccc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cd0:	20001c68 	.word	0x20001c68

08000cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_IRQHandler>

08000cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8de 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f7ff ff16 	bl	8000b18 <HAL_InitTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	e001      	b.n	8000cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf8:	f7ff fd8a 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000294 	.word	0x20000294

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000294 	.word	0x20000294

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d008      	beq.n	8000f36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e022      	b.n	8000f7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020e 	bic.w	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f003 021c 	and.w	r2, r3, #28
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d005      	beq.n	8000fac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e029      	b.n	8001000 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 020e 	bic.w	r2, r2, #14
 8000fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	f003 021c 	and.w	r2, r3, #28
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	4798      	blx	r3
    }
  }
  return status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e148      	b.n	80012ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 813a 	beq.w	80012a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 0201 	and.w	r2, r3, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8094 	beq.w	80012a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6613      	str	r3, [r2, #96]	; 0x60
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1d4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1d0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1cc>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011d8:	2307      	movs	r3, #7
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f aeaf 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e081      	b.n	80013f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff faaa 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e006      	b.n	8001368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d104      	bne.n	800137a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69d9      	ldr	r1, [r3, #28]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2220      	movs	r2, #32
 80013e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b20      	cmp	r3, #32
 8001412:	d138      	bne.n	8001486 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800141e:	2302      	movs	r3, #2
 8001420:	e032      	b.n	8001488 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2224      	movs	r2, #36	; 0x24
 800142e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001450:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001486:	2302      	movs	r3, #2
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d139      	bne.n	800151e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e033      	b.n	8001520 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2220      	movs	r2, #32
 800150e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800151e:	2302      	movs	r3, #2
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <HAL_PWREx_GetVoltageRange+0x18>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40007000 	.word	0x40007000

08001548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001556:	d130      	bne.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001564:	d038      	beq.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2232      	movs	r2, #50	; 0x32
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158c:	e002      	b.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3b01      	subs	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a0:	d102      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f2      	bne.n	800158e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b4:	d110      	bne.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e00f      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d007      	beq.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40007000 	.word	0x40007000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f000 bc02 	b.w	8001e0c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001608:	4b96      	ldr	r3, [pc, #600]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001612:	4b94      	ldr	r3, [pc, #592]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80e4 	beq.w	80017f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <HAL_RCC_OscConfig+0x4c>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	f040 808b 	bne.w	800174e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b01      	cmp	r3, #1
 800163c:	f040 8087 	bne.w	800174e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x64>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e3d9      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1a      	ldr	r2, [r3, #32]
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_RCC_OscConfig+0x7e>
 8001668:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001670:	e005      	b.n	800167e <HAL_RCC_OscConfig+0x8a>
 8001672:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167e:	4293      	cmp	r3, r2
 8001680:	d223      	bcs.n	80016ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fdbe 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e3ba      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a72      	ldr	r2, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	496d      	ldr	r1, [pc, #436]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4968      	ldr	r1, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e025      	b.n	8001716 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b66      	ldr	r3, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a65      	ldr	r2, [pc, #404]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4960      	ldr	r1, [pc, #384]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	495b      	ldr	r1, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fd7e 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e37a      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001716:	f000 fc81 	bl	800201c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b51      	ldr	r3, [pc, #324]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4950      	ldr	r1, [pc, #320]	; (8001868 <HAL_RCC_OscConfig+0x274>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_RCC_OscConfig+0x278>)
 8001734:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001736:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f9ec 	bl	8000b18 <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d052      	beq.n	80017f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	e35e      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d032      	beq.n	80017bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a42      	ldr	r2, [pc, #264]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001762:	f7ff fae5 	bl	8000d30 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800176a:	f7ff fae1 	bl	8000d30 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e347      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a35      	ldr	r2, [pc, #212]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4930      	ldr	r1, [pc, #192]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	492b      	ldr	r1, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
 80017ba:	e01a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fab2 	bl	8000d30 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d0:	f7ff faae 	bl	8000d30 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e314      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1dc>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d073      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x21c>
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d10e      	bne.n	8001828 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d063      	beq.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d15f      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e2f1      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x24c>
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e025      	b.n	800188c <HAL_RCC_OscConfig+0x298>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d114      	bne.n	8001874 <HAL_RCC_OscConfig+0x280>
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a02      	ldr	r2, [pc, #8]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e013      	b.n	800188c <HAL_RCC_OscConfig+0x298>
 8001864:	40021000 	.word	0x40021000
 8001868:	08006b50 	.word	0x08006b50
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004
 8001874:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a9f      	ldr	r2, [pc, #636]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a9c      	ldr	r2, [pc, #624]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fa4c 	bl	8000d30 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fa48 	bl	8000d30 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e2ae      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x2a8>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa38 	bl	8000d30 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fa34 	bl	8000d30 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e29a      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2d0>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d060      	beq.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_OscConfig+0x310>
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d119      	bne.n	8001932 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d116      	bne.n	8001932 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001904:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x328>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e277      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	4973      	ldr	r1, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001930:	e040      	b.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d023      	beq.n	8001982 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff f9f3 	bl	8000d30 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff f9ef 	bl	8000d30 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e255      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196c:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	495f      	ldr	r1, [pc, #380]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5c      	ldr	r2, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff f9cf 	bl	8000d30 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff f9cb 	bl	8000d30 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e231      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d03c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	4a4a      	ldr	r2, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f9aa 	bl	8000d30 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f9a6 	bl	8000d30 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e20c      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ef      	beq.n	80019e0 <HAL_RCC_OscConfig+0x3ec>
 8001a00:	e01b      	b.n	8001a3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a08:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff f98d 	bl	8000d30 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f989 	bl	8000d30 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1ef      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ef      	bne.n	8001a1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80a6 	beq.w	8001b94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	; 0x58
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x508>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d118      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_RCC_OscConfig+0x508>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x508>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f950 	bl	8000d30 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7ff f94c 	bl	8000d30 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1b2      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x508>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_RCC_OscConfig+0x4d8>
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aca:	e029      	b.n	8001b20 <HAL_RCC_OscConfig+0x52c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_OscConfig+0x50c>
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af4:	e014      	b.n	8001b20 <HAL_RCC_OscConfig+0x52c>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40007000 	.word	0x40007000
 8001b00:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b06:	4a99      	ldr	r2, [pc, #612]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a95      	ldr	r2, [pc, #596]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d016      	beq.n	8001b56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff f902 	bl	8000d30 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b30:	f7ff f8fe 	bl	8000d30 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e162      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ed      	beq.n	8001b30 <HAL_RCC_OscConfig+0x53c>
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff f8eb 	bl	8000d30 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7ff f8e7 	bl	8000d30 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e14b      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ed      	bne.n	8001b5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba8:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bae:	4a6f      	ldr	r2, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f8ba 	bl	8000d30 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc0:	f7ff f8b6 	bl	8000d30 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e11c      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd2:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ef      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x5cc>
 8001be0:	e01b      	b.n	8001c1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001be2:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f89d 	bl	8000d30 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bfa:	f7ff f899 	bl	8000d30 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0ff      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c0c:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ef      	bne.n	8001bfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80f3 	beq.w	8001e0a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	f040 80c9 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0203 	and.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d12c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d123      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d11b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d113      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	3b01      	subs	r3, #1
 8001c82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d109      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d06b      	beq.n	8001d74 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d062      	beq.n	8001d68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0ac      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cbe:	f7ff f837 	bl	8000d30 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f833 	bl	8000d30 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e099      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_RCC_OscConfig+0x77c>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cfe:	0212      	lsls	r2, r2, #8
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d06:	0852      	lsrs	r2, r2, #1
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	0552      	lsls	r2, r2, #21
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0652      	lsls	r2, r2, #25
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d1e:	06d2      	lsls	r2, r2, #27
 8001d20:	430a      	orrs	r2, r1
 8001d22:	4912      	ldr	r1, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d40:	f7fe fff6 	bl	8000d30 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fff2 	bl	8000d30 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e058      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_OscConfig+0x778>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d66:	e050      	b.n	8001e0a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e04f      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d144      	bne.n	8001e0a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d98:	f7fe ffca 	bl	8000d30 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe ffc6 	bl	8000d30 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e02c      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x7ac>
 8001dbe:	e024      	b.n	8001e0a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d01f      	beq.n	8001e06 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ffad 	bl	8000d30 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ffa9 	bl	8000d30 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e00f      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4905      	ldr	r1, [pc, #20]	; (8001e14 <HAL_RCC_OscConfig+0x820>)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x824>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e001      	b.n	8001e0a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	feeefffc 	.word	0xfeeefffc

08001e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0e7      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4970      	ldr	r1, [pc, #448]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0cf      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d908      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4960      	ldr	r1, [pc, #384]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04c      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d121      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0a6      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e09a      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed2:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e08e      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e086      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4943      	ldr	r1, [pc, #268]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff14 	bl	8000d30 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe ff10 	bl	8000d30 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e06e      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d208      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	492b      	ldr	r1, [pc, #172]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d210      	bcs.n	8001f92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 0207 	bic.w	r2, r3, #7
 8001f78:	4923      	ldr	r1, [pc, #140]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_ClockConfig+0x1ec>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e036      	b.n	8002000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4918      	ldr	r1, [pc, #96]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4910      	ldr	r1, [pc, #64]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd0:	f000 f824 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	490b      	ldr	r1, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1fc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fd8f 	bl	8000b18 <HAL_InitTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	08006b50 	.word	0x08006b50
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d121      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d11e      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002050:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <HAL_RCC_GetSysClockFreq+0x10c>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d102      	bne.n	800209a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_RCC_GetSysClockFreq+0x110>)
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e004      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_RCC_GetSysClockFreq+0x114>)
 80020a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d134      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d003      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0xac>
 80020c0:	e005      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCC_GetSysClockFreq+0x110>)
 80020c4:	617b      	str	r3, [r7, #20]
      break;
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e002      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	617b      	str	r3, [r7, #20]
      break;
 80020d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	3301      	adds	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	fb03 f202 	mul.w	r2, r3, r2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	0e5b      	lsrs	r3, r3, #25
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	3301      	adds	r3, #1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002114:	69bb      	ldr	r3, [r7, #24]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	08006b68 	.word	0x08006b68
 800212c:	00f42400 	.word	0x00f42400
 8002130:	007a1200 	.word	0x007a1200

08002134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_GetHCLKFreq+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002150:	f7ff fff0 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08006b60 	.word	0x08006b60

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800217c:	f7ff ffda 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0adb      	lsrs	r3, r3, #11
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4904      	ldr	r1, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08006b60 	.word	0x08006b60

080021a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	220f      	movs	r2, #15
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RCC_GetClockConfig+0x60>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0207 	and.w	r2, r3, #7
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002220:	f7ff f984 	bl	800152c <HAL_PWREx_GetVoltageRange>
 8002224:	6178      	str	r0, [r7, #20]
 8002226:	e014      	b.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002240:	f7ff f974 	bl	800152c <HAL_PWREx_GetVoltageRange>
 8002244:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002258:	d10b      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d919      	bls.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2ba0      	cmp	r3, #160	; 0xa0
 8002264:	d902      	bls.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002266:	2302      	movs	r3, #2
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e013      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e010      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d902      	bls.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002278:	2303      	movs	r3, #3
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e00a      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d102      	bne.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e004      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d101      	bne.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 0207 	bic.w	r2, r3, #7
 800229c:	4909      	ldr	r1, [pc, #36]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022d0:	2300      	movs	r3, #0
 80022d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d4:	2300      	movs	r3, #0
 80022d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d031      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ec:	d01a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022f2:	d814      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022fc:	d10f      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230a:	e00c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f9ce 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e003      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	74fb      	strb	r3, [r7, #19]
      break;
 8002322:	e000      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b51      	ldr	r3, [pc, #324]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	494e      	ldr	r1, [pc, #312]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002342:	e001      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 809e 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002398:	f7fe fcca 	bl	8000d30 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fcc6 	bl	8000d30 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d902      	bls.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	74fb      	strb	r3, [r7, #19]
        break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15a      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01e      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d019      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fc86 	bl	8000d30 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	e00b      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fc82 	bl	8000d30 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d902      	bls.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	74fb      	strb	r3, [r7, #19]
            break;
 800243e:	e006      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ec      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10b      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	4904      	ldr	r1, [pc, #16]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800246a:	e009      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
 8002470:	e006      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002480:	7c7b      	ldrb	r3, [r7, #17]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4a89      	ldr	r2, [pc, #548]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800249e:	4b84      	ldr	r3, [pc, #528]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f023 0203 	bic.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4980      	ldr	r1, [pc, #512]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f023 020c 	bic.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	4978      	ldr	r1, [pc, #480]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	496f      	ldr	r1, [pc, #444]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	4967      	ldr	r1, [pc, #412]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002526:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	495e      	ldr	r1, [pc, #376]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	4956      	ldr	r1, [pc, #344]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256a:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	494d      	ldr	r1, [pc, #308]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d028      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4945      	ldr	r1, [pc, #276]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025aa:	d106      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a3f      	ldr	r2, [pc, #252]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]
 80025b8:	e011      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c2:	d10c      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f872 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	492d      	ldr	r1, [pc, #180]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002608:	d106      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002614:	60d3      	str	r3, [r2, #12]
 8002616:	e011      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f843 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002656:	4916      	ldr	r1, [pc, #88]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002666:	d10c      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	2102      	movs	r1, #2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f820 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026c2:	4b74      	ldr	r3, [pc, #464]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d018      	beq.n	8002700 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ce:	4b71      	ldr	r3, [pc, #452]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0203 	and.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
       ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e6:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
       ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d047      	beq.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e044      	b.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d018      	beq.n	800273a <RCCEx_PLLSAI1_Config+0x86>
 8002708:	2b03      	cmp	r3, #3
 800270a:	d825      	bhi.n	8002758 <RCCEx_PLLSAI1_Config+0xa4>
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <RCCEx_PLLSAI1_Config+0x62>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d009      	beq.n	8002728 <RCCEx_PLLSAI1_Config+0x74>
 8002714:	e020      	b.n	8002758 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002716:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11d      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002726:	e01a      	b.n	800275e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002728:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002738:	e013      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800273a:	4b56      	ldr	r3, [pc, #344]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002756:	e006      	b.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e004      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e002      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
 8002764:	e000      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002766:	bf00      	nop
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	430b      	orrs	r3, r1
 8002784:	4943      	ldr	r1, [pc, #268]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d17c      	bne.n	800288a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800279a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fac8 	bl	8000d30 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027a2:	e009      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a4:	f7fe fac4 	bl	8000d30 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	73fb      	strb	r3, [r7, #15]
        break;
 80027b6:	e005      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ef      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d15f      	bne.n	800288a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d110      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68d2      	ldr	r2, [r2, #12]
 80027e6:	06d2      	lsls	r2, r2, #27
 80027e8:	430a      	orrs	r2, r1
 80027ea:	492a      	ldr	r1, [pc, #168]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	610b      	str	r3, [r1, #16]
 80027f0:	e027      	b.n	8002842 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d112      	bne.n	800281e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6892      	ldr	r2, [r2, #8]
 8002808:	0211      	lsls	r1, r2, #8
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6912      	ldr	r2, [r2, #16]
 800280e:	0852      	lsrs	r2, r2, #1
 8002810:	3a01      	subs	r2, #1
 8002812:	0552      	lsls	r2, r2, #21
 8002814:	430a      	orrs	r2, r1
 8002816:	491f      	ldr	r1, [pc, #124]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	610b      	str	r3, [r1, #16]
 800281c:	e011      	b.n	8002842 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002826:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6892      	ldr	r2, [r2, #8]
 800282e:	0211      	lsls	r1, r2, #8
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6952      	ldr	r2, [r2, #20]
 8002834:	0852      	lsrs	r2, r2, #1
 8002836:	3a01      	subs	r2, #1
 8002838:	0652      	lsls	r2, r2, #25
 800283a:	430a      	orrs	r2, r1
 800283c:	4915      	ldr	r1, [pc, #84]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800284c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fa6f 	bl	8000d30 <HAL_GetTick>
 8002852:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002854:	e009      	b.n	800286a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002856:	f7fe fa6b 	bl	8000d30 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d902      	bls.n	800286a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	73fb      	strb	r3, [r7, #15]
          break;
 8002868:	e005      	b.n	8002876 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ef      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d106      	bne.n	800288a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e049      	b.n	800293e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f841 	bl	8002946 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 f9dc 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e03b      	b.n	80029ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x4e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d004      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x4e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_TIM_Base_Start_IT+0xa0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d115      	bne.n	80029d6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_TIM_Base_Start_IT+0xa4>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d015      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x8c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d011      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	e008      	b.n	80029e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e000      	b.n	80029ea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40014000 	.word	0x40014000
 8002a00:	00010007 	.word	0x00010007

08002a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0202 	mvn.w	r2, #2
 8002a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f905 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8f7 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f908 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0204 	mvn.w	r2, #4
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8db 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8cd 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8de 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0208 	mvn.w	r2, #8
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8b1 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8a3 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8b4 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0210 	mvn.w	r2, #16
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2208      	movs	r2, #8
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f887 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f879 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f88a 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0201 	mvn.w	r2, #1
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd fe2c 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8de 	bl	8002d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8d1 	bl	8002d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d10e      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f838 	bl	8002c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d10e      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d107      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0220 	mvn.w	r2, #32
 8002c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f891 	bl	8002d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <TIM_Base_SetConfig+0xbc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0x20>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d108      	bne.n	8002cc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <TIM_Base_SetConfig+0xbc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_Base_SetConfig+0x52>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0x52>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0x52>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <TIM_Base_SetConfig+0xc4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <TIM_Base_SetConfig+0xbc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0xa0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <TIM_Base_SetConfig+0xc4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d103      	bne.n	8002d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	615a      	str	r2, [r3, #20]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40014000 	.word	0x40014000
 8002d58:	40014400 	.word	0x40014400

08002d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e040      	b.n	8002e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fe0c 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fb2e 	bl	8003438 <UART_SetConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e022      	b.n	8002e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fd4e 	bl	8003890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fdd5 	bl	80039d4 <UART_CheckIdleState>
 8002e2a:	4603      	mov	r3, r0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b0ba      	sub	sp, #232	; 0xe8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e62:	4013      	ands	r3, r2
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d115      	bne.n	8002e9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00f      	beq.n	8002e9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 82a6 	beq.w	80033de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
      }
      return;
 8002e9a:	e2a0      	b.n	80033de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8117 	beq.w	80030d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eb6:	4b85      	ldr	r3, [pc, #532]	; (80030cc <HAL_UART_IRQHandler+0x298>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 810a 	beq.w	80030d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xbc>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_UART_IRQHandler+0xec>
 8002efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f16:	f043 0204 	orr.w	r2, r3, #4
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d011      	beq.n	8002f50 <HAL_UART_IRQHandler+0x11c>
 8002f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f82:	f043 0208 	orr.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <HAL_UART_IRQHandler+0x18a>
 8002f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00c      	beq.n	8002fbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 820c 	beq.w	80033e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d005      	beq.n	8003016 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04f      	beq.n	80030b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fde9 	bl	8003bee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d141      	bne.n	80030ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800306e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1d9      	bne.n	800302a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <HAL_UART_IRQHandler+0x29c>)
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd ff7c 	bl	8000f88 <HAL_DMA_Abort_IT>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e00f      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9b0 	bl	800340c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e00b      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9ac 	bl	800340c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	e007      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9a8 	bl	800340c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030c4:	e18d      	b.n	80033e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c6:	bf00      	nop
    return;
 80030c8:	e18b      	b.n	80033e2 <HAL_UART_IRQHandler+0x5ae>
 80030ca:	bf00      	nop
 80030cc:	04000120 	.word	0x04000120
 80030d0:	08003cb5 	.word	0x08003cb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 8146 	bne.w	800336a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 813f 	beq.w	800336a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8138 	beq.w	800336a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2210      	movs	r2, #16
 8003100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	f040 80b4 	bne.w	800327a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800311e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 815f 	beq.w	80033e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800312e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003132:	429a      	cmp	r2, r3
 8003134:	f080 8157 	bcs.w	80033e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800313e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8085 	bne.w	800325e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1da      	bne.n	8003154 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3308      	adds	r3, #8
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e1      	bne.n	800319e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800320c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003240:	65bb      	str	r3, [r7, #88]	; 0x58
 8003242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e4      	bne.n	800321e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fe57 	bl	8000f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326a:	b29b      	uxth	r3, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8d4 	bl	8003420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003278:	e0b5      	b.n	80033e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003286:	b29b      	uxth	r3, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80a7 	beq.w	80033ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800329c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a2 	beq.w	80033ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e4      	bne.n	80032a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	623b      	str	r3, [r7, #32]
   return(result);
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3308      	adds	r3, #8
 80032fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003300:	633a      	str	r2, [r7, #48]	; 0x30
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e3      	bne.n	80032dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	617b      	str	r3, [r7, #20]
   return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e4      	bne.n	8003326 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f85c 	bl	8003420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003368:	e03f      	b.n	80033ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <HAL_UART_IRQHandler+0x560>
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800338a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fcd1 	bl	8003d34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003392:	e02d      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
    }
    return;
 80033bc:	e017      	b.n	80033ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
 80033ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fc82 	bl	8003ce0 <UART_EndTransmit_IT>
    return;
 80033dc:	e008      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033de:	bf00      	nop
 80033e0:	e006      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033f0:	37e8      	adds	r7, #232	; 0xe8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4313      	orrs	r3, r2
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4bb4      	ldr	r3, [pc, #720]	; (8003738 <UART_SetConfig+0x300>)
 8003468:	4013      	ands	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	430b      	orrs	r3, r1
 8003472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4aa9      	ldr	r2, [pc, #676]	; (800373c <UART_SetConfig+0x304>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4313      	orrs	r3, r2
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	430a      	orrs	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4aa0      	ldr	r2, [pc, #640]	; (8003740 <UART_SetConfig+0x308>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d126      	bne.n	8003510 <UART_SetConfig+0xd8>
 80034c2:	4ba0      	ldr	r3, [pc, #640]	; (8003744 <UART_SetConfig+0x30c>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d81b      	bhi.n	8003508 <UART_SetConfig+0xd0>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0xa0>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003501 	.word	0x08003501
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e080      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80034f0:	2302      	movs	r3, #2
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e07c      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80034f8:	2304      	movs	r3, #4
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e078      	b.n	80035f2 <UART_SetConfig+0x1ba>
 8003500:	2308      	movs	r3, #8
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e074      	b.n	80035f2 <UART_SetConfig+0x1ba>
 8003508:	2310      	movs	r3, #16
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e070      	b.n	80035f2 <UART_SetConfig+0x1ba>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8c      	ldr	r2, [pc, #560]	; (8003748 <UART_SetConfig+0x310>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d138      	bne.n	800358c <UART_SetConfig+0x154>
 800351a:	4b8a      	ldr	r3, [pc, #552]	; (8003744 <UART_SetConfig+0x30c>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d82d      	bhi.n	8003584 <UART_SetConfig+0x14c>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0xf8>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003565 	.word	0x08003565
 8003534:	08003585 	.word	0x08003585
 8003538:	08003585 	.word	0x08003585
 800353c:	08003585 	.word	0x08003585
 8003540:	08003575 	.word	0x08003575
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
 8003550:	0800356d 	.word	0x0800356d
 8003554:	08003585 	.word	0x08003585
 8003558:	08003585 	.word	0x08003585
 800355c:	08003585 	.word	0x08003585
 8003560:	0800357d 	.word	0x0800357d
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e042      	b.n	80035f2 <UART_SetConfig+0x1ba>
 800356c:	2302      	movs	r3, #2
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e03e      	b.n	80035f2 <UART_SetConfig+0x1ba>
 8003574:	2304      	movs	r3, #4
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e03a      	b.n	80035f2 <UART_SetConfig+0x1ba>
 800357c:	2308      	movs	r3, #8
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e036      	b.n	80035f2 <UART_SetConfig+0x1ba>
 8003584:	2310      	movs	r3, #16
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e032      	b.n	80035f2 <UART_SetConfig+0x1ba>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <UART_SetConfig+0x304>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12a      	bne.n	80035ec <UART_SetConfig+0x1b4>
 8003596:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <UART_SetConfig+0x30c>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a4:	d01a      	beq.n	80035dc <UART_SetConfig+0x1a4>
 80035a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035aa:	d81b      	bhi.n	80035e4 <UART_SetConfig+0x1ac>
 80035ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b0:	d00c      	beq.n	80035cc <UART_SetConfig+0x194>
 80035b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b6:	d815      	bhi.n	80035e4 <UART_SetConfig+0x1ac>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <UART_SetConfig+0x18c>
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c0:	d008      	beq.n	80035d4 <UART_SetConfig+0x19c>
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x1ac>
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e012      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e00e      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035d4:	2304      	movs	r3, #4
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e00a      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035dc:	2308      	movs	r3, #8
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e006      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035e4:	2310      	movs	r3, #16
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e002      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035ec:	2310      	movs	r3, #16
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a51      	ldr	r2, [pc, #324]	; (800373c <UART_SetConfig+0x304>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d17a      	bne.n	80036f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003600:	2b08      	cmp	r3, #8
 8003602:	d824      	bhi.n	800364e <UART_SetConfig+0x216>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0x1d4>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003631 	.word	0x08003631
 8003610:	0800364f 	.word	0x0800364f
 8003614:	08003639 	.word	0x08003639
 8003618:	0800364f 	.word	0x0800364f
 800361c:	0800363f 	.word	0x0800363f
 8003620:	0800364f 	.word	0x0800364f
 8003624:	0800364f 	.word	0x0800364f
 8003628:	0800364f 	.word	0x0800364f
 800362c:	08003647 	.word	0x08003647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003630:	f7fe fd8c 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003634:	61f8      	str	r0, [r7, #28]
        break;
 8003636:	e010      	b.n	800365a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <UART_SetConfig+0x314>)
 800363a:	61fb      	str	r3, [r7, #28]
        break;
 800363c:	e00d      	b.n	800365a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363e:	f7fe fced 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8003642:	61f8      	str	r0, [r7, #28]
        break;
 8003644:	e009      	b.n	800365a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	61fb      	str	r3, [r7, #28]
        break;
 800364c:	e005      	b.n	800365a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8107 	beq.w	8003870 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	429a      	cmp	r2, r3
 8003670:	d305      	bcc.n	800367e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	429a      	cmp	r2, r3
 800367c:	d903      	bls.n	8003686 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003684:	e0f4      	b.n	8003870 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2200      	movs	r2, #0
 800368a:	461c      	mov	r4, r3
 800368c:	4615      	mov	r5, r2
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	022b      	lsls	r3, r5, #8
 8003698:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800369c:	0222      	lsls	r2, r4, #8
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	6849      	ldr	r1, [r1, #4]
 80036a2:	0849      	lsrs	r1, r1, #1
 80036a4:	2000      	movs	r0, #0
 80036a6:	4688      	mov	r8, r1
 80036a8:	4681      	mov	r9, r0
 80036aa:	eb12 0a08 	adds.w	sl, r2, r8
 80036ae:	eb43 0b09 	adc.w	fp, r3, r9
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c0:	4650      	mov	r0, sl
 80036c2:	4659      	mov	r1, fp
 80036c4:	f7fc fd84 	bl	80001d0 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d6:	d308      	bcc.n	80036ea <UART_SetConfig+0x2b2>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036de:	d204      	bcs.n	80036ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	e0c2      	b.n	8003870 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036f0:	e0be      	b.n	8003870 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	d16a      	bne.n	80037d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80036fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003700:	2b08      	cmp	r3, #8
 8003702:	d834      	bhi.n	800376e <UART_SetConfig+0x336>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x2d4>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003731 	.word	0x08003731
 8003710:	08003751 	.word	0x08003751
 8003714:	08003759 	.word	0x08003759
 8003718:	0800376f 	.word	0x0800376f
 800371c:	0800375f 	.word	0x0800375f
 8003720:	0800376f 	.word	0x0800376f
 8003724:	0800376f 	.word	0x0800376f
 8003728:	0800376f 	.word	0x0800376f
 800372c:	08003767 	.word	0x08003767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7fe fd0c 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003734:	61f8      	str	r0, [r7, #28]
        break;
 8003736:	e020      	b.n	800377a <UART_SetConfig+0x342>
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	40008000 	.word	0x40008000
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	40004400 	.word	0x40004400
 800374c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003750:	f7fe fd12 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8003754:	61f8      	str	r0, [r7, #28]
        break;
 8003756:	e010      	b.n	800377a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <UART_SetConfig+0x454>)
 800375a:	61fb      	str	r3, [r7, #28]
        break;
 800375c:	e00d      	b.n	800377a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe fc5d 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8003762:	61f8      	str	r0, [r7, #28]
        break;
 8003764:	e009      	b.n	800377a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	61fb      	str	r3, [r7, #28]
        break;
 800376c:	e005      	b.n	800377a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d077      	beq.n	8003870 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005a      	lsls	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d916      	bls.n	80037ca <UART_SetConfig+0x392>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a2:	d212      	bcs.n	80037ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f023 030f 	bic.w	r3, r3, #15
 80037ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	4313      	orrs	r3, r2
 80037be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	8afa      	ldrh	r2, [r7, #22]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e052      	b.n	8003870 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037d0:	e04e      	b.n	8003870 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d827      	bhi.n	800382a <UART_SetConfig+0x3f2>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x3a8>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003805 	.word	0x08003805
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800382b 	.word	0x0800382b
 80037f0:	0800381b 	.word	0x0800381b
 80037f4:	0800382b 	.word	0x0800382b
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	0800382b 	.word	0x0800382b
 8003800:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7fe fca2 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003808:	61f8      	str	r0, [r7, #28]
        break;
 800380a:	e014      	b.n	8003836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7fe fcb4 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8003810:	61f8      	str	r0, [r7, #28]
        break;
 8003812:	e010      	b.n	8003836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <UART_SetConfig+0x454>)
 8003816:	61fb      	str	r3, [r7, #28]
        break;
 8003818:	e00d      	b.n	8003836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7fe fbff 	bl	800201c <HAL_RCC_GetSysClockFreq>
 800381e:	61f8      	str	r0, [r7, #28]
        break;
 8003820:	e009      	b.n	8003836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	61fb      	str	r3, [r7, #28]
        break;
 8003828:	e005      	b.n	8003836 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003834:	bf00      	nop
    }

    if (pclk != 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d019      	beq.n	8003870 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	085a      	lsrs	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	441a      	add	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d909      	bls.n	800386a <UART_SetConfig+0x432>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d205      	bcs.n	800386a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	e002      	b.n	8003870 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800387c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	00f42400 	.word	0x00f42400

08003890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398e:	d10a      	bne.n	80039a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e4:	f7fd f9a4 	bl	8000d30 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d10e      	bne.n	8003a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f82d 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e023      	b.n	8003a5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d10e      	bne.n	8003a42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f817 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e00d      	b.n	8003a5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b09c      	sub	sp, #112	; 0x70
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	e0a5      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	f000 80a1 	beq.w	8003bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7fd f955 	bl	8000d30 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d13e      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003aac:	667b      	str	r3, [r7, #100]	; 0x64
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aea:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e067      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d04f      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d147      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e6      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b90:	623a      	str	r2, [r7, #32]
 8003b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	69f9      	ldr	r1, [r7, #28]
 8003b96:	6a3a      	ldr	r2, [r7, #32]
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e5      	bne.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f43f af4a 	beq.w	8003a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3770      	adds	r7, #112	; 0x70
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b095      	sub	sp, #84	; 0x54
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c14:	643b      	str	r3, [r7, #64]	; 0x40
 8003c16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e6      	bne.n	8003bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3308      	adds	r3, #8
 8003c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d118      	bne.n	8003c96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 0310 	bic.w	r3, r3, #16
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e6      	bne.n	8003c64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ca8:	bf00      	nop
 8003caa:	3754      	adds	r7, #84	; 0x54
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff fb9a 	bl	800340c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e6      	bne.n	8003ce8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fb66 	bl	80033f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <__NVIC_SetPriority>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db0a      	blt.n	8003d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	490c      	ldr	r1, [pc, #48]	; (8003d94 <__NVIC_SetPriority+0x4c>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d70:	e00a      	b.n	8003d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <__NVIC_SetPriority+0x50>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	0112      	lsls	r2, r2, #4
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	440b      	add	r3, r1
 8003d86:	761a      	strb	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000e100 	.word	0xe000e100
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <SysTick_Handler+0x1c>)
 8003da2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003da4:	f001 fd28 	bl	80057f8 <xTaskGetSchedulerState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003dae:	f002 fb13 	bl	80063d8 <xPortSysTickHandler>
  }
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010

08003dbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f06f 0004 	mvn.w	r0, #4
 8003dc6:	f7ff ffbf 	bl	8003d48 <__NVIC_SetPriority>
#endif
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd6:	f3ef 8305 	mrs	r3, IPSR
 8003dda:	603b      	str	r3, [r7, #0]
  return(result);
 8003ddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003de2:	f06f 0305 	mvn.w	r3, #5
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	e00c      	b.n	8003e04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <osKernelInitialize+0x44>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <osKernelInitialize+0x44>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e002      	b.n	8003e04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e04:	687b      	ldr	r3, [r7, #4]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000298 	.word	0x20000298

08003e18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e1e:	f3ef 8305 	mrs	r3, IPSR
 8003e22:	603b      	str	r3, [r7, #0]
  return(result);
 8003e24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e2a:	f06f 0305 	mvn.w	r3, #5
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e010      	b.n	8003e54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <osKernelStart+0x48>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d109      	bne.n	8003e4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e3a:	f7ff ffbf 	bl	8003dbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <osKernelStart+0x48>)
 8003e40:	2202      	movs	r2, #2
 8003e42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e44:	f001 f87c 	bl	8004f40 <vTaskStartScheduler>
      stat = osOK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e002      	b.n	8003e54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000298 	.word	0x20000298

08003e64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	; 0x38
 8003e68:	af04      	add	r7, sp, #16
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e74:	f3ef 8305 	mrs	r3, IPSR
 8003e78:	617b      	str	r3, [r7, #20]
  return(result);
 8003e7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d17e      	bne.n	8003f7e <osThreadNew+0x11a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d07b      	beq.n	8003f7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e8a:	2318      	movs	r3, #24
 8003e8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d045      	beq.n	8003f2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <osThreadNew+0x48>
        name = attr->name;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <osThreadNew+0x6e>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b38      	cmp	r3, #56	; 0x38
 8003ec4:	d805      	bhi.n	8003ed2 <osThreadNew+0x6e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <osThreadNew+0x72>
        return (NULL);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e054      	b.n	8003f80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <osThreadNew+0xa8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2bbb      	cmp	r3, #187	; 0xbb
 8003ef4:	d90a      	bls.n	8003f0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <osThreadNew+0xa8>
        mem = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e010      	b.n	8003f2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <osThreadNew+0xca>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d108      	bne.n	8003f2e <osThreadNew+0xca>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <osThreadNew+0xca>
          mem = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	e001      	b.n	8003f2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d110      	bne.n	8003f56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f3c:	9202      	str	r2, [sp, #8]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fe0c 	bl	8004b68 <xTaskCreateStatic>
 8003f50:	4603      	mov	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e013      	b.n	8003f7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d110      	bne.n	8003f7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fe57 	bl	8004c22 <xTaskCreate>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <osThreadNew+0x11a>
            hTask = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f7e:	693b      	ldr	r3, [r7, #16]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f90:	f3ef 8305 	mrs	r3, IPSR
 8003f94:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <osDelay+0x1c>
    stat = osErrorISR;
 8003f9c:	f06f 0305 	mvn.w	r3, #5
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e007      	b.n	8003fb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 ff92 	bl	8004ed8 <vTaskDelay>
    }
  }

  return (stat);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a07      	ldr	r2, [pc, #28]	; (8003fec <vApplicationGetIdleTaskMemory+0x2c>)
 8003fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8003fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000029c 	.word	0x2000029c
 8003ff0:	20000358 	.word	0x20000358

08003ff4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a07      	ldr	r2, [pc, #28]	; (8004020 <vApplicationGetTimerTaskMemory+0x2c>)
 8004004:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a06      	ldr	r2, [pc, #24]	; (8004024 <vApplicationGetTimerTaskMemory+0x30>)
 800400a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000558 	.word	0x20000558
 8004024:	20000614 	.word	0x20000614

08004028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f103 0208 	add.w	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0208 	add.w	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f103 0208 	add.w	r2, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d103      	bne.n	80040ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e00c      	b.n	8004104 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3308      	adds	r3, #8
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e002      	b.n	80040f8 <vListInsert+0x2e>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	d2f6      	bcs.n	80040f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d103      	bne.n	8004170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041ba:	f002 f87b 	bl	80062b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	441a      	add	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	3b01      	subs	r3, #1
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d114      	bne.n	800423a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01a      	beq.n	800424e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3310      	adds	r3, #16
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f929 	bl	8005474 <xTaskRemoveFromEventList>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <xQueueGenericReset+0xcc>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e009      	b.n	800424e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3310      	adds	r3, #16
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fef2 	bl	8004028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3324      	adds	r3, #36	; 0x24
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff feed 	bl	8004028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f002 f861 	bl	8006314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004252:	2301      	movs	r3, #1
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <xQueueGenericCreateStatic+0x52>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <xQueueGenericCreateStatic+0x56>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueGenericCreateStatic+0x58>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <xQueueGenericCreateStatic+0x7e>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <xQueueGenericCreateStatic+0x82>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericCreateStatic+0x84>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042fe:	2350      	movs	r3, #80	; 0x50
 8004300:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d00a      	beq.n	800431e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61bb      	str	r3, [r7, #24]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800431e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004332:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f805 	bl	8004350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004348:	4618      	mov	r0, r3
 800434a:	3730      	adds	r7, #48	; 0x30
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e002      	b.n	8004372 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800437e:	2101      	movs	r1, #1
 8004380:	69b8      	ldr	r0, [r7, #24]
 8004382:	f7ff ff05 	bl	8004190 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043a6:	2300      	movs	r3, #0
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xQueueGenericSend+0x32>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <xQueueGenericSend+0x40>
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <xQueueGenericSend+0x44>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <xQueueGenericSend+0x46>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xQueueGenericSend+0x60>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d103      	bne.n	8004406 <xQueueGenericSend+0x6e>
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <xQueueGenericSend+0x72>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <xQueueGenericSend+0x74>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueGenericSend+0x8e>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	623b      	str	r3, [r7, #32]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004426:	f001 f9e7 	bl	80057f8 <xTaskGetSchedulerState>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <xQueueGenericSend+0x9e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <xQueueGenericSend+0xa2>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueGenericSend+0xa4>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xQueueGenericSend+0xbe>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61fb      	str	r3, [r7, #28]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004456:	f001 ff2d 	bl	80062b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <xQueueGenericSend+0xd4>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d129      	bne.n	80044c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004472:	f000 fa0b 	bl	800488c <prvCopyDataToQueue>
 8004476:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	3324      	adds	r3, #36	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fff5 	bl	8005474 <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d013      	beq.n	80044b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004490:	4b3f      	ldr	r3, [pc, #252]	; (8004590 <xQueueGenericSend+0x1f8>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	e00a      	b.n	80044b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <xQueueGenericSend+0x1f8>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044b8:	f001 ff2c 	bl	8006314 <vPortExitCritical>
				return pdPASS;
 80044bc:	2301      	movs	r3, #1
 80044be:	e063      	b.n	8004588 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044c6:	f001 ff25 	bl	8006314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e05c      	b.n	8004588 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f82f 	bl	800553c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044e2:	f001 ff17 	bl	8006314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044e6:	f000 fd9b 	bl	8005020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ea:	f001 fee3 	bl	80062b4 <vPortEnterCritical>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d103      	bne.n	8004504 <xQueueGenericSend+0x16c>
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d103      	bne.n	800451a <xQueueGenericSend+0x182>
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451a:	f001 fefb 	bl	8006314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800451e:	1d3a      	adds	r2, r7, #4
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f001 f81e 	bl	8005568 <xTaskCheckForTimeOut>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d124      	bne.n	800457c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004534:	f000 faa2 	bl	8004a7c <prvIsQueueFull>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	3310      	adds	r3, #16
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f000 ff44 	bl	80053d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800454c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800454e:	f000 fa2d 	bl	80049ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004552:	f000 fd73 	bl	800503c <xTaskResumeAll>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f af7c 	bne.w	8004456 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <xQueueGenericSend+0x1f8>)
 8004560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	e772      	b.n	8004456 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004572:	f000 fa1b 	bl	80049ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004576:	f000 fd61 	bl	800503c <xTaskResumeAll>
 800457a:	e76c      	b.n	8004456 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800457c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800457e:	f000 fa15 	bl	80049ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004582:	f000 fd5b 	bl	800503c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004586:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004588:	4618      	mov	r0, r3
 800458a:	3738      	adds	r7, #56	; 0x38
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b090      	sub	sp, #64	; 0x40
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <xQueueGenericSendFromISR+0x3c>
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <xQueueGenericSendFromISR+0x40>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <xQueueGenericSendFromISR+0x42>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d103      	bne.n	80045fe <xQueueGenericSendFromISR+0x6a>
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <xQueueGenericSendFromISR+0x6e>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueGenericSendFromISR+0x70>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	623b      	str	r3, [r7, #32]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800461e:	f001 ff2b 	bl	8006478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004622:	f3ef 8211 	mrs	r2, BASEPRI
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61fa      	str	r2, [r7, #28]
 8004638:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800463a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <xQueueGenericSendFromISR+0xbc>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d12f      	bne.n	80046b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004666:	f000 f911 	bl	800488c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800466a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d112      	bne.n	800469a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d016      	beq.n	80046aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	3324      	adds	r3, #36	; 0x24
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fef7 	bl	8005474 <xTaskRemoveFromEventList>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e007      	b.n	80046aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800469a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800469e:	3301      	adds	r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	b25a      	sxtb	r2, r3
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046aa:	2301      	movs	r3, #1
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80046ae:	e001      	b.n	80046b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3740      	adds	r7, #64	; 0x40
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <xQueueReceive+0x30>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	623b      	str	r3, [r7, #32]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <xQueueReceive+0x3e>
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueReceive+0x42>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueReceive+0x44>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueReceive+0x5e>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61fb      	str	r3, [r7, #28]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800472a:	f001 f865 	bl	80057f8 <xTaskGetSchedulerState>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <xQueueReceive+0x6e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <xQueueReceive+0x72>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <xQueueReceive+0x74>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueReceive+0x8e>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	61bb      	str	r3, [r7, #24]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800475a:	f001 fdab 	bl	80062b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01f      	beq.n	80047aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800476e:	f000 f8f7 	bl	8004960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1e5a      	subs	r2, r3, #1
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00f      	beq.n	80047a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	3310      	adds	r3, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fe74 	bl	8005474 <xTaskRemoveFromEventList>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004792:	4b3d      	ldr	r3, [pc, #244]	; (8004888 <xQueueReceive+0x1bc>)
 8004794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047a2:	f001 fdb7 	bl	8006314 <vPortExitCritical>
				return pdPASS;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e069      	b.n	800487e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047b0:	f001 fdb0 	bl	8006314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e062      	b.n	800487e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 feba 	bl	800553c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047cc:	f001 fda2 	bl	8006314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047d0:	f000 fc26 	bl	8005020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d4:	f001 fd6e 	bl	80062b4 <vPortEnterCritical>
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d103      	bne.n	80047ee <xQueueReceive+0x122>
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d103      	bne.n	8004804 <xQueueReceive+0x138>
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004804:	f001 fd86 	bl	8006314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004808:	1d3a      	adds	r2, r7, #4
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fea9 	bl	8005568 <xTaskCheckForTimeOut>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d123      	bne.n	8004864 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f000 f917 	bl	8004a50 <prvIsQueueEmpty>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d017      	beq.n	8004858 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	3324      	adds	r3, #36	; 0x24
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fdcf 	bl	80053d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004838:	f000 f8b8 	bl	80049ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800483c:	f000 fbfe 	bl	800503c <xTaskResumeAll>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d189      	bne.n	800475a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <xQueueReceive+0x1bc>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	e780      	b.n	800475a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485a:	f000 f8a7 	bl	80049ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800485e:	f000 fbed 	bl	800503c <xTaskResumeAll>
 8004862:	e77a      	b.n	800475a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004866:	f000 f8a1 	bl	80049ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800486a:	f000 fbe7 	bl	800503c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800486e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004870:	f000 f8ee 	bl	8004a50 <prvIsQueueEmpty>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f43f af6f 	beq.w	800475a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800487c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800487e:	4618      	mov	r0, r3
 8004880:	3730      	adds	r7, #48	; 0x30
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d14d      	bne.n	800494e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 ffbc 	bl	8005834 <xTaskPriorityDisinherit>
 80048bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e043      	b.n	800494e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d119      	bne.n	8004900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6858      	ldr	r0, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	461a      	mov	r2, r3
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	f002 f81e 	bl	8006918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d32b      	bcc.n	800494e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	e026      	b.n	800494e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68d8      	ldr	r0, [r3, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	461a      	mov	r2, r3
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	f002 f804 	bl	8006918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	425b      	negs	r3, r3
 800491a:	441a      	add	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d207      	bcs.n	800493c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	425b      	negs	r3, r3
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d105      	bne.n	800494e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3b01      	subs	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	441a      	add	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	d303      	bcc.n	8004994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68d9      	ldr	r1, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	461a      	mov	r2, r3
 800499e:	6838      	ldr	r0, [r7, #0]
 80049a0:	f001 ffba 	bl	8006918 <memcpy>
	}
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049b4:	f001 fc7e 	bl	80062b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049c0:	e011      	b.n	80049e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d012      	beq.n	80049f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3324      	adds	r3, #36	; 0x24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fd50 	bl	8005474 <xTaskRemoveFromEventList>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049da:	f000 fe27 	bl	800562c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dce9      	bgt.n	80049c2 <prvUnlockQueue+0x16>
 80049ee:	e000      	b.n	80049f2 <prvUnlockQueue+0x46>
					break;
 80049f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049fa:	f001 fc8b 	bl	8006314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049fe:	f001 fc59 	bl	80062b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a0a:	e011      	b.n	8004a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3310      	adds	r3, #16
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd2b 	bl	8005474 <xTaskRemoveFromEventList>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a24:	f000 fe02 	bl	800562c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dce9      	bgt.n	8004a0c <prvUnlockQueue+0x60>
 8004a38:	e000      	b.n	8004a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	22ff      	movs	r2, #255	; 0xff
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a44:	f001 fc66 	bl	8006314 <vPortExitCritical>
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a58:	f001 fc2c 	bl	80062b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e001      	b.n	8004a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a6e:	f001 fc51 	bl	8006314 <vPortExitCritical>

	return xReturn;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a84:	f001 fc16 	bl	80062b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d102      	bne.n	8004a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e001      	b.n	8004a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 fc39 	bl	8006314 <vPortExitCritical>

	return xReturn;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e014      	b.n	8004ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <vQueueAddToRegistry+0x50>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ac8:	490c      	ldr	r1, [pc, #48]	; (8004afc <vQueueAddToRegistry+0x50>)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <vQueueAddToRegistry+0x50>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ade:	e006      	b.n	8004aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b07      	cmp	r3, #7
 8004aea:	d9e7      	bls.n	8004abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000a14 	.word	0x20000a14

08004b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b10:	f001 fbd0 	bl	80062b4 <vPortEnterCritical>
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d103      	bne.n	8004b2a <vQueueWaitForMessageRestricted+0x2a>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d103      	bne.n	8004b40 <vQueueWaitForMessageRestricted+0x40>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b40:	f001 fbe8 	bl	8006314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3324      	adds	r3, #36	; 0x24
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fc61 	bl	800541c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b5a:	6978      	ldr	r0, [r7, #20]
 8004b5c:	f7ff ff26 	bl	80049ac <prvUnlockQueue>
	}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	; 0x38
 8004b6c:	af04      	add	r7, sp, #16
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	623b      	str	r3, [r7, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xTaskCreateStatic+0x46>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	61fb      	str	r3, [r7, #28]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bae:	23bc      	movs	r3, #188	; 0xbc
 8004bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2bbc      	cmp	r3, #188	; 0xbc
 8004bb6:	d00a      	beq.n	8004bce <xTaskCreateStatic+0x66>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61bb      	str	r3, [r7, #24]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01e      	beq.n	8004c14 <xTaskCreateStatic+0xac>
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	9302      	str	r3, [sp, #8]
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f850 	bl	8004cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c0e:	f000 f8f3 	bl	8004df8 <prvAddNewTaskToReadyList>
 8004c12:	e001      	b.n	8004c18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c18:	697b      	ldr	r3, [r7, #20]
	}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b08c      	sub	sp, #48	; 0x30
 8004c26:	af04      	add	r7, sp, #16
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 fc5e 	bl	80064f8 <pvPortMalloc>
 8004c3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c44:	20bc      	movs	r0, #188	; 0xbc
 8004c46:	f001 fc57 	bl	80064f8 <pvPortMalloc>
 8004c4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
 8004c58:	e005      	b.n	8004c66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c5a:	6978      	ldr	r0, [r7, #20]
 8004c5c:	f001 fd18 	bl	8006690 <vPortFree>
 8004c60:	e001      	b.n	8004c66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d017      	beq.n	8004c9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f80e 	bl	8004cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c90:	69f8      	ldr	r0, [r7, #28]
 8004c92:	f000 f8b1 	bl	8004df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e002      	b.n	8004ca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	21a5      	movs	r1, #165	; 0xa5
 8004cc6:	f001 fe35 	bl	8006934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	617b      	str	r3, [r7, #20]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01f      	beq.n	8004d4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e012      	b.n	8004d36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	7819      	ldrb	r1, [r3, #0]
 8004d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3334      	adds	r3, #52	; 0x34
 8004d20:	460a      	mov	r2, r1
 8004d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3301      	adds	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d9e9      	bls.n	8004d10 <prvInitialiseNewTask+0x64>
 8004d3c:	e000      	b.n	8004d40 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d48:	e003      	b.n	8004d52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	2b37      	cmp	r3, #55	; 0x37
 8004d56:	d901      	bls.n	8004d5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d58:	2337      	movs	r3, #55	; 0x37
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	3304      	adds	r3, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff f978 	bl	8004068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	3318      	adds	r3, #24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f973 	bl	8004068 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	3354      	adds	r3, #84	; 0x54
 8004dac:	2260      	movs	r2, #96	; 0x60
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 fdbf 	bl	8006934 <memset>
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <prvInitialiseNewTask+0x140>)
 8004dba:	659a      	str	r2, [r3, #88]	; 0x58
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <prvInitialiseNewTask+0x144>)
 8004dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <prvInitialiseNewTask+0x148>)
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	69b8      	ldr	r0, [r7, #24]
 8004dce:	f001 f941 	bl	8006054 <pxPortInitialiseStack>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de4:	bf00      	nop
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08006bb8 	.word	0x08006bb8
 8004df0:	08006bd8 	.word	0x08006bd8
 8004df4:	08006b98 	.word	0x08006b98

08004df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e00:	f001 fa58 	bl	80062b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e16:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e24:	f000 fc26 	bl	8005674 <prvInitialiseTaskLists>
 8004e28:	e00d      	b.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <prvAddNewTaskToReadyList+0xcc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d802      	bhi.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e40:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <prvAddNewTaskToReadyList+0xd0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <prvAddNewTaskToReadyList+0xd0>)
 8004e4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <prvAddNewTaskToReadyList+0xd0>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <prvAddNewTaskToReadyList+0xd4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d903      	bls.n	8004e6c <prvAddNewTaskToReadyList+0x74>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <prvAddNewTaskToReadyList+0xd4>)
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <prvAddNewTaskToReadyList+0xd8>)
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7ff f8fd 	bl	8004082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e88:	f001 fa44 	bl	8006314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <prvAddNewTaskToReadyList+0xcc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d207      	bcs.n	8004eb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <prvAddNewTaskToReadyList+0xdc>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000f28 	.word	0x20000f28
 8004ec0:	20000a54 	.word	0x20000a54
 8004ec4:	20000f34 	.word	0x20000f34
 8004ec8:	20000f44 	.word	0x20000f44
 8004ecc:	20000f30 	.word	0x20000f30
 8004ed0:	20000a58 	.word	0x20000a58
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eea:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <vTaskDelay+0x60>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <vTaskDelay+0x30>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60bb      	str	r3, [r7, #8]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f08:	f000 f88a 	bl	8005020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fcfe 	bl	8005910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f14:	f000 f892 	bl	800503c <xTaskResumeAll>
 8004f18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d107      	bne.n	8004f30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <vTaskDelay+0x64>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000f50 	.word	0x20000f50
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f4e:	463a      	mov	r2, r7
 8004f50:	1d39      	adds	r1, r7, #4
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f832 	bl	8003fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	9202      	str	r2, [sp, #8]
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	460a      	mov	r2, r1
 8004f6e:	4924      	ldr	r1, [pc, #144]	; (8005000 <vTaskStartScheduler+0xc0>)
 8004f70:	4824      	ldr	r0, [pc, #144]	; (8005004 <vTaskStartScheduler+0xc4>)
 8004f72:	f7ff fdf9 	bl	8004b68 <xTaskCreateStatic>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <vTaskStartScheduler+0xc8>)
 8004f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f7c:	4b22      	ldr	r3, [pc, #136]	; (8005008 <vTaskStartScheduler+0xc8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e001      	b.n	8004f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f94:	f000 fd10 	bl	80059b8 <xTimerCreateTimerTask>
 8004f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d11b      	bne.n	8004fd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fb4:	4b15      	ldr	r3, [pc, #84]	; (800500c <vTaskStartScheduler+0xcc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3354      	adds	r3, #84	; 0x54
 8004fba:	4a15      	ldr	r2, [pc, #84]	; (8005010 <vTaskStartScheduler+0xd0>)
 8004fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <vTaskStartScheduler+0xd4>)
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <vTaskStartScheduler+0xd8>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <vTaskStartScheduler+0xdc>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fd2:	f001 f8cd 	bl	8006170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fd6:	e00e      	b.n	8004ff6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d10a      	bne.n	8004ff6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <vTaskStartScheduler+0xb4>
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	08006af0 	.word	0x08006af0
 8005004:	08005645 	.word	0x08005645
 8005008:	20000f4c 	.word	0x20000f4c
 800500c:	20000a54 	.word	0x20000a54
 8005010:	20000010 	.word	0x20000010
 8005014:	20000f48 	.word	0x20000f48
 8005018:	20000f34 	.word	0x20000f34
 800501c:	20000f2c 	.word	0x20000f2c

08005020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <vTaskSuspendAll+0x18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <vTaskSuspendAll+0x18>)
 800502c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000f50 	.word	0x20000f50

0800503c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800504a:	4b42      	ldr	r3, [pc, #264]	; (8005154 <xTaskResumeAll+0x118>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xTaskResumeAll+0x2c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005068:	f001 f924 	bl	80062b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800506c:	4b39      	ldr	r3, [pc, #228]	; (8005154 <xTaskResumeAll+0x118>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3b01      	subs	r3, #1
 8005072:	4a38      	ldr	r2, [pc, #224]	; (8005154 <xTaskResumeAll+0x118>)
 8005074:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <xTaskResumeAll+0x118>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d162      	bne.n	8005144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800507e:	4b36      	ldr	r3, [pc, #216]	; (8005158 <xTaskResumeAll+0x11c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d05e      	beq.n	8005144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005086:	e02f      	b.n	80050e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005088:	4b34      	ldr	r3, [pc, #208]	; (800515c <xTaskResumeAll+0x120>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3318      	adds	r3, #24
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff f851 	bl	800413c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f84c 	bl	800413c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a8:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <xTaskResumeAll+0x124>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d903      	bls.n	80050b8 <xTaskResumeAll+0x7c>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <xTaskResumeAll+0x124>)
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <xTaskResumeAll+0x128>)
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe ffd7 	bl	8004082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <xTaskResumeAll+0x12c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050e2:	4b22      	ldr	r3, [pc, #136]	; (800516c <xTaskResumeAll+0x130>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <xTaskResumeAll+0x120>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1cb      	bne.n	8005088 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050f6:	f000 fb5f 	bl	80057b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <xTaskResumeAll+0x134>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005106:	f000 f847 	bl	8005198 <xTaskIncrementTick>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <xTaskResumeAll+0x130>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f1      	bne.n	8005106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <xTaskResumeAll+0x134>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <xTaskResumeAll+0x130>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <xTaskResumeAll+0x138>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005144:	f001 f8e6 	bl	8006314 <vPortExitCritical>

	return xAlreadyYielded;
 8005148:	68bb      	ldr	r3, [r7, #8]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000f50 	.word	0x20000f50
 8005158:	20000f28 	.word	0x20000f28
 800515c:	20000ee8 	.word	0x20000ee8
 8005160:	20000f30 	.word	0x20000f30
 8005164:	20000a58 	.word	0x20000a58
 8005168:	20000a54 	.word	0x20000a54
 800516c:	20000f3c 	.word	0x20000f3c
 8005170:	20000f38 	.word	0x20000f38
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <xTaskGetTickCount+0x1c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005184:	687b      	ldr	r3, [r7, #4]
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000f2c 	.word	0x20000f2c

08005198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a2:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <xTaskIncrementTick+0x148>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 808f 	bne.w	80052ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051ac:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <xTaskIncrementTick+0x14c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051b4:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <xTaskIncrementTick+0x14c>)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d120      	bne.n	8005202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051c0:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <xTaskIncrementTick+0x150>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	603b      	str	r3, [r7, #0]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xTaskIncrementTick+0x46>
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <xTaskIncrementTick+0x150>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <xTaskIncrementTick+0x154>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <xTaskIncrementTick+0x150>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <xTaskIncrementTick+0x154>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <xTaskIncrementTick+0x158>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <xTaskIncrementTick+0x158>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	f000 fadb 	bl	80057b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005202:	4b3c      	ldr	r3, [pc, #240]	; (80052f4 <xTaskIncrementTick+0x15c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d349      	bcc.n	80052a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <xTaskIncrementTick+0x150>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <xTaskIncrementTick+0x15c>)
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	601a      	str	r2, [r3, #0]
					break;
 800521e:	e03f      	b.n	80052a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <xTaskIncrementTick+0x150>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d203      	bcs.n	8005240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005238:	4a2e      	ldr	r2, [pc, #184]	; (80052f4 <xTaskIncrementTick+0x15c>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800523e:	e02f      	b.n	80052a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe ff79 	bl	800413c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3318      	adds	r3, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe ff70 	bl	800413c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <xTaskIncrementTick+0x160>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d903      	bls.n	8005270 <xTaskIncrementTick+0xd8>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <xTaskIncrementTick+0x160>)
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <xTaskIncrementTick+0x164>)
 800527e:	441a      	add	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7fe fefb 	bl	8004082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <xTaskIncrementTick+0x168>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	429a      	cmp	r2, r3
 8005298:	d3b8      	bcc.n	800520c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529e:	e7b5      	b.n	800520c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <xTaskIncrementTick+0x168>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a6:	4915      	ldr	r1, [pc, #84]	; (80052fc <xTaskIncrementTick+0x164>)
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d901      	bls.n	80052bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <xTaskIncrementTick+0x16c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e004      	b.n	80052d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <xTaskIncrementTick+0x170>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <xTaskIncrementTick+0x170>)
 80052d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052d4:	697b      	ldr	r3, [r7, #20]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000f50 	.word	0x20000f50
 80052e4:	20000f2c 	.word	0x20000f2c
 80052e8:	20000ee0 	.word	0x20000ee0
 80052ec:	20000ee4 	.word	0x20000ee4
 80052f0:	20000f40 	.word	0x20000f40
 80052f4:	20000f48 	.word	0x20000f48
 80052f8:	20000f30 	.word	0x20000f30
 80052fc:	20000a58 	.word	0x20000a58
 8005300:	20000a54 	.word	0x20000a54
 8005304:	20000f3c 	.word	0x20000f3c
 8005308:	20000f38 	.word	0x20000f38

0800530c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <vTaskSwitchContext+0xb0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <vTaskSwitchContext+0xb4>)
 800531c:	2201      	movs	r2, #1
 800531e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005320:	e046      	b.n	80053b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005322:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <vTaskSwitchContext+0xb4>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <vTaskSwitchContext+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e010      	b.n	8005352 <vTaskSwitchContext+0x46>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <vTaskSwitchContext+0x40>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	607b      	str	r3, [r7, #4]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <vTaskSwitchContext+0x3e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	491d      	ldr	r1, [pc, #116]	; (80053c8 <vTaskSwitchContext+0xbc>)
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0e4      	beq.n	8005330 <vTaskSwitchContext+0x24>
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <vTaskSwitchContext+0xbc>)
 8005372:	4413      	add	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	605a      	str	r2, [r3, #4]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3308      	adds	r3, #8
 8005388:	429a      	cmp	r2, r3
 800538a:	d104      	bne.n	8005396 <vTaskSwitchContext+0x8a>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <vTaskSwitchContext+0xc0>)
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <vTaskSwitchContext+0xb8>)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <vTaskSwitchContext+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3354      	adds	r3, #84	; 0x54
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <vTaskSwitchContext+0xc4>)
 80053ae:	6013      	str	r3, [r2, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000f50 	.word	0x20000f50
 80053c0:	20000f3c 	.word	0x20000f3c
 80053c4:	20000f30 	.word	0x20000f30
 80053c8:	20000a58 	.word	0x20000a58
 80053cc:	20000a54 	.word	0x20000a54
 80053d0:	20000010 	.word	0x20000010

080053d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60fb      	str	r3, [r7, #12]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <vTaskPlaceOnEventList+0x44>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3318      	adds	r3, #24
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fe fe61 	bl	80040ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005408:	2101      	movs	r1, #1
 800540a:	6838      	ldr	r0, [r7, #0]
 800540c:	f000 fa80 	bl	8005910 <prvAddCurrentTaskToDelayedList>
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000a54 	.word	0x20000a54

0800541c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	617b      	str	r3, [r7, #20]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <vTaskPlaceOnEventListRestricted+0x54>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3318      	adds	r3, #24
 800544a:	4619      	mov	r1, r3
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7fe fe18 	bl	8004082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f000 fa55 	bl	8005910 <prvAddCurrentTaskToDelayedList>
	}
 8005466:	bf00      	nop
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000a54 	.word	0x20000a54

08005474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	3318      	adds	r3, #24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fe49 	bl	800413c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <xTaskRemoveFromEventList+0xb0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d11d      	bne.n	80054ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fe40 	bl	800413c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <xTaskRemoveFromEventList+0xb4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <xTaskRemoveFromEventList+0x5c>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a16      	ldr	r2, [pc, #88]	; (8005528 <xTaskRemoveFromEventList+0xb4>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4a13      	ldr	r2, [pc, #76]	; (800552c <xTaskRemoveFromEventList+0xb8>)
 80054de:	441a      	add	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f7fe fdcb 	bl	8004082 <vListInsertEnd>
 80054ec:	e005      	b.n	80054fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3318      	adds	r3, #24
 80054f2:	4619      	mov	r1, r3
 80054f4:	480e      	ldr	r0, [pc, #56]	; (8005530 <xTaskRemoveFromEventList+0xbc>)
 80054f6:	f7fe fdc4 	bl	8004082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <xTaskRemoveFromEventList+0xc0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d905      	bls.n	8005514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <xTaskRemoveFromEventList+0xc4>)
 800550e:	2201      	movs	r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e001      	b.n	8005518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005518:	697b      	ldr	r3, [r7, #20]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000f50 	.word	0x20000f50
 8005528:	20000f30 	.word	0x20000f30
 800552c:	20000a58 	.word	0x20000a58
 8005530:	20000ee8 	.word	0x20000ee8
 8005534:	20000a54 	.word	0x20000a54
 8005538:	20000f3c 	.word	0x20000f3c

0800553c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <vTaskInternalSetTimeOutState+0x24>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <vTaskInternalSetTimeOutState+0x28>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	20000f40 	.word	0x20000f40
 8005564:	20000f2c 	.word	0x20000f2c

08005568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	613b      	str	r3, [r7, #16]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055aa:	f000 fe83 	bl	80062b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <xTaskCheckForTimeOut+0xbc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d102      	bne.n	80055ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e023      	b.n	8005616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <xTaskCheckForTimeOut+0xc0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d007      	beq.n	80055ea <xTaskCheckForTimeOut+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e015      	b.n	8005616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d20b      	bcs.n	800560c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad2      	subs	r2, r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff9b 	bl	800553c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e004      	b.n	8005616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f000 fe7d 	bl	8006314 <vPortExitCritical>

	return xReturn;
 800561a:	69fb      	ldr	r3, [r7, #28]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000f2c 	.word	0x20000f2c
 8005628:	20000f40 	.word	0x20000f40

0800562c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <vTaskMissedYield+0x14>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000f3c 	.word	0x20000f3c

08005644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800564c:	f000 f852 	bl	80056f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <prvIdleTask+0x28>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d9f9      	bls.n	800564c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <prvIdleTask+0x2c>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005668:	e7f0      	b.n	800564c <prvIdleTask+0x8>
 800566a:	bf00      	nop
 800566c:	20000a58 	.word	0x20000a58
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	e00c      	b.n	800569a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <prvInitialiseTaskLists+0x60>)
 800568c:	4413      	add	r3, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fcca 	bl	8004028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3301      	adds	r3, #1
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b37      	cmp	r3, #55	; 0x37
 800569e:	d9ef      	bls.n	8005680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056a0:	480d      	ldr	r0, [pc, #52]	; (80056d8 <prvInitialiseTaskLists+0x64>)
 80056a2:	f7fe fcc1 	bl	8004028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056a6:	480d      	ldr	r0, [pc, #52]	; (80056dc <prvInitialiseTaskLists+0x68>)
 80056a8:	f7fe fcbe 	bl	8004028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056ac:	480c      	ldr	r0, [pc, #48]	; (80056e0 <prvInitialiseTaskLists+0x6c>)
 80056ae:	f7fe fcbb 	bl	8004028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056b2:	480c      	ldr	r0, [pc, #48]	; (80056e4 <prvInitialiseTaskLists+0x70>)
 80056b4:	f7fe fcb8 	bl	8004028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056b8:	480b      	ldr	r0, [pc, #44]	; (80056e8 <prvInitialiseTaskLists+0x74>)
 80056ba:	f7fe fcb5 	bl	8004028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <prvInitialiseTaskLists+0x78>)
 80056c0:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <prvInitialiseTaskLists+0x64>)
 80056c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <prvInitialiseTaskLists+0x7c>)
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <prvInitialiseTaskLists+0x68>)
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000a58 	.word	0x20000a58
 80056d8:	20000eb8 	.word	0x20000eb8
 80056dc:	20000ecc 	.word	0x20000ecc
 80056e0:	20000ee8 	.word	0x20000ee8
 80056e4:	20000efc 	.word	0x20000efc
 80056e8:	20000f14 	.word	0x20000f14
 80056ec:	20000ee0 	.word	0x20000ee0
 80056f0:	20000ee4 	.word	0x20000ee4

080056f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056fa:	e019      	b.n	8005730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056fc:	f000 fdda 	bl	80062b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <prvCheckTasksWaitingTermination+0x50>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fd15 	bl	800413c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <prvCheckTasksWaitingTermination+0x54>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3b01      	subs	r3, #1
 8005718:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <prvCheckTasksWaitingTermination+0x54>)
 800571a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <prvCheckTasksWaitingTermination+0x58>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <prvCheckTasksWaitingTermination+0x58>)
 8005724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005726:	f000 fdf5 	bl	8006314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f810 	bl	8005750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <prvCheckTasksWaitingTermination+0x58>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e1      	bne.n	80056fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000efc 	.word	0x20000efc
 8005748:	20000f28 	.word	0x20000f28
 800574c:	20000f10 	.word	0x20000f10

08005750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3354      	adds	r3, #84	; 0x54
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f8ff 	bl	8006960 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	4618      	mov	r0, r3
 8005772:	f000 ff8d 	bl	8006690 <vPortFree>
				vPortFree( pxTCB );
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 ff8a 	bl	8006690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800577c:	e018      	b.n	80057b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005784:	2b01      	cmp	r3, #1
 8005786:	d103      	bne.n	8005790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 ff81 	bl	8006690 <vPortFree>
	}
 800578e:	e00f      	b.n	80057b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005796:	2b02      	cmp	r3, #2
 8005798:	d00a      	beq.n	80057b0 <prvDeleteTCB+0x60>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	60fb      	str	r3, [r7, #12]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <prvDeleteTCB+0x5e>
	}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <prvResetNextTaskUnblockTime+0x38>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <prvResetNextTaskUnblockTime+0x3c>)
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057d0:	e008      	b.n	80057e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <prvResetNextTaskUnblockTime+0x38>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <prvResetNextTaskUnblockTime+0x3c>)
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000ee0 	.word	0x20000ee0
 80057f4:	20000f48 	.word	0x20000f48

080057f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <xTaskGetSchedulerState+0x34>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005806:	2301      	movs	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	e008      	b.n	800581e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <xTaskGetSchedulerState+0x38>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005814:	2302      	movs	r3, #2
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e001      	b.n	800581e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800581e:	687b      	ldr	r3, [r7, #4]
	}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	20000f34 	.word	0x20000f34
 8005830:	20000f50 	.word	0x20000f50

08005834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d056      	beq.n	80058f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800584a:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <xTaskPriorityDisinherit+0xd0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d00a      	beq.n	800586a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60fb      	str	r3, [r7, #12]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60bb      	str	r3, [r7, #8]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589a:	429a      	cmp	r2, r3
 800589c:	d02c      	beq.n	80058f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d128      	bne.n	80058f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fc46 	bl	800413c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTaskPriorityDisinherit+0xd4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d903      	bls.n	80058d8 <xTaskPriorityDisinherit+0xa4>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <xTaskPriorityDisinherit+0xd4>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4a09      	ldr	r2, [pc, #36]	; (800590c <xTaskPriorityDisinherit+0xd8>)
 80058e6:	441a      	add	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fe fbc7 	bl	8004082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058f8:	697b      	ldr	r3, [r7, #20]
	}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000a54 	.word	0x20000a54
 8005908:	20000f30 	.word	0x20000f30
 800590c:	20000a58 	.word	0x20000a58

08005910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800591a:	4b21      	ldr	r3, [pc, #132]	; (80059a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005920:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3304      	adds	r3, #4
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fc08 	bl	800413c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d10a      	bne.n	800594a <prvAddCurrentTaskToDelayedList+0x3a>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4819      	ldr	r0, [pc, #100]	; (80059a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005944:	f7fe fb9d 	bl	8004082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005948:	e026      	b.n	8005998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4413      	add	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005952:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d209      	bcs.n	8005976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f7fe fbab 	bl	80040ca <vListInsert>
}
 8005974:	e010      	b.n	8005998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005976:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fe fba1 	bl	80040ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d202      	bcs.n	8005998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000f2c 	.word	0x20000f2c
 80059a4:	20000a54 	.word	0x20000a54
 80059a8:	20000f14 	.word	0x20000f14
 80059ac:	20000ee4 	.word	0x20000ee4
 80059b0:	20000ee0 	.word	0x20000ee0
 80059b4:	20000f48 	.word	0x20000f48

080059b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059c2:	f000 fb07 	bl	8005fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059c6:	4b1c      	ldr	r3, [pc, #112]	; (8005a38 <xTimerCreateTimerTask+0x80>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d021      	beq.n	8005a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059d6:	1d3a      	adds	r2, r7, #4
 80059d8:	f107 0108 	add.w	r1, r7, #8
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fb07 	bl	8003ff4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	9202      	str	r2, [sp, #8]
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	2302      	movs	r3, #2
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	460a      	mov	r2, r1
 80059f8:	4910      	ldr	r1, [pc, #64]	; (8005a3c <xTimerCreateTimerTask+0x84>)
 80059fa:	4811      	ldr	r0, [pc, #68]	; (8005a40 <xTimerCreateTimerTask+0x88>)
 80059fc:	f7ff f8b4 	bl	8004b68 <xTaskCreateStatic>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4a10      	ldr	r2, [pc, #64]	; (8005a44 <xTimerCreateTimerTask+0x8c>)
 8005a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <xTimerCreateTimerTask+0x8c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	613b      	str	r3, [r7, #16]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a2e:	697b      	ldr	r3, [r7, #20]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000f84 	.word	0x20000f84
 8005a3c:	08006af8 	.word	0x08006af8
 8005a40:	08005b7d 	.word	0x08005b7d
 8005a44:	20000f88 	.word	0x20000f88

08005a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	623b      	str	r3, [r7, #32]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a76:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <xTimerGenericCommand+0x98>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d02a      	beq.n	8005ad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	dc18      	bgt.n	8005ac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a90:	f7ff feb2 	bl	80057f8 <xTaskGetSchedulerState>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d109      	bne.n	8005aae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <xTimerGenericCommand+0x98>)
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f107 0110 	add.w	r1, r7, #16
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	f7fe fc77 	bl	8004398 <xQueueGenericSend>
 8005aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8005aac:	e012      	b.n	8005ad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <xTimerGenericCommand+0x98>)
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	f107 0110 	add.w	r1, r7, #16
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f7fe fc6d 	bl	8004398 <xQueueGenericSend>
 8005abe:	6278      	str	r0, [r7, #36]	; 0x24
 8005ac0:	e008      	b.n	8005ad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <xTimerGenericCommand+0x98>)
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	f107 0110 	add.w	r1, r7, #16
 8005aca:	2300      	movs	r3, #0
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	f7fe fd61 	bl	8004594 <xQueueGenericSendFromISR>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3728      	adds	r7, #40	; 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000f84 	.word	0x20000f84

08005ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <prvProcessExpiredTimer+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fb1d 	bl	800413c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d022      	beq.n	8005b56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	18d1      	adds	r1, r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f000 f8d1 	bl	8005cc4 <prvInsertTimerInActiveList>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01f      	beq.n	8005b68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	2100      	movs	r1, #0
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff ff88 	bl	8005a48 <xTimerGenericCommand>
 8005b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	6978      	ldr	r0, [r7, #20]
 8005b6e:	4798      	blx	r3
}
 8005b70:	bf00      	nop
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000f7c 	.word	0x20000f7c

08005b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b84:	f107 0308 	add.w	r3, r7, #8
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f857 	bl	8005c3c <prvGetNextExpireTime>
 8005b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4619      	mov	r1, r3
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f803 	bl	8005ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b9a:	f000 f8d5 	bl	8005d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b9e:	e7f1      	b.n	8005b84 <prvTimerTask+0x8>

08005ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005baa:	f7ff fa39 	bl	8005020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f866 	bl	8005c84 <prvSampleTimeNow>
 8005bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d130      	bne.n	8005c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <prvProcessTimerOrBlockTask+0x3c>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d806      	bhi.n	8005bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bce:	f7ff fa35 	bl	800503c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ff85 	bl	8005ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bda:	e024      	b.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <prvProcessTimerOrBlockTask+0x90>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <prvProcessTimerOrBlockTask+0x50>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <prvProcessTimerOrBlockTask+0x52>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <prvProcessTimerOrBlockTask+0x94>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	f7fe ff7d 	bl	8004b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c06:	f7ff fa19 	bl	800503c <xTaskResumeAll>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <prvProcessTimerOrBlockTask+0x98>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
}
 8005c20:	e001      	b.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c22:	f7ff fa0b 	bl	800503c <xTaskResumeAll>
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000f80 	.word	0x20000f80
 8005c34:	20000f84 	.word	0x20000f84
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <prvGetNextExpireTime+0x44>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <prvGetNextExpireTime+0x16>
 8005c4e:	2201      	movs	r2, #1
 8005c50:	e000      	b.n	8005c54 <prvGetNextExpireTime+0x18>
 8005c52:	2200      	movs	r2, #0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <prvGetNextExpireTime+0x44>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e001      	b.n	8005c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000f7c 	.word	0x20000f7c

08005c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c8c:	f7ff fa74 	bl	8005178 <xTaskGetTickCount>
 8005c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <prvSampleTimeNow+0x3c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d205      	bcs.n	8005ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c9c:	f000 f936 	bl	8005f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cae:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <prvSampleTimeNow+0x3c>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000f8c 	.word	0x20000f8c

08005cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d812      	bhi.n	8005d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e01b      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <prvInsertTimerInActiveList+0x7c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7fe f9de 	bl	80040ca <vListInsert>
 8005d0e:	e012      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d206      	bcs.n	8005d26 <prvInsertTimerInActiveList+0x62>
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e007      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <prvInsertTimerInActiveList+0x80>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7fe f9ca 	bl	80040ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d36:	697b      	ldr	r3, [r7, #20]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000f80 	.word	0x20000f80
 8005d44:	20000f7c 	.word	0x20000f7c

08005d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	; 0x38
 8005d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d4e:	e0ca      	b.n	8005ee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da18      	bge.n	8005d88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	3304      	adds	r3, #4
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61fb      	str	r3, [r7, #28]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7e:	6850      	ldr	r0, [r2, #4]
 8005d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	4611      	mov	r1, r2
 8005d86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f2c0 80aa 	blt.w	8005ee4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe f9cb 	bl	800413c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005da6:	463b      	mov	r3, r7
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff6b 	bl	8005c84 <prvSampleTimeNow>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	f200 8097 	bhi.w	8005ee6 <prvProcessReceivedCommands+0x19e>
 8005db8:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <prvProcessReceivedCommands+0x78>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005e5d 	.word	0x08005e5d
 8005dd0:	08005e71 	.word	0x08005e71
 8005dd4:	08005ebb 	.word	0x08005ebb
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005de9 	.word	0x08005de9
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e71 	.word	0x08005e71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	18d1      	adds	r1, r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e08:	f7ff ff5c 	bl	8005cc4 <prvInsertTimerInActiveList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d069      	beq.n	8005ee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05e      	beq.n	8005ee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	441a      	add	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f7ff fe05 	bl	8005a48 <xTimerGenericCommand>
 8005e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d14f      	bne.n	8005ee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61bb      	str	r3, [r7, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e6e:	e03a      	b.n	8005ee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	617b      	str	r3, [r7, #20]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	18d1      	adds	r1, r2, r3
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb4:	f7ff ff06 	bl	8005cc4 <prvInsertTimerInActiveList>
					break;
 8005eb8:	e015      	b.n	8005ee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eca:	f000 fbe1 	bl	8006690 <vPortFree>
 8005ece:	e00a      	b.n	8005ee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ee2:	e000      	b.n	8005ee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <prvProcessReceivedCommands+0x1c0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	1d39      	adds	r1, r7, #4
 8005eec:	2200      	movs	r2, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fbec 	bl	80046cc <xQueueReceive>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f47f af2a 	bne.w	8005d50 <prvProcessReceivedCommands+0x8>
	}
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3730      	adds	r7, #48	; 0x30
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000f84 	.word	0x20000f84

08005f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f12:	e048      	b.n	8005fa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f14:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe f905 	bl	800413c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02e      	beq.n	8005fa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90e      	bls.n	8005f78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f66:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7fe f8aa 	bl	80040ca <vListInsert>
 8005f76:	e016      	b.n	8005fa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	2100      	movs	r1, #0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fd60 	bl	8005a48 <xTimerGenericCommand>
 8005f88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	603b      	str	r3, [r7, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1b1      	bne.n	8005f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <prvSwitchTimerLists+0xc4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <prvSwitchTimerLists+0xc0>)
 8005fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fbe:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <prvSwitchTimerLists+0xc4>)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000f7c 	.word	0x20000f7c
 8005fd0:	20000f80 	.word	0x20000f80

08005fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fda:	f000 f96b 	bl	80062b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <prvCheckForValidListAndQueue+0x60>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d120      	bne.n	8006028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fe6:	4814      	ldr	r0, [pc, #80]	; (8006038 <prvCheckForValidListAndQueue+0x64>)
 8005fe8:	f7fe f81e 	bl	8004028 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fec:	4813      	ldr	r0, [pc, #76]	; (800603c <prvCheckForValidListAndQueue+0x68>)
 8005fee:	f7fe f81b 	bl	8004028 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <prvCheckForValidListAndQueue+0x6c>)
 8005ff4:	4a10      	ldr	r2, [pc, #64]	; (8006038 <prvCheckForValidListAndQueue+0x64>)
 8005ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ff8:	4b12      	ldr	r3, [pc, #72]	; (8006044 <prvCheckForValidListAndQueue+0x70>)
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <prvCheckForValidListAndQueue+0x68>)
 8005ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ffe:	2300      	movs	r3, #0
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <prvCheckForValidListAndQueue+0x74>)
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <prvCheckForValidListAndQueue+0x78>)
 8006006:	2110      	movs	r1, #16
 8006008:	200a      	movs	r0, #10
 800600a:	f7fe f929 	bl	8004260 <xQueueGenericCreateStatic>
 800600e:	4603      	mov	r3, r0
 8006010:	4a08      	ldr	r2, [pc, #32]	; (8006034 <prvCheckForValidListAndQueue+0x60>)
 8006012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <prvCheckForValidListAndQueue+0x60>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <prvCheckForValidListAndQueue+0x60>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	490b      	ldr	r1, [pc, #44]	; (8006050 <prvCheckForValidListAndQueue+0x7c>)
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fd42 	bl	8004aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006028:	f000 f974 	bl	8006314 <vPortExitCritical>
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000f84 	.word	0x20000f84
 8006038:	20000f54 	.word	0x20000f54
 800603c:	20000f68 	.word	0x20000f68
 8006040:	20000f7c 	.word	0x20000f7c
 8006044:	20000f80 	.word	0x20000f80
 8006048:	20001030 	.word	0x20001030
 800604c:	20000f90 	.word	0x20000f90
 8006050:	08006b00 	.word	0x08006b00

08006054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b04      	subs	r3, #4
 8006064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800606c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3b04      	subs	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b04      	subs	r3, #4
 8006082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006084:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <pxPortInitialiseStack+0x64>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b14      	subs	r3, #20
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b04      	subs	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f06f 0202 	mvn.w	r2, #2
 80060a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b20      	subs	r3, #32
 80060a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	080060bd 	.word	0x080060bd

080060bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060c6:	4b12      	ldr	r3, [pc, #72]	; (8006110 <prvTaskExitError+0x54>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d00a      	beq.n	80060e6 <prvTaskExitError+0x2a>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <prvTaskExitError+0x28>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60bb      	str	r3, [r7, #8]
}
 80060f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060fa:	bf00      	nop
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0fc      	beq.n	80060fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	2000000c 	.word	0x2000000c
	...

08006120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <pxCurrentTCBConst2>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	f380 8809 	msr	PSP, r0
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8811 	msr	BASEPRI, r0
 800613a:	4770      	bx	lr
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst2>:
 8006140:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006148:	4808      	ldr	r0, [pc, #32]	; (800616c <prvPortStartFirstTask+0x24>)
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f380 8808 	msr	MSP, r0
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8814 	msr	CONTROL, r0
 800615a:	b662      	cpsie	i
 800615c:	b661      	cpsie	f
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	df00      	svc	0
 8006168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800616a:	bf00      	nop
 800616c:	e000ed08 	.word	0xe000ed08

08006170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006176:	4b46      	ldr	r3, [pc, #280]	; (8006290 <xPortStartScheduler+0x120>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a46      	ldr	r2, [pc, #280]	; (8006294 <xPortStartScheduler+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10a      	bne.n	8006196 <xPortStartScheduler+0x26>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006196:	4b3e      	ldr	r3, [pc, #248]	; (8006290 <xPortStartScheduler+0x120>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <xPortStartScheduler+0x128>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10a      	bne.n	80061b6 <xPortStartScheduler+0x46>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60fb      	str	r3, [r7, #12]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061b6:	4b39      	ldr	r3, [pc, #228]	; (800629c <xPortStartScheduler+0x12c>)
 80061b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <xPortStartScheduler+0x130>)
 80061dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <xPortStartScheduler+0x134>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061e4:	e009      	b.n	80061fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061e6:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <xPortStartScheduler+0x134>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4a2d      	ldr	r2, [pc, #180]	; (80062a4 <xPortStartScheduler+0x134>)
 80061ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d0ef      	beq.n	80061e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <xPortStartScheduler+0x134>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1c3 0307 	rsb	r3, r3, #7
 800620e:	2b04      	cmp	r3, #4
 8006210:	d00a      	beq.n	8006228 <xPortStartScheduler+0xb8>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60bb      	str	r3, [r7, #8]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <xPortStartScheduler+0x134>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <xPortStartScheduler+0x134>)
 8006230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <xPortStartScheduler+0x134>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <xPortStartScheduler+0x134>)
 800623c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006246:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <xPortStartScheduler+0x138>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <xPortStartScheduler+0x138>)
 800624c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <xPortStartScheduler+0x138>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <xPortStartScheduler+0x138>)
 8006258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800625c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800625e:	f000 f8dd 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <xPortStartScheduler+0x13c>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006268:	f000 f8fc 	bl	8006464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800626c:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <xPortStartScheduler+0x140>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <xPortStartScheduler+0x140>)
 8006272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006278:	f7ff ff66 	bl	8006148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800627c:	f7ff f846 	bl	800530c <vTaskSwitchContext>
	prvTaskExitError();
 8006280:	f7ff ff1c 	bl	80060bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	e000ed00 	.word	0xe000ed00
 8006294:	410fc271 	.word	0x410fc271
 8006298:	410fc270 	.word	0x410fc270
 800629c:	e000e400 	.word	0xe000e400
 80062a0:	20001080 	.word	0x20001080
 80062a4:	20001084 	.word	0x20001084
 80062a8:	e000ed20 	.word	0xe000ed20
 80062ac:	2000000c 	.word	0x2000000c
 80062b0:	e000ef34 	.word	0xe000ef34

080062b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	607b      	str	r3, [r7, #4]
}
 80062cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <vPortEnterCritical+0x58>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a0d      	ldr	r2, [pc, #52]	; (800630c <vPortEnterCritical+0x58>)
 80062d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <vPortEnterCritical+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10f      	bne.n	8006300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortEnterCritical+0x5c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <vPortEnterCritical+0x4c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <vPortEnterCritical+0x4a>
	}
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	2000000c 	.word	0x2000000c
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <vPortExitCritical+0x50>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <vPortExitCritical+0x24>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	607b      	str	r3, [r7, #4]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <vPortExitCritical+0x50>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <vPortExitCritical+0x50>)
 8006340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <vPortExitCritical+0x42>
 800634a:	2300      	movs	r3, #0
 800634c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f383 8811 	msr	BASEPRI, r3
}
 8006354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c
	...

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f01e 0f10 	tst.w	lr, #16
 8006380:	bf08      	it	eq
 8006382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006394:	f380 8811 	msr	BASEPRI, r0
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f7fe ffb4 	bl	800530c <vTaskSwitchContext>
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f380 8811 	msr	BASEPRI, r0
 80063ac:	bc09      	pop	{r0, r3}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	f01e 0f10 	tst.w	lr, #16
 80063ba:	bf08      	it	eq
 80063bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063c0:	f380 8809 	msr	PSP, r0
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst>:
 80063d0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f7fe fed1 	bl	8005198 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <xPortSysTickHandler+0x40>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	; (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006472:	bf00      	nop
 8006474:	e000ed88 	.word	0xe000ed88

08006478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800647e:	f3ef 8305 	mrs	r3, IPSR
 8006482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d914      	bls.n	80064b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <vPortValidateInterruptPriority+0x70>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006494:	4b15      	ldr	r3, [pc, #84]	; (80064ec <vPortValidateInterruptPriority+0x74>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	429a      	cmp	r2, r3
 800649c:	d20a      	bcs.n	80064b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b4:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <vPortValidateInterruptPriority+0x78>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <vPortValidateInterruptPriority+0x7c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d90a      	bls.n	80064da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	603b      	str	r3, [r7, #0]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <vPortValidateInterruptPriority+0x60>
	}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	e000e3f0 	.word	0xe000e3f0
 80064ec:	20001080 	.word	0x20001080
 80064f0:	e000ed0c 	.word	0xe000ed0c
 80064f4:	20001084 	.word	0x20001084

080064f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006504:	f7fe fd8c 	bl	8005020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006508:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <pvPortMalloc+0x180>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006510:	f000 f920 	bl	8006754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006514:	4b59      	ldr	r3, [pc, #356]	; (800667c <pvPortMalloc+0x184>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8093 	bne.w	8006648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01d      	beq.n	8006564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006528:	2208      	movs	r2, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b00      	cmp	r3, #0
 8006538:	d014      	beq.n	8006564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f023 0307 	bic.w	r3, r3, #7
 8006540:	3308      	adds	r3, #8
 8006542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <pvPortMalloc+0x6c>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	617b      	str	r3, [r7, #20]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d06e      	beq.n	8006648 <pvPortMalloc+0x150>
 800656a:	4b45      	ldr	r3, [pc, #276]	; (8006680 <pvPortMalloc+0x188>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d869      	bhi.n	8006648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006574:	4b43      	ldr	r3, [pc, #268]	; (8006684 <pvPortMalloc+0x18c>)
 8006576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006578:	4b42      	ldr	r3, [pc, #264]	; (8006684 <pvPortMalloc+0x18c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800657e:	e004      	b.n	800658a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d903      	bls.n	800659c <pvPortMalloc+0xa4>
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f1      	bne.n	8006580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800659c:	4b36      	ldr	r3, [pc, #216]	; (8006678 <pvPortMalloc+0x180>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d050      	beq.n	8006648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2208      	movs	r2, #8
 80065ac:	4413      	add	r3, r2
 80065ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	2308      	movs	r3, #8
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d91f      	bls.n	8006608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <pvPortMalloc+0xf8>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	613b      	str	r3, [r7, #16]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006602:	69b8      	ldr	r0, [r7, #24]
 8006604:	f000 f908 	bl	8006818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006608:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <pvPortMalloc+0x188>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <pvPortMalloc+0x188>)
 8006614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <pvPortMalloc+0x188>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <pvPortMalloc+0x190>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d203      	bcs.n	800662a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <pvPortMalloc+0x188>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <pvPortMalloc+0x190>)
 8006628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	4b13      	ldr	r3, [pc, #76]	; (800667c <pvPortMalloc+0x184>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	431a      	orrs	r2, r3
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <pvPortMalloc+0x194>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a11      	ldr	r2, [pc, #68]	; (800668c <pvPortMalloc+0x194>)
 8006646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006648:	f7fe fcf8 	bl	800503c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <pvPortMalloc+0x174>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60fb      	str	r3, [r7, #12]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <pvPortMalloc+0x172>
	return pvReturn;
 800666c:	69fb      	ldr	r3, [r7, #28]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20001c48 	.word	0x20001c48
 800667c:	20001c5c 	.word	0x20001c5c
 8006680:	20001c4c 	.word	0x20001c4c
 8006684:	20001c40 	.word	0x20001c40
 8006688:	20001c50 	.word	0x20001c50
 800668c:	20001c54 	.word	0x20001c54

08006690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04d      	beq.n	800673e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066a2:	2308      	movs	r3, #8
 80066a4:	425b      	negs	r3, r3
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	4b24      	ldr	r3, [pc, #144]	; (8006748 <vPortFree+0xb8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <vPortFree+0x44>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60fb      	str	r3, [r7, #12]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <vPortFree+0x62>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60bb      	str	r3, [r7, #8]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <vPortFree+0xb8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01e      	beq.n	800673e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11a      	bne.n	800673e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <vPortFree+0xb8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	43db      	mvns	r3, r3
 8006712:	401a      	ands	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006718:	f7fe fc82 	bl	8005020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <vPortFree+0xbc>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4413      	add	r3, r2
 8006726:	4a09      	ldr	r2, [pc, #36]	; (800674c <vPortFree+0xbc>)
 8006728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800672a:	6938      	ldr	r0, [r7, #16]
 800672c:	f000 f874 	bl	8006818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <vPortFree+0xc0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	4a06      	ldr	r2, [pc, #24]	; (8006750 <vPortFree+0xc0>)
 8006738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800673a:	f7fe fc7f 	bl	800503c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800673e:	bf00      	nop
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20001c5c 	.word	0x20001c5c
 800674c:	20001c4c 	.word	0x20001c4c
 8006750:	20001c58 	.word	0x20001c58

08006754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800675a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800675e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <prvHeapInit+0xac>)
 8006762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3307      	adds	r3, #7
 8006772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <prvHeapInit+0xac>)
 8006784:	4413      	add	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <prvHeapInit+0xb0>)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <prvHeapInit+0xb0>)
 8006794:	2200      	movs	r2, #0
 8006796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067a0:	2208      	movs	r2, #8
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <prvHeapInit+0xb4>)
 80067b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <prvHeapInit+0xb4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <prvHeapInit+0xb4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <prvHeapInit+0xb4>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a0a      	ldr	r2, [pc, #40]	; (800680c <prvHeapInit+0xb8>)
 80067e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	4a09      	ldr	r2, [pc, #36]	; (8006810 <prvHeapInit+0xbc>)
 80067ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <prvHeapInit+0xc0>)
 80067ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20001088 	.word	0x20001088
 8006804:	20001c40 	.word	0x20001c40
 8006808:	20001c48 	.word	0x20001c48
 800680c:	20001c50 	.word	0x20001c50
 8006810:	20001c4c 	.word	0x20001c4c
 8006814:	20001c5c 	.word	0x20001c5c

08006818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006820:	4b28      	ldr	r3, [pc, #160]	; (80068c4 <prvInsertBlockIntoFreeList+0xac>)
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e002      	b.n	800682c <prvInsertBlockIntoFreeList+0x14>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	429a      	cmp	r2, r3
 8006834:	d8f7      	bhi.n	8006826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	4413      	add	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d108      	bne.n	800685a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	441a      	add	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d118      	bne.n	80068a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d00d      	beq.n	8006896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	441a      	add	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e008      	b.n	80068a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e003      	b.n	80068a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d002      	beq.n	80068b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20001c40 	.word	0x20001c40
 80068c8:	20001c48 	.word	0x20001c48

080068cc <__libc_init_array>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4d0d      	ldr	r5, [pc, #52]	; (8006904 <__libc_init_array+0x38>)
 80068d0:	4c0d      	ldr	r4, [pc, #52]	; (8006908 <__libc_init_array+0x3c>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	2600      	movs	r6, #0
 80068d8:	42a6      	cmp	r6, r4
 80068da:	d109      	bne.n	80068f0 <__libc_init_array+0x24>
 80068dc:	4d0b      	ldr	r5, [pc, #44]	; (800690c <__libc_init_array+0x40>)
 80068de:	4c0c      	ldr	r4, [pc, #48]	; (8006910 <__libc_init_array+0x44>)
 80068e0:	f000 f8f2 	bl	8006ac8 <_init>
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	2600      	movs	r6, #0
 80068ea:	42a6      	cmp	r6, r4
 80068ec:	d105      	bne.n	80068fa <__libc_init_array+0x2e>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f4:	4798      	blx	r3
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7ee      	b.n	80068d8 <__libc_init_array+0xc>
 80068fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fe:	4798      	blx	r3
 8006900:	3601      	adds	r6, #1
 8006902:	e7f2      	b.n	80068ea <__libc_init_array+0x1e>
 8006904:	08006c00 	.word	0x08006c00
 8006908:	08006c00 	.word	0x08006c00
 800690c:	08006c00 	.word	0x08006c00
 8006910:	08006c04 	.word	0x08006c04

08006914 <__retarget_lock_acquire_recursive>:
 8006914:	4770      	bx	lr

08006916 <__retarget_lock_release_recursive>:
 8006916:	4770      	bx	lr

08006918 <memcpy>:
 8006918:	440a      	add	r2, r1
 800691a:	4291      	cmp	r1, r2
 800691c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006920:	d100      	bne.n	8006924 <memcpy+0xc>
 8006922:	4770      	bx	lr
 8006924:	b510      	push	{r4, lr}
 8006926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800692a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692e:	4291      	cmp	r1, r2
 8006930:	d1f9      	bne.n	8006926 <memcpy+0xe>
 8006932:	bd10      	pop	{r4, pc}

08006934 <memset>:
 8006934:	4402      	add	r2, r0
 8006936:	4603      	mov	r3, r0
 8006938:	4293      	cmp	r3, r2
 800693a:	d100      	bne.n	800693e <memset+0xa>
 800693c:	4770      	bx	lr
 800693e:	f803 1b01 	strb.w	r1, [r3], #1
 8006942:	e7f9      	b.n	8006938 <memset+0x4>

08006944 <cleanup_glue>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	6809      	ldr	r1, [r1, #0]
 800694a:	4605      	mov	r5, r0
 800694c:	b109      	cbz	r1, 8006952 <cleanup_glue+0xe>
 800694e:	f7ff fff9 	bl	8006944 <cleanup_glue>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f000 b869 	b.w	8006a30 <_free_r>
	...

08006960 <_reclaim_reent>:
 8006960:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <_reclaim_reent+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4283      	cmp	r3, r0
 8006966:	b570      	push	{r4, r5, r6, lr}
 8006968:	4604      	mov	r4, r0
 800696a:	d051      	beq.n	8006a10 <_reclaim_reent+0xb0>
 800696c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800696e:	b143      	cbz	r3, 8006982 <_reclaim_reent+0x22>
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14a      	bne.n	8006a0c <_reclaim_reent+0xac>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b111      	cbz	r1, 8006982 <_reclaim_reent+0x22>
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f857 	bl	8006a30 <_free_r>
 8006982:	6961      	ldr	r1, [r4, #20]
 8006984:	b111      	cbz	r1, 800698c <_reclaim_reent+0x2c>
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f852 	bl	8006a30 <_free_r>
 800698c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800698e:	b111      	cbz	r1, 8006996 <_reclaim_reent+0x36>
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f84d 	bl	8006a30 <_free_r>
 8006996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006998:	b111      	cbz	r1, 80069a0 <_reclaim_reent+0x40>
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f848 	bl	8006a30 <_free_r>
 80069a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069a2:	b111      	cbz	r1, 80069aa <_reclaim_reent+0x4a>
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 f843 	bl	8006a30 <_free_r>
 80069aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80069ac:	b111      	cbz	r1, 80069b4 <_reclaim_reent+0x54>
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f83e 	bl	8006a30 <_free_r>
 80069b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80069b6:	b111      	cbz	r1, 80069be <_reclaim_reent+0x5e>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f839 	bl	8006a30 <_free_r>
 80069be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80069c0:	b111      	cbz	r1, 80069c8 <_reclaim_reent+0x68>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 f834 	bl	8006a30 <_free_r>
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	b111      	cbz	r1, 80069d2 <_reclaim_reent+0x72>
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 f82f 	bl	8006a30 <_free_r>
 80069d2:	69a3      	ldr	r3, [r4, #24]
 80069d4:	b1e3      	cbz	r3, 8006a10 <_reclaim_reent+0xb0>
 80069d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069d8:	4620      	mov	r0, r4
 80069da:	4798      	blx	r3
 80069dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069de:	b1b9      	cbz	r1, 8006a10 <_reclaim_reent+0xb0>
 80069e0:	4620      	mov	r0, r4
 80069e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069e6:	f7ff bfad 	b.w	8006944 <cleanup_glue>
 80069ea:	5949      	ldr	r1, [r1, r5]
 80069ec:	b941      	cbnz	r1, 8006a00 <_reclaim_reent+0xa0>
 80069ee:	3504      	adds	r5, #4
 80069f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f2:	2d80      	cmp	r5, #128	; 0x80
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	d1f8      	bne.n	80069ea <_reclaim_reent+0x8a>
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f819 	bl	8006a30 <_free_r>
 80069fe:	e7ba      	b.n	8006976 <_reclaim_reent+0x16>
 8006a00:	680e      	ldr	r6, [r1, #0]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 f814 	bl	8006a30 <_free_r>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	e7ef      	b.n	80069ec <_reclaim_reent+0x8c>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	e7ef      	b.n	80069f0 <_reclaim_reent+0x90>
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	bf00      	nop
 8006a14:	20000010 	.word	0x20000010

08006a18 <__malloc_lock>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__malloc_lock+0x8>)
 8006a1a:	f7ff bf7b 	b.w	8006914 <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20001c60 	.word	0x20001c60

08006a24 <__malloc_unlock>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__malloc_unlock+0x8>)
 8006a26:	f7ff bf76 	b.w	8006916 <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20001c60 	.word	0x20001c60

08006a30 <_free_r>:
 8006a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d044      	beq.n	8006ac0 <_free_r+0x90>
 8006a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3a:	9001      	str	r0, [sp, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a42:	bfb8      	it	lt
 8006a44:	18e4      	addlt	r4, r4, r3
 8006a46:	f7ff ffe7 	bl	8006a18 <__malloc_lock>
 8006a4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <_free_r+0x94>)
 8006a4c:	9801      	ldr	r0, [sp, #4]
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	b933      	cbnz	r3, 8006a60 <_free_r+0x30>
 8006a52:	6063      	str	r3, [r4, #4]
 8006a54:	6014      	str	r4, [r2, #0]
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a5c:	f7ff bfe2 	b.w	8006a24 <__malloc_unlock>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d908      	bls.n	8006a76 <_free_r+0x46>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf01      	itttt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	1949      	addeq	r1, r1, r5
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	e7ed      	b.n	8006a52 <_free_r+0x22>
 8006a76:	461a      	mov	r2, r3
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b10b      	cbz	r3, 8006a80 <_free_r+0x50>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d9fa      	bls.n	8006a76 <_free_r+0x46>
 8006a80:	6811      	ldr	r1, [r2, #0]
 8006a82:	1855      	adds	r5, r2, r1
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d10b      	bne.n	8006aa0 <_free_r+0x70>
 8006a88:	6824      	ldr	r4, [r4, #0]
 8006a8a:	4421      	add	r1, r4
 8006a8c:	1854      	adds	r4, r2, r1
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	d1e0      	bne.n	8006a56 <_free_r+0x26>
 8006a94:	681c      	ldr	r4, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	6053      	str	r3, [r2, #4]
 8006a9a:	4421      	add	r1, r4
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	e7da      	b.n	8006a56 <_free_r+0x26>
 8006aa0:	d902      	bls.n	8006aa8 <_free_r+0x78>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	6003      	str	r3, [r0, #0]
 8006aa6:	e7d6      	b.n	8006a56 <_free_r+0x26>
 8006aa8:	6825      	ldr	r5, [r4, #0]
 8006aaa:	1961      	adds	r1, r4, r5
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf04      	itt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	6063      	str	r3, [r4, #4]
 8006ab6:	bf04      	itt	eq
 8006ab8:	1949      	addeq	r1, r1, r5
 8006aba:	6021      	streq	r1, [r4, #0]
 8006abc:	6054      	str	r4, [r2, #4]
 8006abe:	e7ca      	b.n	8006a56 <_free_r+0x26>
 8006ac0:	b003      	add	sp, #12
 8006ac2:	bd30      	pop	{r4, r5, pc}
 8006ac4:	20001c64 	.word	0x20001c64

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
