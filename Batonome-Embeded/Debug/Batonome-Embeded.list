
Batonome-Embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007638  08007638  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007640  08007640  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  20000074  080076bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb0  080076bc  00021bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020062  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004260  00000000  00000000  00040106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  00044368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  00045ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bca  00000000  00000000  00047870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffc0  00000000  00000000  0004d43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8569  00000000  00000000  0006d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000798c  00000000  00000000  001459b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074f8 	.word	0x080074f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080074f8 	.word	0x080074f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <gpsTask>:

#include "cmsis_os.h"
#include "main.h"

void gpsTask()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	for(;;)
 80004d8:	e7fe      	b.n	80004d8 <gpsTask+0x4>
	...

080004dc <gps_Init>:
}



void gps_Init()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t gpsHandle;
	const osThreadAttr_t gps_attributes = {
 80004e2:	463b      	mov	r3, r7
 80004e4:	2224      	movs	r2, #36	; 0x24
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f006 faff 	bl	8006aec <memset>
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <gps_Init+0x38>)
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	2318      	movs	r3, #24
 80004fa:	61bb      	str	r3, [r7, #24]
	  .name = "gps",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	gpsHandle = osThreadNew(gpsTask, NULL, &gps_attributes);
 80004fc:	463b      	mov	r3, r7
 80004fe:	461a      	mov	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <gps_Init+0x3c>)
 8000504:	f003 fdb4 	bl	8004070 <osThreadNew>
 8000508:	6278      	str	r0, [r7, #36]	; 0x24
}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	; 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08007510 	.word	0x08007510
 8000518:	080004d5 	.word	0x080004d5

0800051c <ImuManagementTask>:

#include "cmsis_os.h"
#include "main.h"

void ImuManagementTask()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	printf("IMU management task is launched\n");
 8000520:	4801      	ldr	r0, [pc, #4]	; (8000528 <ImuManagementTask+0xc>)
 8000522:	f006 fb59 	bl	8006bd8 <puts>

	for(;;)
 8000526:	e7fe      	b.n	8000526 <ImuManagementTask+0xa>
 8000528:	08007514 	.word	0x08007514

0800052c <imu_Init>:
}



void imu_Init()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t imuHandle;
	const osThreadAttr_t imu_attributes = {
 8000532:	463b      	mov	r3, r7
 8000534:	2224      	movs	r2, #36	; 0x24
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f006 fad7 	bl	8006aec <memset>
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <imu_Init+0x38>)
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	2318      	movs	r3, #24
 800054a:	61bb      	str	r3, [r7, #24]
	  .name = "imu",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	imuHandle = osThreadNew(ImuManagementTask, NULL, &imu_attributes);
 800054c:	463b      	mov	r3, r7
 800054e:	461a      	mov	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <imu_Init+0x3c>)
 8000554:	f003 fd8c 	bl	8004070 <osThreadNew>
 8000558:	6278      	str	r0, [r7, #36]	; 0x24
}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	; 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08007534 	.word	0x08007534
 8000568:	0800051d 	.word	0x0800051d

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fcb7 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f824 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f944 	bl	8000804 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800057c:	f000 f8e2 	bl	8000744 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f910 	bl	80007a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000584:	f000 f862 	bl	800064c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000588:	f000 f89e 	bl	80006c8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  gps_Init();
 800058c:	f7ff ffa6 	bl	80004dc <gps_Init>
  imu_Init();
 8000590:	f7ff ffcc 	bl	800052c <imu_Init>
  zigbee_Init();
 8000594:	f000 fc5c 	bl	8000e50 <zigbee_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f003 fd20 	bl	8003fdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <main+0x48>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <main+0x4c>)
 80005a2:	f003 fd65 	bl	8004070 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <main+0x50>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f003 fd3a 	bl	8004024 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x44>
 80005b2:	bf00      	nop
 80005b4:	08007568 	.word	0x08007568
 80005b8:	0800084d 	.word	0x0800084d
 80005bc:	20000240 	.word	0x20000240

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fa8c 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e6:	f001 f8b5 	bl	8001754 <HAL_PWREx_ControlVoltageScaling>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f0:	f000 f946 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f4:	2310      	movs	r3, #16
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f8f7 	bl	8001800 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000618:	f000 f932 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fcf7 	bl	8002028 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000640:	f000 f91e 	bl	8000880 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	; 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	f640 6214 	movw	r2, #3604	; 0xe14
 800065c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000666:	2201      	movs	r2, #1
 8000668:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_I2C1_Init+0x74>)
 800068a:	f000 ff2f 	bl	80014ec <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f8f4 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_I2C1_Init+0x74>)
 800069c:	f000 ffb5 	bl	800160a <HAL_I2CEx_ConfigAnalogFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f8eb 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_I2C1_Init+0x74>)
 80006ae:	f000 fff7 	bl	80016a0 <HAL_I2CEx_ConfigDigitalFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006b8:	f000 f8e2 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000090 	.word	0x20000090
 80006c4:	40005400 	.word	0x40005400

080006c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_I2C3_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_I2C3_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_I2C3_Init+0x74>)
 80006d4:	f640 6214 	movw	r2, #3604	; 0xe14
 80006d8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_I2C3_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_I2C3_Init+0x74>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_I2C3_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_I2C3_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C3_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_I2C3_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C3_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_I2C3_Init+0x74>)
 8000706:	f000 fef1 	bl	80014ec <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f8b6 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_I2C3_Init+0x74>)
 8000718:	f000 ff77 	bl	800160a <HAL_I2CEx_ConfigAnalogFilter>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000722:	f000 f8ad 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C3_Init+0x74>)
 800072a:	f000 ffb9 	bl	80016a0 <HAL_I2CEx_ConfigDigitalFilter>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f8a4 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000e4 	.word	0x200000e4
 8000740:	40005c00 	.word	0x40005c00

08000744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART1_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART1_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000788:	f002 fc0c 	bl	8002fa4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f875 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000138 	.word	0x20000138
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	f002 fbdc 	bl	8002fa4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f845 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001bc 	.word	0x200001bc
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_GPIO_Init+0x44>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <MX_GPIO_Init+0x44>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_GPIO_Init+0x44>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_GPIO_Init+0x44>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <MX_GPIO_Init+0x44>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_GPIO_Init+0x44>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f003 fc9d 	bl	8004194 <osDelay>
 800085a:	e7fb      	b.n	8000854 <StartDefaultTask+0x8>

0800085c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086e:	f000 fb51 	bl	8000f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40001000 	.word	0x40001000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_MspInit+0x4c>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_MspInit+0x4c>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	; 0x58
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fbfb 	bl	80010c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a2      	sub	sp, #136	; 0x88
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	2254      	movs	r2, #84	; 0x54
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 f8f5 	bl	8006aec <memset>
  if(hi2c->Instance==I2C1)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a4e      	ldr	r2, [pc, #312]	; (8000a40 <HAL_I2C_MspInit+0x164>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d138      	bne.n	800097e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fddb 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000924:	f7ff ffac 	bl	8000880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	4a45      	ldr	r2, [pc, #276]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000940:	23c0      	movs	r3, #192	; 0xc0
 8000942:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000944:	2312      	movs	r3, #18
 8000946:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000952:	2304      	movs	r3, #4
 8000954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800095c:	4619      	mov	r1, r3
 800095e:	483a      	ldr	r0, [pc, #232]	; (8000a48 <HAL_I2C_MspInit+0x16c>)
 8000960:	f000 fc5a 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 800096a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096e:	6593      	str	r3, [r2, #88]	; 0x58
 8000970:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800097c:	e05c      	b.n	8000a38 <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C3)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a32      	ldr	r2, [pc, #200]	; (8000a4c <HAL_I2C_MspInit+0x170>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d157      	bne.n	8000a38 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800098e:	2300      	movs	r3, #0
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fd9c 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80009a2:	f7ff ff6d 	bl	8000880 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009da:	2312      	movs	r3, #18
 80009dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009e8:	2304      	movs	r3, #4
 80009ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 fc0e 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fc:	2310      	movs	r3, #16
 80009fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_I2C_MspInit+0x16c>)
 8000a1c:	f000 fbfc 	bl	8001218 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_I2C_MspInit+0x168>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3788      	adds	r7, #136	; 0x88
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	40005c00 	.word	0x40005c00

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0a0      	sub	sp, #128	; 0x80
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	2254      	movs	r2, #84	; 0x54
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 f83b 	bl	8006aec <memset>
  if(huart->Instance==USART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a42      	ldr	r2, [pc, #264]	; (8000b84 <HAL_UART_MspInit+0x134>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d140      	bne.n	8000b02 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fd21 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff fef2 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa0:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000acc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fb94 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2105      	movs	r1, #5
 8000af4:	2025      	movs	r0, #37	; 0x25
 8000af6:	f000 fae5 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000afa:	2025      	movs	r0, #37	; 0x25
 8000afc:	f000 fafe 	bl	80010fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b00:	e03b      	b.n	8000b7a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d136      	bne.n	8000b7a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fcdb 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000b24:	f7ff feac 	bl	8000880 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2c:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6593      	str	r3, [r2, #88]	; 0x58
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_UART_MspInit+0x138>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fb4f 	bl	8001218 <HAL_GPIO_Init>
}
 8000b7a:	bf00      	nop
 8000b7c:	3780      	adds	r7, #128	; 0x80
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40004400 	.word	0x40004400

08000b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_InitTick+0xe0>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <HAL_InitTick+0xe0>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <HAL_InitTick+0xe0>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb6:	f107 0210 	add.w	r2, r7, #16
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fbf5 	bl	80023b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d103      	bne.n	8000bd8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bd0:	f001 fbc2 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8000bd4:	6378      	str	r0, [r7, #52]	; 0x34
 8000bd6:	e004      	b.n	8000be2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd8:	f001 fbbe 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <HAL_InitTick+0xe4>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_InitTick+0xe8>)
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_InitTick+0xec>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_InitTick+0xe8>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c18:	f001 ff44 	bl	8002aa4 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11b      	bne.n	8000c62 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <HAL_InitTick+0xe8>)
 8000c2c:	f001 ff9c 	bl	8002b68 <HAL_TIM_Base_Start_IT>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d111      	bne.n	8000c62 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c3e:	2036      	movs	r0, #54	; 0x36
 8000c40:	f000 fa5c 	bl	80010fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d808      	bhi.n	8000c5c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f000 fa38 	bl	80010c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_InitTick+0xf0>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e002      	b.n	8000c62 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	20000244 	.word	0x20000244
 8000c7c:	40001000 	.word	0x40001000
 8000c80:	20000004 	.word	0x20000004

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <USART1_IRQHandler+0x10>)
 8000cb6:	f002 f9c3 	bl	8003040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000138 	.word	0x20000138

08000cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM6_DAC_IRQHandler+0x10>)
 8000cca:	f001 ffa1 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000244 	.word	0x20000244

08000cd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
  }

  return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
  }
  return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
  return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f005 fe4a 	bl	8006a7c <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20010000 	.word	0x20010000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000290 	.word	0x20000290
 8000e1c:	20001bb0 	.word	0x20001bb0

08000e20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <ZigbeeComTask>:
void zigbee_Init();



void ZigbeeComTask(void *argument)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */


  for(;;)
 8000e4c:	e7fe      	b.n	8000e4c <ZigbeeComTask+0x8>
	...

08000e50 <zigbee_Init>:
  }
  /* USER CODE END 5 */
}

void zigbee_Init()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t zigbeeComHandle;
	const osThreadAttr_t zigbee_com_attributes = {
 8000e56:	463b      	mov	r3, r7
 8000e58:	2224      	movs	r2, #36	; 0x24
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 fe45 	bl	8006aec <memset>
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <zigbee_Init+0x38>)
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	2318      	movs	r3, #24
 8000e6e:	61bb      	str	r3, [r7, #24]
	  .name = "zigbee_com",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	zigbeeComHandle = osThreadNew(ZigbeeComTask, NULL, &zigbee_com_attributes);
 8000e70:	463b      	mov	r3, r7
 8000e72:	461a      	mov	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <zigbee_Init+0x3c>)
 8000e78:	f003 f8fa 	bl	8004070 <osThreadNew>
 8000e7c:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	08007544 	.word	0x08007544
 8000e8c:	08000e45 	.word	0x08000e45

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffc4 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f005 fde3 	bl	8006a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fb53 	bl	800056c <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed4:	08007648 	.word	0x08007648
  ldr r2, =_sbss
 8000ed8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000edc:	20001bb0 	.word	0x20001bb0

08000ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f8de 	bl	80010ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f7ff fe4c 	bl	8000b90 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fcc2 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000294 	.word	0x20000294

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000294 	.word	0x20000294

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff4c 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff61 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb1 	bl	8001048 <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff80 	bl	8000ff4 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff54 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d008      	beq.n	8001142 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e022      	b.n	8001188 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020e 	bic.w	r2, r2, #14
 8001150:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 021c 	and.w	r2, r3, #28
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d005      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2204      	movs	r2, #4
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e029      	b.n	800120c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020e 	bic.w	r2, r2, #14
 80011c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 021c 	and.w	r2, r3, #28
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    }
  }
  return status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e148      	b.n	80014ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 813a 	beq.w	80014b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0203 	and.w	r2, r3, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8094 	beq.w	80014b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6613      	str	r3, [r2, #96]	; 0x60
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1d4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1d0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1cc>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x1d6>
 80013e4:	2307      	movs	r3, #7
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x1d6>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x1d6>
 80013ec:	2300      	movs	r3, #0
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013fe:	4937      	ldr	r1, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001430:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f aeaf 	bne.w	8001228 <HAL_GPIO_Init+0x10>
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48000800 	.word	0x48000800
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e081      	b.n	8001602 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff f9e2 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800153c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800154c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e006      	b.n	8001574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d104      	bne.n	8001586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69d9      	ldr	r1, [r3, #28]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b20      	cmp	r3, #32
 800161e:	d138      	bne.n	8001692 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800162a:	2302      	movs	r3, #2
 800162c:	e032      	b.n	8001694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2224      	movs	r2, #36	; 0x24
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800165c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001692:	2302      	movs	r3, #2
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d139      	bne.n	800172a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e033      	b.n	800172c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_PWREx_GetVoltageRange+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001762:	d130      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001770:	d038      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2232      	movs	r2, #50	; 0x32
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	e002      	b.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d102      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f2      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d110      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e00f      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d007      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000000 	.word	0x20000000
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f000 bc02 	b.w	8002018 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80e4 	beq.w	80019fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x4c>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	f040 808b 	bne.w	800195a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b01      	cmp	r3, #1
 8001848:	f040 8087 	bne.w	800195a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x64>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e3d9      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_RCC_OscConfig+0x7e>
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187c:	e005      	b.n	800188a <HAL_RCC_OscConfig+0x8a>
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188a:	4293      	cmp	r3, r2
 800188c:	d223      	bcs.n	80018d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fdbe 	bl	8002414 <RCC_SetFlashLatencyFromMSIRange>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e3ba      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	496d      	ldr	r1, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4968      	ldr	r1, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e025      	b.n	8001922 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4960      	ldr	r1, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	495b      	ldr	r1, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fd7e 	bl	8002414 <RCC_SetFlashLatencyFromMSIRange>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e37a      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001922:	f000 fc81 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4950      	ldr	r1, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 8001940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001942:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f922 	bl	8000b90 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d052      	beq.n	80019fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	e35e      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d032      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196e:	f7ff fae5 	bl	8000f3c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001976:	f7ff fae1 	bl	8000f3c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e347      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a35      	ldr	r2, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4930      	ldr	r1, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
 80019c6:	e01a      	b.n	80019fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fab2 	bl	8000f3c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019dc:	f7ff faae 	bl	8000f3c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e314      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1dc>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d073      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_OscConfig+0x21c>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d10e      	bne.n	8001a34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d063      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d15f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e2f1      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_OscConfig+0x24c>
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e025      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a54:	d114      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e013      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	0800758c 	.word	0x0800758c
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a9f      	ldr	r2, [pc, #636]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa4c 	bl	8000f3c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fa48 	bl	8000f3c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2ae      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa38 	bl	8000f3c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fa34 	bl	8000f3c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e29a      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d060      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x310>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x328>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e277      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4973      	ldr	r1, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e040      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f9f3 	bl	8000f3c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f9ef 	bl	8000f3c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e255      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	495f      	ldr	r1, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f9cf 	bl	8000f3c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f9cb 	bl	8000f3c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e231      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f9aa 	bl	8000f3c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff f9a6 	bl	8000f3c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e20c      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x3ec>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f98d 	bl	8000f3c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff f989 	bl	8000f3c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1ef      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a6 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f950 	bl	8000f3c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff f94c 	bl	8000f3c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1b2      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d115      	bne.n	8001d0c <HAL_RCC_OscConfig+0x50c>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a99      	ldr	r2, [pc, #612]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1c:	4b96      	ldr	r3, [pc, #600]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	4a95      	ldr	r2, [pc, #596]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f902 	bl	8000f3c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f8fe 	bl	8000f3c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e162      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ed      	beq.n	8001d3c <HAL_RCC_OscConfig+0x53c>
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff f8eb 	bl	8000f3c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff f8e7 	bl	8000f3c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e14b      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b7d      	ldr	r3, [pc, #500]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ed      	bne.n	8001d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dba:	4a6f      	ldr	r2, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f8ba 	bl	8000f3c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dcc:	f7ff f8b6 	bl	8000f3c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e11c      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dde:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCC_OscConfig+0x5cc>
 8001dec:	e01b      	b.n	8001e26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df4:	4a60      	ldr	r2, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f89d 	bl	8000f3c <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7ff f899 	bl	8000f3c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0ff      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80f3 	beq.w	8002016 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	f040 80c9 	bne.w	8001fcc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e3a:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0203 	and.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d12c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d123      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d113      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d06b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d062      	beq.n	8001f74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0ac      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eca:	f7ff f837 	bl	8000f3c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff f833 	bl	8000f3c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e099      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCC_OscConfig+0x77c>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f00:	3a01      	subs	r2, #1
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	4311      	orrs	r1, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f0a:	0212      	lsls	r2, r2, #8
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0552      	lsls	r2, r2, #21
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f1e:	0852      	lsrs	r2, r2, #1
 8001f20:	3a01      	subs	r2, #1
 8001f22:	0652      	lsls	r2, r2, #25
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f2a:	06d2      	lsls	r2, r2, #27
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	4912      	ldr	r1, [pc, #72]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f4c:	f7fe fff6 	bl	8000f3c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7fe fff2 	bl	8000f3c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e058      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_RCC_OscConfig+0x778>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f72:	e050      	b.n	8002016 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e04f      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d144      	bne.n	8002016 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa4:	f7fe ffca 	bl	8000f3c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe ffc6 	bl	8000f3c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e02c      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x7ac>
 8001fca:	e024      	b.n	8002016 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d01f      	beq.n	8002012 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe ffad 	bl	8000f3c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ffa9 	bl	8000f3c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e00f      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4905      	ldr	r1, [pc, #20]	; (8002020 <HAL_RCC_OscConfig+0x820>)
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_OscConfig+0x824>)
 800200c:	4013      	ands	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
 8002010:	e001      	b.n	8002016 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	feeefffc 	.word	0xfeeefffc

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0e7      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b72      	ldr	r3, [pc, #456]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4970      	ldr	r1, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cf      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4960      	ldr	r1, [pc, #384]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04c      	beq.n	8002140 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0a6      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e09a      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020de:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e08e      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e086      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4943      	ldr	r1, [pc, #268]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002110:	f7fe ff14 	bl	8000f3c <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7fe ff10 	bl	8000f3c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e06e      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002158:	429a      	cmp	r2, r3
 800215a:	d208      	bcs.n	800216e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	492b      	ldr	r1, [pc, #172]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d210      	bcs.n	800219e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 0207 	bic.w	r2, r3, #7
 8002184:	4923      	ldr	r1, [pc, #140]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCC_ClockConfig+0x1ec>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e036      	b.n	800220c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4910      	ldr	r1, [pc, #64]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021dc:	f000 f824 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	490b      	ldr	r1, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1f4>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80021fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1fc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fcc5 	bl	8000b90 <HAL_InitTick>
 8002206:	4603      	mov	r3, r0
 8002208:	72fb      	strb	r3, [r7, #11]

  return status;
 800220a:	7afb      	ldrb	r3, [r7, #11]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40022000 	.word	0x40022000
 8002218:	40021000 	.word	0x40021000
 800221c:	0800758c 	.word	0x0800758c
 8002220:	20000000 	.word	0x20000000
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x34>
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d121      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d11e      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e005      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002284:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e004      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_RCC_GetSysClockFreq+0x114>)
 80022ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d134      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0xa6>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d003      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0xac>
 80022cc:	e005      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d0:	617b      	str	r3, [r7, #20]
      break;
 80022d2:	e005      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_GetSysClockFreq+0x114>)
 80022d6:	617b      	str	r3, [r7, #20]
      break;
 80022d8:	e002      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	617b      	str	r3, [r7, #20]
      break;
 80022de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	fb03 f202 	mul.w	r2, r3, r2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_GetSysClockFreq+0x108>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	0e5b      	lsrs	r3, r3, #25
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	3301      	adds	r3, #1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002320:	69bb      	ldr	r3, [r7, #24]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	080075a4 	.word	0x080075a4
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200

08002340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	0800759c 	.word	0x0800759c

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002388:	f7ff ffda 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0adb      	lsrs	r3, r3, #11
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4904      	ldr	r1, [pc, #16]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800759c 	.word	0x0800759c

080023b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	220f      	movs	r2, #15
 80023be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_RCC_GetClockConfig+0x60>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0207 	and.w	r2, r3, #7
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40022000 	.word	0x40022000

08002414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800242c:	f7ff f984 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 8002430:	6178      	str	r0, [r7, #20]
 8002432:	e014      	b.n	800245e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800244c:	f7ff f974 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 8002450:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d10b      	bne.n	800247e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d919      	bls.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2ba0      	cmp	r3, #160	; 0xa0
 8002470:	d902      	bls.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002472:	2302      	movs	r3, #2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	e013      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002478:	2301      	movs	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e010      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d902      	bls.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002484:	2303      	movs	r3, #3
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e00a      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d102      	bne.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002490:	2302      	movs	r3, #2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e004      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d101      	bne.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800249c:	2301      	movs	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 0207 	bic.w	r2, r3, #7
 80024a8:	4909      	ldr	r1, [pc, #36]	; (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40022000 	.word	0x40022000

080024d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d031      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f8:	d01a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80024fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024fe:	d814      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002508:	d10f      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a5c      	ldr	r2, [pc, #368]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002516:	e00c      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f9ce 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002528:	e003      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	74fb      	strb	r3, [r7, #19]
      break;
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002538:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	494e      	ldr	r1, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800254e:	e001      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 809e 	beq.w	800269e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a3f      	ldr	r2, [pc, #252]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002594:	2301      	movs	r3, #1
 8002596:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a39      	ldr	r2, [pc, #228]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fcca 	bl	8000f3c <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025aa:	e009      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fcc6 	bl	8000f3c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d902      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	74fb      	strb	r3, [r7, #19]
        break;
 80025be:	e005      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ef      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d15a      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d019      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800261a:	4a19      	ldr	r2, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fc86 	bl	8000f3c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002632:	e00b      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fc82 	bl	8000f3c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d902      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	74fb      	strb	r3, [r7, #19]
            break;
 800264a:	e006      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ec      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002676:	e009      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
 800267c:	e006      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268c:	7c7b      	ldrb	r3, [r7, #17]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b8a      	ldr	r3, [pc, #552]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	4a89      	ldr	r2, [pc, #548]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026aa:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 0203 	bic.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4980      	ldr	r1, [pc, #512]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026cc:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 020c 	bic.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4978      	ldr	r1, [pc, #480]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ee:	4b73      	ldr	r3, [pc, #460]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	496f      	ldr	r1, [pc, #444]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	4967      	ldr	r1, [pc, #412]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	495e      	ldr	r1, [pc, #376]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	4956      	ldr	r1, [pc, #344]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	494d      	ldr	r1, [pc, #308]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d028      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4945      	ldr	r1, [pc, #276]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
 80027c4:	e011      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f872 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	492d      	ldr	r1, [pc, #180]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f843 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002872:	d10c      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f820 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028da:	4b71      	ldr	r3, [pc, #452]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10d      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
       ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f2:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
       ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d047      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e044      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d018      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x86>
 8002914:	2b03      	cmp	r3, #3
 8002916:	d825      	bhi.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d002      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x62>
 800291c:	2b02      	cmp	r3, #2
 800291e:	d009      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x74>
 8002920:	e020      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002922:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11d      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e01a      	b.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e013      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002962:	e006      	b.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e004      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002972:	bf00      	nop
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800297a:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	430b      	orrs	r3, r1
 8002990:	4943      	ldr	r1, [pc, #268]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d17c      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe fac8 	bl	8000f3c <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ae:	e009      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b0:	f7fe fac4 	bl	8000f3c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	73fb      	strb	r3, [r7, #15]
        break;
 80029c2:	e005      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d15f      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d110      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	06d2      	lsls	r2, r2, #27
 80029f4:	430a      	orrs	r2, r1
 80029f6:	492a      	ldr	r1, [pc, #168]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	610b      	str	r3, [r1, #16]
 80029fc:	e027      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d112      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6892      	ldr	r2, [r2, #8]
 8002a14:	0211      	lsls	r1, r2, #8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6912      	ldr	r2, [r2, #16]
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0552      	lsls	r2, r2, #21
 8002a20:	430a      	orrs	r2, r1
 8002a22:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	610b      	str	r3, [r1, #16]
 8002a28:	e011      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6892      	ldr	r2, [r2, #8]
 8002a3a:	0211      	lsls	r1, r2, #8
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6952      	ldr	r2, [r2, #20]
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0652      	lsls	r2, r2, #25
 8002a46:	430a      	orrs	r2, r1
 8002a48:	4915      	ldr	r1, [pc, #84]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fa6f 	bl	8000f3c <HAL_GetTick>
 8002a5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a60:	e009      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a62:	f7fe fa6b 	bl	8000f3c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d902      	bls.n	8002a76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	73fb      	strb	r3, [r7, #15]
          break;
 8002a74:	e005      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ef      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e049      	b.n	8002b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f841 	bl	8002b52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 f9dc 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e03b      	b.n	8002bf8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d115      	bne.n	8002be2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_TIM_Base_Start_IT+0xa4>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d015      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x8c>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bce:	d011      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	e008      	b.n	8002bf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e000      	b.n	8002bf6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	00010007 	.word	0x00010007

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0202 	mvn.w	r2, #2
 8002c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f905 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8f7 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f908 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8db 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8cd 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8de 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0208 	mvn.w	r2, #8
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8b1 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8a3 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8b4 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0210 	mvn.w	r2, #16
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f887 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f879 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f88a 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0201 	mvn.w	r2, #1
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fd64 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8de 	bl	8002f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8d1 	bl	8002f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d10e      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f838 	bl	8002e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d10e      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0220 	mvn.w	r2, #32
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f891 	bl	8002f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <TIM_Base_SetConfig+0xbc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x20>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <TIM_Base_SetConfig+0xbc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x52>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0x52>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x52>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <TIM_Base_SetConfig+0xc4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <TIM_Base_SetConfig+0xbc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d007      	beq.n	8002f40 <TIM_Base_SetConfig+0xa0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_Base_SetConfig+0xa0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <TIM_Base_SetConfig+0xc4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40014000 	.word	0x40014000
 8002f64:	40014400 	.word	0x40014400

08002f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e040      	b.n	8003038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fd42 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fb2e 	bl	8003644 <UART_SetConfig>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e022      	b.n	8003038 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd4e 	bl	8003a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800300e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800301e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fdd5 	bl	8003be0 <UART_CheckIdleState>
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0ba      	sub	sp, #232	; 0xe8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800306a:	f640 030f 	movw	r3, #2063	; 0x80f
 800306e:	4013      	ands	r3, r2
 8003070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d115      	bne.n	80030a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 82a6 	beq.w	80035ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
      }
      return;
 80030a6:	e2a0      	b.n	80035ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80030a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8117 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_UART_IRQHandler+0x298>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 810a 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
 8003108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800315c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003178:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2208      	movs	r2, #8
 8003186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	f043 0208 	orr.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 820c 	beq.w	80035ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800321a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04f      	beq.n	80032c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fde9 	bl	8003dfa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d141      	bne.n	80032ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800324c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800326e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800327a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1d9      	bne.n	8003236 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_UART_IRQHandler+0x29c>)
 8003290:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd ff7c 	bl	8001194 <HAL_DMA_Abort_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00f      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9b0 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00b      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9ac 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e007      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f9a8 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032d0:	e18d      	b.n	80035ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	bf00      	nop
    return;
 80032d4:	e18b      	b.n	80035ee <HAL_UART_IRQHandler+0x5ae>
 80032d6:	bf00      	nop
 80032d8:	04000120 	.word	0x04000120
 80032dc:	08003ec1 	.word	0x08003ec1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 8146 	bne.w	8003576 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 813f 	beq.w	8003576 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8138 	beq.w	8003576 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	f040 80b4 	bne.w	8003486 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800332a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 815f 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333e:	429a      	cmp	r2, r3
 8003340:	f080 8157 	bcs.w	80035f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8085 	bne.w	800346a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800338a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800338e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1da      	bne.n	8003360 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3308      	adds	r3, #8
 80033ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e1      	bne.n	80033aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800340a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800340c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e3      	bne.n	80033e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343a:	f023 0310 	bic.w	r3, r3, #16
 800343e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800344c:	65bb      	str	r3, [r7, #88]	; 0x58
 800344e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800345a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e4      	bne.n	800342a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fe57 	bl	8001118 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8d4 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003484:	e0b5      	b.n	80035f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a7 	beq.w	80035f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80034a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a2 	beq.w	80035f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e4      	bne.n	80034b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	623b      	str	r3, [r7, #32]
   return(result);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3308      	adds	r3, #8
 8003508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800350c:	633a      	str	r2, [r7, #48]	; 0x30
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0310 	bic.w	r3, r3, #16
 8003546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	617b      	str	r3, [r7, #20]
   return(result);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e4      	bne.n	8003532 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f85c 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003574:	e03f      	b.n	80035f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <HAL_UART_IRQHandler+0x560>
 8003582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fcd1 	bl	8003f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359e:	e02d      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01c      	beq.n	80035fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
    }
    return;
 80035c8:	e017      	b.n	80035fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_UART_IRQHandler+0x5bc>
 80035d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fc82 	bl	8003eec <UART_EndTransmit_IT>
    return;
 80035e8:	e008      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035ea:	bf00      	nop
 80035ec:	e006      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80035ee:	bf00      	nop
 80035f0:	e004      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80035fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035fc:	37e8      	adds	r7, #232	; 0xe8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003648:	b08a      	sub	sp, #40	; 0x28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	4313      	orrs	r3, r2
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4bb4      	ldr	r3, [pc, #720]	; (8003944 <UART_SetConfig+0x300>)
 8003674:	4013      	ands	r3, r2
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367c:	430b      	orrs	r3, r1
 800367e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4aa9      	ldr	r2, [pc, #676]	; (8003948 <UART_SetConfig+0x304>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	4313      	orrs	r3, r2
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4aa0      	ldr	r2, [pc, #640]	; (800394c <UART_SetConfig+0x308>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d126      	bne.n	800371c <UART_SetConfig+0xd8>
 80036ce:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <UART_SetConfig+0x30c>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d81b      	bhi.n	8003714 <UART_SetConfig+0xd0>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <UART_SetConfig+0xa0>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	08003705 	.word	0x08003705
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	0800370d 	.word	0x0800370d
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e080      	b.n	80037fe <UART_SetConfig+0x1ba>
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e07c      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003704:	2304      	movs	r3, #4
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e078      	b.n	80037fe <UART_SetConfig+0x1ba>
 800370c:	2308      	movs	r3, #8
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e074      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003714:	2310      	movs	r3, #16
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e070      	b.n	80037fe <UART_SetConfig+0x1ba>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8c      	ldr	r2, [pc, #560]	; (8003954 <UART_SetConfig+0x310>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d138      	bne.n	8003798 <UART_SetConfig+0x154>
 8003726:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <UART_SetConfig+0x30c>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d82d      	bhi.n	8003790 <UART_SetConfig+0x14c>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <UART_SetConfig+0xf8>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003771 	.word	0x08003771
 8003740:	08003791 	.word	0x08003791
 8003744:	08003791 	.word	0x08003791
 8003748:	08003791 	.word	0x08003791
 800374c:	08003781 	.word	0x08003781
 8003750:	08003791 	.word	0x08003791
 8003754:	08003791 	.word	0x08003791
 8003758:	08003791 	.word	0x08003791
 800375c:	08003779 	.word	0x08003779
 8003760:	08003791 	.word	0x08003791
 8003764:	08003791 	.word	0x08003791
 8003768:	08003791 	.word	0x08003791
 800376c:	08003789 	.word	0x08003789
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e042      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003778:	2302      	movs	r3, #2
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e03e      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003780:	2304      	movs	r3, #4
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e03a      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003788:	2308      	movs	r3, #8
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e036      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003790:	2310      	movs	r3, #16
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e032      	b.n	80037fe <UART_SetConfig+0x1ba>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <UART_SetConfig+0x304>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d12a      	bne.n	80037f8 <UART_SetConfig+0x1b4>
 80037a2:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <UART_SetConfig+0x30c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b0:	d01a      	beq.n	80037e8 <UART_SetConfig+0x1a4>
 80037b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b6:	d81b      	bhi.n	80037f0 <UART_SetConfig+0x1ac>
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d00c      	beq.n	80037d8 <UART_SetConfig+0x194>
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d815      	bhi.n	80037f0 <UART_SetConfig+0x1ac>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <UART_SetConfig+0x18c>
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d008      	beq.n	80037e0 <UART_SetConfig+0x19c>
 80037ce:	e00f      	b.n	80037f0 <UART_SetConfig+0x1ac>
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e012      	b.n	80037fe <UART_SetConfig+0x1ba>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e00e      	b.n	80037fe <UART_SetConfig+0x1ba>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e00a      	b.n	80037fe <UART_SetConfig+0x1ba>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e006      	b.n	80037fe <UART_SetConfig+0x1ba>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e002      	b.n	80037fe <UART_SetConfig+0x1ba>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a51      	ldr	r2, [pc, #324]	; (8003948 <UART_SetConfig+0x304>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d17a      	bne.n	80038fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800380c:	2b08      	cmp	r3, #8
 800380e:	d824      	bhi.n	800385a <UART_SetConfig+0x216>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x1d4>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800383d 	.word	0x0800383d
 800381c:	0800385b 	.word	0x0800385b
 8003820:	08003845 	.word	0x08003845
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800384b 	.word	0x0800384b
 800382c:	0800385b 	.word	0x0800385b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800385b 	.word	0x0800385b
 8003838:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7fe fd8c 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003840:	61f8      	str	r0, [r7, #28]
        break;
 8003842:	e010      	b.n	8003866 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <UART_SetConfig+0x314>)
 8003846:	61fb      	str	r3, [r7, #28]
        break;
 8003848:	e00d      	b.n	8003866 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7fe fced 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 800384e:	61f8      	str	r0, [r7, #28]
        break;
 8003850:	e009      	b.n	8003866 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e005      	b.n	8003866 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8107 	beq.w	8003a7c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	429a      	cmp	r2, r3
 800387c:	d305      	bcc.n	800388a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	429a      	cmp	r2, r3
 8003888:	d903      	bls.n	8003892 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003890:	e0f4      	b.n	8003a7c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2200      	movs	r2, #0
 8003896:	461c      	mov	r4, r3
 8003898:	4615      	mov	r5, r2
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	022b      	lsls	r3, r5, #8
 80038a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038a8:	0222      	lsls	r2, r4, #8
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	6849      	ldr	r1, [r1, #4]
 80038ae:	0849      	lsrs	r1, r1, #1
 80038b0:	2000      	movs	r0, #0
 80038b2:	4688      	mov	r8, r1
 80038b4:	4681      	mov	r9, r0
 80038b6:	eb12 0a08 	adds.w	sl, r2, r8
 80038ba:	eb43 0b09 	adc.w	fp, r3, r9
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038cc:	4650      	mov	r0, sl
 80038ce:	4659      	mov	r1, fp
 80038d0:	f7fc fc7e 	bl	80001d0 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e2:	d308      	bcc.n	80038f6 <UART_SetConfig+0x2b2>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d204      	bcs.n	80038f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	e0c2      	b.n	8003a7c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038fc:	e0be      	b.n	8003a7c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003906:	d16a      	bne.n	80039de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390c:	2b08      	cmp	r3, #8
 800390e:	d834      	bhi.n	800397a <UART_SetConfig+0x336>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x2d4>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800395d 	.word	0x0800395d
 8003920:	08003965 	.word	0x08003965
 8003924:	0800397b 	.word	0x0800397b
 8003928:	0800396b 	.word	0x0800396b
 800392c:	0800397b 	.word	0x0800397b
 8003930:	0800397b 	.word	0x0800397b
 8003934:	0800397b 	.word	0x0800397b
 8003938:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe fd0c 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e020      	b.n	8003986 <UART_SetConfig+0x342>
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	40008000 	.word	0x40008000
 800394c:	40013800 	.word	0x40013800
 8003950:	40021000 	.word	0x40021000
 8003954:	40004400 	.word	0x40004400
 8003958:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7fe fd12 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003960:	61f8      	str	r0, [r7, #28]
        break;
 8003962:	e010      	b.n	8003986 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b4c      	ldr	r3, [pc, #304]	; (8003a98 <UART_SetConfig+0x454>)
 8003966:	61fb      	str	r3, [r7, #28]
        break;
 8003968:	e00d      	b.n	8003986 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fc5d 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 800396e:	61f8      	str	r0, [r7, #28]
        break;
 8003970:	e009      	b.n	8003986 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e005      	b.n	8003986 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d077      	beq.n	8003a7c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005a      	lsls	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b0f      	cmp	r3, #15
 80039a6:	d916      	bls.n	80039d6 <UART_SetConfig+0x392>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ae:	d212      	bcs.n	80039d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f023 030f 	bic.w	r3, r3, #15
 80039b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	8afa      	ldrh	r2, [r7, #22]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	e052      	b.n	8003a7c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039dc:	e04e      	b.n	8003a7c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d827      	bhi.n	8003a36 <UART_SetConfig+0x3f2>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0x3a8>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a11 	.word	0x08003a11
 80039f0:	08003a19 	.word	0x08003a19
 80039f4:	08003a21 	.word	0x08003a21
 80039f8:	08003a37 	.word	0x08003a37
 80039fc:	08003a27 	.word	0x08003a27
 8003a00:	08003a37 	.word	0x08003a37
 8003a04:	08003a37 	.word	0x08003a37
 8003a08:	08003a37 	.word	0x08003a37
 8003a0c:	08003a2f 	.word	0x08003a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a10:	f7fe fca2 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003a14:	61f8      	str	r0, [r7, #28]
        break;
 8003a16:	e014      	b.n	8003a42 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a18:	f7fe fcb4 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003a1c:	61f8      	str	r0, [r7, #28]
        break;
 8003a1e:	e010      	b.n	8003a42 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a20:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <UART_SetConfig+0x454>)
 8003a22:	61fb      	str	r3, [r7, #28]
        break;
 8003a24:	e00d      	b.n	8003a42 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a26:	f7fe fbff 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 8003a2a:	61f8      	str	r0, [r7, #28]
        break;
 8003a2c:	e009      	b.n	8003a42 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a32:	61fb      	str	r3, [r7, #28]
        break;
 8003a34:	e005      	b.n	8003a42 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a40:	bf00      	nop
    }

    if (pclk != 0U)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d019      	beq.n	8003a7c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	085a      	lsrs	r2, r3, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	441a      	add	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d909      	bls.n	8003a76 <UART_SetConfig+0x432>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d205      	bcs.n	8003a76 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	e002      	b.n	8003a7c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a96:	bf00      	nop
 8003a98:	00f42400 	.word	0x00f42400

08003a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d10a      	bne.n	8003bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf0:	f7fd f9a4 	bl	8000f3c <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d10e      	bne.n	8003c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f82d 	bl	8003c72 <UART_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e023      	b.n	8003c6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d10e      	bne.n	8003c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f817 	bl	8003c72 <UART_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e00d      	b.n	8003c6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b09c      	sub	sp, #112	; 0x70
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	e0a5      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	f000 80a1 	beq.w	8003dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fd f955 	bl	8000f3c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d13e      	bne.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e6      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	663b      	str	r3, [r7, #96]	; 0x60
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e067      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d04f      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3e:	d147      	bne.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d48:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e6      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d9c:	623a      	str	r2, [r7, #32]
 8003d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	69f9      	ldr	r1, [r7, #28]
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e010      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f43f af4a 	beq.w	8003c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3770      	adds	r7, #112	; 0x70
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b095      	sub	sp, #84	; 0x54
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
 8003e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d118      	bne.n	8003ea2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003eb4:	bf00      	nop
 8003eb6:	3754      	adds	r7, #84	; 0x54
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff fb9a 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6979      	ldr	r1, [r7, #20]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fb66 	bl	8003604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f38:	bf00      	nop
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <__NVIC_SetPriority>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db0a      	blt.n	8003f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	490c      	ldr	r1, [pc, #48]	; (8003fa0 <__NVIC_SetPriority+0x4c>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	440b      	add	r3, r1
 8003f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f7c:	e00a      	b.n	8003f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <__NVIC_SetPriority+0x50>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	440b      	add	r3, r1
 8003f92:	761a      	strb	r2, [r3, #24]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <SysTick_Handler+0x1c>)
 8003fae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003fb0:	f001 fcfe 	bl	80059b0 <xTaskGetSchedulerState>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003fba:	f002 fae5 	bl	8006588 <xPortSysTickHandler>
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000e010 	.word	0xe000e010

08003fc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f06f 0004 	mvn.w	r0, #4
 8003fd2:	f7ff ffbf 	bl	8003f54 <__NVIC_SetPriority>
#endif
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe2:	f3ef 8305 	mrs	r3, IPSR
 8003fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8003fe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fee:	f06f 0305 	mvn.w	r3, #5
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	e00c      	b.n	8004010 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <osKernelInitialize+0x44>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <osKernelInitialize+0x44>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004004:	2300      	movs	r3, #0
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e002      	b.n	8004010 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004010:	687b      	ldr	r3, [r7, #4]
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000298 	.word	0x20000298

08004024 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402a:	f3ef 8305 	mrs	r3, IPSR
 800402e:	603b      	str	r3, [r7, #0]
  return(result);
 8004030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004036:	f06f 0305 	mvn.w	r3, #5
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e010      	b.n	8004060 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <osKernelStart+0x48>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d109      	bne.n	800405a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004046:	f7ff ffbf 	bl	8003fc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <osKernelStart+0x48>)
 800404c:	2202      	movs	r2, #2
 800404e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004050:	f001 f866 	bl	8005120 <vTaskStartScheduler>
      stat = osOK;
 8004054:	2300      	movs	r3, #0
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	e002      	b.n	8004060 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004060:	687b      	ldr	r3, [r7, #4]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000298 	.word	0x20000298

08004070 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af04      	add	r7, sp, #16
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004080:	f3ef 8305 	mrs	r3, IPSR
 8004084:	617b      	str	r3, [r7, #20]
  return(result);
 8004086:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004088:	2b00      	cmp	r3, #0
 800408a:	d17e      	bne.n	800418a <osThreadNew+0x11a>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d07b      	beq.n	800418a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004096:	2318      	movs	r3, #24
 8004098:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d045      	beq.n	8004136 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <osThreadNew+0x48>
        name = attr->name;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <osThreadNew+0x6e>
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b38      	cmp	r3, #56	; 0x38
 80040d0:	d805      	bhi.n	80040de <osThreadNew+0x6e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <osThreadNew+0x72>
        return (NULL);
 80040de:	2300      	movs	r3, #0
 80040e0:	e054      	b.n	800418c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <osThreadNew+0xa8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b5b      	cmp	r3, #91	; 0x5b
 8004100:	d90a      	bls.n	8004118 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <osThreadNew+0xa8>
        mem = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e010      	b.n	800413a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <osThreadNew+0xca>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <osThreadNew+0xca>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <osThreadNew+0xca>
          mem = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e001      	b.n	800413a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d110      	bne.n	8004162 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004148:	9202      	str	r2, [sp, #8]
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fe0c 	bl	8004d74 <xTaskCreateStatic>
 800415c:	4603      	mov	r3, r0
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	e013      	b.n	800418a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d110      	bne.n	800418a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	b29a      	uxth	r2, r3
 800416c:	f107 0310 	add.w	r3, r7, #16
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fe57 	bl	8004e2e <xTaskCreate>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <osThreadNew+0x11a>
            hTask = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800418a:	693b      	ldr	r3, [r7, #16]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419c:	f3ef 8305 	mrs	r3, IPSR
 80041a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80041a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <osDelay+0x1c>
    stat = osErrorISR;
 80041a8:	f06f 0305 	mvn.w	r3, #5
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e007      	b.n	80041c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 ff7c 	bl	80050b8 <vTaskDelay>
    }
  }

  return (stat);
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80041dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <vApplicationGetIdleTaskMemory+0x30>)
 80041e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000029c 	.word	0x2000029c
 80041fc:	200002f8 	.word	0x200002f8

08004200 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <vApplicationGetTimerTaskMemory+0x2c>)
 8004210:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4a06      	ldr	r2, [pc, #24]	; (8004230 <vApplicationGetTimerTaskMemory+0x30>)
 8004216:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	200004f8 	.word	0x200004f8
 8004230:	20000554 	.word	0x20000554

08004234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 0208 	add.w	r2, r3, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f103 0208 	add.w	r2, r3, #8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f103 0208 	add.w	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d103      	bne.n	80042f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e00c      	b.n	8004310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3308      	adds	r3, #8
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e002      	b.n	8004304 <vListInsert+0x2e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	d2f6      	bcs.n	80042fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
 800435e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6852      	ldr	r2, [r2, #4]
 8004368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d103      	bne.n	800437c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043c6:	f002 f84d 	bl	8006464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	3b01      	subs	r3, #1
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	441a      	add	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	22ff      	movs	r2, #255	; 0xff
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d114      	bne.n	8004446 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01a      	beq.n	800445a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3310      	adds	r3, #16
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f903 	bl	8005634 <xTaskRemoveFromEventList>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <xQueueGenericReset+0xcc>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	e009      	b.n	800445a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3310      	adds	r3, #16
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fef2 	bl	8004234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff feed 	bl	8004234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800445a:	f002 f833 	bl	80064c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08e      	sub	sp, #56	; 0x38
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <xQueueGenericCreateStatic+0x52>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <xQueueGenericCreateStatic+0x56>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <xQueueGenericCreateStatic+0x58>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	623b      	str	r3, [r7, #32]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xQueueGenericCreateStatic+0x7e>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueGenericCreateStatic+0x82>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueGenericCreateStatic+0x84>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61fb      	str	r3, [r7, #28]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800450a:	2350      	movs	r3, #80	; 0x50
 800450c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d00a      	beq.n	800452a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61bb      	str	r3, [r7, #24]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800452a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800453e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f805 	bl	800455c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004554:	4618      	mov	r0, r3
 8004556:	3730      	adds	r7, #48	; 0x30
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e002      	b.n	800457e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800458a:	2101      	movs	r1, #1
 800458c:	69b8      	ldr	r0, [r7, #24]
 800458e:	f7ff ff05 	bl	800439c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045b2:	2300      	movs	r3, #0
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueGenericSend+0x32>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <xQueueGenericSend+0x40>
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <xQueueGenericSend+0x44>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <xQueueGenericSend+0x46>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xQueueGenericSend+0x60>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d103      	bne.n	8004612 <xQueueGenericSend+0x6e>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <xQueueGenericSend+0x72>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueGenericSend+0x74>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xQueueGenericSend+0x8e>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004632:	f001 f9bd 	bl	80059b0 <xTaskGetSchedulerState>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <xQueueGenericSend+0x9e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <xQueueGenericSend+0xa2>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueGenericSend+0xa4>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericSend+0xbe>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	61fb      	str	r3, [r7, #28]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004662:	f001 feff 	bl	8006464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <xQueueGenericSend+0xd4>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d129      	bne.n	80046cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467e:	f000 fa0b 	bl	8004a98 <prvCopyDataToQueue>
 8004682:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f000 ffcf 	bl	8005634 <xTaskRemoveFromEventList>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800469c:	4b3f      	ldr	r3, [pc, #252]	; (800479c <xQueueGenericSend+0x1f8>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	e00a      	b.n	80046c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <xQueueGenericSend+0x1f8>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046c4:	f001 fefe 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e063      	b.n	8004794 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046d2:	f001 fef7 	bl	80064c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e05c      	b.n	8004794 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f809 	bl	80056fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ee:	f001 fee9 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046f2:	f000 fd7b 	bl	80051ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046f6:	f001 feb5 	bl	8006464 <vPortEnterCritical>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004700:	b25b      	sxtb	r3, r3
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d103      	bne.n	8004710 <xQueueGenericSend+0x16c>
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004716:	b25b      	sxtb	r3, r3
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d103      	bne.n	8004726 <xQueueGenericSend+0x182>
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004726:	f001 fecd 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800472a:	1d3a      	adds	r2, r7, #4
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fff8 	bl	8005728 <xTaskCheckForTimeOut>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d124      	bne.n	8004788 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800473e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004740:	f000 faa2 	bl	8004c88 <prvIsQueueFull>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	3310      	adds	r3, #16
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 ff1e 	bl	8005594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475a:	f000 fa2d 	bl	8004bb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800475e:	f000 fd53 	bl	8005208 <xTaskResumeAll>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af7c 	bne.w	8004662 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <xQueueGenericSend+0x1f8>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	e772      	b.n	8004662 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800477c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800477e:	f000 fa1b 	bl	8004bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004782:	f000 fd41 	bl	8005208 <xTaskResumeAll>
 8004786:	e76c      	b.n	8004662 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478a:	f000 fa15 	bl	8004bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800478e:	f000 fd3b 	bl	8005208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004792:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004794:	4618      	mov	r0, r3
 8004796:	3738      	adds	r7, #56	; 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b090      	sub	sp, #64	; 0x40
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d103      	bne.n	80047dc <xQueueGenericSendFromISR+0x3c>
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <xQueueGenericSendFromISR+0x40>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <xQueueGenericSendFromISR+0x42>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d103      	bne.n	800480a <xQueueGenericSendFromISR+0x6a>
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <xQueueGenericSendFromISR+0x6e>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <xQueueGenericSendFromISR+0x70>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	623b      	str	r3, [r7, #32]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800482a:	f001 fefd 	bl	8006628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800482e:	f3ef 8211 	mrs	r2, BASEPRI
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61fa      	str	r2, [r7, #28]
 8004844:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004846:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <xQueueGenericSendFromISR+0xbc>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d12f      	bne.n	80048bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004872:	f000 f911 	bl	8004a98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004876:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d112      	bne.n	80048a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d016      	beq.n	80048b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fed1 	bl	8005634 <xTaskRemoveFromEventList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	b25a      	sxtb	r2, r3
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80048ba:	e001      	b.n	80048c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3740      	adds	r7, #64	; 0x40
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <xQueueReceive+0x30>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	623b      	str	r3, [r7, #32]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <xQueueReceive+0x3e>
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <xQueueReceive+0x42>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueReceive+0x44>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueReceive+0x5e>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61fb      	str	r3, [r7, #28]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004936:	f001 f83b 	bl	80059b0 <xTaskGetSchedulerState>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <xQueueReceive+0x6e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xQueueReceive+0x72>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xQueueReceive+0x74>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <xQueueReceive+0x8e>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	61bb      	str	r3, [r7, #24]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004966:	f001 fd7d 	bl	8006464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01f      	beq.n	80049b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497a:	f000 f8f7 	bl	8004b6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1e5a      	subs	r2, r3, #1
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	3310      	adds	r3, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fe4e 	bl	8005634 <xTaskRemoveFromEventList>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <xQueueReceive+0x1bc>)
 80049a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049ae:	f001 fd89 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e069      	b.n	8004a8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049bc:	f001 fd82 	bl	80064c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e062      	b.n	8004a8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fe94 	bl	80056fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d8:	f001 fd74 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049dc:	f000 fc06 	bl	80051ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049e0:	f001 fd40 	bl	8006464 <vPortEnterCritical>
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ea:	b25b      	sxtb	r3, r3
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d103      	bne.n	80049fa <xQueueReceive+0x122>
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a00:	b25b      	sxtb	r3, r3
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d103      	bne.n	8004a10 <xQueueReceive+0x138>
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a10:	f001 fd58 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a14:	1d3a      	adds	r2, r7, #4
 8004a16:	f107 0310 	add.w	r3, r7, #16
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fe83 	bl	8005728 <xTaskCheckForTimeOut>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d123      	bne.n	8004a70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2a:	f000 f917 	bl	8004c5c <prvIsQueueEmpty>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fda9 	bl	8005594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a44:	f000 f8b8 	bl	8004bb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a48:	f000 fbde 	bl	8005208 <xTaskResumeAll>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d189      	bne.n	8004966 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <xQueueReceive+0x1bc>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	e780      	b.n	8004966 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a66:	f000 f8a7 	bl	8004bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a6a:	f000 fbcd 	bl	8005208 <xTaskResumeAll>
 8004a6e:	e77a      	b.n	8004966 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a72:	f000 f8a1 	bl	8004bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a76:	f000 fbc7 	bl	8005208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7c:	f000 f8ee 	bl	8004c5c <prvIsQueueEmpty>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f43f af6f 	beq.w	8004966 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3730      	adds	r7, #48	; 0x30
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d14d      	bne.n	8004b5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 ff92 	bl	80059ec <xTaskPriorityDisinherit>
 8004ac8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	e043      	b.n	8004b5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d119      	bne.n	8004b0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6858      	ldr	r0, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	f001 fff4 	bl	8006ad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d32b      	bcc.n	8004b5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	e026      	b.n	8004b5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68d8      	ldr	r0, [r3, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	461a      	mov	r2, r3
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	f001 ffda 	bl	8006ad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	425b      	negs	r3, r3
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d207      	bcs.n	8004b48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	425b      	negs	r3, r3
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d105      	bne.n	8004b5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b62:	697b      	ldr	r3, [r7, #20]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d303      	bcc.n	8004ba0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68d9      	ldr	r1, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6838      	ldr	r0, [r7, #0]
 8004bac:	f001 ff90 	bl	8006ad0 <memcpy>
	}
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bc0:	f001 fc50 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bcc:	e011      	b.n	8004bf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d012      	beq.n	8004bfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3324      	adds	r3, #36	; 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fd2a 	bl	8005634 <xTaskRemoveFromEventList>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004be6:	f000 fe01 	bl	80057ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dce9      	bgt.n	8004bce <prvUnlockQueue+0x16>
 8004bfa:	e000      	b.n	8004bfe <prvUnlockQueue+0x46>
					break;
 8004bfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c06:	f001 fc5d 	bl	80064c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c0a:	f001 fc2b 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c16:	e011      	b.n	8004c3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3310      	adds	r3, #16
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd05 	bl	8005634 <xTaskRemoveFromEventList>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c30:	f000 fddc 	bl	80057ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c34:	7bbb      	ldrb	r3, [r7, #14]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dce9      	bgt.n	8004c18 <prvUnlockQueue+0x60>
 8004c44:	e000      	b.n	8004c48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c50:	f001 fc38 	bl	80064c4 <vPortExitCritical>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c64:	f001 fbfe 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e001      	b.n	8004c7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c7a:	f001 fc23 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c90:	f001 fbe8 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d102      	bne.n	8004ca6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e001      	b.n	8004caa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004caa:	f001 fc0b 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e014      	b.n	8004cf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cc8:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <vQueueAddToRegistry+0x50>)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cd4:	490c      	ldr	r1, [pc, #48]	; (8004d08 <vQueueAddToRegistry+0x50>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <vQueueAddToRegistry+0x50>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cea:	e006      	b.n	8004cfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b07      	cmp	r3, #7
 8004cf6:	d9e7      	bls.n	8004cc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000954 	.word	0x20000954

08004d0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d1c:	f001 fba2 	bl	8006464 <vPortEnterCritical>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d103      	bne.n	8004d36 <vQueueWaitForMessageRestricted+0x2a>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3c:	b25b      	sxtb	r3, r3
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d103      	bne.n	8004d4c <vQueueWaitForMessageRestricted+0x40>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4c:	f001 fbba 	bl	80064c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3324      	adds	r3, #36	; 0x24
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fc3b 	bl	80055dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d66:	6978      	ldr	r0, [r7, #20]
 8004d68:	f7ff ff26 	bl	8004bb8 <prvUnlockQueue>
	}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	; 0x38
 8004d78:	af04      	add	r7, sp, #16
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xTaskCreateStatic+0x46>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61fb      	str	r3, [r7, #28]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dba:	235c      	movs	r3, #92	; 0x5c
 8004dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b5c      	cmp	r3, #92	; 0x5c
 8004dc2:	d00a      	beq.n	8004dda <xTaskCreateStatic+0x66>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61bb      	str	r3, [r7, #24]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01e      	beq.n	8004e20 <xTaskCreateStatic+0xac>
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9303      	str	r3, [sp, #12]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	9302      	str	r3, [sp, #8]
 8004e02:	f107 0314 	add.w	r3, r7, #20
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f850 	bl	8004eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e1a:	f000 f8dd 	bl	8004fd8 <prvAddNewTaskToReadyList>
 8004e1e:	e001      	b.n	8004e24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e24:	697b      	ldr	r3, [r7, #20]
	}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08c      	sub	sp, #48	; 0x30
 8004e32:	af04      	add	r7, sp, #16
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fc30 	bl	80066a8 <pvPortMalloc>
 8004e48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e50:	205c      	movs	r0, #92	; 0x5c
 8004e52:	f001 fc29 	bl	80066a8 <pvPortMalloc>
 8004e56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
 8004e64:	e005      	b.n	8004e72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f001 fcea 	bl	8006840 <vPortFree>
 8004e6c:	e001      	b.n	8004e72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e80:	88fa      	ldrh	r2, [r7, #6]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9303      	str	r3, [sp, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	9302      	str	r3, [sp, #8]
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f80e 	bl	8004eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e9c:	69f8      	ldr	r0, [r7, #28]
 8004e9e:	f000 f89b 	bl	8004fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e002      	b.n	8004eae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eae:	69bb      	ldr	r3, [r7, #24]
	}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	21a5      	movs	r1, #165	; 0xa5
 8004ed2:	f001 fe0b 	bl	8006aec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	617b      	str	r3, [r7, #20]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01f      	beq.n	8004f56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e012      	b.n	8004f42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	7819      	ldrb	r1, [r3, #0]
 8004f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	3334      	adds	r3, #52	; 0x34
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d006      	beq.n	8004f4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b0f      	cmp	r3, #15
 8004f46:	d9e9      	bls.n	8004f1c <prvInitialiseNewTask+0x64>
 8004f48:	e000      	b.n	8004f4c <prvInitialiseNewTask+0x94>
			{
				break;
 8004f4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f54:	e003      	b.n	8004f5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	2b37      	cmp	r3, #55	; 0x37
 8004f62:	d901      	bls.n	8004f68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f64:	2337      	movs	r3, #55	; 0x37
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	2200      	movs	r2, #0
 8004f78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff f978 	bl	8004274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	3318      	adds	r3, #24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff f973 	bl	8004274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	69b8      	ldr	r0, [r7, #24]
 8004fb8:	f001 f928 	bl	800620c <pxPortInitialiseStack>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fce:	bf00      	nop
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fe0:	f001 fa40 	bl	8006464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	; (800509c <prvAddNewTaskToReadyList+0xc4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <prvAddNewTaskToReadyList+0xc4>)
 8004fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <prvAddNewTaskToReadyList+0xc8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ff6:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <prvAddNewTaskToReadyList+0xc8>)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <prvAddNewTaskToReadyList+0xc4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d110      	bne.n	8005026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005004:	f000 fc16 	bl	8005834 <prvInitialiseTaskLists>
 8005008:	e00d      	b.n	8005026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <prvAddNewTaskToReadyList+0xcc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <prvAddNewTaskToReadyList+0xc8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	d802      	bhi.n	8005026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <prvAddNewTaskToReadyList+0xc8>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <prvAddNewTaskToReadyList+0xd0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <prvAddNewTaskToReadyList+0xd0>)
 800502e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <prvAddNewTaskToReadyList+0xd0>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <prvAddNewTaskToReadyList+0xd4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <prvAddNewTaskToReadyList+0x74>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <prvAddNewTaskToReadyList+0xd4>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <prvAddNewTaskToReadyList+0xd8>)
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7ff f913 	bl	800428e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005068:	f001 fa2c 	bl	80064c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800506c:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <prvAddNewTaskToReadyList+0xcc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00e      	beq.n	8005092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvAddNewTaskToReadyList+0xc8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	429a      	cmp	r2, r3
 8005080:	d207      	bcs.n	8005092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <prvAddNewTaskToReadyList+0xdc>)
 8005084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000e68 	.word	0x20000e68
 80050a0:	20000994 	.word	0x20000994
 80050a4:	20000e74 	.word	0x20000e74
 80050a8:	20000e84 	.word	0x20000e84
 80050ac:	20000e70 	.word	0x20000e70
 80050b0:	20000998 	.word	0x20000998
 80050b4:	e000ed04 	.word	0xe000ed04

080050b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <vTaskDelay+0x60>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <vTaskDelay+0x30>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050e8:	f000 f880 	bl	80051ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ec:	2100      	movs	r1, #0
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fcea 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050f4:	f000 f888 	bl	8005208 <xTaskResumeAll>
 80050f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <vTaskDelay+0x64>)
 8005102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000e90 	.word	0x20000e90
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800512e:	463a      	mov	r2, r7
 8005130:	1d39      	adds	r1, r7, #4
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff f848 	bl	80041cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	9202      	str	r2, [sp, #8]
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	2300      	movs	r3, #0
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	460a      	mov	r2, r1
 800514e:	4921      	ldr	r1, [pc, #132]	; (80051d4 <vTaskStartScheduler+0xb4>)
 8005150:	4821      	ldr	r0, [pc, #132]	; (80051d8 <vTaskStartScheduler+0xb8>)
 8005152:	f7ff fe0f 	bl	8004d74 <xTaskCreateStatic>
 8005156:	4603      	mov	r3, r0
 8005158:	4a20      	ldr	r2, [pc, #128]	; (80051dc <vTaskStartScheduler+0xbc>)
 800515a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800515c:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <vTaskStartScheduler+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005164:	2301      	movs	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e001      	b.n	800516e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005174:	f000 fcfc 	bl	8005b70 <xTimerCreateTimerTask>
 8005178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d116      	bne.n	80051ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
}
 8005192:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <vTaskStartScheduler+0xc0>)
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <vTaskStartScheduler+0xc4>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <vTaskStartScheduler+0xc8>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051a8:	f001 f8ba 	bl	8006320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ac:	e00e      	b.n	80051cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d10a      	bne.n	80051cc <vTaskStartScheduler+0xac>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <vTaskStartScheduler+0xaa>
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	08007550 	.word	0x08007550
 80051d8:	08005805 	.word	0x08005805
 80051dc:	20000e8c 	.word	0x20000e8c
 80051e0:	20000e88 	.word	0x20000e88
 80051e4:	20000e74 	.word	0x20000e74
 80051e8:	20000e6c 	.word	0x20000e6c

080051ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <vTaskSuspendAll+0x18>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4a03      	ldr	r2, [pc, #12]	; (8005204 <vTaskSuspendAll+0x18>)
 80051f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20000e90 	.word	0x20000e90

08005208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005216:	4b42      	ldr	r3, [pc, #264]	; (8005320 <xTaskResumeAll+0x118>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskResumeAll+0x2c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	603b      	str	r3, [r7, #0]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005234:	f001 f916 	bl	8006464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <xTaskResumeAll+0x118>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a38      	ldr	r2, [pc, #224]	; (8005320 <xTaskResumeAll+0x118>)
 8005240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005242:	4b37      	ldr	r3, [pc, #220]	; (8005320 <xTaskResumeAll+0x118>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d162      	bne.n	8005310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <xTaskResumeAll+0x11c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d05e      	beq.n	8005310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005252:	e02f      	b.n	80052b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <xTaskResumeAll+0x120>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3318      	adds	r3, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f871 	bl	8004348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff f86c 	bl	8004348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <xTaskResumeAll+0x124>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d903      	bls.n	8005284 <xTaskResumeAll+0x7c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <xTaskResumeAll+0x124>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <xTaskResumeAll+0x128>)
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fe fff7 	bl	800428e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <xTaskResumeAll+0x12c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <xTaskResumeAll+0x130>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b4:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <xTaskResumeAll+0x120>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1cb      	bne.n	8005254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052c2:	f000 fb55 	bl	8005970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <xTaskResumeAll+0x134>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f000 f847 	bl	8005364 <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052dc:	4b16      	ldr	r3, [pc, #88]	; (8005338 <xTaskResumeAll+0x130>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f1      	bne.n	80052d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <xTaskResumeAll+0x134>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <xTaskResumeAll+0x130>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <xTaskResumeAll+0x138>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005310:	f001 f8d8 	bl	80064c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005314:	68bb      	ldr	r3, [r7, #8]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000e90 	.word	0x20000e90
 8005324:	20000e68 	.word	0x20000e68
 8005328:	20000e28 	.word	0x20000e28
 800532c:	20000e70 	.word	0x20000e70
 8005330:	20000998 	.word	0x20000998
 8005334:	20000994 	.word	0x20000994
 8005338:	20000e7c 	.word	0x20000e7c
 800533c:	20000e78 	.word	0x20000e78
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <xTaskGetTickCount+0x1c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005350:	687b      	ldr	r3, [r7, #4]
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000e6c 	.word	0x20000e6c

08005364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <xTaskIncrementTick+0x148>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 808f 	bne.w	8005496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <xTaskIncrementTick+0x14c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005380:	4a4b      	ldr	r2, [pc, #300]	; (80054b0 <xTaskIncrementTick+0x14c>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d120      	bne.n	80053ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800538c:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <xTaskIncrementTick+0x150>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	603b      	str	r3, [r7, #0]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskIncrementTick+0x46>
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <xTaskIncrementTick+0x154>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xTaskIncrementTick+0x154>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b3e      	ldr	r3, [pc, #248]	; (80054bc <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <xTaskIncrementTick+0x158>)
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	f000 fad1 	bl	8005970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053ce:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <xTaskIncrementTick+0x15c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d349      	bcc.n	800546c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d8:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <xTaskIncrementTick+0x15c>)
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	601a      	str	r2, [r3, #0]
					break;
 80053ea:	e03f      	b.n	800546c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d203      	bcs.n	800540c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005404:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <xTaskIncrementTick+0x15c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800540a:	e02f      	b.n	800546c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe ff99 	bl	8004348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3318      	adds	r3, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe ff90 	bl	8004348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <xTaskIncrementTick+0x160>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d903      	bls.n	800543c <xTaskIncrementTick+0xd8>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <xTaskIncrementTick+0x160>)
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <xTaskIncrementTick+0x164>)
 800544a:	441a      	add	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f7fe ff1b 	bl	800428e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <xTaskIncrementTick+0x168>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	429a      	cmp	r2, r3
 8005464:	d3b8      	bcc.n	80053d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546a:	e7b5      	b.n	80053d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <xTaskIncrementTick+0x168>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4915      	ldr	r1, [pc, #84]	; (80054c8 <xTaskIncrementTick+0x164>)
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d901      	bls.n	8005488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <xTaskIncrementTick+0x16c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e004      	b.n	80054a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <xTaskIncrementTick+0x170>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <xTaskIncrementTick+0x170>)
 800549e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054a0:	697b      	ldr	r3, [r7, #20]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000e90 	.word	0x20000e90
 80054b0:	20000e6c 	.word	0x20000e6c
 80054b4:	20000e20 	.word	0x20000e20
 80054b8:	20000e24 	.word	0x20000e24
 80054bc:	20000e80 	.word	0x20000e80
 80054c0:	20000e88 	.word	0x20000e88
 80054c4:	20000e70 	.word	0x20000e70
 80054c8:	20000998 	.word	0x20000998
 80054cc:	20000994 	.word	0x20000994
 80054d0:	20000e7c 	.word	0x20000e7c
 80054d4:	20000e78 	.word	0x20000e78

080054d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <vTaskSwitchContext+0xa8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <vTaskSwitchContext+0xac>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ec:	e041      	b.n	8005572 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <vTaskSwitchContext+0xac>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <vTaskSwitchContext+0xb0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e010      	b.n	800551e <vTaskSwitchContext+0x46>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <vTaskSwitchContext+0x40>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <vTaskSwitchContext+0x3e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	491b      	ldr	r1, [pc, #108]	; (800558c <vTaskSwitchContext+0xb4>)
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0e4      	beq.n	80054fc <vTaskSwitchContext+0x24>
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <vTaskSwitchContext+0xb4>)
 800553e:	4413      	add	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3308      	adds	r3, #8
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <vTaskSwitchContext+0x8a>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <vTaskSwitchContext+0xb8>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4a06      	ldr	r2, [pc, #24]	; (8005588 <vTaskSwitchContext+0xb0>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6013      	str	r3, [r2, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000e90 	.word	0x20000e90
 8005584:	20000e7c 	.word	0x20000e7c
 8005588:	20000e70 	.word	0x20000e70
 800558c:	20000998 	.word	0x20000998
 8005590:	20000994 	.word	0x20000994

08005594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60fb      	str	r3, [r7, #12]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <vTaskPlaceOnEventList+0x44>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3318      	adds	r3, #24
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fe fe87 	bl	80042d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055c8:	2101      	movs	r1, #1
 80055ca:	6838      	ldr	r0, [r7, #0]
 80055cc:	f000 fa7c 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000994 	.word	0x20000994

080055dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	617b      	str	r3, [r7, #20]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <vTaskPlaceOnEventListRestricted+0x54>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3318      	adds	r3, #24
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7fe fe3e 	bl	800428e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295
 800561c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	68b8      	ldr	r0, [r7, #8]
 8005622:	f000 fa51 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
	}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000994 	.word	0x20000994

08005634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	60fb      	str	r3, [r7, #12]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	3318      	adds	r3, #24
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fe6f 	bl	8004348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <xTaskRemoveFromEventList+0xb0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11d      	bne.n	80056ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fe66 	bl	8004348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <xTaskRemoveFromEventList+0xb4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d903      	bls.n	8005690 <xTaskRemoveFromEventList+0x5c>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <xTaskRemoveFromEventList+0xb4>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4a13      	ldr	r2, [pc, #76]	; (80056ec <xTaskRemoveFromEventList+0xb8>)
 800569e:	441a      	add	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe fdf1 	bl	800428e <vListInsertEnd>
 80056ac:	e005      	b.n	80056ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4619      	mov	r1, r3
 80056b4:	480e      	ldr	r0, [pc, #56]	; (80056f0 <xTaskRemoveFromEventList+0xbc>)
 80056b6:	f7fe fdea 	bl	800428e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <xTaskRemoveFromEventList+0xc0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d905      	bls.n	80056d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <xTaskRemoveFromEventList+0xc4>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e001      	b.n	80056d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056d8:	697b      	ldr	r3, [r7, #20]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000e90 	.word	0x20000e90
 80056e8:	20000e70 	.word	0x20000e70
 80056ec:	20000998 	.word	0x20000998
 80056f0:	20000e28 	.word	0x20000e28
 80056f4:	20000994 	.word	0x20000994
 80056f8:	20000e7c 	.word	0x20000e7c

080056fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <vTaskInternalSetTimeOutState+0x24>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <vTaskInternalSetTimeOutState+0x28>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20000e80 	.word	0x20000e80
 8005724:	20000e6c 	.word	0x20000e6c

08005728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60fb      	str	r3, [r7, #12]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800576a:	f000 fe7b 	bl	8006464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <xTaskCheckForTimeOut+0xbc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d102      	bne.n	800578e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e023      	b.n	80057d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <xTaskCheckForTimeOut+0xc0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d007      	beq.n	80057aa <xTaskCheckForTimeOut+0x82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e015      	b.n	80057d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d20b      	bcs.n	80057cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff9b 	bl	80056fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e004      	b.n	80057d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057d6:	f000 fe75 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 80057da:	69fb      	ldr	r3, [r7, #28]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000e6c 	.word	0x20000e6c
 80057e8:	20000e80 	.word	0x20000e80

080057ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <vTaskMissedYield+0x14>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000e7c 	.word	0x20000e7c

08005804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800580c:	f000 f852 	bl	80058b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <prvIdleTask+0x28>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d9f9      	bls.n	800580c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <prvIdleTask+0x2c>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005828:	e7f0      	b.n	800580c <prvIdleTask+0x8>
 800582a:	bf00      	nop
 800582c:	20000998 	.word	0x20000998
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	e00c      	b.n	800585a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4a12      	ldr	r2, [pc, #72]	; (8005894 <prvInitialiseTaskLists+0x60>)
 800584c:	4413      	add	r3, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fcf0 	bl	8004234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3301      	adds	r3, #1
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b37      	cmp	r3, #55	; 0x37
 800585e:	d9ef      	bls.n	8005840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005860:	480d      	ldr	r0, [pc, #52]	; (8005898 <prvInitialiseTaskLists+0x64>)
 8005862:	f7fe fce7 	bl	8004234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005866:	480d      	ldr	r0, [pc, #52]	; (800589c <prvInitialiseTaskLists+0x68>)
 8005868:	f7fe fce4 	bl	8004234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800586c:	480c      	ldr	r0, [pc, #48]	; (80058a0 <prvInitialiseTaskLists+0x6c>)
 800586e:	f7fe fce1 	bl	8004234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005872:	480c      	ldr	r0, [pc, #48]	; (80058a4 <prvInitialiseTaskLists+0x70>)
 8005874:	f7fe fcde 	bl	8004234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005878:	480b      	ldr	r0, [pc, #44]	; (80058a8 <prvInitialiseTaskLists+0x74>)
 800587a:	f7fe fcdb 	bl	8004234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <prvInitialiseTaskLists+0x78>)
 8005880:	4a05      	ldr	r2, [pc, #20]	; (8005898 <prvInitialiseTaskLists+0x64>)
 8005882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <prvInitialiseTaskLists+0x7c>)
 8005886:	4a05      	ldr	r2, [pc, #20]	; (800589c <prvInitialiseTaskLists+0x68>)
 8005888:	601a      	str	r2, [r3, #0]
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000998 	.word	0x20000998
 8005898:	20000df8 	.word	0x20000df8
 800589c:	20000e0c 	.word	0x20000e0c
 80058a0:	20000e28 	.word	0x20000e28
 80058a4:	20000e3c 	.word	0x20000e3c
 80058a8:	20000e54 	.word	0x20000e54
 80058ac:	20000e20 	.word	0x20000e20
 80058b0:	20000e24 	.word	0x20000e24

080058b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ba:	e019      	b.n	80058f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058bc:	f000 fdd2 	bl	8006464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b10      	ldr	r3, [pc, #64]	; (8005904 <prvCheckTasksWaitingTermination+0x50>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fd3b 	bl	8004348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <prvCheckTasksWaitingTermination+0x54>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4a0b      	ldr	r2, [pc, #44]	; (8005908 <prvCheckTasksWaitingTermination+0x54>)
 80058da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvCheckTasksWaitingTermination+0x58>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <prvCheckTasksWaitingTermination+0x58>)
 80058e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058e6:	f000 fded 	bl	80064c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f810 	bl	8005910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <prvCheckTasksWaitingTermination+0x58>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e1      	bne.n	80058bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000e3c 	.word	0x20000e3c
 8005908:	20000e68 	.word	0x20000e68
 800590c:	20000e50 	.word	0x20000e50

08005910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	4618      	mov	r0, r3
 8005928:	f000 ff8a 	bl	8006840 <vPortFree>
				vPortFree( pxTCB );
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 ff87 	bl	8006840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005932:	e018      	b.n	8005966 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800593a:	2b01      	cmp	r3, #1
 800593c:	d103      	bne.n	8005946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 ff7e 	bl	8006840 <vPortFree>
	}
 8005944:	e00f      	b.n	8005966 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800594c:	2b02      	cmp	r3, #2
 800594e:	d00a      	beq.n	8005966 <prvDeleteTCB+0x56>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <prvDeleteTCB+0x54>
	}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvResetNextTaskUnblockTime+0x38>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <prvResetNextTaskUnblockTime+0x3c>)
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005988:	e008      	b.n	800599c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <prvResetNextTaskUnblockTime+0x38>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <prvResetNextTaskUnblockTime+0x3c>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20000e20 	.word	0x20000e20
 80059ac:	20000e88 	.word	0x20000e88

080059b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <xTaskGetSchedulerState+0x34>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059be:	2301      	movs	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e008      	b.n	80059d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <xTaskGetSchedulerState+0x38>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059cc:	2302      	movs	r3, #2
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	e001      	b.n	80059d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059d6:	687b      	ldr	r3, [r7, #4]
	}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20000e74 	.word	0x20000e74
 80059e8:	20000e90 	.word	0x20000e90

080059ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d056      	beq.n	8005ab0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a02:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <xTaskPriorityDisinherit+0xd0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d00a      	beq.n	8005a22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	60fb      	str	r3, [r7, #12]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	60bb      	str	r3, [r7, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d02c      	beq.n	8005ab0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d128      	bne.n	8005ab0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fc70 	bl	8004348 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <xTaskPriorityDisinherit+0xd4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d903      	bls.n	8005a90 <xTaskPriorityDisinherit+0xa4>
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <xTaskPriorityDisinherit+0xd4>)
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <xTaskPriorityDisinherit+0xd8>)
 8005a9e:	441a      	add	r2, r3
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7fe fbf1 	bl	800428e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ab0:	697b      	ldr	r3, [r7, #20]
	}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000994 	.word	0x20000994
 8005ac0:	20000e70 	.word	0x20000e70
 8005ac4:	20000998 	.word	0x20000998

08005ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fc32 	bl	8004348 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d10a      	bne.n	8005b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af2:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4819      	ldr	r0, [pc, #100]	; (8005b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005afc:	f7fe fbc7 	bl	800428e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b00:	e026      	b.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d209      	bcs.n	8005b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f7fe fbd5 	bl	80042d6 <vListInsert>
}
 8005b2c:	e010      	b.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f7fe fbcb 	bl	80042d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d202      	bcs.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b4a:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6013      	str	r3, [r2, #0]
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000e6c 	.word	0x20000e6c
 8005b5c:	20000994 	.word	0x20000994
 8005b60:	20000e54 	.word	0x20000e54
 8005b64:	20000e24 	.word	0x20000e24
 8005b68:	20000e20 	.word	0x20000e20
 8005b6c:	20000e88 	.word	0x20000e88

08005b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b7a:	f000 fb07 	bl	800618c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <xTimerCreateTimerTask+0x80>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d021      	beq.n	8005bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b8e:	1d3a      	adds	r2, r7, #4
 8005b90:	f107 0108 	add.w	r1, r7, #8
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fb31 	bl	8004200 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	9202      	str	r2, [sp, #8]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	2302      	movs	r3, #2
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	460a      	mov	r2, r1
 8005bb0:	4910      	ldr	r1, [pc, #64]	; (8005bf4 <xTimerCreateTimerTask+0x84>)
 8005bb2:	4811      	ldr	r0, [pc, #68]	; (8005bf8 <xTimerCreateTimerTask+0x88>)
 8005bb4:	f7ff f8de 	bl	8004d74 <xTaskCreateStatic>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <xTimerCreateTimerTask+0x8c>)
 8005bbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <xTimerCreateTimerTask+0x8c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005be6:	697b      	ldr	r3, [r7, #20]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000ec4 	.word	0x20000ec4
 8005bf4:	08007558 	.word	0x08007558
 8005bf8:	08005d35 	.word	0x08005d35
 8005bfc:	20000ec8 	.word	0x20000ec8

08005c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <xTimerGenericCommand+0x98>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d02a      	beq.n	8005c8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b05      	cmp	r3, #5
 8005c46:	dc18      	bgt.n	8005c7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c48:	f7ff feb2 	bl	80059b0 <xTaskGetSchedulerState>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d109      	bne.n	8005c66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <xTimerGenericCommand+0x98>)
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f107 0110 	add.w	r1, r7, #16
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5e:	f7fe fca1 	bl	80045a4 <xQueueGenericSend>
 8005c62:	6278      	str	r0, [r7, #36]	; 0x24
 8005c64:	e012      	b.n	8005c8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <xTimerGenericCommand+0x98>)
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f107 0110 	add.w	r1, r7, #16
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fe fc97 	bl	80045a4 <xQueueGenericSend>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24
 8005c78:	e008      	b.n	8005c8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <xTimerGenericCommand+0x98>)
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f107 0110 	add.w	r1, r7, #16
 8005c82:	2300      	movs	r3, #0
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	f7fe fd8b 	bl	80047a0 <xQueueGenericSendFromISR>
 8005c8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3728      	adds	r7, #40	; 0x28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000ec4 	.word	0x20000ec4

08005c9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca6:	4b22      	ldr	r3, [pc, #136]	; (8005d30 <prvProcessExpiredTimer+0x94>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fb47 	bl	8004348 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d022      	beq.n	8005d0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	18d1      	adds	r1, r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f000 f8d1 	bl	8005e7c <prvInsertTimerInActiveList>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01f      	beq.n	8005d20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	f7ff ff88 	bl	8005c00 <xTimerGenericCommand>
 8005cf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d113      	bne.n	8005d20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	6978      	ldr	r0, [r7, #20]
 8005d26:	4798      	blx	r3
}
 8005d28:	bf00      	nop
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000ebc 	.word	0x20000ebc

08005d34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f857 	bl	8005df4 <prvGetNextExpireTime>
 8005d46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f803 	bl	8005d58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d52:	f000 f8d5 	bl	8005f00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d56:	e7f1      	b.n	8005d3c <prvTimerTask+0x8>

08005d58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d62:	f7ff fa43 	bl	80051ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f866 	bl	8005e3c <prvSampleTimeNow>
 8005d70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d130      	bne.n	8005dda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <prvProcessTimerOrBlockTask+0x3c>
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d806      	bhi.n	8005d94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d86:	f7ff fa3f 	bl	8005208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff85 	bl	8005c9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d92:	e024      	b.n	8005dde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d9a:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <prvProcessTimerOrBlockTask+0x90>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <prvProcessTimerOrBlockTask+0x50>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <prvProcessTimerOrBlockTask+0x52>
 8005da8:	2300      	movs	r3, #0
 8005daa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <prvProcessTimerOrBlockTask+0x94>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	f7fe ffa7 	bl	8004d0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dbe:	f7ff fa23 	bl	8005208 <xTaskResumeAll>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <prvProcessTimerOrBlockTask+0x98>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
}
 8005dd8:	e001      	b.n	8005dde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dda:	f7ff fa15 	bl	8005208 <xTaskResumeAll>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000ec0 	.word	0x20000ec0
 8005dec:	20000ec4 	.word	0x20000ec4
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <prvGetNextExpireTime+0x44>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <prvGetNextExpireTime+0x16>
 8005e06:	2201      	movs	r2, #1
 8005e08:	e000      	b.n	8005e0c <prvGetNextExpireTime+0x18>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e18:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <prvGetNextExpireTime+0x44>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e001      	b.n	8005e28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000ebc 	.word	0x20000ebc

08005e3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e44:	f7ff fa7e 	bl	8005344 <xTaskGetTickCount>
 8005e48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <prvSampleTimeNow+0x3c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d205      	bcs.n	8005e60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e54:	f000 f936 	bl	80060c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e66:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <prvSampleTimeNow+0x3c>)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000ecc 	.word	0x20000ecc

08005e7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d812      	bhi.n	8005ec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d302      	bcc.n	8005eb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e01b      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <prvInsertTimerInActiveList+0x7c>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f7fe fa08 	bl	80042d6 <vListInsert>
 8005ec6:	e012      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d206      	bcs.n	8005ede <prvInsertTimerInActiveList+0x62>
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e007      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <prvInsertTimerInActiveList+0x80>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fe f9f4 	bl	80042d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eee:	697b      	ldr	r3, [r7, #20]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000ec0 	.word	0x20000ec0
 8005efc:	20000ebc 	.word	0x20000ebc

08005f00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08e      	sub	sp, #56	; 0x38
 8005f04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f06:	e0ca      	b.n	800609e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da18      	bge.n	8005f40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	3304      	adds	r3, #4
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	61fb      	str	r3, [r7, #28]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f36:	6850      	ldr	r0, [r2, #4]
 8005f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3a:	6892      	ldr	r2, [r2, #8]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f2c0 80aa 	blt.w	800609c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe f9f5 	bl	8004348 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f5e:	463b      	mov	r3, r7
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff6b 	bl	8005e3c <prvSampleTimeNow>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	f200 8097 	bhi.w	800609e <prvProcessReceivedCommands+0x19e>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <prvProcessReceivedCommands+0x78>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08006015 	.word	0x08006015
 8005f88:	08006029 	.word	0x08006029
 8005f8c:	08006073 	.word	0x08006073
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fa1 	.word	0x08005fa1
 8005f98:	08006015 	.word	0x08006015
 8005f9c:	08006029 	.word	0x08006029
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	18d1      	adds	r1, r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc0:	f7ff ff5c 	bl	8005e7c <prvInsertTimerInActiveList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d069      	beq.n	800609e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05e      	beq.n	800609e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	441a      	add	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2300      	movs	r3, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff2:	f7ff fe05 	bl	8005c00 <xTimerGenericCommand>
 8005ff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d14f      	bne.n	800609e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	61bb      	str	r3, [r7, #24]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006026:	e03a      	b.n	800609e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	617b      	str	r3, [r7, #20]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	18d1      	adds	r1, r2, r3
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606c:	f7ff ff06 	bl	8005e7c <prvInsertTimerInActiveList>
					break;
 8006070:	e015      	b.n	800609e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006082:	f000 fbdd 	bl	8006840 <vPortFree>
 8006086:	e00a      	b.n	800609e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800609a:	e000      	b.n	800609e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800609c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <prvProcessReceivedCommands+0x1c0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	1d39      	adds	r1, r7, #4
 80060a4:	2200      	movs	r2, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fc16 	bl	80048d8 <xQueueReceive>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f47f af2a 	bne.w	8005f08 <prvProcessReceivedCommands+0x8>
	}
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	3730      	adds	r7, #48	; 0x30
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000ec4 	.word	0x20000ec4

080060c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ca:	e048      	b.n	800615e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060cc:	4b2d      	ldr	r3, [pc, #180]	; (8006184 <prvSwitchTimerLists+0xc0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <prvSwitchTimerLists+0xc0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe f92f 	bl	8004348 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02e      	beq.n	800615e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d90e      	bls.n	8006130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <prvSwitchTimerLists+0xc0>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7fe f8d4 	bl	80042d6 <vListInsert>
 800612e:	e016      	b.n	800615e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006130:	2300      	movs	r3, #0
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fd60 	bl	8005c00 <xTimerGenericCommand>
 8006140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	603b      	str	r3, [r7, #0]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <prvSwitchTimerLists+0xc0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1b1      	bne.n	80060cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <prvSwitchTimerLists+0xc0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <prvSwitchTimerLists+0xc4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a04      	ldr	r2, [pc, #16]	; (8006184 <prvSwitchTimerLists+0xc0>)
 8006174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006176:	4a04      	ldr	r2, [pc, #16]	; (8006188 <prvSwitchTimerLists+0xc4>)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000ebc 	.word	0x20000ebc
 8006188:	20000ec0 	.word	0x20000ec0

0800618c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006192:	f000 f967 	bl	8006464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006196:	4b15      	ldr	r3, [pc, #84]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d120      	bne.n	80061e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800619e:	4814      	ldr	r0, [pc, #80]	; (80061f0 <prvCheckForValidListAndQueue+0x64>)
 80061a0:	f7fe f848 	bl	8004234 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061a4:	4813      	ldr	r0, [pc, #76]	; (80061f4 <prvCheckForValidListAndQueue+0x68>)
 80061a6:	f7fe f845 	bl	8004234 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <prvCheckForValidListAndQueue+0x6c>)
 80061ac:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <prvCheckForValidListAndQueue+0x64>)
 80061ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <prvCheckForValidListAndQueue+0x70>)
 80061b2:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <prvCheckForValidListAndQueue+0x68>)
 80061b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061b6:	2300      	movs	r3, #0
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <prvCheckForValidListAndQueue+0x74>)
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <prvCheckForValidListAndQueue+0x78>)
 80061be:	2110      	movs	r1, #16
 80061c0:	200a      	movs	r0, #10
 80061c2:	f7fe f953 	bl	800446c <xQueueGenericCreateStatic>
 80061c6:	4603      	mov	r3, r0
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <prvCheckForValidListAndQueue+0x7c>)
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fd6c 	bl	8004cb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e0:	f000 f970 	bl	80064c4 <vPortExitCritical>
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000ec4 	.word	0x20000ec4
 80061f0:	20000e94 	.word	0x20000e94
 80061f4:	20000ea8 	.word	0x20000ea8
 80061f8:	20000ebc 	.word	0x20000ebc
 80061fc:	20000ec0 	.word	0x20000ec0
 8006200:	20000f70 	.word	0x20000f70
 8006204:	20000ed0 	.word	0x20000ed0
 8006208:	08007560 	.word	0x08007560

0800620c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b04      	subs	r3, #4
 800621c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b04      	subs	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800623c:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <pxPortInitialiseStack+0x64>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3b14      	subs	r3, #20
 8006246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f06f 0202 	mvn.w	r2, #2
 800625a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3b20      	subs	r3, #32
 8006260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	08006275 	.word	0x08006275

08006274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvTaskExitError+0x54>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d00a      	beq.n	800629e <prvTaskExitError+0x2a>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <prvTaskExitError+0x28>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60bb      	str	r3, [r7, #8]
}
 80062b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062b2:	bf00      	nop
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0fc      	beq.n	80062b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2000000c 	.word	0x2000000c
 80062cc:	00000000 	.word	0x00000000

080062d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	4770      	bx	lr
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst2>:
 80062f0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062f8:	4808      	ldr	r0, [pc, #32]	; (800631c <prvPortStartFirstTask+0x24>)
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f380 8808 	msr	MSP, r0
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8814 	msr	CONTROL, r0
 800630a:	b662      	cpsie	i
 800630c:	b661      	cpsie	f
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	df00      	svc	0
 8006318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800631a:	bf00      	nop
 800631c:	e000ed08 	.word	0xe000ed08

08006320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006326:	4b46      	ldr	r3, [pc, #280]	; (8006440 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a46      	ldr	r2, [pc, #280]	; (8006444 <xPortStartScheduler+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x26>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <xPortStartScheduler+0x120>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3f      	ldr	r2, [pc, #252]	; (8006448 <xPortStartScheduler+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10a      	bne.n	8006366 <xPortStartScheduler+0x46>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <xPortStartScheduler+0x12c>)
 8006368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	22ff      	movs	r2, #255	; 0xff
 8006376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006388:	b2da      	uxtb	r2, r3
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <xPortStartScheduler+0x130>)
 800638c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <xPortStartScheduler+0x134>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006394:	e009      	b.n	80063aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3b01      	subs	r3, #1
 800639c:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <xPortStartScheduler+0x134>)
 800639e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d0ef      	beq.n	8006396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <xPortStartScheduler+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1c3 0307 	rsb	r3, r3, #7
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d00a      	beq.n	80063d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <xPortStartScheduler+0x134>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <xPortStartScheduler+0x134>)
 80063e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <xPortStartScheduler+0x134>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <xPortStartScheduler+0x134>)
 80063ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <xPortStartScheduler+0x138>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <xPortStartScheduler+0x138>)
 80063fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <xPortStartScheduler+0x138>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a14      	ldr	r2, [pc, #80]	; (8006458 <xPortStartScheduler+0x138>)
 8006408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800640c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800640e:	f000 f8dd 	bl	80065cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <xPortStartScheduler+0x13c>)
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006418:	f000 f8fc 	bl	8006614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800641c:	4b10      	ldr	r3, [pc, #64]	; (8006460 <xPortStartScheduler+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0f      	ldr	r2, [pc, #60]	; (8006460 <xPortStartScheduler+0x140>)
 8006422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006428:	f7ff ff66 	bl	80062f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800642c:	f7ff f854 	bl	80054d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006430:	f7ff ff20 	bl	8006274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed00 	.word	0xe000ed00
 8006444:	410fc271 	.word	0x410fc271
 8006448:	410fc270 	.word	0x410fc270
 800644c:	e000e400 	.word	0xe000e400
 8006450:	20000fc0 	.word	0x20000fc0
 8006454:	20000fc4 	.word	0x20000fc4
 8006458:	e000ed20 	.word	0xe000ed20
 800645c:	2000000c 	.word	0x2000000c
 8006460:	e000ef34 	.word	0xe000ef34

08006464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	607b      	str	r3, [r7, #4]
}
 800647c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <vPortEnterCritical+0x58>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <vPortEnterCritical+0x58>)
 8006486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <vPortEnterCritical+0x58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <vPortEnterCritical+0x5c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	603b      	str	r3, [r7, #0]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vPortEnterCritical+0x4a>
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000000c 	.word	0x2000000c
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <vPortExitCritical+0x50>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <vPortExitCritical+0x24>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <vPortExitCritical+0x50>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <vPortExitCritical+0x50>)
 80064f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <vPortExitCritical+0x42>
 80064fa:	2300      	movs	r3, #0
 80064fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000000c 	.word	0x2000000c
	...

08006520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006520:	f3ef 8009 	mrs	r0, PSP
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4b15      	ldr	r3, [pc, #84]	; (8006580 <pxCurrentTCBConst>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f01e 0f10 	tst.w	lr, #16
 8006530:	bf08      	it	eq
 8006532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	6010      	str	r0, [r2, #0]
 800653c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006544:	f380 8811 	msr	BASEPRI, r0
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f7fe ffc2 	bl	80054d8 <vTaskSwitchContext>
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f380 8811 	msr	BASEPRI, r0
 800655c:	bc09      	pop	{r0, r3}
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	6808      	ldr	r0, [r1, #0]
 8006562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006566:	f01e 0f10 	tst.w	lr, #16
 800656a:	bf08      	it	eq
 800656c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006570:	f380 8809 	msr	PSP, r0
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst>:
 8006580:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	607b      	str	r3, [r7, #4]
}
 80065a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065a2:	f7fe fedf 	bl	8005364 <xTaskIncrementTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <xPortSysTickHandler+0x40>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortSetupTimerInterrupt+0x38>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <vPortSetupTimerInterrupt+0x3c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <vPortSetupTimerInterrupt+0x40>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	099b      	lsrs	r3, r3, #6
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <vPortSetupTimerInterrupt+0x44>)
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	e000e010 	.word	0xe000e010
 8006604:	e000e018 	.word	0xe000e018
 8006608:	20000000 	.word	0x20000000
 800660c:	10624dd3 	.word	0x10624dd3
 8006610:	e000e014 	.word	0xe000e014

08006614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006624 <vPortEnableVFP+0x10>
 8006618:	6801      	ldr	r1, [r0, #0]
 800661a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800661e:	6001      	str	r1, [r0, #0]
 8006620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006622:	bf00      	nop
 8006624:	e000ed88 	.word	0xe000ed88

08006628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800662e:	f3ef 8305 	mrs	r3, IPSR
 8006632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d914      	bls.n	8006664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <vPortValidateInterruptPriority+0x70>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <vPortValidateInterruptPriority+0x74>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	7afa      	ldrb	r2, [r7, #11]
 800664a:	429a      	cmp	r2, r3
 800664c:	d20a      	bcs.n	8006664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <vPortValidateInterruptPriority+0x78>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <vPortValidateInterruptPriority+0x7c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d90a      	bls.n	800668a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	603b      	str	r3, [r7, #0]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <vPortValidateInterruptPriority+0x60>
	}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	e000e3f0 	.word	0xe000e3f0
 800669c:	20000fc0 	.word	0x20000fc0
 80066a0:	e000ed0c 	.word	0xe000ed0c
 80066a4:	20000fc4 	.word	0x20000fc4

080066a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b4:	f7fe fd9a 	bl	80051ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b8:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <pvPortMalloc+0x180>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c0:	f000 f920 	bl	8006904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <pvPortMalloc+0x184>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8093 	bne.w	80067f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066d8:	2208      	movs	r2, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	3308      	adds	r3, #8
 80066f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <pvPortMalloc+0x6c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06e      	beq.n	80067f8 <pvPortMalloc+0x150>
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <pvPortMalloc+0x188>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d869      	bhi.n	80067f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <pvPortMalloc+0x18c>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <pvPortMalloc+0x18c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa4>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b36      	ldr	r3, [pc, #216]	; (8006828 <pvPortMalloc+0x180>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d050      	beq.n	80067f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d91f      	bls.n	80067b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <pvPortMalloc+0xf8>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f908 	bl	80069c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <pvPortMalloc+0x188>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <pvPortMalloc+0x188>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <pvPortMalloc+0x190>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <pvPortMalloc+0x188>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <pvPortMalloc+0x190>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <pvPortMalloc+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <pvPortMalloc+0x194>)
 80067f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f8:	f7fe fd06 	bl	8005208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pvPortMalloc+0x174>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60fb      	str	r3, [r7, #12]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <pvPortMalloc+0x172>
	return pvReturn;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001b88 	.word	0x20001b88
 800682c:	20001b9c 	.word	0x20001b9c
 8006830:	20001b8c 	.word	0x20001b8c
 8006834:	20001b80 	.word	0x20001b80
 8006838:	20001b90 	.word	0x20001b90
 800683c:	20001b94 	.word	0x20001b94

08006840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04d      	beq.n	80068ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006852:	2308      	movs	r3, #8
 8006854:	425b      	negs	r3, r3
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <vPortFree+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <vPortFree+0x44>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60fb      	str	r3, [r7, #12]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <vPortFree+0x62>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <vPortFree+0xb8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01e      	beq.n	80068ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11a      	bne.n	80068ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <vPortFree+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c8:	f7fe fc90 	bl	80051ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortFree+0xbc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <vPortFree+0xbc>)
 80068d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f000 f874 	bl	80069c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <vPortFree+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vPortFree+0xc0>)
 80068e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ea:	f7fe fc8d 	bl	8005208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20001b9c 	.word	0x20001b9c
 80068fc:	20001b8c 	.word	0x20001b8c
 8006900:	20001b98 	.word	0x20001b98

08006904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800690e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvHeapInit+0xac>)
 8006912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <prvHeapInit+0xac>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <prvHeapInit+0xb0>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <prvHeapInit+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006950:	2208      	movs	r2, #8
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <prvHeapInit+0xb4>)
 8006964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvHeapInit+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <prvHeapInit+0xb4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvHeapInit+0xb4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvHeapInit+0xb8>)
 8006992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <prvHeapInit+0xbc>)
 800699a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <prvHeapInit+0xc0>)
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000fc8 	.word	0x20000fc8
 80069b4:	20001b80 	.word	0x20001b80
 80069b8:	20001b88 	.word	0x20001b88
 80069bc:	20001b90 	.word	0x20001b90
 80069c0:	20001b8c 	.word	0x20001b8c
 80069c4:	20001b9c 	.word	0x20001b9c

080069c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvInsertBlockIntoFreeList+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e002      	b.n	80069dc <prvInsertBlockIntoFreeList+0x14>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d8f7      	bhi.n	80069d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d108      	bne.n	8006a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d118      	bne.n	8006a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20001b80 	.word	0x20001b80
 8006a78:	20001b88 	.word	0x20001b88

08006a7c <__errno>:
 8006a7c:	4b01      	ldr	r3, [pc, #4]	; (8006a84 <__errno+0x8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000010 	.word	0x20000010

08006a88 <__libc_init_array>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	4d0d      	ldr	r5, [pc, #52]	; (8006ac0 <__libc_init_array+0x38>)
 8006a8c:	4c0d      	ldr	r4, [pc, #52]	; (8006ac4 <__libc_init_array+0x3c>)
 8006a8e:	1b64      	subs	r4, r4, r5
 8006a90:	10a4      	asrs	r4, r4, #2
 8006a92:	2600      	movs	r6, #0
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	d109      	bne.n	8006aac <__libc_init_array+0x24>
 8006a98:	4d0b      	ldr	r5, [pc, #44]	; (8006ac8 <__libc_init_array+0x40>)
 8006a9a:	4c0c      	ldr	r4, [pc, #48]	; (8006acc <__libc_init_array+0x44>)
 8006a9c:	f000 fd2c 	bl	80074f8 <_init>
 8006aa0:	1b64      	subs	r4, r4, r5
 8006aa2:	10a4      	asrs	r4, r4, #2
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	42a6      	cmp	r6, r4
 8006aa8:	d105      	bne.n	8006ab6 <__libc_init_array+0x2e>
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab0:	4798      	blx	r3
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7ee      	b.n	8006a94 <__libc_init_array+0xc>
 8006ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aba:	4798      	blx	r3
 8006abc:	3601      	adds	r6, #1
 8006abe:	e7f2      	b.n	8006aa6 <__libc_init_array+0x1e>
 8006ac0:	08007640 	.word	0x08007640
 8006ac4:	08007640 	.word	0x08007640
 8006ac8:	08007640 	.word	0x08007640
 8006acc:	08007644 	.word	0x08007644

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <_puts_r>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	460e      	mov	r6, r1
 8006b00:	4605      	mov	r5, r0
 8006b02:	b118      	cbz	r0, 8006b0c <_puts_r+0x10>
 8006b04:	6983      	ldr	r3, [r0, #24]
 8006b06:	b90b      	cbnz	r3, 8006b0c <_puts_r+0x10>
 8006b08:	f000 fa48 	bl	8006f9c <__sinit>
 8006b0c:	69ab      	ldr	r3, [r5, #24]
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	b913      	cbnz	r3, 8006b18 <_puts_r+0x1c>
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 fa42 	bl	8006f9c <__sinit>
 8006b18:	4b2c      	ldr	r3, [pc, #176]	; (8006bcc <_puts_r+0xd0>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d120      	bne.n	8006b60 <_puts_r+0x64>
 8006b1e:	686c      	ldr	r4, [r5, #4]
 8006b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b22:	07db      	lsls	r3, r3, #31
 8006b24:	d405      	bmi.n	8006b32 <_puts_r+0x36>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	0598      	lsls	r0, r3, #22
 8006b2a:	d402      	bmi.n	8006b32 <_puts_r+0x36>
 8006b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b2e:	f000 fad3 	bl	80070d8 <__retarget_lock_acquire_recursive>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	0719      	lsls	r1, r3, #28
 8006b36:	d51d      	bpl.n	8006b74 <_puts_r+0x78>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	b1db      	cbz	r3, 8006b74 <_puts_r+0x78>
 8006b3c:	3e01      	subs	r6, #1
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b44:	3b01      	subs	r3, #1
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	bb39      	cbnz	r1, 8006b9a <_puts_r+0x9e>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da38      	bge.n	8006bc0 <_puts_r+0xc4>
 8006b4e:	4622      	mov	r2, r4
 8006b50:	210a      	movs	r1, #10
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f848 	bl	8006be8 <__swbuf_r>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d011      	beq.n	8006b80 <_puts_r+0x84>
 8006b5c:	250a      	movs	r5, #10
 8006b5e:	e011      	b.n	8006b84 <_puts_r+0x88>
 8006b60:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <_puts_r+0xd4>)
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d101      	bne.n	8006b6a <_puts_r+0x6e>
 8006b66:	68ac      	ldr	r4, [r5, #8]
 8006b68:	e7da      	b.n	8006b20 <_puts_r+0x24>
 8006b6a:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <_puts_r+0xd8>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	bf08      	it	eq
 8006b70:	68ec      	ldreq	r4, [r5, #12]
 8006b72:	e7d5      	b.n	8006b20 <_puts_r+0x24>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 f888 	bl	8006c8c <__swsetup_r>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d0dd      	beq.n	8006b3c <_puts_r+0x40>
 8006b80:	f04f 35ff 	mov.w	r5, #4294967295
 8006b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b86:	07da      	lsls	r2, r3, #31
 8006b88:	d405      	bmi.n	8006b96 <_puts_r+0x9a>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	059b      	lsls	r3, r3, #22
 8006b8e:	d402      	bmi.n	8006b96 <_puts_r+0x9a>
 8006b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b92:	f000 faa2 	bl	80070da <__retarget_lock_release_recursive>
 8006b96:	4628      	mov	r0, r5
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da04      	bge.n	8006ba8 <_puts_r+0xac>
 8006b9e:	69a2      	ldr	r2, [r4, #24]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	dc06      	bgt.n	8006bb2 <_puts_r+0xb6>
 8006ba4:	290a      	cmp	r1, #10
 8006ba6:	d004      	beq.n	8006bb2 <_puts_r+0xb6>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	6022      	str	r2, [r4, #0]
 8006bae:	7019      	strb	r1, [r3, #0]
 8006bb0:	e7c5      	b.n	8006b3e <_puts_r+0x42>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f817 	bl	8006be8 <__swbuf_r>
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d1bf      	bne.n	8006b3e <_puts_r+0x42>
 8006bbe:	e7df      	b.n	8006b80 <_puts_r+0x84>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	250a      	movs	r5, #10
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	701d      	strb	r5, [r3, #0]
 8006bca:	e7db      	b.n	8006b84 <_puts_r+0x88>
 8006bcc:	080075f8 	.word	0x080075f8
 8006bd0:	08007618 	.word	0x08007618
 8006bd4:	080075d8 	.word	0x080075d8

08006bd8 <puts>:
 8006bd8:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <puts+0xc>)
 8006bda:	4601      	mov	r1, r0
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f7ff bf8d 	b.w	8006afc <_puts_r>
 8006be2:	bf00      	nop
 8006be4:	20000010 	.word	0x20000010

08006be8 <__swbuf_r>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	460e      	mov	r6, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	4605      	mov	r5, r0
 8006bf0:	b118      	cbz	r0, 8006bfa <__swbuf_r+0x12>
 8006bf2:	6983      	ldr	r3, [r0, #24]
 8006bf4:	b90b      	cbnz	r3, 8006bfa <__swbuf_r+0x12>
 8006bf6:	f000 f9d1 	bl	8006f9c <__sinit>
 8006bfa:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <__swbuf_r+0x98>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	d12b      	bne.n	8006c58 <__swbuf_r+0x70>
 8006c00:	686c      	ldr	r4, [r5, #4]
 8006c02:	69a3      	ldr	r3, [r4, #24]
 8006c04:	60a3      	str	r3, [r4, #8]
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	071a      	lsls	r2, r3, #28
 8006c0a:	d52f      	bpl.n	8006c6c <__swbuf_r+0x84>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b36b      	cbz	r3, 8006c6c <__swbuf_r+0x84>
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	1ac0      	subs	r0, r0, r3
 8006c16:	6963      	ldr	r3, [r4, #20]
 8006c18:	b2f6      	uxtb	r6, r6
 8006c1a:	4283      	cmp	r3, r0
 8006c1c:	4637      	mov	r7, r6
 8006c1e:	dc04      	bgt.n	8006c2a <__swbuf_r+0x42>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 f926 	bl	8006e74 <_fflush_r>
 8006c28:	bb30      	cbnz	r0, 8006c78 <__swbuf_r+0x90>
 8006c2a:	68a3      	ldr	r3, [r4, #8]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	60a3      	str	r3, [r4, #8]
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	701e      	strb	r6, [r3, #0]
 8006c38:	6963      	ldr	r3, [r4, #20]
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	4283      	cmp	r3, r0
 8006c3e:	d004      	beq.n	8006c4a <__swbuf_r+0x62>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	07db      	lsls	r3, r3, #31
 8006c44:	d506      	bpl.n	8006c54 <__swbuf_r+0x6c>
 8006c46:	2e0a      	cmp	r6, #10
 8006c48:	d104      	bne.n	8006c54 <__swbuf_r+0x6c>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f911 	bl	8006e74 <_fflush_r>
 8006c52:	b988      	cbnz	r0, 8006c78 <__swbuf_r+0x90>
 8006c54:	4638      	mov	r0, r7
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <__swbuf_r+0x9c>)
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d101      	bne.n	8006c62 <__swbuf_r+0x7a>
 8006c5e:	68ac      	ldr	r4, [r5, #8]
 8006c60:	e7cf      	b.n	8006c02 <__swbuf_r+0x1a>
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <__swbuf_r+0xa0>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	bf08      	it	eq
 8006c68:	68ec      	ldreq	r4, [r5, #12]
 8006c6a:	e7ca      	b.n	8006c02 <__swbuf_r+0x1a>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f80c 	bl	8006c8c <__swsetup_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d0cb      	beq.n	8006c10 <__swbuf_r+0x28>
 8006c78:	f04f 37ff 	mov.w	r7, #4294967295
 8006c7c:	e7ea      	b.n	8006c54 <__swbuf_r+0x6c>
 8006c7e:	bf00      	nop
 8006c80:	080075f8 	.word	0x080075f8
 8006c84:	08007618 	.word	0x08007618
 8006c88:	080075d8 	.word	0x080075d8

08006c8c <__swsetup_r>:
 8006c8c:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <__swsetup_r+0xcc>)
 8006c8e:	b570      	push	{r4, r5, r6, lr}
 8006c90:	681d      	ldr	r5, [r3, #0]
 8006c92:	4606      	mov	r6, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	b125      	cbz	r5, 8006ca2 <__swsetup_r+0x16>
 8006c98:	69ab      	ldr	r3, [r5, #24]
 8006c9a:	b913      	cbnz	r3, 8006ca2 <__swsetup_r+0x16>
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 f97d 	bl	8006f9c <__sinit>
 8006ca2:	4b2e      	ldr	r3, [pc, #184]	; (8006d5c <__swsetup_r+0xd0>)
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	d10f      	bne.n	8006cc8 <__swsetup_r+0x3c>
 8006ca8:	686c      	ldr	r4, [r5, #4]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb0:	0719      	lsls	r1, r3, #28
 8006cb2:	d42c      	bmi.n	8006d0e <__swsetup_r+0x82>
 8006cb4:	06dd      	lsls	r5, r3, #27
 8006cb6:	d411      	bmi.n	8006cdc <__swsetup_r+0x50>
 8006cb8:	2309      	movs	r3, #9
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc6:	e03e      	b.n	8006d46 <__swsetup_r+0xba>
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <__swsetup_r+0xd4>)
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d101      	bne.n	8006cd2 <__swsetup_r+0x46>
 8006cce:	68ac      	ldr	r4, [r5, #8]
 8006cd0:	e7eb      	b.n	8006caa <__swsetup_r+0x1e>
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <__swsetup_r+0xd8>)
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	bf08      	it	eq
 8006cd8:	68ec      	ldreq	r4, [r5, #12]
 8006cda:	e7e6      	b.n	8006caa <__swsetup_r+0x1e>
 8006cdc:	0758      	lsls	r0, r3, #29
 8006cde:	d512      	bpl.n	8006d06 <__swsetup_r+0x7a>
 8006ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce2:	b141      	cbz	r1, 8006cf6 <__swsetup_r+0x6a>
 8006ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	d002      	beq.n	8006cf2 <__swsetup_r+0x66>
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 fa5b 	bl	80071a8 <_free_r>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f043 0308 	orr.w	r3, r3, #8
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	b94b      	cbnz	r3, 8006d26 <__swsetup_r+0x9a>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	d003      	beq.n	8006d26 <__swsetup_r+0x9a>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 fa01 	bl	8007128 <__smakebuf_r>
 8006d26:	89a0      	ldrh	r0, [r4, #12]
 8006d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d2c:	f010 0301 	ands.w	r3, r0, #1
 8006d30:	d00a      	beq.n	8006d48 <__swsetup_r+0xbc>
 8006d32:	2300      	movs	r3, #0
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	6963      	ldr	r3, [r4, #20]
 8006d38:	425b      	negs	r3, r3
 8006d3a:	61a3      	str	r3, [r4, #24]
 8006d3c:	6923      	ldr	r3, [r4, #16]
 8006d3e:	b943      	cbnz	r3, 8006d52 <__swsetup_r+0xc6>
 8006d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d44:	d1ba      	bne.n	8006cbc <__swsetup_r+0x30>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	0781      	lsls	r1, r0, #30
 8006d4a:	bf58      	it	pl
 8006d4c:	6963      	ldrpl	r3, [r4, #20]
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	e7f4      	b.n	8006d3c <__swsetup_r+0xb0>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e7f7      	b.n	8006d46 <__swsetup_r+0xba>
 8006d56:	bf00      	nop
 8006d58:	20000010 	.word	0x20000010
 8006d5c:	080075f8 	.word	0x080075f8
 8006d60:	08007618 	.word	0x08007618
 8006d64:	080075d8 	.word	0x080075d8

08006d68 <__sflush_r>:
 8006d68:	898a      	ldrh	r2, [r1, #12]
 8006d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	4605      	mov	r5, r0
 8006d70:	0710      	lsls	r0, r2, #28
 8006d72:	460c      	mov	r4, r1
 8006d74:	d458      	bmi.n	8006e28 <__sflush_r+0xc0>
 8006d76:	684b      	ldr	r3, [r1, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc05      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc02      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d0f9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d94:	682f      	ldr	r7, [r5, #0]
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	d032      	beq.n	8006e00 <__sflush_r+0x98>
 8006d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	075a      	lsls	r2, r3, #29
 8006da0:	d505      	bpl.n	8006dae <__sflush_r+0x46>
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da8:	b10b      	cbz	r3, 8006dae <__sflush_r+0x46>
 8006daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dac:	1ac0      	subs	r0, r0, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	4602      	mov	r2, r0
 8006db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	d106      	bne.n	8006dce <__sflush_r+0x66>
 8006dc0:	6829      	ldr	r1, [r5, #0]
 8006dc2:	291d      	cmp	r1, #29
 8006dc4:	d82c      	bhi.n	8006e20 <__sflush_r+0xb8>
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <__sflush_r+0x108>)
 8006dc8:	40ca      	lsrs	r2, r1
 8006dca:	07d6      	lsls	r6, r2, #31
 8006dcc:	d528      	bpl.n	8006e20 <__sflush_r+0xb8>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	04d9      	lsls	r1, r3, #19
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	d504      	bpl.n	8006de4 <__sflush_r+0x7c>
 8006dda:	1c42      	adds	r2, r0, #1
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0x7a>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b903      	cbnz	r3, 8006de4 <__sflush_r+0x7c>
 8006de2:	6560      	str	r0, [r4, #84]	; 0x54
 8006de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d0ca      	beq.n	8006d82 <__sflush_r+0x1a>
 8006dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__sflush_r+0x92>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f9d7 	bl	80071a8 <_free_r>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfe:	e7c1      	b.n	8006d84 <__sflush_r+0x1c>
 8006e00:	6a21      	ldr	r1, [r4, #32]
 8006e02:	2301      	movs	r3, #1
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b0      	blx	r6
 8006e08:	1c41      	adds	r1, r0, #1
 8006e0a:	d1c7      	bne.n	8006d9c <__sflush_r+0x34>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c4      	beq.n	8006d9c <__sflush_r+0x34>
 8006e12:	2b1d      	cmp	r3, #29
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0xb2>
 8006e16:	2b16      	cmp	r3, #22
 8006e18:	d101      	bne.n	8006e1e <__sflush_r+0xb6>
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	e7b1      	b.n	8006d82 <__sflush_r+0x1a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7ad      	b.n	8006d84 <__sflush_r+0x1c>
 8006e28:	690f      	ldr	r7, [r1, #16]
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	d0a9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006e2e:	0793      	lsls	r3, r2, #30
 8006e30:	680e      	ldr	r6, [r1, #0]
 8006e32:	bf08      	it	eq
 8006e34:	694b      	ldreq	r3, [r1, #20]
 8006e36:	600f      	str	r7, [r1, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	eba6 0807 	sub.w	r8, r6, r7
 8006e40:	608b      	str	r3, [r1, #8]
 8006e42:	f1b8 0f00 	cmp.w	r8, #0
 8006e46:	dd9c      	ble.n	8006d82 <__sflush_r+0x1a>
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dc06      	bgt.n	8006e66 <__sflush_r+0xfe>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e78e      	b.n	8006d84 <__sflush_r+0x1c>
 8006e66:	4407      	add	r7, r0
 8006e68:	eba8 0800 	sub.w	r8, r8, r0
 8006e6c:	e7e9      	b.n	8006e42 <__sflush_r+0xda>
 8006e6e:	bf00      	nop
 8006e70:	20400001 	.word	0x20400001

08006e74 <_fflush_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b913      	cbnz	r3, 8006e84 <_fflush_r+0x10>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	b118      	cbz	r0, 8006e8e <_fflush_r+0x1a>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <_fflush_r+0x1a>
 8006e8a:	f000 f887 	bl	8006f9c <__sinit>
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <_fflush_r+0x6c>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d11b      	bne.n	8006ecc <_fflush_r+0x58>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ef      	beq.n	8006e7e <_fflush_r+0xa>
 8006e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d404      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea4:	0599      	lsls	r1, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eaa:	f000 f915 	bl	80070d8 <__retarget_lock_acquire_recursive>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f7ff ff59 	bl	8006d68 <__sflush_r>
 8006eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	4605      	mov	r5, r0
 8006ebc:	d4e0      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d4dd      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f908 	bl	80070da <__retarget_lock_release_recursive>
 8006eca:	e7d9      	b.n	8006e80 <_fflush_r+0xc>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <_fflush_r+0x70>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d101      	bne.n	8006ed6 <_fflush_r+0x62>
 8006ed2:	68ac      	ldr	r4, [r5, #8]
 8006ed4:	e7df      	b.n	8006e96 <_fflush_r+0x22>
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <_fflush_r+0x74>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	bf08      	it	eq
 8006edc:	68ec      	ldreq	r4, [r5, #12]
 8006ede:	e7da      	b.n	8006e96 <_fflush_r+0x22>
 8006ee0:	080075f8 	.word	0x080075f8
 8006ee4:	08007618 	.word	0x08007618
 8006ee8:	080075d8 	.word	0x080075d8

08006eec <std>:
 8006eec:	2300      	movs	r3, #0
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006efa:	6083      	str	r3, [r0, #8]
 8006efc:	8181      	strh	r1, [r0, #12]
 8006efe:	6643      	str	r3, [r0, #100]	; 0x64
 8006f00:	81c2      	strh	r2, [r0, #14]
 8006f02:	6183      	str	r3, [r0, #24]
 8006f04:	4619      	mov	r1, r3
 8006f06:	2208      	movs	r2, #8
 8006f08:	305c      	adds	r0, #92	; 0x5c
 8006f0a:	f7ff fdef 	bl	8006aec <memset>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x38>)
 8006f10:	6263      	str	r3, [r4, #36]	; 0x24
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x3c>)
 8006f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <std+0x40>)
 8006f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x44>)
 8006f1c:	6224      	str	r4, [r4, #32]
 8006f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08007389 	.word	0x08007389
 8006f28:	080073ab 	.word	0x080073ab
 8006f2c:	080073e3 	.word	0x080073e3
 8006f30:	08007407 	.word	0x08007407

08006f34 <_cleanup_r>:
 8006f34:	4901      	ldr	r1, [pc, #4]	; (8006f3c <_cleanup_r+0x8>)
 8006f36:	f000 b8af 	b.w	8007098 <_fwalk_reent>
 8006f3a:	bf00      	nop
 8006f3c:	08006e75 	.word	0x08006e75

08006f40 <__sfmoreglue>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	2268      	movs	r2, #104	; 0x68
 8006f44:	1e4d      	subs	r5, r1, #1
 8006f46:	4355      	muls	r5, r2
 8006f48:	460e      	mov	r6, r1
 8006f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f4e:	f000 f997 	bl	8007280 <_malloc_r>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b140      	cbz	r0, 8006f68 <__sfmoreglue+0x28>
 8006f56:	2100      	movs	r1, #0
 8006f58:	e9c0 1600 	strd	r1, r6, [r0]
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	60a0      	str	r0, [r4, #8]
 8006f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f64:	f7ff fdc2 	bl	8006aec <memset>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b8b3 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20001ba1 	.word	0x20001ba1

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b8ae 	b.w	80070da <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20001ba1 	.word	0x20001ba1

08006f84 <__sinit_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sinit_lock_acquire+0x8>)
 8006f86:	f000 b8a7 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20001ba2 	.word	0x20001ba2

08006f90 <__sinit_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sinit_lock_release+0x8>)
 8006f92:	f000 b8a2 	b.w	80070da <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	20001ba2 	.word	0x20001ba2

08006f9c <__sinit>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f7ff fff0 	bl	8006f84 <__sinit_lock_acquire>
 8006fa4:	69a3      	ldr	r3, [r4, #24]
 8006fa6:	b11b      	cbz	r3, 8006fb0 <__sinit+0x14>
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f7ff bff0 	b.w	8006f90 <__sinit_lock_release>
 8006fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <__sinit+0x68>)
 8006fb8:	4a13      	ldr	r2, [pc, #76]	; (8007008 <__sinit+0x6c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	bf04      	itt	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	61a3      	streq	r3, [r4, #24]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f820 	bl	800700c <__sfp>
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f81c 	bl	800700c <__sfp>
 8006fd4:	60a0      	str	r0, [r4, #8]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f818 	bl	800700c <__sfp>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60e0      	str	r0, [r4, #12]
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	6860      	ldr	r0, [r4, #4]
 8006fe4:	f7ff ff82 	bl	8006eec <std>
 8006fe8:	68a0      	ldr	r0, [r4, #8]
 8006fea:	2201      	movs	r2, #1
 8006fec:	2109      	movs	r1, #9
 8006fee:	f7ff ff7d 	bl	8006eec <std>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2112      	movs	r1, #18
 8006ff8:	f7ff ff78 	bl	8006eec <std>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	e7d2      	b.n	8006fa8 <__sinit+0xc>
 8007002:	bf00      	nop
 8007004:	080075d4 	.word	0x080075d4
 8007008:	08006f35 	.word	0x08006f35

0800700c <__sfp>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	4607      	mov	r7, r0
 8007010:	f7ff ffac 	bl	8006f6c <__sfp_lock_acquire>
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <__sfp+0x84>)
 8007016:	681e      	ldr	r6, [r3, #0]
 8007018:	69b3      	ldr	r3, [r6, #24]
 800701a:	b913      	cbnz	r3, 8007022 <__sfp+0x16>
 800701c:	4630      	mov	r0, r6
 800701e:	f7ff ffbd 	bl	8006f9c <__sinit>
 8007022:	3648      	adds	r6, #72	; 0x48
 8007024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	d503      	bpl.n	8007034 <__sfp+0x28>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	b30b      	cbz	r3, 8007074 <__sfp+0x68>
 8007030:	6836      	ldr	r6, [r6, #0]
 8007032:	e7f7      	b.n	8007024 <__sfp+0x18>
 8007034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007038:	b9d5      	cbnz	r5, 8007070 <__sfp+0x64>
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <__sfp+0x88>)
 800703c:	60e3      	str	r3, [r4, #12]
 800703e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007042:	6665      	str	r5, [r4, #100]	; 0x64
 8007044:	f000 f847 	bl	80070d6 <__retarget_lock_init_recursive>
 8007048:	f7ff ff96 	bl	8006f78 <__sfp_lock_release>
 800704c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	61a5      	str	r5, [r4, #24]
 8007058:	2208      	movs	r2, #8
 800705a:	4629      	mov	r1, r5
 800705c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007060:	f7ff fd44 	bl	8006aec <memset>
 8007064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800706c:	4620      	mov	r0, r4
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	3468      	adds	r4, #104	; 0x68
 8007072:	e7d9      	b.n	8007028 <__sfp+0x1c>
 8007074:	2104      	movs	r1, #4
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ff62 	bl	8006f40 <__sfmoreglue>
 800707c:	4604      	mov	r4, r0
 800707e:	6030      	str	r0, [r6, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1d5      	bne.n	8007030 <__sfp+0x24>
 8007084:	f7ff ff78 	bl	8006f78 <__sfp_lock_release>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	e7ee      	b.n	800706c <__sfp+0x60>
 800708e:	bf00      	nop
 8007090:	080075d4 	.word	0x080075d4
 8007094:	ffff0001 	.word	0xffff0001

08007098 <_fwalk_reent>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4606      	mov	r6, r0
 800709e:	4688      	mov	r8, r1
 80070a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070a4:	2700      	movs	r7, #0
 80070a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070aa:	f1b9 0901 	subs.w	r9, r9, #1
 80070ae:	d505      	bpl.n	80070bc <_fwalk_reent+0x24>
 80070b0:	6824      	ldr	r4, [r4, #0]
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d1f7      	bne.n	80070a6 <_fwalk_reent+0xe>
 80070b6:	4638      	mov	r0, r7
 80070b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d907      	bls.n	80070d2 <_fwalk_reent+0x3a>
 80070c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c6:	3301      	adds	r3, #1
 80070c8:	d003      	beq.n	80070d2 <_fwalk_reent+0x3a>
 80070ca:	4629      	mov	r1, r5
 80070cc:	4630      	mov	r0, r6
 80070ce:	47c0      	blx	r8
 80070d0:	4307      	orrs	r7, r0
 80070d2:	3568      	adds	r5, #104	; 0x68
 80070d4:	e7e9      	b.n	80070aa <_fwalk_reent+0x12>

080070d6 <__retarget_lock_init_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_acquire_recursive>:
 80070d8:	4770      	bx	lr

080070da <__retarget_lock_release_recursive>:
 80070da:	4770      	bx	lr

080070dc <__swhatbuf_r>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	460e      	mov	r6, r1
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	b096      	sub	sp, #88	; 0x58
 80070e8:	4614      	mov	r4, r2
 80070ea:	461d      	mov	r5, r3
 80070ec:	da08      	bge.n	8007100 <__swhatbuf_r+0x24>
 80070ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	061a      	lsls	r2, r3, #24
 80070f8:	d410      	bmi.n	800711c <__swhatbuf_r+0x40>
 80070fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fe:	e00e      	b.n	800711e <__swhatbuf_r+0x42>
 8007100:	466a      	mov	r2, sp
 8007102:	f000 f9a7 	bl	8007454 <_fstat_r>
 8007106:	2800      	cmp	r0, #0
 8007108:	dbf1      	blt.n	80070ee <__swhatbuf_r+0x12>
 800710a:	9a01      	ldr	r2, [sp, #4]
 800710c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007114:	425a      	negs	r2, r3
 8007116:	415a      	adcs	r2, r3
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	e7ee      	b.n	80070fa <__swhatbuf_r+0x1e>
 800711c:	2340      	movs	r3, #64	; 0x40
 800711e:	2000      	movs	r0, #0
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	b016      	add	sp, #88	; 0x58
 8007124:	bd70      	pop	{r4, r5, r6, pc}
	...

08007128 <__smakebuf_r>:
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800712c:	079d      	lsls	r5, r3, #30
 800712e:	4606      	mov	r6, r0
 8007130:	460c      	mov	r4, r1
 8007132:	d507      	bpl.n	8007144 <__smakebuf_r+0x1c>
 8007134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	2301      	movs	r3, #1
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	b002      	add	sp, #8
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	ab01      	add	r3, sp, #4
 8007146:	466a      	mov	r2, sp
 8007148:	f7ff ffc8 	bl	80070dc <__swhatbuf_r>
 800714c:	9900      	ldr	r1, [sp, #0]
 800714e:	4605      	mov	r5, r0
 8007150:	4630      	mov	r0, r6
 8007152:	f000 f895 	bl	8007280 <_malloc_r>
 8007156:	b948      	cbnz	r0, 800716c <__smakebuf_r+0x44>
 8007158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715c:	059a      	lsls	r2, r3, #22
 800715e:	d4ef      	bmi.n	8007140 <__smakebuf_r+0x18>
 8007160:	f023 0303 	bic.w	r3, r3, #3
 8007164:	f043 0302 	orr.w	r3, r3, #2
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	e7e3      	b.n	8007134 <__smakebuf_r+0xc>
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <__smakebuf_r+0x7c>)
 800716e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	6020      	str	r0, [r4, #0]
 8007174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	9b00      	ldr	r3, [sp, #0]
 800717c:	6163      	str	r3, [r4, #20]
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	6120      	str	r0, [r4, #16]
 8007182:	b15b      	cbz	r3, 800719c <__smakebuf_r+0x74>
 8007184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007188:	4630      	mov	r0, r6
 800718a:	f000 f975 	bl	8007478 <_isatty_r>
 800718e:	b128      	cbz	r0, 800719c <__smakebuf_r+0x74>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	89a0      	ldrh	r0, [r4, #12]
 800719e:	4305      	orrs	r5, r0
 80071a0:	81a5      	strh	r5, [r4, #12]
 80071a2:	e7cd      	b.n	8007140 <__smakebuf_r+0x18>
 80071a4:	08006f35 	.word	0x08006f35

080071a8 <_free_r>:
 80071a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071aa:	2900      	cmp	r1, #0
 80071ac:	d044      	beq.n	8007238 <_free_r+0x90>
 80071ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b2:	9001      	str	r0, [sp, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f1a1 0404 	sub.w	r4, r1, #4
 80071ba:	bfb8      	it	lt
 80071bc:	18e4      	addlt	r4, r4, r3
 80071be:	f000 f97d 	bl	80074bc <__malloc_lock>
 80071c2:	4a1e      	ldr	r2, [pc, #120]	; (800723c <_free_r+0x94>)
 80071c4:	9801      	ldr	r0, [sp, #4]
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	b933      	cbnz	r3, 80071d8 <_free_r+0x30>
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	6014      	str	r4, [r2, #0]
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071d4:	f000 b978 	b.w	80074c8 <__malloc_unlock>
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d908      	bls.n	80071ee <_free_r+0x46>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	1961      	adds	r1, r4, r5
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf01      	itttt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	1949      	addeq	r1, r1, r5
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	e7ed      	b.n	80071ca <_free_r+0x22>
 80071ee:	461a      	mov	r2, r3
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	b10b      	cbz	r3, 80071f8 <_free_r+0x50>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d9fa      	bls.n	80071ee <_free_r+0x46>
 80071f8:	6811      	ldr	r1, [r2, #0]
 80071fa:	1855      	adds	r5, r2, r1
 80071fc:	42a5      	cmp	r5, r4
 80071fe:	d10b      	bne.n	8007218 <_free_r+0x70>
 8007200:	6824      	ldr	r4, [r4, #0]
 8007202:	4421      	add	r1, r4
 8007204:	1854      	adds	r4, r2, r1
 8007206:	42a3      	cmp	r3, r4
 8007208:	6011      	str	r1, [r2, #0]
 800720a:	d1e0      	bne.n	80071ce <_free_r+0x26>
 800720c:	681c      	ldr	r4, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	6053      	str	r3, [r2, #4]
 8007212:	4421      	add	r1, r4
 8007214:	6011      	str	r1, [r2, #0]
 8007216:	e7da      	b.n	80071ce <_free_r+0x26>
 8007218:	d902      	bls.n	8007220 <_free_r+0x78>
 800721a:	230c      	movs	r3, #12
 800721c:	6003      	str	r3, [r0, #0]
 800721e:	e7d6      	b.n	80071ce <_free_r+0x26>
 8007220:	6825      	ldr	r5, [r4, #0]
 8007222:	1961      	adds	r1, r4, r5
 8007224:	428b      	cmp	r3, r1
 8007226:	bf04      	itt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	bf04      	itt	eq
 8007230:	1949      	addeq	r1, r1, r5
 8007232:	6021      	streq	r1, [r4, #0]
 8007234:	6054      	str	r4, [r2, #4]
 8007236:	e7ca      	b.n	80071ce <_free_r+0x26>
 8007238:	b003      	add	sp, #12
 800723a:	bd30      	pop	{r4, r5, pc}
 800723c:	20001ba4 	.word	0x20001ba4

08007240 <sbrk_aligned>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4e0e      	ldr	r6, [pc, #56]	; (800727c <sbrk_aligned+0x3c>)
 8007244:	460c      	mov	r4, r1
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	4605      	mov	r5, r0
 800724a:	b911      	cbnz	r1, 8007252 <sbrk_aligned+0x12>
 800724c:	f000 f88c 	bl	8007368 <_sbrk_r>
 8007250:	6030      	str	r0, [r6, #0]
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f000 f887 	bl	8007368 <_sbrk_r>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d00a      	beq.n	8007274 <sbrk_aligned+0x34>
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d007      	beq.n	8007278 <sbrk_aligned+0x38>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f87c 	bl	8007368 <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d101      	bne.n	8007278 <sbrk_aligned+0x38>
 8007274:	f04f 34ff 	mov.w	r4, #4294967295
 8007278:	4620      	mov	r0, r4
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	20001ba8 	.word	0x20001ba8

08007280 <_malloc_r>:
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	1ccd      	adds	r5, r1, #3
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	2d00      	cmp	r5, #0
 8007294:	4607      	mov	r7, r0
 8007296:	db01      	blt.n	800729c <_malloc_r+0x1c>
 8007298:	42a9      	cmp	r1, r5
 800729a:	d905      	bls.n	80072a8 <_malloc_r+0x28>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	2600      	movs	r6, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a8:	4e2e      	ldr	r6, [pc, #184]	; (8007364 <_malloc_r+0xe4>)
 80072aa:	f000 f907 	bl	80074bc <__malloc_lock>
 80072ae:	6833      	ldr	r3, [r6, #0]
 80072b0:	461c      	mov	r4, r3
 80072b2:	bb34      	cbnz	r4, 8007302 <_malloc_r+0x82>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ffc2 	bl	8007240 <sbrk_aligned>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	4604      	mov	r4, r0
 80072c0:	d14d      	bne.n	800735e <_malloc_r+0xde>
 80072c2:	6834      	ldr	r4, [r6, #0]
 80072c4:	4626      	mov	r6, r4
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	d140      	bne.n	800734c <_malloc_r+0xcc>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	4631      	mov	r1, r6
 80072ce:	4638      	mov	r0, r7
 80072d0:	eb04 0803 	add.w	r8, r4, r3
 80072d4:	f000 f848 	bl	8007368 <_sbrk_r>
 80072d8:	4580      	cmp	r8, r0
 80072da:	d13a      	bne.n	8007352 <_malloc_r+0xd2>
 80072dc:	6821      	ldr	r1, [r4, #0]
 80072de:	3503      	adds	r5, #3
 80072e0:	1a6d      	subs	r5, r5, r1
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	4629      	mov	r1, r5
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff ffa5 	bl	8007240 <sbrk_aligned>
 80072f6:	3001      	adds	r0, #1
 80072f8:	d02b      	beq.n	8007352 <_malloc_r+0xd2>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	442b      	add	r3, r5
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	e00e      	b.n	8007320 <_malloc_r+0xa0>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	1b52      	subs	r2, r2, r5
 8007306:	d41e      	bmi.n	8007346 <_malloc_r+0xc6>
 8007308:	2a0b      	cmp	r2, #11
 800730a:	d916      	bls.n	800733a <_malloc_r+0xba>
 800730c:	1961      	adds	r1, r4, r5
 800730e:	42a3      	cmp	r3, r4
 8007310:	6025      	str	r5, [r4, #0]
 8007312:	bf18      	it	ne
 8007314:	6059      	strne	r1, [r3, #4]
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	bf08      	it	eq
 800731a:	6031      	streq	r1, [r6, #0]
 800731c:	5162      	str	r2, [r4, r5]
 800731e:	604b      	str	r3, [r1, #4]
 8007320:	4638      	mov	r0, r7
 8007322:	f104 060b 	add.w	r6, r4, #11
 8007326:	f000 f8cf 	bl	80074c8 <__malloc_unlock>
 800732a:	f026 0607 	bic.w	r6, r6, #7
 800732e:	1d23      	adds	r3, r4, #4
 8007330:	1af2      	subs	r2, r6, r3
 8007332:	d0b6      	beq.n	80072a2 <_malloc_r+0x22>
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	50a3      	str	r3, [r4, r2]
 8007338:	e7b3      	b.n	80072a2 <_malloc_r+0x22>
 800733a:	6862      	ldr	r2, [r4, #4]
 800733c:	42a3      	cmp	r3, r4
 800733e:	bf0c      	ite	eq
 8007340:	6032      	streq	r2, [r6, #0]
 8007342:	605a      	strne	r2, [r3, #4]
 8007344:	e7ec      	b.n	8007320 <_malloc_r+0xa0>
 8007346:	4623      	mov	r3, r4
 8007348:	6864      	ldr	r4, [r4, #4]
 800734a:	e7b2      	b.n	80072b2 <_malloc_r+0x32>
 800734c:	4634      	mov	r4, r6
 800734e:	6876      	ldr	r6, [r6, #4]
 8007350:	e7b9      	b.n	80072c6 <_malloc_r+0x46>
 8007352:	230c      	movs	r3, #12
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4638      	mov	r0, r7
 8007358:	f000 f8b6 	bl	80074c8 <__malloc_unlock>
 800735c:	e7a1      	b.n	80072a2 <_malloc_r+0x22>
 800735e:	6025      	str	r5, [r4, #0]
 8007360:	e7de      	b.n	8007320 <_malloc_r+0xa0>
 8007362:	bf00      	nop
 8007364:	20001ba4 	.word	0x20001ba4

08007368 <_sbrk_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d06      	ldr	r5, [pc, #24]	; (8007384 <_sbrk_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7f9 fd1e 	bl	8000db4 <_sbrk>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_sbrk_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_sbrk_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20001bac 	.word	0x20001bac

08007388 <__sread>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	f000 f8a0 	bl	80074d4 <_read_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	bfab      	itete	ge
 8007398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800739a:	89a3      	ldrhlt	r3, [r4, #12]
 800739c:	181b      	addge	r3, r3, r0
 800739e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073a2:	bfac      	ite	ge
 80073a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073a6:	81a3      	strhlt	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__swrite>:
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	461f      	mov	r7, r3
 80073b0:	898b      	ldrh	r3, [r1, #12]
 80073b2:	05db      	lsls	r3, r3, #23
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4616      	mov	r6, r2
 80073ba:	d505      	bpl.n	80073c8 <__swrite+0x1e>
 80073bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c0:	2302      	movs	r3, #2
 80073c2:	2200      	movs	r2, #0
 80073c4:	f000 f868 	bl	8007498 <_lseek_r>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	f000 b817 	b.w	8007410 <_write_r>

080073e2 <__sseek>:
 80073e2:	b510      	push	{r4, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 f855 	bl	8007498 <_lseek_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	bf15      	itete	ne
 80073f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strheq	r3, [r4, #12]
 8007400:	bf18      	it	ne
 8007402:	81a3      	strhne	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__sclose>:
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 b813 	b.w	8007434 <_close_r>
	...

08007410 <_write_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	; (8007430 <_write_r+0x20>)
 8007414:	4604      	mov	r4, r0
 8007416:	4608      	mov	r0, r1
 8007418:	4611      	mov	r1, r2
 800741a:	2200      	movs	r2, #0
 800741c:	602a      	str	r2, [r5, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	f7f9 fc77 	bl	8000d12 <_write>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_write_r+0x1e>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_write_r+0x1e>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20001bac 	.word	0x20001bac

08007434 <_close_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d06      	ldr	r5, [pc, #24]	; (8007450 <_close_r+0x1c>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7f9 fc83 	bl	8000d4a <_close>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_close_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_close_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20001bac 	.word	0x20001bac

08007454 <_fstat_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d07      	ldr	r5, [pc, #28]	; (8007474 <_fstat_r+0x20>)
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	4611      	mov	r1, r2
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	f7f9 fc7e 	bl	8000d62 <_fstat>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d102      	bne.n	8007470 <_fstat_r+0x1c>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	b103      	cbz	r3, 8007470 <_fstat_r+0x1c>
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	20001bac 	.word	0x20001bac

08007478 <_isatty_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4d06      	ldr	r5, [pc, #24]	; (8007494 <_isatty_r+0x1c>)
 800747c:	2300      	movs	r3, #0
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	602b      	str	r3, [r5, #0]
 8007484:	f7f9 fc7d 	bl	8000d82 <_isatty>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d102      	bne.n	8007492 <_isatty_r+0x1a>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b103      	cbz	r3, 8007492 <_isatty_r+0x1a>
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	20001bac 	.word	0x20001bac

08007498 <_lseek_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d07      	ldr	r5, [pc, #28]	; (80074b8 <_lseek_r+0x20>)
 800749c:	4604      	mov	r4, r0
 800749e:	4608      	mov	r0, r1
 80074a0:	4611      	mov	r1, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	602a      	str	r2, [r5, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f7f9 fc76 	bl	8000d98 <_lseek>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_lseek_r+0x1e>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_lseek_r+0x1e>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20001bac 	.word	0x20001bac

080074bc <__malloc_lock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__malloc_lock+0x8>)
 80074be:	f7ff be0b 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	20001ba0 	.word	0x20001ba0

080074c8 <__malloc_unlock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__malloc_unlock+0x8>)
 80074ca:	f7ff be06 	b.w	80070da <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	20001ba0 	.word	0x20001ba0

080074d4 <_read_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	; (80074f4 <_read_r+0x20>)
 80074d8:	4604      	mov	r4, r0
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7f9 fbf8 	bl	8000cd8 <_read>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_read_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_read_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20001bac 	.word	0x20001bac

080074f8 <_init>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	bf00      	nop
 80074fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fe:	bc08      	pop	{r3}
 8007500:	469e      	mov	lr, r3
 8007502:	4770      	bx	lr

08007504 <_fini>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr
