
Batonome-Embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007168  08007168  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007170  08007170  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  20000074  080071ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  080071ec  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc31  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ddf  00000000  00000000  0003ccd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00040ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00042310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000574c  00000000  00000000  000439d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bee4  00000000  00000000  0004911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74b3  00000000  00000000  00065000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c4b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd0  00000000  00000000  0013c504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007028 	.word	0x08007028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007028 	.word	0x08007028

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <gpsTask>:

#include "cmsis_os.h"
#include "main.h"

void gpsTask()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	for(;;)
 80004d8:	e7fe      	b.n	80004d8 <gpsTask+0x4>
	...

080004dc <gps_Init>:
}



void gps_Init()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t gpsHandle;
	const osThreadAttr_t gps_attributes = {
 80004e2:	463b      	mov	r3, r7
 80004e4:	2224      	movs	r2, #36	; 0x24
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f006 f897 	bl	800661c <memset>
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <gps_Init+0x38>)
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	2318      	movs	r3, #24
 80004fa:	61bb      	str	r3, [r7, #24]
	  .name = "gps",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	gpsHandle = osThreadNew(gpsTask, NULL, &gps_attributes);
 80004fc:	463b      	mov	r3, r7
 80004fe:	461a      	mov	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <gps_Init+0x3c>)
 8000504:	f003 fb48 	bl	8003b98 <osThreadNew>
 8000508:	6278      	str	r0, [r7, #36]	; 0x24
}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	; 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08007040 	.word	0x08007040
 8000518:	080004d5 	.word	0x080004d5

0800051c <ImuManagementTask>:

#include "cmsis_os.h"
#include "main.h"

void ImuManagementTask()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	printf("IMU management task is launched\n");
 8000520:	4801      	ldr	r0, [pc, #4]	; (8000528 <ImuManagementTask+0xc>)
 8000522:	f006 f8f1 	bl	8006708 <puts>

	for(;;)
 8000526:	e7fe      	b.n	8000526 <ImuManagementTask+0xa>
 8000528:	08007044 	.word	0x08007044

0800052c <imu_Init>:
}



void imu_Init()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t imuHandle;
	const osThreadAttr_t imu_attributes = {
 8000532:	463b      	mov	r3, r7
 8000534:	2224      	movs	r2, #36	; 0x24
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f006 f86f 	bl	800661c <memset>
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <imu_Init+0x38>)
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	2318      	movs	r3, #24
 800054a:	61bb      	str	r3, [r7, #24]
	  .name = "imu",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	imuHandle = osThreadNew(ImuManagementTask, NULL, &imu_attributes);
 800054c:	463b      	mov	r3, r7
 800054e:	461a      	mov	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <imu_Init+0x3c>)
 8000554:	f003 fb20 	bl	8003b98 <osThreadNew>
 8000558:	6278      	str	r0, [r7, #36]	; 0x24
}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	; 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08007064 	.word	0x08007064
 8000568:	0800051d 	.word	0x0800051d

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fb71 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f820 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8c4 	bl	8000704 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800057c:	f000 f862 	bl	8000644 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f890 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  gps_Init();
 8000584:	f7ff ffaa 	bl	80004dc <gps_Init>
  imu_Init();
 8000588:	f7ff ffd0 	bl	800052c <imu_Init>
  zigbee_Init();
 800058c:	f000 fb1a 	bl	8000bc4 <zigbee_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000590:	f003 fab8 	bl	8003b04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <main+0x40>)
 8000596:	2100      	movs	r1, #0
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <main+0x44>)
 800059a:	f003 fafd 	bl	8003b98 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <main+0x48>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f003 fad2 	bl	8003b4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x3c>
 80005aa:	bf00      	nop
 80005ac:	08007098 	.word	0x08007098
 80005b0:	08000735 	.word	0x08000735
 80005b4:	20000198 	.word	0x20000198

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 f828 	bl	800661c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f000 fe4d 	bl	800127c <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 f8be 	bl	8000768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ec:	2310      	movs	r3, #16
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f8:	2360      	movs	r3, #96	; 0x60
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fe8f 	bl	8001328 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000610:	f000 f8aa 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa8f 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 f896 	bl	8000768 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART1_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART1_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000688:	f002 fa20 	bl	8002acc <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f869 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000090 	.word	0x20000090
 80006a0:	40013800 	.word	0x40013800

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e8:	f002 f9f0 	bl	8002acc <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f839 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000114 	.word	0x20000114
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_GPIO_Init+0x2c>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <MX_GPIO_Init+0x2c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_GPIO_Init+0x2c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f003 fabd 	bl	8003cbc <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 fa97 	bl	8000c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40001000 	.word	0x40001000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_MspInit+0x4c>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <HAL_MspInit+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_MspInit+0x4c>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_MspInit+0x4c>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	210f      	movs	r1, #15
 80007ae:	f06f 0001 	mvn.w	r0, #1
 80007b2:	f000 fb41 	bl	8000e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a0      	sub	sp, #128	; 0x80
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	2254      	movs	r2, #84	; 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 ff19 	bl	800661c <memset>
  if(huart->Instance==USART1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a42      	ldr	r2, [pc, #264]	; (80008f8 <HAL_UART_MspInit+0x134>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d140      	bne.n	8000876 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fbfb 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800080c:	f7ff ffac 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000810:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000814:	4a39      	ldr	r2, [pc, #228]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6613      	str	r3, [r2, #96]	; 0x60
 800081c:	4b37      	ldr	r3, [pc, #220]	; (80008fc <HAL_UART_MspInit+0x138>)
 800081e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <HAL_UART_MspInit+0x138>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <HAL_UART_MspInit+0x138>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000840:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000852:	2307      	movs	r3, #7
 8000854:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fb94 	bl	8000f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2025      	movs	r0, #37	; 0x25
 800086a:	f000 fae5 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800086e:	2025      	movs	r0, #37	; 0x25
 8000870:	f000 fafe 	bl	8000e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000874:	e03b      	b.n	80008ee <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a21      	ldr	r2, [pc, #132]	; (8000900 <HAL_UART_MspInit+0x13c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d136      	bne.n	80008ee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fbb5 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000898:	f7ff ff66 	bl	8000768 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x138>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a0:	4a16      	ldr	r2, [pc, #88]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a6:	6593      	str	r3, [r2, #88]	; 0x58
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008cc:	230c      	movs	r3, #12
 80008ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008dc:	2307      	movs	r3, #7
 80008de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 fb4f 	bl	8000f8c <HAL_GPIO_Init>
}
 80008ee:	bf00      	nop
 80008f0:	3780      	adds	r7, #128	; 0x80
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40004400 	.word	0x40004400

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <HAL_InitTick+0xe0>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <HAL_InitTick+0xe0>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <HAL_InitTick+0xe0>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092a:	f107 0210 	add.w	r2, r7, #16
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f001 facf 	bl	8001ed8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	2b00      	cmp	r3, #0
 8000942:	d103      	bne.n	800094c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000944:	f001 fa9c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000948:	6378      	str	r0, [r7, #52]	; 0x34
 800094a:	e004      	b.n	8000956 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800094c:	f001 fa98 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000950:	4603      	mov	r3, r0
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <HAL_InitTick+0xe4>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	0c9b      	lsrs	r3, r3, #18
 8000960:	3b01      	subs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_InitTick+0xe8>)
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <HAL_InitTick+0xec>)
 8000968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_InitTick+0xe8>)
 800096c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000970:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <HAL_InitTick+0xe8>)
 8000974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000976:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_InitTick+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_InitTick+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_InitTick+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <HAL_InitTick+0xe8>)
 800098c:	f001 fe1e 	bl	80025cc <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000996:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800099a:	2b00      	cmp	r3, #0
 800099c:	d11b      	bne.n	80009d6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <HAL_InitTick+0xe8>)
 80009a0:	f001 fe76 	bl	8002690 <HAL_TIM_Base_Start_IT>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d111      	bne.n	80009d6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009b2:	2036      	movs	r0, #54	; 0x36
 80009b4:	f000 fa5c 	bl	8000e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d808      	bhi.n	80009d0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	2036      	movs	r0, #54	; 0x36
 80009c4:	f000 fa38 	bl	8000e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_InitTick+0xf0>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e002      	b.n	80009d6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	2000019c 	.word	0x2000019c
 80009f0:	40001000 	.word	0x40001000
 80009f4:	20000004 	.word	0x20000004

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART1_IRQHandler+0x10>)
 8000a2a:	f002 f89d 	bl	8002b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000090 	.word	0x20000090

08000a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM6_DAC_IRQHandler+0x10>)
 8000a3e:	f001 fe7b 	bl	8002738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000019c 	.word	0x2000019c

08000a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e00a      	b.n	8000a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5e:	f3af 8000 	nop.w
 8000a62:	4601      	mov	r1, r0
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	b2ca      	uxtb	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf0      	blt.n	8000a5e <_read+0x12>
  }

  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e009      	b.n	8000aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf1      	blt.n	8000a98 <_write+0x12>
  }
  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:

int _close(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f005 fd28 	bl	80065ac <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20010000 	.word	0x20010000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	200001e8 	.word	0x200001e8
 8000b90:	20001b08 	.word	0x20001b08

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <ZigbeeComTask>:
void zigbee_Init();



void ZigbeeComTask(void *argument)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */


  for(;;)
 8000bc0:	e7fe      	b.n	8000bc0 <ZigbeeComTask+0x8>
	...

08000bc4 <zigbee_Init>:
  }
  /* USER CODE END 5 */
}

void zigbee_Init()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t zigbeeComHandle;
	const osThreadAttr_t zigbee_com_attributes = {
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2224      	movs	r2, #36	; 0x24
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 fd23 	bl	800661c <memset>
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <zigbee_Init+0x38>)
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	2318      	movs	r3, #24
 8000be2:	61bb      	str	r3, [r7, #24]
	  .name = "zigbee_com",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	zigbeeComHandle = osThreadNew(ZigbeeComTask, NULL, &zigbee_com_attributes);
 8000be4:	463b      	mov	r3, r7
 8000be6:	461a      	mov	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <zigbee_Init+0x3c>)
 8000bec:	f002 ffd4 	bl	8003b98 <osThreadNew>
 8000bf0:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08007074 	.word	0x08007074
 8000c00:	08000bb9 	.word	0x08000bb9

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffc4 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f005 fcc1 	bl	80065b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fc99 	bl	800056c <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c48:	08007178 	.word	0x08007178
  ldr r2, =_sbss
 8000c4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c50:	20001b08 	.word	0x20001b08

08000c54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_IRQHandler>

08000c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f8de 	bl	8000e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	200f      	movs	r0, #15
 8000c68:	f7ff fe4c 	bl	8000904 <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fd7c 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200001ec 	.word	0x200001ec

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200001ec 	.word	0x200001ec

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff4c 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4a:	f7ff ff61 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	6978      	ldr	r0, [r7, #20]
 8000e56:	f7ff ffb1 	bl	8000dbc <NVIC_EncodePriority>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff80 	bl	8000d68 <__NVIC_SetPriority>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff54 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e022      	b.n	8000efc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 020e 	bic.w	r2, r2, #14
 8000ec4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f003 021c 	and.w	r2, r3, #28
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d005      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e029      	b.n	8000f80 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 020e 	bic.w	r2, r2, #14
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	f003 021c 	and.w	r2, r3, #28
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	4798      	blx	r3
    }
  }
  return status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e148      	b.n	800122e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 813a 	beq.w	8001228 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d005      	beq.n	8000fcc <HAL_GPIO_Init+0x40>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d130      	bne.n	800102e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001002:	2201      	movs	r2, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	f003 0201 	and.w	r2, r3, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b03      	cmp	r3, #3
 8001038:	d017      	beq.n	800106a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d123      	bne.n	80010be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0203 	and.w	r2, r3, #3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8094 	beq.w	8001228 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_GPIO_Init+0x2c0>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x2c0>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6613      	str	r3, [r2, #96]	; 0x60
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <HAL_GPIO_Init+0x2c0>)
 800110e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x2c4>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1d4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a43      	ldr	r2, [pc, #268]	; (8001254 <HAL_GPIO_Init+0x2c8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1d0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a42      	ldr	r2, [pc, #264]	; (8001258 <HAL_GPIO_Init+0x2cc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1cc>
 8001154:	2302      	movs	r3, #2
 8001156:	e004      	b.n	8001162 <HAL_GPIO_Init+0x1d6>
 8001158:	2307      	movs	r3, #7
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x1d6>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <HAL_GPIO_Init+0x1d6>
 8001160:	2300      	movs	r3, #0
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	f002 0203 	and.w	r2, r2, #3
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	4093      	lsls	r3, r2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001172:	4937      	ldr	r1, [pc, #220]	; (8001250 <HAL_GPIO_Init+0x2c4>)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_GPIO_Init+0x2d0>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a4:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_GPIO_Init+0x2d0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_GPIO_Init+0x2d0>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	f47f aeaf 	bne.w	8000f9c <HAL_GPIO_Init+0x10>
  }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_PWREx_GetVoltageRange+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40007000 	.word	0x40007000

0800127c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800128a:	d130      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d038      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2232      	movs	r2, #50	; 0x32
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c0:	e002      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	d102      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f2      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	d110      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e00f      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d007      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40007000 	.word	0x40007000
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 bc02 	b.w	8001b40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133c:	4b96      	ldr	r3, [pc, #600]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001346:	4b94      	ldr	r3, [pc, #592]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80e4 	beq.w	8001526 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <HAL_RCC_OscConfig+0x4c>
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	f040 808b 	bne.w	8001482 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f040 8087 	bne.w	8001482 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001374:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x64>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e3d9      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_RCC_OscConfig+0x7e>
 800139c:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013a4:	e005      	b.n	80013b2 <HAL_RCC_OscConfig+0x8a>
 80013a6:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d223      	bcs.n	80013fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fdbe 	bl	8001f3c <RCC_SetFlashLatencyFromMSIRange>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e3ba      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	4b73      	ldr	r3, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a72      	ldr	r2, [pc, #456]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	496d      	ldr	r1, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e8:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4968      	ldr	r1, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e025      	b.n	800144a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fe:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4960      	ldr	r1, [pc, #384]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	495b      	ldr	r1, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd7e 	bl	8001f3c <RCC_SetFlashLatencyFromMSIRange>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e37a      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800144a:	f000 fc81 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4950      	ldr	r1, [pc, #320]	; (800159c <HAL_RCC_OscConfig+0x274>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_RCC_OscConfig+0x278>)
 8001468:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <HAL_RCC_OscConfig+0x27c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fa48 	bl	8000904 <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d052      	beq.n	8001524 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	e35e      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d032      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001496:	f7ff fc0b 	bl	8000cb0 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149e:	f7ff fc07 	bl	8000cb0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e347      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a35      	ldr	r2, [pc, #212]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4930      	ldr	r1, [pc, #192]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	492b      	ldr	r1, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
 80014ee:	e01a      	b.n	8001526 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fbd8 	bl	8000cb0 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fbd4 	bl	8000cb0 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e314      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1dc>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d073      	beq.n	800161a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b08      	cmp	r3, #8
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x21c>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d10e      	bne.n	800155c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d063      	beq.n	8001618 <HAL_RCC_OscConfig+0x2f0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d15f      	bne.n	8001618 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2f1      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x24c>
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e025      	b.n	80015c0 <HAL_RCC_OscConfig+0x298>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d114      	bne.n	80015a8 <HAL_RCC_OscConfig+0x280>
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a02      	ldr	r2, [pc, #8]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e013      	b.n	80015c0 <HAL_RCC_OscConfig+0x298>
 8001598:	40021000 	.word	0x40021000
 800159c:	080070bc 	.word	0x080070bc
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004
 80015a8:	4ba0      	ldr	r3, [pc, #640]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a9f      	ldr	r2, [pc, #636]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b9d      	ldr	r3, [pc, #628]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a9c      	ldr	r2, [pc, #624]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb72 	bl	8000cb0 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb6e 	bl	8000cb0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e2ae      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	4b92      	ldr	r3, [pc, #584]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x2a8>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb5e 	bl	8000cb0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb5a 	bl	8000cb0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e29a      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2d0>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d060      	beq.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x310>
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d119      	bne.n	8001666 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d116      	bne.n	8001666 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001638:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x328>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e277      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	4973      	ldr	r1, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	e040      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d023      	beq.n	80016b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fb19 	bl	8000cb0 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fb15 	bl	8000cb0 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e255      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	495f      	ldr	r1, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e018      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a5c      	ldr	r2, [pc, #368]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff faf5 	bl	8000cb0 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff faf1 	bl	8000cb0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e231      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d03c      	beq.n	800176e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01c      	beq.n	8001736 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fad0 	bl	8000cb0 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff facc 	bl	8000cb0 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e20c      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ef      	beq.n	8001714 <HAL_RCC_OscConfig+0x3ec>
 8001734:	e01b      	b.n	800176e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fab3 	bl	8000cb0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff faaf 	bl	8000cb0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1ef      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a6 	beq.w	80018c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6593      	str	r3, [r2, #88]	; 0x58
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_OscConfig+0x508>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d118      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_RCC_OscConfig+0x508>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x508>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa76 	bl	8000cb0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7ff fa72 	bl	8000cb0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1b2      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_RCC_OscConfig+0x508>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_RCC_OscConfig+0x4d8>
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_RCC_OscConfig+0x504>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fe:	e029      	b.n	8001854 <HAL_RCC_OscConfig+0x52c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d115      	bne.n	8001834 <HAL_RCC_OscConfig+0x50c>
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_RCC_OscConfig+0x504>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_RCC_OscConfig+0x504>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x52c>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
 8001834:	4b9a      	ldr	r3, [pc, #616]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a99      	ldr	r2, [pc, #612]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001844:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a95      	ldr	r2, [pc, #596]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d016      	beq.n	800188a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fa28 	bl	8000cb0 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	e00a      	b.n	800187a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff fa24 	bl	8000cb0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e162      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187a:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ed      	beq.n	8001864 <HAL_RCC_OscConfig+0x53c>
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fa11 	bl	8000cb0 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fa0d 	bl	8000cb0 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e14b      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a8:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ed      	bne.n	8001892 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a77      	ldr	r2, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d03c      	beq.n	800194e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01c      	beq.n	8001916 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80018de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e2:	4a6f      	ldr	r2, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff f9e0 	bl	8000cb0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f4:	f7ff f9dc 	bl	8000cb0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e11c      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x5cc>
 8001914:	e01b      	b.n	800194e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001916:	4b62      	ldr	r3, [pc, #392]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191c:	4a60      	ldr	r2, [pc, #384]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f9c3 	bl	8000cb0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192e:	f7ff f9bf 	bl	8000cb0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0ff      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001940:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ef      	bne.n	800192e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80f3 	beq.w	8001b3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	2b02      	cmp	r3, #2
 800195e:	f040 80c9 	bne.w	8001af4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	429a      	cmp	r2, r3
 8001974:	d12c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	3b01      	subs	r3, #1
 8001982:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d123      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d11b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d113      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d06b      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d062      	beq.n	8001a9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0ac      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f2:	f7ff f95d 	bl	8000cb0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f959 	bl	8000cb0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e099      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_RCC_OscConfig+0x77c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a32:	0212      	lsls	r2, r2, #8
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a3a:	0852      	lsrs	r2, r2, #1
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	0552      	lsls	r2, r2, #21
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a46:	0852      	lsrs	r2, r2, #1
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0652      	lsls	r2, r2, #25
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a52:	06d2      	lsls	r2, r2, #27
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4912      	ldr	r1, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a74:	f7ff f91c 	bl	8000cb0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f918 	bl	8000cb0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_OscConfig+0x778>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9a:	e050      	b.n	8001b3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04f      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d144      	bne.n	8001b3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001acc:	f7ff f8f0 	bl	8000cb0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f8ec 	bl	8000cb0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02c      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x7ac>
 8001af2:	e024      	b.n	8001b3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d01f      	beq.n	8001b3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f8d3 	bl	8000cb0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f8cf 	bl	8000cb0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4905      	ldr	r1, [pc, #20]	; (8001b48 <HAL_RCC_OscConfig+0x820>)
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x824>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	feeefffc 	.word	0xfeeefffc

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0e7      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4970      	ldr	r1, [pc, #448]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cf      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4960      	ldr	r1, [pc, #384]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04c      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d121      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0a6      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e08e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e086      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4943      	ldr	r1, [pc, #268]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7ff f83a 	bl	8000cb0 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f836 	bl	8000cb0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e06e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d208      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	492b      	ldr	r1, [pc, #172]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d210      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 0207 	bic.w	r2, r3, #7
 8001cac:	4923      	ldr	r1, [pc, #140]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e036      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4918      	ldr	r1, [pc, #96]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4910      	ldr	r1, [pc, #64]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d04:	f000 f824 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	490b      	ldr	r1, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1fc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fdeb 	bl	8000904 <HAL_InitTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d32:	7afb      	ldrb	r3, [r7, #11]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	080070bc 	.word	0x080070bc
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d11e      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	e004      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d134      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xac>
 8001df4:	e005      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df8:	617b      	str	r3, [r7, #20]
      break;
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e002      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0e5b      	lsrs	r3, r3, #25
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e48:	69bb      	ldr	r3, [r7, #24]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	080070d4 	.word	0x080070d4
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4904      	ldr	r1, [pc, #16]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	080070cc 	.word	0x080070cc

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb0:	f7ff ffda 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	080070cc 	.word	0x080070cc

08001ed8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCC_GetClockConfig+0x60>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0207 	and.w	r2, r3, #7
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f54:	f7ff f984 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001f58:	6178      	str	r0, [r7, #20]
 8001f5a:	e014      	b.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff f974 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8c:	d10b      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d919      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2ba0      	cmp	r3, #160	; 0xa0
 8001f98:	d902      	bls.n	8001fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	e013      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e010      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d902      	bls.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fac:	2303      	movs	r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e00a      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d102      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e004      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b70      	cmp	r3, #112	; 0x70
 8001fc2:	d101      	bne.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 0207 	bic.w	r2, r3, #7
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002004:	2300      	movs	r3, #0
 8002006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002008:	2300      	movs	r3, #0
 800200a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002014:	2b00      	cmp	r3, #0
 8002016:	d031      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002020:	d01a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002022:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002026:	d814      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800202c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002030:	d10f      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203e:	e00c      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f9ce 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002050:	e003      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	74fb      	strb	r3, [r7, #19]
      break;
 8002056:	e000      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002060:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	494e      	ldr	r1, [pc, #312]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002076:	e001      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 809e 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a39      	ldr	r2, [pc, #228]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fdf0 	bl	8000cb0 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d2:	e009      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7fe fdec 	bl	8000cb0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d902      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	74fb      	strb	r3, [r7, #19]
        break;
 80020e6:	e005      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ef      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d15a      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002104:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01e      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	429a      	cmp	r2, r3
 8002114:	d019      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe fdac 	bl	8000cb0 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	e00b      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fda8 	bl	8000cb0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d902      	bls.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	74fb      	strb	r3, [r7, #19]
            break;
 8002172:	e006      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ec      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002196:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b8a      	ldr	r3, [pc, #552]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a89      	ldr	r2, [pc, #548]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	4b84      	ldr	r3, [pc, #528]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f023 0203 	bic.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4980      	ldr	r1, [pc, #512]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f4:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 020c 	bic.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	4978      	ldr	r1, [pc, #480]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	496f      	ldr	r1, [pc, #444]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	4967      	ldr	r1, [pc, #412]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800225a:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	495e      	ldr	r1, [pc, #376]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	4956      	ldr	r1, [pc, #344]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d028      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c0:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4945      	ldr	r1, [pc, #276]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022de:	d106      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a3f      	ldr	r2, [pc, #252]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ea:	60d3      	str	r3, [r2, #12]
 80022ec:	e011      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f6:	d10c      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f872 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d028      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	492d      	ldr	r1, [pc, #180]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800233c:	d106      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002348:	60d3      	str	r3, [r2, #12]
 800234a:	e011      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002354:	d10c      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f843 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01c      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800239a:	d10c      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	2102      	movs	r1, #2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f820 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000

080023e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002402:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0203 	and.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10d      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
       ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
       ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d047      	beq.n	80024be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e044      	b.n	80024be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d018      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x86>
 800243c:	2b03      	cmp	r3, #3
 800243e:	d825      	bhi.n	800248c <RCCEx_PLLSAI1_Config+0xa4>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d002      	beq.n	800244a <RCCEx_PLLSAI1_Config+0x62>
 8002444:	2b02      	cmp	r3, #2
 8002446:	d009      	beq.n	800245c <RCCEx_PLLSAI1_Config+0x74>
 8002448:	e020      	b.n	800248c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245a:	e01a      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800245c:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d116      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e013      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800248a:	e006      	b.n	800249a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e004      	b.n	800249c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002492:	bf00      	nop
 8002494:	e002      	b.n	800249c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800249a:	bf00      	nop
    }

    if(status == HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	430b      	orrs	r3, r1
 80024b8:	4943      	ldr	r1, [pc, #268]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d17c      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c4:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fbee 	bl	8000cb0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d6:	e009      	b.n	80024ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d8:	f7fe fbea 	bl	8000cb0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ea:	e005      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ef      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d15f      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d110      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002504:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800250c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6892      	ldr	r2, [r2, #8]
 8002514:	0211      	lsls	r1, r2, #8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	06d2      	lsls	r2, r2, #27
 800251c:	430a      	orrs	r2, r1
 800251e:	492a      	ldr	r1, [pc, #168]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	610b      	str	r3, [r1, #16]
 8002524:	e027      	b.n	8002576 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d112      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002534:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	0211      	lsls	r1, r2, #8
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6912      	ldr	r2, [r2, #16]
 8002542:	0852      	lsrs	r2, r2, #1
 8002544:	3a01      	subs	r2, #1
 8002546:	0552      	lsls	r2, r2, #21
 8002548:	430a      	orrs	r2, r1
 800254a:	491f      	ldr	r1, [pc, #124]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	610b      	str	r3, [r1, #16]
 8002550:	e011      	b.n	8002576 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800255a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6892      	ldr	r2, [r2, #8]
 8002562:	0211      	lsls	r1, r2, #8
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6952      	ldr	r2, [r2, #20]
 8002568:	0852      	lsrs	r2, r2, #1
 800256a:	3a01      	subs	r2, #1
 800256c:	0652      	lsls	r2, r2, #25
 800256e:	430a      	orrs	r2, r1
 8002570:	4915      	ldr	r1, [pc, #84]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fb95 	bl	8000cb0 <HAL_GetTick>
 8002586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002588:	e009      	b.n	800259e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800258a:	f7fe fb91 	bl	8000cb0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d902      	bls.n	800259e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	73fb      	strb	r3, [r7, #15]
          break;
 800259c:	e005      	b.n	80025aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ef      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e049      	b.n	8002672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f841 	bl	800267a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 f9dc 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e03b      	b.n	8002720 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_TIM_Base_Start_IT+0x9c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x4e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d004      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x4e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_TIM_Base_Start_IT+0xa0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d115      	bne.n	800270a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_TIM_Base_Start_IT+0xa4>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d015      	beq.n	800271c <HAL_TIM_Base_Start_IT+0x8c>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d011      	beq.n	800271c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	e008      	b.n	800271c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e000      	b.n	800271e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40014000 	.word	0x40014000
 8002734:	00010007 	.word	0x00010007

08002738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0202 	mvn.w	r2, #2
 8002764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f905 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8f7 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f908 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0204 	mvn.w	r2, #4
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8db 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8cd 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8de 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0208 	mvn.w	r2, #8
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8b1 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8a3 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8b4 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b10      	cmp	r3, #16
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0210 	mvn.w	r2, #16
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2208      	movs	r2, #8
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f887 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f879 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f88a 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0201 	mvn.w	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fd ff44 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b80      	cmp	r3, #128	; 0x80
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8de 	bl	8002aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f6:	d10e      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d107      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8d1 	bl	8002ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d10e      	bne.n	8002942 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d107      	bne.n	8002942 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f838 	bl	80029b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d10e      	bne.n	800296e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d107      	bne.n	800296e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0220 	mvn.w	r2, #32
 8002966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f891 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <TIM_Base_SetConfig+0xbc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0x20>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d108      	bne.n	80029fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <TIM_Base_SetConfig+0xbc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <TIM_Base_SetConfig+0xc0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_Base_SetConfig+0xc4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <TIM_Base_SetConfig+0xbc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0xa0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <TIM_Base_SetConfig+0xc0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0xa0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <TIM_Base_SetConfig+0xc4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	615a      	str	r2, [r3, #20]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40014400 	.word	0x40014400

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e040      	b.n	8002b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd fe68 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fb2e 	bl	800316c <UART_SetConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e022      	b.n	8002b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fd4e 	bl	80035c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fdd5 	bl	8003708 <UART_CheckIdleState>
 8002b5e:	4603      	mov	r3, r0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0ba      	sub	sp, #232	; 0xe8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b96:	4013      	ands	r3, r2
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d115      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 82a6 	beq.w	8003112 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
      }
      return;
 8002bce:	e2a0      	b.n	8003112 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8117 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_UART_IRQHandler+0x298>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 810a 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <HAL_UART_IRQHandler+0xbc>
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d011      	beq.n	8002c54 <HAL_UART_IRQHandler+0xec>
 8002c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2202      	movs	r2, #2
 8002c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	f043 0204 	orr.w	r2, r3, #4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d011      	beq.n	8002c84 <HAL_UART_IRQHandler+0x11c>
 8002c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2204      	movs	r2, #4
 8002c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x18a>
 8002ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 820c 	beq.w	8003116 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04f      	beq.n	8002dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fde9 	bl	8003922 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d141      	bne.n	8002de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3308      	adds	r3, #8
 8002d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3308      	adds	r3, #8
 8002d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1d9      	bne.n	8002d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d013      	beq.n	8002dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_UART_IRQHandler+0x29c>)
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f8a2 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e00f      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9b0 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e00b      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9ac 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e007      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9a8 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002df8:	e18d      	b.n	8003116 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfa:	bf00      	nop
    return;
 8002dfc:	e18b      	b.n	8003116 <HAL_UART_IRQHandler+0x5ae>
 8002dfe:	bf00      	nop
 8002e00:	04000120 	.word	0x04000120
 8002e04:	080039e9 	.word	0x080039e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 8146 	bne.w	800309e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 813f 	beq.w	800309e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8138 	beq.w	800309e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	f040 80b4 	bne.w	8002fae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 815f 	beq.w	800311a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f080 8157 	bcs.w	800311a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8085 	bne.w	8002f92 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eb6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1da      	bne.n	8002e88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ef6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002efa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e1      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3308      	adds	r3, #8
 8002f14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e3      	bne.n	8002f0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e4      	bne.n	8002f52 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd ff7d 	bl	8000e8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8d4 	bl	8003154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fac:	e0b5      	b.n	800311a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a7 	beq.w	800311e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a2 	beq.w	800311e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e4      	bne.n	8002fda <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	623b      	str	r3, [r7, #32]
   return(result);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003034:	633a      	str	r2, [r7, #48]	; 0x30
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800303a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e3      	bne.n	8003010 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	60fb      	str	r3, [r7, #12]
   return(result);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0310 	bic.w	r3, r3, #16
 800306e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	617b      	str	r3, [r7, #20]
   return(result);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e4      	bne.n	800305a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f85c 	bl	8003154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800309c:	e03f      	b.n	800311e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00e      	beq.n	80030c8 <HAL_UART_IRQHandler+0x560>
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fcd1 	bl	8003a68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030c6:	e02d      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00e      	beq.n	80030f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01c      	beq.n	8003122 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
    }
    return;
 80030f0:	e017      	b.n	8003122 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <HAL_UART_IRQHandler+0x5bc>
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fc82 	bl	8003a14 <UART_EndTransmit_IT>
    return;
 8003110:	e008      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
      return;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
      return;
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003122:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003124:	37e8      	adds	r7, #232	; 0xe8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b08a      	sub	sp, #40	; 0x28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4313      	orrs	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4bb4      	ldr	r3, [pc, #720]	; (800346c <UART_SetConfig+0x300>)
 800319c:	4013      	ands	r3, r2
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4aa9      	ldr	r2, [pc, #676]	; (8003470 <UART_SetConfig+0x304>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	4313      	orrs	r3, r2
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4aa0      	ldr	r2, [pc, #640]	; (8003474 <UART_SetConfig+0x308>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d126      	bne.n	8003244 <UART_SetConfig+0xd8>
 80031f6:	4ba0      	ldr	r3, [pc, #640]	; (8003478 <UART_SetConfig+0x30c>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b03      	cmp	r3, #3
 8003202:	d81b      	bhi.n	800323c <UART_SetConfig+0xd0>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <UART_SetConfig+0xa0>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	0800321d 	.word	0x0800321d
 8003210:	0800322d 	.word	0x0800322d
 8003214:	08003225 	.word	0x08003225
 8003218:	08003235 	.word	0x08003235
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e080      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e07c      	b.n	8003326 <UART_SetConfig+0x1ba>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e078      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e074      	b.n	8003326 <UART_SetConfig+0x1ba>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e070      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a8c      	ldr	r2, [pc, #560]	; (800347c <UART_SetConfig+0x310>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d138      	bne.n	80032c0 <UART_SetConfig+0x154>
 800324e:	4b8a      	ldr	r3, [pc, #552]	; (8003478 <UART_SetConfig+0x30c>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d82d      	bhi.n	80032b8 <UART_SetConfig+0x14c>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0xf8>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003299 	.word	0x08003299
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080032b9 	.word	0x080032b9
 8003270:	080032b9 	.word	0x080032b9
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080032b9 	.word	0x080032b9
 800327c:	080032b9 	.word	0x080032b9
 8003280:	080032b9 	.word	0x080032b9
 8003284:	080032a1 	.word	0x080032a1
 8003288:	080032b9 	.word	0x080032b9
 800328c:	080032b9 	.word	0x080032b9
 8003290:	080032b9 	.word	0x080032b9
 8003294:	080032b1 	.word	0x080032b1
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e042      	b.n	8003326 <UART_SetConfig+0x1ba>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e03e      	b.n	8003326 <UART_SetConfig+0x1ba>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e03a      	b.n	8003326 <UART_SetConfig+0x1ba>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e036      	b.n	8003326 <UART_SetConfig+0x1ba>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e032      	b.n	8003326 <UART_SetConfig+0x1ba>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6a      	ldr	r2, [pc, #424]	; (8003470 <UART_SetConfig+0x304>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d12a      	bne.n	8003320 <UART_SetConfig+0x1b4>
 80032ca:	4b6b      	ldr	r3, [pc, #428]	; (8003478 <UART_SetConfig+0x30c>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d8:	d01a      	beq.n	8003310 <UART_SetConfig+0x1a4>
 80032da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032de:	d81b      	bhi.n	8003318 <UART_SetConfig+0x1ac>
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d00c      	beq.n	8003300 <UART_SetConfig+0x194>
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d815      	bhi.n	8003318 <UART_SetConfig+0x1ac>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <UART_SetConfig+0x18c>
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d008      	beq.n	8003308 <UART_SetConfig+0x19c>
 80032f6:	e00f      	b.n	8003318 <UART_SetConfig+0x1ac>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e012      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e00e      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e00a      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e006      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e002      	b.n	8003326 <UART_SetConfig+0x1ba>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a51      	ldr	r2, [pc, #324]	; (8003470 <UART_SetConfig+0x304>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d17a      	bne.n	8003426 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003334:	2b08      	cmp	r3, #8
 8003336:	d824      	bhi.n	8003382 <UART_SetConfig+0x216>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x1d4>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	08003383 	.word	0x08003383
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003383 	.word	0x08003383
 8003350:	08003373 	.word	0x08003373
 8003354:	08003383 	.word	0x08003383
 8003358:	08003383 	.word	0x08003383
 800335c:	08003383 	.word	0x08003383
 8003360:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fd8c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <UART_SetConfig+0x314>)
 800336e:	61fb      	str	r3, [r7, #28]
        break;
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fced 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8003376:	61f8      	str	r0, [r7, #28]
        break;
 8003378:	e009      	b.n	800338e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e005      	b.n	800338e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800338c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8107 	beq.w	80035a4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d305      	bcc.n	80033b2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d903      	bls.n	80033ba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033b8:	e0f4      	b.n	80035a4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2200      	movs	r2, #0
 80033be:	461c      	mov	r4, r3
 80033c0:	4615      	mov	r5, r2
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	022b      	lsls	r3, r5, #8
 80033cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d0:	0222      	lsls	r2, r4, #8
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6849      	ldr	r1, [r1, #4]
 80033d6:	0849      	lsrs	r1, r1, #1
 80033d8:	2000      	movs	r0, #0
 80033da:	4688      	mov	r8, r1
 80033dc:	4681      	mov	r9, r0
 80033de:	eb12 0a08 	adds.w	sl, r2, r8
 80033e2:	eb43 0b09 	adc.w	fp, r3, r9
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f4:	4650      	mov	r0, sl
 80033f6:	4659      	mov	r1, fp
 80033f8:	f7fc feea 	bl	80001d0 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d308      	bcc.n	800341e <UART_SetConfig+0x2b2>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003412:	d204      	bcs.n	800341e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e0c2      	b.n	80035a4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003424:	e0be      	b.n	80035a4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d16a      	bne.n	8003506 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003434:	2b08      	cmp	r3, #8
 8003436:	d834      	bhi.n	80034a2 <UART_SetConfig+0x336>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x2d4>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	08003485 	.word	0x08003485
 8003448:	0800348d 	.word	0x0800348d
 800344c:	080034a3 	.word	0x080034a3
 8003450:	08003493 	.word	0x08003493
 8003454:	080034a3 	.word	0x080034a3
 8003458:	080034a3 	.word	0x080034a3
 800345c:	080034a3 	.word	0x080034a3
 8003460:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fd0c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e020      	b.n	80034ae <UART_SetConfig+0x342>
 800346c:	efff69f3 	.word	0xefff69f3
 8003470:	40008000 	.word	0x40008000
 8003474:	40013800 	.word	0x40013800
 8003478:	40021000 	.word	0x40021000
 800347c:	40004400 	.word	0x40004400
 8003480:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7fe fd12 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e010      	b.n	80034ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <UART_SetConfig+0x454>)
 800348e:	61fb      	str	r3, [r7, #28]
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe fc5d 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8003496:	61f8      	str	r0, [r7, #28]
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	61fb      	str	r3, [r7, #28]
        break;
 80034a0:	e005      	b.n	80034ae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d077      	beq.n	80035a4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005a      	lsls	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b0f      	cmp	r3, #15
 80034ce:	d916      	bls.n	80034fe <UART_SetConfig+0x392>
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d6:	d212      	bcs.n	80034fe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f023 030f 	bic.w	r3, r3, #15
 80034e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	8afb      	ldrh	r3, [r7, #22]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	8afa      	ldrh	r2, [r7, #22]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	e052      	b.n	80035a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003504:	e04e      	b.n	80035a4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350a:	2b08      	cmp	r3, #8
 800350c:	d827      	bhi.n	800355e <UART_SetConfig+0x3f2>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0x3a8>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003539 	.word	0x08003539
 8003518:	08003541 	.word	0x08003541
 800351c:	08003549 	.word	0x08003549
 8003520:	0800355f 	.word	0x0800355f
 8003524:	0800354f 	.word	0x0800354f
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800355f 	.word	0x0800355f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003538:	f7fe fca2 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800353c:	61f8      	str	r0, [r7, #28]
        break;
 800353e:	e014      	b.n	800356a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003540:	f7fe fcb4 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8003544:	61f8      	str	r0, [r7, #28]
        break;
 8003546:	e010      	b.n	800356a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <UART_SetConfig+0x454>)
 800354a:	61fb      	str	r3, [r7, #28]
        break;
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe fbff 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8003552:	61f8      	str	r0, [r7, #28]
        break;
 8003554:	e009      	b.n	800356a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	61fb      	str	r3, [r7, #28]
        break;
 800355c:	e005      	b.n	800356a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003568:	bf00      	nop
    }

    if (pclk != 0U)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d019      	beq.n	80035a4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	085a      	lsrs	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d909      	bls.n	800359e <UART_SetConfig+0x432>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d205      	bcs.n	800359e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e002      	b.n	80035a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	00f42400 	.word	0x00f42400

080035c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c2:	d10a      	bne.n	80036da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003718:	f7fd faca 	bl	8000cb0 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d10e      	bne.n	800374a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f82d 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e023      	b.n	8003792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d10e      	bne.n	8003776 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f817 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00d      	b.n	8003792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b09c      	sub	sp, #112	; 0x70
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e0a5      	b.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	f000 80a1 	beq.w	80038f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fd fa7b 	bl	8000cb0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <UART_WaitOnFlagUntilTimeout+0x32>
 80037c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d13e      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037e0:	667b      	str	r3, [r7, #100]	; 0x64
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e6      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	663b      	str	r3, [r7, #96]	; 0x60
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800381e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800382c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e067      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d04f      	beq.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003866:	d147      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003870:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
 8003892:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e6      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3308      	adds	r3, #8
 80038aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	613b      	str	r3, [r7, #16]
   return(result);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038c4:	623a      	str	r2, [r7, #32]
 80038c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	69f9      	ldr	r1, [r7, #28]
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e010      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	429a      	cmp	r2, r3
 8003914:	f43f af4a 	beq.w	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3770      	adds	r7, #112	; 0x70
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003922:	b480      	push	{r7}
 8003924:	b095      	sub	sp, #84	; 0x54
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800394e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e6      	bne.n	800392a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	61fb      	str	r3, [r7, #28]
   return(result);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	2b01      	cmp	r3, #1
 8003996:	d118      	bne.n	80039ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	613b      	str	r3, [r7, #16]
   return(result);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e6      	bne.n	8003998 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039dc:	bf00      	nop
 80039de:	3754      	adds	r7, #84	; 0x54
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fb9a 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	613b      	str	r3, [r7, #16]
   return(result);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e6      	bne.n	8003a1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fb66 	bl	800312c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <__NVIC_SetPriority>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <SysTick_Handler+0x1c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ad8:	f001 fcfe 	bl	80054d8 <xTaskGetSchedulerState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ae2:	f002 fae9 	bl	80060b8 <xPortSysTickHandler>
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	e000e010 	.word	0xe000e010

08003af0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003af4:	2100      	movs	r1, #0
 8003af6:	f06f 0004 	mvn.w	r0, #4
 8003afa:	f7ff ffbf 	bl	8003a7c <__NVIC_SetPriority>
#endif
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0a:	f3ef 8305 	mrs	r3, IPSR
 8003b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b16:	f06f 0305 	mvn.w	r3, #5
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	e00c      	b.n	8003b38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <osKernelInitialize+0x44>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <osKernelInitialize+0x44>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e002      	b.n	8003b38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b38:	687b      	ldr	r3, [r7, #4]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200001f0 	.word	0x200001f0

08003b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b52:	f3ef 8305 	mrs	r3, IPSR
 8003b56:	603b      	str	r3, [r7, #0]
  return(result);
 8003b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b5e:	f06f 0305 	mvn.w	r3, #5
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	e010      	b.n	8003b88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <osKernelStart+0x48>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d109      	bne.n	8003b82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b6e:	f7ff ffbf 	bl	8003af0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <osKernelStart+0x48>)
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b78:	f001 f866 	bl	8004c48 <vTaskStartScheduler>
      stat = osOK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e002      	b.n	8003b88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b88:	687b      	ldr	r3, [r7, #4]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200001f0 	.word	0x200001f0

08003b98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08e      	sub	sp, #56	; 0x38
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba8:	f3ef 8305 	mrs	r3, IPSR
 8003bac:	617b      	str	r3, [r7, #20]
  return(result);
 8003bae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d17e      	bne.n	8003cb2 <osThreadNew+0x11a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d07b      	beq.n	8003cb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bbe:	2318      	movs	r3, #24
 8003bc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d045      	beq.n	8003c5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <osThreadNew+0x48>
        name = attr->name;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <osThreadNew+0x6e>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b38      	cmp	r3, #56	; 0x38
 8003bf8:	d805      	bhi.n	8003c06 <osThreadNew+0x6e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <osThreadNew+0x72>
        return (NULL);
 8003c06:	2300      	movs	r3, #0
 8003c08:	e054      	b.n	8003cb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <osThreadNew+0xa8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b5b      	cmp	r3, #91	; 0x5b
 8003c28:	d90a      	bls.n	8003c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <osThreadNew+0xa8>
        mem = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e010      	b.n	8003c62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <osThreadNew+0xca>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <osThreadNew+0xca>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <osThreadNew+0xca>
          mem = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e001      	b.n	8003c62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d110      	bne.n	8003c8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c70:	9202      	str	r2, [sp, #8]
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fe0c 	bl	800489c <xTaskCreateStatic>
 8003c84:	4603      	mov	r3, r0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e013      	b.n	8003cb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d110      	bne.n	8003cb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	f107 0310 	add.w	r3, r7, #16
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fe57 	bl	8004956 <xTaskCreate>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <osThreadNew+0x11a>
            hTask = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cb2:	693b      	ldr	r3, [r7, #16]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc4:	f3ef 8305 	mrs	r3, IPSR
 8003cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <osDelay+0x1c>
    stat = osErrorISR;
 8003cd0:	f06f 0305 	mvn.w	r3, #5
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e007      	b.n	8003ce8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff7c 	bl	8004be0 <vTaskDelay>
    }
  }

  return (stat);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <vApplicationGetIdleTaskMemory+0x30>)
 8003d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	200001f4 	.word	0x200001f4
 8003d24:	20000250 	.word	0x20000250

08003d28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <vApplicationGetTimerTaskMemory+0x30>)
 8003d3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	20000450 	.word	0x20000450
 8003d58:	200004ac 	.word	0x200004ac

08003d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f103 0208 	add.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f103 0208 	add.w	r2, r3, #8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 0208 	add.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d103      	bne.n	8003e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e00c      	b.n	8003e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3308      	adds	r3, #8
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e002      	b.n	8003e2c <vListInsert+0x2e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d2f6      	bcs.n	8003e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6852      	ldr	r2, [r2, #4]
 8003e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d103      	bne.n	8003ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1e5a      	subs	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eee:	f002 f851 	bl	8005f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	441a      	add	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	441a      	add	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	22ff      	movs	r2, #255	; 0xff
 8003f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d114      	bne.n	8003f6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3310      	adds	r3, #16
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 f903 	bl	800515c <xTaskRemoveFromEventList>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d012      	beq.n	8003f82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <xQueueGenericReset+0xcc>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	e009      	b.n	8003f82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3310      	adds	r3, #16
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fef2 	bl	8003d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3324      	adds	r3, #36	; 0x24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff feed 	bl	8003d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f002 f837 	bl	8005ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08e      	sub	sp, #56	; 0x38
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <xQueueGenericCreateStatic+0x52>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <xQueueGenericCreateStatic+0x56>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericCreateStatic+0x58>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	623b      	str	r3, [r7, #32]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <xQueueGenericCreateStatic+0x7e>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <xQueueGenericCreateStatic+0x82>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xQueueGenericCreateStatic+0x84>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	61fb      	str	r3, [r7, #28]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004032:	2350      	movs	r3, #80	; 0x50
 8004034:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d00a      	beq.n	8004052 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61bb      	str	r3, [r7, #24]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004052:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004066:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f805 	bl	8004084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800407c:	4618      	mov	r0, r3
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e002      	b.n	80040a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040b2:	2101      	movs	r1, #1
 80040b4:	69b8      	ldr	r0, [r7, #24]
 80040b6:	f7ff ff05 	bl	8003ec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08e      	sub	sp, #56	; 0x38
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericSend+0x32>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <xQueueGenericSend+0x40>
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <xQueueGenericSend+0x44>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <xQueueGenericSend+0x46>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xQueueGenericSend+0x60>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x6e>
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0x72>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0x74>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueGenericSend+0x8e>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	623b      	str	r3, [r7, #32]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800415a:	f001 f9bd 	bl	80054d8 <xTaskGetSchedulerState>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xQueueGenericSend+0x9e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0xa2>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericSend+0xa4>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueGenericSend+0xbe>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61fb      	str	r3, [r7, #28]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800418a:	f001 ff03 	bl	8005f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <xQueueGenericSend+0xd4>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d129      	bne.n	80041f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a6:	f000 fa0b 	bl	80045c0 <prvCopyDataToQueue>
 80041aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	3324      	adds	r3, #36	; 0x24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 ffcf 	bl	800515c <xTaskRemoveFromEventList>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d013      	beq.n	80041ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <xQueueGenericSend+0x1f8>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	e00a      	b.n	80041ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041dc:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <xQueueGenericSend+0x1f8>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041ec:	f001 ff02 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e063      	b.n	80042bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041fa:	f001 fefb 	bl	8005ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	e05c      	b.n	80042bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f809 	bl	8005224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004212:	2301      	movs	r3, #1
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004216:	f001 feed 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800421a:	f000 fd7b 	bl	8004d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800421e:	f001 feb9 	bl	8005f94 <vPortEnterCritical>
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004228:	b25b      	sxtb	r3, r3
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d103      	bne.n	8004238 <xQueueGenericSend+0x16c>
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423e:	b25b      	sxtb	r3, r3
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d103      	bne.n	800424e <xQueueGenericSend+0x182>
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424e:	f001 fed1 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004252:	1d3a      	adds	r2, r7, #4
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fff8 	bl	8005250 <xTaskCheckForTimeOut>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d124      	bne.n	80042b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004268:	f000 faa2 	bl	80047b0 <prvIsQueueFull>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	3310      	adds	r3, #16
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f000 ff1e 	bl	80050bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004282:	f000 fa2d 	bl	80046e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004286:	f000 fd53 	bl	8004d30 <xTaskResumeAll>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	f47f af7c 	bne.w	800418a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <xQueueGenericSend+0x1f8>)
 8004294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	e772      	b.n	800418a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a6:	f000 fa1b 	bl	80046e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042aa:	f000 fd41 	bl	8004d30 <xTaskResumeAll>
 80042ae:	e76c      	b.n	800418a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b2:	f000 fa15 	bl	80046e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b6:	f000 fd3b 	bl	8004d30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3738      	adds	r7, #56	; 0x38
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b090      	sub	sp, #64	; 0x40
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <xQueueGenericSendFromISR+0x3c>
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <xQueueGenericSendFromISR+0x40>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <xQueueGenericSendFromISR+0x42>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d103      	bne.n	8004332 <xQueueGenericSendFromISR+0x6a>
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <xQueueGenericSendFromISR+0x6e>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueGenericSendFromISR+0x70>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	623b      	str	r3, [r7, #32]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004352:	f001 ff01 	bl	8006158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004356:	f3ef 8211 	mrs	r2, BASEPRI
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800436e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <xQueueGenericSendFromISR+0xbc>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d12f      	bne.n	80043e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800439a:	f000 f911 	bl	80045c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800439e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d112      	bne.n	80043ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	3324      	adds	r3, #36	; 0x24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fed1 	bl	800515c <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e007      	b.n	80043de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043d2:	3301      	adds	r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	b25a      	sxtb	r2, r3
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80043e2:	e001      	b.n	80043e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3740      	adds	r7, #64	; 0x40
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xQueueReceive+0x30>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	623b      	str	r3, [r7, #32]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <xQueueReceive+0x3e>
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <xQueueReceive+0x42>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <xQueueReceive+0x44>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xQueueReceive+0x5e>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	61fb      	str	r3, [r7, #28]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800445e:	f001 f83b 	bl	80054d8 <xTaskGetSchedulerState>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <xQueueReceive+0x6e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <xQueueReceive+0x72>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueReceive+0x74>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueReceive+0x8e>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61bb      	str	r3, [r7, #24]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800448e:	f001 fd81 	bl	8005f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01f      	beq.n	80044de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a2:	f000 f8f7 	bl	8004694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00f      	beq.n	80044d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	3310      	adds	r3, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fe4e 	bl	800515c <xTaskRemoveFromEventList>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044c6:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <xQueueReceive+0x1bc>)
 80044c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044d6:	f001 fd8d 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 80044da:	2301      	movs	r3, #1
 80044dc:	e069      	b.n	80045b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044e4:	f001 fd86 	bl	8005ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e062      	b.n	80045b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044f2:	f107 0310 	add.w	r3, r7, #16
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fe94 	bl	8005224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004500:	f001 fd78 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004504:	f000 fc06 	bl	8004d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004508:	f001 fd44 	bl	8005f94 <vPortEnterCritical>
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d103      	bne.n	8004522 <xQueueReceive+0x122>
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004528:	b25b      	sxtb	r3, r3
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d103      	bne.n	8004538 <xQueueReceive+0x138>
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004538:	f001 fd5c 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800453c:	1d3a      	adds	r2, r7, #4
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fe83 	bl	8005250 <xTaskCheckForTimeOut>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d123      	bne.n	8004598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004552:	f000 f917 	bl	8004784 <prvIsQueueEmpty>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	3324      	adds	r3, #36	; 0x24
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4611      	mov	r1, r2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fda9 	bl	80050bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800456a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456c:	f000 f8b8 	bl	80046e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004570:	f000 fbde 	bl	8004d30 <xTaskResumeAll>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d189      	bne.n	800448e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <xQueueReceive+0x1bc>)
 800457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	e780      	b.n	800448e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f000 f8a7 	bl	80046e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004592:	f000 fbcd 	bl	8004d30 <xTaskResumeAll>
 8004596:	e77a      	b.n	800448e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459a:	f000 f8a1 	bl	80046e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800459e:	f000 fbc7 	bl	8004d30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a4:	f000 f8ee 	bl	8004784 <prvIsQueueEmpty>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f43f af6f 	beq.w	800448e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3730      	adds	r7, #48	; 0x30
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10d      	bne.n	80045fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d14d      	bne.n	8004682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ff92 	bl	8005514 <xTaskPriorityDisinherit>
 80045f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	e043      	b.n	8004682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d119      	bne.n	8004634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6858      	ldr	r0, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	f001 fff8 	bl	8006600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d32b      	bcc.n	8004682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e026      	b.n	8004682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68d8      	ldr	r0, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	461a      	mov	r2, r3
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	f001 ffde 	bl	8006600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	425b      	negs	r3, r3
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d207      	bcs.n	8004670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	425b      	negs	r3, r3
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d105      	bne.n	8004682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3b01      	subs	r3, #1
 8004680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d303      	bcc.n	80046c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68d9      	ldr	r1, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	461a      	mov	r2, r3
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f001 ff94 	bl	8006600 <memcpy>
	}
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046e8:	f001 fc54 	bl	8005f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046f4:	e011      	b.n	800471a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3324      	adds	r3, #36	; 0x24
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fd2a 	bl	800515c <xTaskRemoveFromEventList>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800470e:	f000 fe01 	bl	8005314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	3b01      	subs	r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	dce9      	bgt.n	80046f6 <prvUnlockQueue+0x16>
 8004722:	e000      	b.n	8004726 <prvUnlockQueue+0x46>
					break;
 8004724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	22ff      	movs	r2, #255	; 0xff
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800472e:	f001 fc61 	bl	8005ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004732:	f001 fc2f 	bl	8005f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800473e:	e011      	b.n	8004764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d012      	beq.n	800476e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3310      	adds	r3, #16
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fd05 	bl	800515c <xTaskRemoveFromEventList>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004758:	f000 fddc 	bl	8005314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800475c:	7bbb      	ldrb	r3, [r7, #14]
 800475e:	3b01      	subs	r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004768:	2b00      	cmp	r3, #0
 800476a:	dce9      	bgt.n	8004740 <prvUnlockQueue+0x60>
 800476c:	e000      	b.n	8004770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800476e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	22ff      	movs	r2, #255	; 0xff
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004778:	f001 fc3c 	bl	8005ff4 <vPortExitCritical>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800478c:	f001 fc02 	bl	8005f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e001      	b.n	80047a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047a2:	f001 fc27 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 80047a6:	68fb      	ldr	r3, [r7, #12]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047b8:	f001 fbec 	bl	8005f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d102      	bne.n	80047ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e001      	b.n	80047d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d2:	f001 fc0f 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e014      	b.n	800481a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <vQueueAddToRegistry+0x50>)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047fc:	490c      	ldr	r1, [pc, #48]	; (8004830 <vQueueAddToRegistry+0x50>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <vQueueAddToRegistry+0x50>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004812:	e006      	b.n	8004822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b07      	cmp	r3, #7
 800481e:	d9e7      	bls.n	80047f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200008ac 	.word	0x200008ac

08004834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004844:	f001 fba6 	bl	8005f94 <vPortEnterCritical>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800484e:	b25b      	sxtb	r3, r3
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d103      	bne.n	800485e <vQueueWaitForMessageRestricted+0x2a>
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004864:	b25b      	sxtb	r3, r3
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d103      	bne.n	8004874 <vQueueWaitForMessageRestricted+0x40>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004874:	f001 fbbe 	bl	8005ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fc3b 	bl	8005104 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800488e:	6978      	ldr	r0, [r7, #20]
 8004890:	f7ff ff26 	bl	80046e0 <prvUnlockQueue>
	}
 8004894:	bf00      	nop
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af04      	add	r7, sp, #16
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	623b      	str	r3, [r7, #32]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	61fb      	str	r3, [r7, #28]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048e2:	235c      	movs	r3, #92	; 0x5c
 80048e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b5c      	cmp	r3, #92	; 0x5c
 80048ea:	d00a      	beq.n	8004902 <xTaskCreateStatic+0x66>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61bb      	str	r3, [r7, #24]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004902:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01e      	beq.n	8004948 <xTaskCreateStatic+0xac>
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004918:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2202      	movs	r2, #2
 800491e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004922:	2300      	movs	r3, #0
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	9302      	str	r3, [sp, #8]
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f850 	bl	80049e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004942:	f000 f8dd 	bl	8004b00 <prvAddNewTaskToReadyList>
 8004946:	e001      	b.n	800494c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800494c:	697b      	ldr	r3, [r7, #20]
	}
 800494e:	4618      	mov	r0, r3
 8004950:	3728      	adds	r7, #40	; 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08c      	sub	sp, #48	; 0x30
 800495a:	af04      	add	r7, sp, #16
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fc34 	bl	80061d8 <pvPortMalloc>
 8004970:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00e      	beq.n	8004996 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004978:	205c      	movs	r0, #92	; 0x5c
 800497a:	f001 fc2d 	bl	80061d8 <pvPortMalloc>
 800497e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
 800498c:	e005      	b.n	800499a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800498e:	6978      	ldr	r0, [r7, #20]
 8004990:	f001 fcee 	bl	8006370 <vPortFree>
 8004994:	e001      	b.n	800499a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f80e 	bl	80049e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049c4:	69f8      	ldr	r0, [r7, #28]
 80049c6:	f000 f89b 	bl	8004b00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	e002      	b.n	80049d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049d6:	69bb      	ldr	r3, [r7, #24]
	}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	461a      	mov	r2, r3
 80049f8:	21a5      	movs	r1, #165	; 0xa5
 80049fa:	f001 fe0f 	bl	800661c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f023 0307 	bic.w	r3, r3, #7
 8004a16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	617b      	str	r3, [r7, #20]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01f      	beq.n	8004a7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e012      	b.n	8004a6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	7819      	ldrb	r1, [r3, #0]
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	3334      	adds	r3, #52	; 0x34
 8004a54:	460a      	mov	r2, r1
 8004a56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d9e9      	bls.n	8004a44 <prvInitialiseNewTask+0x64>
 8004a70:	e000      	b.n	8004a74 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a7c:	e003      	b.n	8004a86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2b37      	cmp	r3, #55	; 0x37
 8004a8a:	d901      	bls.n	8004a90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a8c:	2337      	movs	r3, #55	; 0x37
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff f978 	bl	8003d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	3318      	adds	r3, #24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f973 	bl	8003d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	69b8      	ldr	r0, [r7, #24]
 8004ae0:	f001 f928 	bl	8005d34 <pxPortInitialiseStack>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af6:	bf00      	nop
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b08:	f001 fa44 	bl	8005f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <prvAddNewTaskToReadyList+0xc4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <prvAddNewTaskToReadyList+0xc4>)
 8004b14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b16:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <prvAddNewTaskToReadyList+0xc8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b1e:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <prvAddNewTaskToReadyList+0xc8>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <prvAddNewTaskToReadyList+0xc4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d110      	bne.n	8004b4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b2c:	f000 fc16 	bl	800535c <prvInitialiseTaskLists>
 8004b30:	e00d      	b.n	8004b4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <prvAddNewTaskToReadyList+0xcc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <prvAddNewTaskToReadyList+0xc8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d802      	bhi.n	8004b4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <prvAddNewTaskToReadyList+0xc8>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <prvAddNewTaskToReadyList+0xd0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <prvAddNewTaskToReadyList+0xd0>)
 8004b56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <prvAddNewTaskToReadyList+0xd0>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <prvAddNewTaskToReadyList+0xd4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d903      	bls.n	8004b74 <prvAddNewTaskToReadyList+0x74>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <prvAddNewTaskToReadyList+0xd4>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <prvAddNewTaskToReadyList+0xd8>)
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7ff f913 	bl	8003db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b90:	f001 fa30 	bl	8005ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <prvAddNewTaskToReadyList+0xcc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00e      	beq.n	8004bba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvAddNewTaskToReadyList+0xc8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d207      	bcs.n	8004bba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <prvAddNewTaskToReadyList+0xdc>)
 8004bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000dc0 	.word	0x20000dc0
 8004bc8:	200008ec 	.word	0x200008ec
 8004bcc:	20000dcc 	.word	0x20000dcc
 8004bd0:	20000ddc 	.word	0x20000ddc
 8004bd4:	20000dc8 	.word	0x20000dc8
 8004bd8:	200008f0 	.word	0x200008f0
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <vTaskDelay+0x60>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <vTaskDelay+0x30>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c10:	f000 f880 	bl	8004d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c14:	2100      	movs	r1, #0
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fcea 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c1c:	f000 f888 	bl	8004d30 <xTaskResumeAll>
 8004c20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <vTaskDelay+0x64>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000de8 	.word	0x20000de8
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d39      	adds	r1, r7, #4
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff f848 	bl	8003cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c64:	6839      	ldr	r1, [r7, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	9202      	str	r2, [sp, #8]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	2300      	movs	r3, #0
 8004c74:	460a      	mov	r2, r1
 8004c76:	4921      	ldr	r1, [pc, #132]	; (8004cfc <vTaskStartScheduler+0xb4>)
 8004c78:	4821      	ldr	r0, [pc, #132]	; (8004d00 <vTaskStartScheduler+0xb8>)
 8004c7a:	f7ff fe0f 	bl	800489c <xTaskCreateStatic>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <vTaskStartScheduler+0xbc>)
 8004c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c84:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <vTaskStartScheduler+0xbc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e001      	b.n	8004c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c9c:	f000 fcfc 	bl	8005698 <xTimerCreateTimerTask>
 8004ca0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d116      	bne.n	8004cd6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	613b      	str	r3, [r7, #16]
}
 8004cba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <vTaskStartScheduler+0xc0>)
 8004cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <vTaskStartScheduler+0xc4>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <vTaskStartScheduler+0xc8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cd0:	f001 f8be 	bl	8005e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cd4:	e00e      	b.n	8004cf4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d10a      	bne.n	8004cf4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60fb      	str	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vTaskStartScheduler+0xaa>
}
 8004cf4:	bf00      	nop
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	08007080 	.word	0x08007080
 8004d00:	0800532d 	.word	0x0800532d
 8004d04:	20000de4 	.word	0x20000de4
 8004d08:	20000de0 	.word	0x20000de0
 8004d0c:	20000dcc 	.word	0x20000dcc
 8004d10:	20000dc4 	.word	0x20000dc4

08004d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <vTaskSuspendAll+0x18>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	4a03      	ldr	r2, [pc, #12]	; (8004d2c <vTaskSuspendAll+0x18>)
 8004d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d22:	bf00      	nop
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000de8 	.word	0x20000de8

08004d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d3e:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <xTaskResumeAll+0x118>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	603b      	str	r3, [r7, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d5c:	f001 f91a 	bl	8005f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <xTaskResumeAll+0x118>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <xTaskResumeAll+0x118>)
 8004d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <xTaskResumeAll+0x118>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d162      	bne.n	8004e38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <xTaskResumeAll+0x11c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d05e      	beq.n	8004e38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d7a:	e02f      	b.n	8004ddc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <xTaskResumeAll+0x120>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3318      	adds	r3, #24
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff f871 	bl	8003e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f86c 	bl	8003e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <xTaskResumeAll+0x124>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d903      	bls.n	8004dac <xTaskResumeAll+0x7c>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <xTaskResumeAll+0x124>)
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <xTaskResumeAll+0x128>)
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f7fe fff7 	bl	8003db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <xTaskResumeAll+0x12c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <xTaskResumeAll+0x130>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <xTaskResumeAll+0x120>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1cb      	bne.n	8004d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dea:	f000 fb55 	bl	8005498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <xTaskResumeAll+0x134>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dfa:	f000 f847 	bl	8004e8c <xTaskIncrementTick>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e04:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <xTaskResumeAll+0x130>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f1      	bne.n	8004dfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <xTaskResumeAll+0x134>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xTaskResumeAll+0x130>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <xTaskResumeAll+0x138>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e38:	f001 f8dc 	bl	8005ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000de8 	.word	0x20000de8
 8004e4c:	20000dc0 	.word	0x20000dc0
 8004e50:	20000d80 	.word	0x20000d80
 8004e54:	20000dc8 	.word	0x20000dc8
 8004e58:	200008f0 	.word	0x200008f0
 8004e5c:	200008ec 	.word	0x200008ec
 8004e60:	20000dd4 	.word	0x20000dd4
 8004e64:	20000dd0 	.word	0x20000dd0
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <xTaskGetTickCount+0x1c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e78:	687b      	ldr	r3, [r7, #4]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000dc4 	.word	0x20000dc4

08004e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <xTaskIncrementTick+0x148>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 808f 	bne.w	8004fbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ea0:	4b4d      	ldr	r3, [pc, #308]	; (8004fd8 <xTaskIncrementTick+0x14c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ea8:	4a4b      	ldr	r2, [pc, #300]	; (8004fd8 <xTaskIncrementTick+0x14c>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d120      	bne.n	8004ef6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004eb4:	4b49      	ldr	r3, [pc, #292]	; (8004fdc <xTaskIncrementTick+0x150>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <xTaskIncrementTick+0x46>
 8004ed4:	4b41      	ldr	r3, [pc, #260]	; (8004fdc <xTaskIncrementTick+0x150>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <xTaskIncrementTick+0x154>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3f      	ldr	r2, [pc, #252]	; (8004fdc <xTaskIncrementTick+0x150>)
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4a3f      	ldr	r2, [pc, #252]	; (8004fe0 <xTaskIncrementTick+0x154>)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <xTaskIncrementTick+0x158>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4a3d      	ldr	r2, [pc, #244]	; (8004fe4 <xTaskIncrementTick+0x158>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	f000 fad1 	bl	8005498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ef6:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <xTaskIncrementTick+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d349      	bcc.n	8004f94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f00:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <xTaskIncrementTick+0x150>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0a:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <xTaskIncrementTick+0x15c>)
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f10:	601a      	str	r2, [r3, #0]
					break;
 8004f12:	e03f      	b.n	8004f94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f14:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <xTaskIncrementTick+0x150>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d203      	bcs.n	8004f34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f2c:	4a2e      	ldr	r2, [pc, #184]	; (8004fe8 <xTaskIncrementTick+0x15c>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f32:	e02f      	b.n	8004f94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe ff99 	bl	8003e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3318      	adds	r3, #24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe ff90 	bl	8003e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <xTaskIncrementTick+0x160>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d903      	bls.n	8004f64 <xTaskIncrementTick+0xd8>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a22      	ldr	r2, [pc, #136]	; (8004fec <xTaskIncrementTick+0x160>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <xTaskIncrementTick+0x164>)
 8004f72:	441a      	add	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fe ff1b 	bl	8003db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <xTaskIncrementTick+0x168>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3b8      	bcc.n	8004f00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f92:	e7b5      	b.n	8004f00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <xTaskIncrementTick+0x168>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9a:	4915      	ldr	r1, [pc, #84]	; (8004ff0 <xTaskIncrementTick+0x164>)
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d901      	bls.n	8004fb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <xTaskIncrementTick+0x16c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e004      	b.n	8004fc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <xTaskIncrementTick+0x170>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <xTaskIncrementTick+0x170>)
 8004fc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fc8:	697b      	ldr	r3, [r7, #20]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000de8 	.word	0x20000de8
 8004fd8:	20000dc4 	.word	0x20000dc4
 8004fdc:	20000d78 	.word	0x20000d78
 8004fe0:	20000d7c 	.word	0x20000d7c
 8004fe4:	20000dd8 	.word	0x20000dd8
 8004fe8:	20000de0 	.word	0x20000de0
 8004fec:	20000dc8 	.word	0x20000dc8
 8004ff0:	200008f0 	.word	0x200008f0
 8004ff4:	200008ec 	.word	0x200008ec
 8004ff8:	20000dd4 	.word	0x20000dd4
 8004ffc:	20000dd0 	.word	0x20000dd0

08005000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <vTaskSwitchContext+0xa8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <vTaskSwitchContext+0xac>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005014:	e041      	b.n	800509a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005016:	4b25      	ldr	r3, [pc, #148]	; (80050ac <vTaskSwitchContext+0xac>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <vTaskSwitchContext+0xb0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e010      	b.n	8005046 <vTaskSwitchContext+0x46>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <vTaskSwitchContext+0x40>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <vTaskSwitchContext+0x3e>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	491b      	ldr	r1, [pc, #108]	; (80050b4 <vTaskSwitchContext+0xb4>)
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0e4      	beq.n	8005024 <vTaskSwitchContext+0x24>
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <vTaskSwitchContext+0xb4>)
 8005066:	4413      	add	r3, r2
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	3308      	adds	r3, #8
 800507c:	429a      	cmp	r2, r3
 800507e:	d104      	bne.n	800508a <vTaskSwitchContext+0x8a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <vTaskSwitchContext+0xb8>)
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vTaskSwitchContext+0xb0>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6013      	str	r3, [r2, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000de8 	.word	0x20000de8
 80050ac:	20000dd4 	.word	0x20000dd4
 80050b0:	20000dc8 	.word	0x20000dc8
 80050b4:	200008f0 	.word	0x200008f0
 80050b8:	200008ec 	.word	0x200008ec

080050bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60fb      	str	r3, [r7, #12]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <vTaskPlaceOnEventList+0x44>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3318      	adds	r3, #24
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fe fe87 	bl	8003dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f0:	2101      	movs	r1, #1
 80050f2:	6838      	ldr	r0, [r7, #0]
 80050f4:	f000 fa7c 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200008ec 	.word	0x200008ec

08005104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <vTaskPlaceOnEventListRestricted+0x54>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3318      	adds	r3, #24
 8005132:	4619      	mov	r1, r3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7fe fe3e 	bl	8003db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	68b8      	ldr	r0, [r7, #8]
 800514a:	f000 fa51 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
	}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200008ec 	.word	0x200008ec

0800515c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	60fb      	str	r3, [r7, #12]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3318      	adds	r3, #24
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fe6f 	bl	8003e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005192:	4b1e      	ldr	r3, [pc, #120]	; (800520c <xTaskRemoveFromEventList+0xb0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11d      	bne.n	80051d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3304      	adds	r3, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fe66 	bl	8003e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <xTaskRemoveFromEventList+0xb4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskRemoveFromEventList+0x5c>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a16      	ldr	r2, [pc, #88]	; (8005210 <xTaskRemoveFromEventList+0xb4>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a13      	ldr	r2, [pc, #76]	; (8005214 <xTaskRemoveFromEventList+0xb8>)
 80051c6:	441a      	add	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fdf1 	bl	8003db6 <vListInsertEnd>
 80051d4:	e005      	b.n	80051e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3318      	adds	r3, #24
 80051da:	4619      	mov	r1, r3
 80051dc:	480e      	ldr	r0, [pc, #56]	; (8005218 <xTaskRemoveFromEventList+0xbc>)
 80051de:	f7fe fdea 	bl	8003db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <xTaskRemoveFromEventList+0xc0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d905      	bls.n	80051fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <xTaskRemoveFromEventList+0xc4>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e001      	b.n	8005200 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005200:	697b      	ldr	r3, [r7, #20]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000de8 	.word	0x20000de8
 8005210:	20000dc8 	.word	0x20000dc8
 8005214:	200008f0 	.word	0x200008f0
 8005218:	20000d80 	.word	0x20000d80
 800521c:	200008ec 	.word	0x200008ec
 8005220:	20000dd4 	.word	0x20000dd4

08005224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <vTaskInternalSetTimeOutState+0x24>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <vTaskInternalSetTimeOutState+0x28>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	605a      	str	r2, [r3, #4]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20000dd8 	.word	0x20000dd8
 800524c:	20000dc4 	.word	0x20000dc4

08005250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	613b      	str	r3, [r7, #16]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60fb      	str	r3, [r7, #12]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005292:	f000 fe7f 	bl	8005f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <xTaskCheckForTimeOut+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d102      	bne.n	80052b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e023      	b.n	80052fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <xTaskCheckForTimeOut+0xc0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d007      	beq.n	80052d2 <xTaskCheckForTimeOut+0x82>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d302      	bcc.n	80052d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e015      	b.n	80052fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d20b      	bcs.n	80052f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ff9b 	bl	8005224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e004      	b.n	80052fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052fe:	f000 fe79 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000dc4 	.word	0x20000dc4
 8005310:	20000dd8 	.word	0x20000dd8

08005314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <vTaskMissedYield+0x14>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20000dd4 	.word	0x20000dd4

0800532c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005334:	f000 f852 	bl	80053dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <prvIdleTask+0x28>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d9f9      	bls.n	8005334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <prvIdleTask+0x2c>)
 8005342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005350:	e7f0      	b.n	8005334 <prvIdleTask+0x8>
 8005352:	bf00      	nop
 8005354:	200008f0 	.word	0x200008f0
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	e00c      	b.n	8005382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4a12      	ldr	r2, [pc, #72]	; (80053bc <prvInitialiseTaskLists+0x60>)
 8005374:	4413      	add	r3, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fcf0 	bl	8003d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3301      	adds	r3, #1
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b37      	cmp	r3, #55	; 0x37
 8005386:	d9ef      	bls.n	8005368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005388:	480d      	ldr	r0, [pc, #52]	; (80053c0 <prvInitialiseTaskLists+0x64>)
 800538a:	f7fe fce7 	bl	8003d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800538e:	480d      	ldr	r0, [pc, #52]	; (80053c4 <prvInitialiseTaskLists+0x68>)
 8005390:	f7fe fce4 	bl	8003d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005394:	480c      	ldr	r0, [pc, #48]	; (80053c8 <prvInitialiseTaskLists+0x6c>)
 8005396:	f7fe fce1 	bl	8003d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800539a:	480c      	ldr	r0, [pc, #48]	; (80053cc <prvInitialiseTaskLists+0x70>)
 800539c:	f7fe fcde 	bl	8003d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053a0:	480b      	ldr	r0, [pc, #44]	; (80053d0 <prvInitialiseTaskLists+0x74>)
 80053a2:	f7fe fcdb 	bl	8003d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <prvInitialiseTaskLists+0x78>)
 80053a8:	4a05      	ldr	r2, [pc, #20]	; (80053c0 <prvInitialiseTaskLists+0x64>)
 80053aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <prvInitialiseTaskLists+0x7c>)
 80053ae:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <prvInitialiseTaskLists+0x68>)
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200008f0 	.word	0x200008f0
 80053c0:	20000d50 	.word	0x20000d50
 80053c4:	20000d64 	.word	0x20000d64
 80053c8:	20000d80 	.word	0x20000d80
 80053cc:	20000d94 	.word	0x20000d94
 80053d0:	20000dac 	.word	0x20000dac
 80053d4:	20000d78 	.word	0x20000d78
 80053d8:	20000d7c 	.word	0x20000d7c

080053dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053e2:	e019      	b.n	8005418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053e4:	f000 fdd6 	bl	8005f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <prvCheckTasksWaitingTermination+0x50>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe fd3b 	bl	8003e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <prvCheckTasksWaitingTermination+0x54>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3b01      	subs	r3, #1
 8005400:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <prvCheckTasksWaitingTermination+0x54>)
 8005402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <prvCheckTasksWaitingTermination+0x58>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3b01      	subs	r3, #1
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <prvCheckTasksWaitingTermination+0x58>)
 800540c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800540e:	f000 fdf1 	bl	8005ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f810 	bl	8005438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <prvCheckTasksWaitingTermination+0x58>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e1      	bne.n	80053e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000d94 	.word	0x20000d94
 8005430:	20000dc0 	.word	0x20000dc0
 8005434:	20000da8 	.word	0x20000da8

08005438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	4618      	mov	r0, r3
 8005450:	f000 ff8e 	bl	8006370 <vPortFree>
				vPortFree( pxTCB );
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 ff8b 	bl	8006370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800545a:	e018      	b.n	800548e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005462:	2b01      	cmp	r3, #1
 8005464:	d103      	bne.n	800546e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 ff82 	bl	8006370 <vPortFree>
	}
 800546c:	e00f      	b.n	800548e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005474:	2b02      	cmp	r3, #2
 8005476:	d00a      	beq.n	800548e <prvDeleteTCB+0x56>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <prvDeleteTCB+0x54>
	}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <prvResetNextTaskUnblockTime+0x38>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <prvResetNextTaskUnblockTime+0x3c>)
 80054aa:	f04f 32ff 	mov.w	r2, #4294967295
 80054ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054b0:	e008      	b.n	80054c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <prvResetNextTaskUnblockTime+0x38>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <prvResetNextTaskUnblockTime+0x3c>)
 80054c2:	6013      	str	r3, [r2, #0]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000d78 	.word	0x20000d78
 80054d4:	20000de0 	.word	0x20000de0

080054d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <xTaskGetSchedulerState+0x34>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054e6:	2301      	movs	r3, #1
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	e008      	b.n	80054fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <xTaskGetSchedulerState+0x38>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054f4:	2302      	movs	r3, #2
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	e001      	b.n	80054fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054fe:	687b      	ldr	r3, [r7, #4]
	}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	20000dcc 	.word	0x20000dcc
 8005510:	20000de8 	.word	0x20000de8

08005514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d056      	beq.n	80055d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <xTaskPriorityDisinherit+0xd0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	429a      	cmp	r2, r3
 8005532:	d00a      	beq.n	800554a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	60fb      	str	r3, [r7, #12]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60bb      	str	r3, [r7, #8]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	429a      	cmp	r2, r3
 800557c:	d02c      	beq.n	80055d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d128      	bne.n	80055d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fc70 	bl	8003e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <xTaskPriorityDisinherit+0xd4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <xTaskPriorityDisinherit+0xa4>
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <xTaskPriorityDisinherit+0xd4>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a09      	ldr	r2, [pc, #36]	; (80055ec <xTaskPriorityDisinherit+0xd8>)
 80055c6:	441a      	add	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7fe fbf1 	bl	8003db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055d8:	697b      	ldr	r3, [r7, #20]
	}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200008ec 	.word	0x200008ec
 80055e8:	20000dc8 	.word	0x20000dc8
 80055ec:	200008f0 	.word	0x200008f0

080055f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055fa:	4b21      	ldr	r3, [pc, #132]	; (8005680 <prvAddCurrentTaskToDelayedList+0x90>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005600:	4b20      	ldr	r3, [pc, #128]	; (8005684 <prvAddCurrentTaskToDelayedList+0x94>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3304      	adds	r3, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fc32 	bl	8003e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d10a      	bne.n	800562a <prvAddCurrentTaskToDelayedList+0x3a>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561a:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <prvAddCurrentTaskToDelayedList+0x94>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4819      	ldr	r0, [pc, #100]	; (8005688 <prvAddCurrentTaskToDelayedList+0x98>)
 8005624:	f7fe fbc7 	bl	8003db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005628:	e026      	b.n	8005678 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <prvAddCurrentTaskToDelayedList+0x94>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	429a      	cmp	r2, r3
 8005640:	d209      	bcs.n	8005656 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <prvAddCurrentTaskToDelayedList+0x94>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f7fe fbd5 	bl	8003dfe <vListInsert>
}
 8005654:	e010      	b.n	8005678 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <prvAddCurrentTaskToDelayedList+0x94>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7fe fbcb 	bl	8003dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <prvAddCurrentTaskToDelayedList+0xa4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d202      	bcs.n	8005678 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005672:	4a08      	ldr	r2, [pc, #32]	; (8005694 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000dc4 	.word	0x20000dc4
 8005684:	200008ec 	.word	0x200008ec
 8005688:	20000dac 	.word	0x20000dac
 800568c:	20000d7c 	.word	0x20000d7c
 8005690:	20000d78 	.word	0x20000d78
 8005694:	20000de0 	.word	0x20000de0

08005698 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056a2:	f000 fb07 	bl	8005cb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <xTimerCreateTimerTask+0x80>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d021      	beq.n	80056f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056b6:	1d3a      	adds	r2, r7, #4
 80056b8:	f107 0108 	add.w	r1, r7, #8
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fb31 	bl	8003d28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	9202      	str	r2, [sp, #8]
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	2302      	movs	r3, #2
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	460a      	mov	r2, r1
 80056d8:	4910      	ldr	r1, [pc, #64]	; (800571c <xTimerCreateTimerTask+0x84>)
 80056da:	4811      	ldr	r0, [pc, #68]	; (8005720 <xTimerCreateTimerTask+0x88>)
 80056dc:	f7ff f8de 	bl	800489c <xTaskCreateStatic>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <xTimerCreateTimerTask+0x8c>)
 80056e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <xTimerCreateTimerTask+0x8c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056ee:	2301      	movs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	613b      	str	r3, [r7, #16]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800570e:	697b      	ldr	r3, [r7, #20]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000e1c 	.word	0x20000e1c
 800571c:	08007088 	.word	0x08007088
 8005720:	0800585d 	.word	0x0800585d
 8005724:	20000e20 	.word	0x20000e20

08005728 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <xTimerGenericCommand+0x98>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d02a      	beq.n	80057b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b05      	cmp	r3, #5
 800576e:	dc18      	bgt.n	80057a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005770:	f7ff feb2 	bl	80054d8 <xTaskGetSchedulerState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b02      	cmp	r3, #2
 8005778:	d109      	bne.n	800578e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <xTimerGenericCommand+0x98>)
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	f107 0110 	add.w	r1, r7, #16
 8005782:	2300      	movs	r3, #0
 8005784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005786:	f7fe fca1 	bl	80040cc <xQueueGenericSend>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24
 800578c:	e012      	b.n	80057b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <xTimerGenericCommand+0x98>)
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	f107 0110 	add.w	r1, r7, #16
 8005796:	2300      	movs	r3, #0
 8005798:	2200      	movs	r2, #0
 800579a:	f7fe fc97 	bl	80040cc <xQueueGenericSend>
 800579e:	6278      	str	r0, [r7, #36]	; 0x24
 80057a0:	e008      	b.n	80057b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <xTimerGenericCommand+0x98>)
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f107 0110 	add.w	r1, r7, #16
 80057aa:	2300      	movs	r3, #0
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	f7fe fd8b 	bl	80042c8 <xQueueGenericSendFromISR>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000e1c 	.word	0x20000e1c

080057c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <prvProcessExpiredTimer+0x94>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fb47 	bl	8003e70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d022      	beq.n	8005836 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	18d1      	adds	r1, r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	6978      	ldr	r0, [r7, #20]
 80057fe:	f000 f8d1 	bl	80059a4 <prvInsertTimerInActiveList>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01f      	beq.n	8005848 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2300      	movs	r3, #0
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	2100      	movs	r1, #0
 8005812:	6978      	ldr	r0, [r7, #20]
 8005814:	f7ff ff88 	bl	8005728 <xTimerGenericCommand>
 8005818:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d113      	bne.n	8005848 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	b2da      	uxtb	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	6978      	ldr	r0, [r7, #20]
 800584e:	4798      	blx	r3
}
 8005850:	bf00      	nop
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000e14 	.word	0x20000e14

0800585c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005864:	f107 0308 	add.w	r3, r7, #8
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f857 	bl	800591c <prvGetNextExpireTime>
 800586e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f803 	bl	8005880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800587a:	f000 f8d5 	bl	8005a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800587e:	e7f1      	b.n	8005864 <prvTimerTask+0x8>

08005880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800588a:	f7ff fa43 	bl	8004d14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f866 	bl	8005964 <prvSampleTimeNow>
 8005898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d130      	bne.n	8005902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d806      	bhi.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058ae:	f7ff fa3f 	bl	8004d30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff85 	bl	80057c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058ba:	e024      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <prvProcessTimerOrBlockTask+0x90>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <prvProcessTimerOrBlockTask+0x50>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <prvProcessTimerOrBlockTask+0x52>
 80058d0:	2300      	movs	r3, #0
 80058d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <prvProcessTimerOrBlockTask+0x94>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f7fe ffa7 	bl	8004834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058e6:	f7ff fa23 	bl	8004d30 <xTaskResumeAll>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <prvProcessTimerOrBlockTask+0x98>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
}
 8005900:	e001      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005902:	f7ff fa15 	bl	8004d30 <xTaskResumeAll>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000e18 	.word	0x20000e18
 8005914:	20000e1c 	.word	0x20000e1c
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <prvGetNextExpireTime+0x44>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <prvGetNextExpireTime+0x16>
 800592e:	2201      	movs	r2, #1
 8005930:	e000      	b.n	8005934 <prvGetNextExpireTime+0x18>
 8005932:	2200      	movs	r2, #0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <prvGetNextExpireTime+0x44>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e001      	b.n	8005950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000e14 	.word	0x20000e14

08005964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800596c:	f7ff fa7e 	bl	8004e6c <xTaskGetTickCount>
 8005970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <prvSampleTimeNow+0x3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	429a      	cmp	r2, r3
 800597a:	d205      	bcs.n	8005988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800597c:	f000 f936 	bl	8005bec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e002      	b.n	800598e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvSampleTimeNow+0x3c>)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005994:	68fb      	ldr	r3, [r7, #12]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000e24 	.word	0x20000e24

080059a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d812      	bhi.n	80059f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e01b      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <prvInsertTimerInActiveList+0x7c>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fe fa08 	bl	8003dfe <vListInsert>
 80059ee:	e012      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d206      	bcs.n	8005a06 <prvInsertTimerInActiveList+0x62>
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e007      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <prvInsertTimerInActiveList+0x80>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7fe f9f4 	bl	8003dfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000e18 	.word	0x20000e18
 8005a24:	20000e14 	.word	0x20000e14

08005a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	; 0x38
 8005a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2e:	e0ca      	b.n	8005bc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da18      	bge.n	8005a68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	3304      	adds	r3, #4
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61fb      	str	r3, [r7, #28]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5e:	6850      	ldr	r0, [r2, #4]
 8005a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a62:	6892      	ldr	r2, [r2, #8]
 8005a64:	4611      	mov	r1, r2
 8005a66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f2c0 80aa 	blt.w	8005bc4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe f9f5 	bl	8003e70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a86:	463b      	mov	r3, r7
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff6b 	bl	8005964 <prvSampleTimeNow>
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	f200 8097 	bhi.w	8005bc6 <prvProcessReceivedCommands+0x19e>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <prvProcessReceivedCommands+0x78>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005b9b 	.word	0x08005b9b
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005ac9 	.word	0x08005ac9
 8005ac0:	08005b3d 	.word	0x08005b3d
 8005ac4:	08005b51 	.word	0x08005b51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	18d1      	adds	r1, r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f7ff ff5c 	bl	80059a4 <prvInsertTimerInActiveList>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d069      	beq.n	8005bc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05e      	beq.n	8005bc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	441a      	add	r2, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f7ff fe05 	bl	8005728 <xTimerGenericCommand>
 8005b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d14f      	bne.n	8005bc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	61bb      	str	r3, [r7, #24]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b4e:	e03a      	b.n	8005bc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	617b      	str	r3, [r7, #20]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	18d1      	adds	r1, r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b94:	f7ff ff06 	bl	80059a4 <prvInsertTimerInActiveList>
					break;
 8005b98:	e015      	b.n	8005bc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005baa:	f000 fbe1 	bl	8006370 <vPortFree>
 8005bae:	e00a      	b.n	8005bc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bc2:	e000      	b.n	8005bc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005bc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <prvProcessReceivedCommands+0x1c0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1d39      	adds	r1, r7, #4
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fc16 	bl	8004400 <xQueueReceive>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f47f af2a 	bne.w	8005a30 <prvProcessReceivedCommands+0x8>
	}
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3730      	adds	r7, #48	; 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000e1c 	.word	0x20000e1c

08005bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bf2:	e048      	b.n	8005c86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bf4:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe f92f 	bl	8003e70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d02e      	beq.n	8005c86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90e      	bls.n	8005c58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fe f8d4 	bl	8003dfe <vListInsert>
 8005c56:	e016      	b.n	8005c86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	2100      	movs	r1, #0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fd60 	bl	8005728 <xTimerGenericCommand>
 8005c68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	603b      	str	r3, [r7, #0]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1b1      	bne.n	8005bf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <prvSwitchTimerLists+0xc4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <prvSwitchTimerLists+0xc0>)
 8005c9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <prvSwitchTimerLists+0xc4>)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000e14 	.word	0x20000e14
 8005cb0:	20000e18 	.word	0x20000e18

08005cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cba:	f000 f96b 	bl	8005f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <prvCheckForValidListAndQueue+0x60>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d120      	bne.n	8005d08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cc6:	4814      	ldr	r0, [pc, #80]	; (8005d18 <prvCheckForValidListAndQueue+0x64>)
 8005cc8:	f7fe f848 	bl	8003d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ccc:	4813      	ldr	r0, [pc, #76]	; (8005d1c <prvCheckForValidListAndQueue+0x68>)
 8005cce:	f7fe f845 	bl	8003d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <prvCheckForValidListAndQueue+0x6c>)
 8005cd4:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <prvCheckForValidListAndQueue+0x64>)
 8005cd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cd8:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <prvCheckForValidListAndQueue+0x70>)
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <prvCheckForValidListAndQueue+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <prvCheckForValidListAndQueue+0x74>)
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <prvCheckForValidListAndQueue+0x78>)
 8005ce6:	2110      	movs	r1, #16
 8005ce8:	200a      	movs	r0, #10
 8005cea:	f7fe f953 	bl	8003f94 <xQueueGenericCreateStatic>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <prvCheckForValidListAndQueue+0x60>)
 8005cf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <prvCheckForValidListAndQueue+0x60>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <prvCheckForValidListAndQueue+0x60>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	490b      	ldr	r1, [pc, #44]	; (8005d30 <prvCheckForValidListAndQueue+0x7c>)
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fd6c 	bl	80047e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d08:	f000 f974 	bl	8005ff4 <vPortExitCritical>
}
 8005d0c:	bf00      	nop
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000e1c 	.word	0x20000e1c
 8005d18:	20000dec 	.word	0x20000dec
 8005d1c:	20000e00 	.word	0x20000e00
 8005d20:	20000e14 	.word	0x20000e14
 8005d24:	20000e18 	.word	0x20000e18
 8005d28:	20000ec8 	.word	0x20000ec8
 8005d2c:	20000e28 	.word	0x20000e28
 8005d30:	08007090 	.word	0x08007090

08005d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3b04      	subs	r3, #4
 8005d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3b04      	subs	r3, #4
 8005d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d64:	4a0c      	ldr	r2, [pc, #48]	; (8005d98 <pxPortInitialiseStack+0x64>)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b14      	subs	r3, #20
 8005d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f06f 0202 	mvn.w	r2, #2
 8005d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3b20      	subs	r3, #32
 8005d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	08005d9d 	.word	0x08005d9d

08005d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <prvTaskExitError+0x54>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d00a      	beq.n	8005dc6 <prvTaskExitError+0x2a>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <prvTaskExitError+0x28>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60bb      	str	r3, [r7, #8]
}
 8005dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dda:	bf00      	nop
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0fc      	beq.n	8005ddc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	2000000c 	.word	0x2000000c
	...

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	4770      	bx	lr
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst2>:
 8005e20:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e28:	4808      	ldr	r0, [pc, #32]	; (8005e4c <prvPortStartFirstTask+0x24>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8814 	msr	CONTROL, r0
 8005e3a:	b662      	cpsie	i
 8005e3c:	b661      	cpsie	f
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	df00      	svc	0
 8005e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e4a:	bf00      	nop
 8005e4c:	e000ed08 	.word	0xe000ed08

08005e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e56:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <xPortStartScheduler+0x120>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a46      	ldr	r2, [pc, #280]	; (8005f74 <xPortStartScheduler+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10a      	bne.n	8005e76 <xPortStartScheduler+0x26>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	613b      	str	r3, [r7, #16]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <xPortStartScheduler+0x120>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	; (8005f78 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10a      	bne.n	8005e96 <xPortStartScheduler+0x46>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <xPortStartScheduler+0x12c>)
 8005e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <xPortStartScheduler+0x130>)
 8005ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ec0:	2207      	movs	r2, #7
 8005ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec4:	e009      	b.n	8005eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d0ef      	beq.n	8005ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1c3 0307 	rsb	r3, r3, #7
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00a      	beq.n	8005f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f12:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f26:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f3e:	f000 f8dd 	bl	80060fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <xPortStartScheduler+0x13c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f48:	f000 f8fc 	bl	8006144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xPortStartScheduler+0x140>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0f      	ldr	r2, [pc, #60]	; (8005f90 <xPortStartScheduler+0x140>)
 8005f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f58:	f7ff ff66 	bl	8005e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f5c:	f7ff f850 	bl	8005000 <vTaskSwitchContext>
	prvTaskExitError();
 8005f60:	f7ff ff1c 	bl	8005d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000ed00 	.word	0xe000ed00
 8005f74:	410fc271 	.word	0x410fc271
 8005f78:	410fc270 	.word	0x410fc270
 8005f7c:	e000e400 	.word	0xe000e400
 8005f80:	20000f18 	.word	0x20000f18
 8005f84:	20000f1c 	.word	0x20000f1c
 8005f88:	e000ed20 	.word	0xe000ed20
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	e000ef34 	.word	0xe000ef34

08005f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <vPortEnterCritical+0x58>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <vPortEnterCritical+0x58>)
 8005fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <vPortEnterCritical+0x58>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10f      	bne.n	8005fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <vPortEnterCritical+0x5c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	603b      	str	r3, [r7, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vPortEnterCritical+0x4a>
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <vPortExitCritical+0x50>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <vPortExitCritical+0x24>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <vPortExitCritical+0x50>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <vPortExitCritical+0x50>)
 8006020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <vPortExitCritical+0x42>
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f383 8811 	msr	BASEPRI, r3
}
 8006034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000000c 	.word	0x2000000c
	...

08006050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006050:	f3ef 8009 	mrs	r0, PSP
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <pxCurrentTCBConst>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f01e 0f10 	tst.w	lr, #16
 8006060:	bf08      	it	eq
 8006062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	6010      	str	r0, [r2, #0]
 800606c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006074:	f380 8811 	msr	BASEPRI, r0
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f7fe ffbe 	bl	8005000 <vTaskSwitchContext>
 8006084:	f04f 0000 	mov.w	r0, #0
 8006088:	f380 8811 	msr	BASEPRI, r0
 800608c:	bc09      	pop	{r0, r3}
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006096:	f01e 0f10 	tst.w	lr, #16
 800609a:	bf08      	it	eq
 800609c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060a0:	f380 8809 	msr	PSP, r0
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst>:
 80060b0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f7fe fedb 	bl	8004e8c <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <xPortSysTickHandler+0x40>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f383 8811 	msr	BASEPRI, r3
}
 80060ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006106:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <vPortSetupTimerInterrupt+0x38>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <vPortSetupTimerInterrupt+0x3c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <vPortSetupTimerInterrupt+0x40>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <vPortSetupTimerInterrupt+0x44>)
 800611a:	3b01      	subs	r3, #1
 800611c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611e:	4b04      	ldr	r3, [pc, #16]	; (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e010 	.word	0xe000e010
 8006134:	e000e018 	.word	0xe000e018
 8006138:	20000000 	.word	0x20000000
 800613c:	10624dd3 	.word	0x10624dd3
 8006140:	e000e014 	.word	0xe000e014

08006144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006154 <vPortEnableVFP+0x10>
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800614e:	6001      	str	r1, [r0, #0]
 8006150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006152:	bf00      	nop
 8006154:	e000ed88 	.word	0xe000ed88

08006158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800615e:	f3ef 8305 	mrs	r3, IPSR
 8006162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d914      	bls.n	8006194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <vPortValidateInterruptPriority+0x70>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <vPortValidateInterruptPriority+0x74>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	7afa      	ldrb	r2, [r7, #11]
 800617a:	429a      	cmp	r2, r3
 800617c:	d20a      	bcs.n	8006194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <vPortValidateInterruptPriority+0x78>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <vPortValidateInterruptPriority+0x7c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d90a      	bls.n	80061ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	603b      	str	r3, [r7, #0]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <vPortValidateInterruptPriority+0x60>
	}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	e000e3f0 	.word	0xe000e3f0
 80061cc:	20000f18 	.word	0x20000f18
 80061d0:	e000ed0c 	.word	0xe000ed0c
 80061d4:	20000f1c 	.word	0x20000f1c

080061d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061e4:	f7fe fd96 	bl	8004d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061e8:	4b5b      	ldr	r3, [pc, #364]	; (8006358 <pvPortMalloc+0x180>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061f0:	f000 f920 	bl	8006434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061f4:	4b59      	ldr	r3, [pc, #356]	; (800635c <pvPortMalloc+0x184>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8093 	bne.w	8006328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01d      	beq.n	8006244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006208:	2208      	movs	r2, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <pvPortMalloc+0x6c>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	617b      	str	r3, [r7, #20]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06e      	beq.n	8006328 <pvPortMalloc+0x150>
 800624a:	4b45      	ldr	r3, [pc, #276]	; (8006360 <pvPortMalloc+0x188>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d869      	bhi.n	8006328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <pvPortMalloc+0x18c>)
 8006256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <pvPortMalloc+0x18c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625e:	e004      	b.n	800626a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d903      	bls.n	800627c <pvPortMalloc+0xa4>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <pvPortMalloc+0x180>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	429a      	cmp	r2, r3
 8006284:	d050      	beq.n	8006328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	2308      	movs	r3, #8
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d91f      	bls.n	80062e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <pvPortMalloc+0xf8>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	613b      	str	r3, [r7, #16]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062e2:	69b8      	ldr	r0, [r7, #24]
 80062e4:	f000 f908 	bl	80064f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <pvPortMalloc+0x188>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <pvPortMalloc+0x188>)
 80062f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <pvPortMalloc+0x188>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <pvPortMalloc+0x190>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d203      	bcs.n	800630a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <pvPortMalloc+0x188>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <pvPortMalloc+0x190>)
 8006308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <pvPortMalloc+0x184>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	431a      	orrs	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <pvPortMalloc+0x194>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a11      	ldr	r2, [pc, #68]	; (800636c <pvPortMalloc+0x194>)
 8006326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006328:	f7fe fd02 	bl	8004d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <pvPortMalloc+0x174>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <pvPortMalloc+0x172>
	return pvReturn;
 800634c:	69fb      	ldr	r3, [r7, #28]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20001ae0 	.word	0x20001ae0
 800635c:	20001af4 	.word	0x20001af4
 8006360:	20001ae4 	.word	0x20001ae4
 8006364:	20001ad8 	.word	0x20001ad8
 8006368:	20001ae8 	.word	0x20001ae8
 800636c:	20001aec 	.word	0x20001aec

08006370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04d      	beq.n	800641e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006382:	2308      	movs	r3, #8
 8006384:	425b      	negs	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <vPortFree+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <vPortFree+0x44>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <vPortFree+0x62>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60bb      	str	r3, [r7, #8]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <vPortFree+0xb8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01e      	beq.n	800641e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11a      	bne.n	800641e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <vPortFree+0xb8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063f8:	f7fe fc8c 	bl	8004d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <vPortFree+0xbc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4413      	add	r3, r2
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <vPortFree+0xbc>)
 8006408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800640a:	6938      	ldr	r0, [r7, #16]
 800640c:	f000 f874 	bl	80064f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortFree+0xc0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vPortFree+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800641a:	f7fe fc89 	bl	8004d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20001af4 	.word	0x20001af4
 800642c:	20001ae4 	.word	0x20001ae4
 8006430:	20001af0 	.word	0x20001af0

08006434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <prvHeapInit+0xac>)
 8006442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <prvHeapInit+0xac>)
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <prvHeapInit+0xb0>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <prvHeapInit+0xb0>)
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <prvHeapInit+0xb4>)
 8006494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvHeapInit+0xb4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <prvHeapInit+0xb8>)
 80064c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <prvHeapInit+0xbc>)
 80064ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvHeapInit+0xc0>)
 80064ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000f20 	.word	0x20000f20
 80064e4:	20001ad8 	.word	0x20001ad8
 80064e8:	20001ae0 	.word	0x20001ae0
 80064ec:	20001ae8 	.word	0x20001ae8
 80064f0:	20001ae4 	.word	0x20001ae4
 80064f4:	20001af4 	.word	0x20001af4

080064f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvInsertBlockIntoFreeList+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <prvInsertBlockIntoFreeList+0x14>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8f7      	bhi.n	8006506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d118      	bne.n	8006580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d00d      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e003      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20001ad8 	.word	0x20001ad8
 80065a8:	20001ae0 	.word	0x20001ae0

080065ac <__errno>:
 80065ac:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <__errno+0x8>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000010 	.word	0x20000010

080065b8 <__libc_init_array>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4d0d      	ldr	r5, [pc, #52]	; (80065f0 <__libc_init_array+0x38>)
 80065bc:	4c0d      	ldr	r4, [pc, #52]	; (80065f4 <__libc_init_array+0x3c>)
 80065be:	1b64      	subs	r4, r4, r5
 80065c0:	10a4      	asrs	r4, r4, #2
 80065c2:	2600      	movs	r6, #0
 80065c4:	42a6      	cmp	r6, r4
 80065c6:	d109      	bne.n	80065dc <__libc_init_array+0x24>
 80065c8:	4d0b      	ldr	r5, [pc, #44]	; (80065f8 <__libc_init_array+0x40>)
 80065ca:	4c0c      	ldr	r4, [pc, #48]	; (80065fc <__libc_init_array+0x44>)
 80065cc:	f000 fd2c 	bl	8007028 <_init>
 80065d0:	1b64      	subs	r4, r4, r5
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	2600      	movs	r6, #0
 80065d6:	42a6      	cmp	r6, r4
 80065d8:	d105      	bne.n	80065e6 <__libc_init_array+0x2e>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e0:	4798      	blx	r3
 80065e2:	3601      	adds	r6, #1
 80065e4:	e7ee      	b.n	80065c4 <__libc_init_array+0xc>
 80065e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ea:	4798      	blx	r3
 80065ec:	3601      	adds	r6, #1
 80065ee:	e7f2      	b.n	80065d6 <__libc_init_array+0x1e>
 80065f0:	08007170 	.word	0x08007170
 80065f4:	08007170 	.word	0x08007170
 80065f8:	08007170 	.word	0x08007170
 80065fc:	08007174 	.word	0x08007174

08006600 <memcpy>:
 8006600:	440a      	add	r2, r1
 8006602:	4291      	cmp	r1, r2
 8006604:	f100 33ff 	add.w	r3, r0, #4294967295
 8006608:	d100      	bne.n	800660c <memcpy+0xc>
 800660a:	4770      	bx	lr
 800660c:	b510      	push	{r4, lr}
 800660e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006616:	4291      	cmp	r1, r2
 8006618:	d1f9      	bne.n	800660e <memcpy+0xe>
 800661a:	bd10      	pop	{r4, pc}

0800661c <memset>:
 800661c:	4402      	add	r2, r0
 800661e:	4603      	mov	r3, r0
 8006620:	4293      	cmp	r3, r2
 8006622:	d100      	bne.n	8006626 <memset+0xa>
 8006624:	4770      	bx	lr
 8006626:	f803 1b01 	strb.w	r1, [r3], #1
 800662a:	e7f9      	b.n	8006620 <memset+0x4>

0800662c <_puts_r>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	4605      	mov	r5, r0
 8006632:	b118      	cbz	r0, 800663c <_puts_r+0x10>
 8006634:	6983      	ldr	r3, [r0, #24]
 8006636:	b90b      	cbnz	r3, 800663c <_puts_r+0x10>
 8006638:	f000 fa48 	bl	8006acc <__sinit>
 800663c:	69ab      	ldr	r3, [r5, #24]
 800663e:	68ac      	ldr	r4, [r5, #8]
 8006640:	b913      	cbnz	r3, 8006648 <_puts_r+0x1c>
 8006642:	4628      	mov	r0, r5
 8006644:	f000 fa42 	bl	8006acc <__sinit>
 8006648:	4b2c      	ldr	r3, [pc, #176]	; (80066fc <_puts_r+0xd0>)
 800664a:	429c      	cmp	r4, r3
 800664c:	d120      	bne.n	8006690 <_puts_r+0x64>
 800664e:	686c      	ldr	r4, [r5, #4]
 8006650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006652:	07db      	lsls	r3, r3, #31
 8006654:	d405      	bmi.n	8006662 <_puts_r+0x36>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	0598      	lsls	r0, r3, #22
 800665a:	d402      	bmi.n	8006662 <_puts_r+0x36>
 800665c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800665e:	f000 fad3 	bl	8006c08 <__retarget_lock_acquire_recursive>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	0719      	lsls	r1, r3, #28
 8006666:	d51d      	bpl.n	80066a4 <_puts_r+0x78>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	b1db      	cbz	r3, 80066a4 <_puts_r+0x78>
 800666c:	3e01      	subs	r6, #1
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006674:	3b01      	subs	r3, #1
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	bb39      	cbnz	r1, 80066ca <_puts_r+0x9e>
 800667a:	2b00      	cmp	r3, #0
 800667c:	da38      	bge.n	80066f0 <_puts_r+0xc4>
 800667e:	4622      	mov	r2, r4
 8006680:	210a      	movs	r1, #10
 8006682:	4628      	mov	r0, r5
 8006684:	f000 f848 	bl	8006718 <__swbuf_r>
 8006688:	3001      	adds	r0, #1
 800668a:	d011      	beq.n	80066b0 <_puts_r+0x84>
 800668c:	250a      	movs	r5, #10
 800668e:	e011      	b.n	80066b4 <_puts_r+0x88>
 8006690:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <_puts_r+0xd4>)
 8006692:	429c      	cmp	r4, r3
 8006694:	d101      	bne.n	800669a <_puts_r+0x6e>
 8006696:	68ac      	ldr	r4, [r5, #8]
 8006698:	e7da      	b.n	8006650 <_puts_r+0x24>
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <_puts_r+0xd8>)
 800669c:	429c      	cmp	r4, r3
 800669e:	bf08      	it	eq
 80066a0:	68ec      	ldreq	r4, [r5, #12]
 80066a2:	e7d5      	b.n	8006650 <_puts_r+0x24>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f888 	bl	80067bc <__swsetup_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d0dd      	beq.n	800666c <_puts_r+0x40>
 80066b0:	f04f 35ff 	mov.w	r5, #4294967295
 80066b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066b6:	07da      	lsls	r2, r3, #31
 80066b8:	d405      	bmi.n	80066c6 <_puts_r+0x9a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	059b      	lsls	r3, r3, #22
 80066be:	d402      	bmi.n	80066c6 <_puts_r+0x9a>
 80066c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c2:	f000 faa2 	bl	8006c0a <__retarget_lock_release_recursive>
 80066c6:	4628      	mov	r0, r5
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da04      	bge.n	80066d8 <_puts_r+0xac>
 80066ce:	69a2      	ldr	r2, [r4, #24]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	dc06      	bgt.n	80066e2 <_puts_r+0xb6>
 80066d4:	290a      	cmp	r1, #10
 80066d6:	d004      	beq.n	80066e2 <_puts_r+0xb6>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	7019      	strb	r1, [r3, #0]
 80066e0:	e7c5      	b.n	800666e <_puts_r+0x42>
 80066e2:	4622      	mov	r2, r4
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 f817 	bl	8006718 <__swbuf_r>
 80066ea:	3001      	adds	r0, #1
 80066ec:	d1bf      	bne.n	800666e <_puts_r+0x42>
 80066ee:	e7df      	b.n	80066b0 <_puts_r+0x84>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	250a      	movs	r5, #10
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	701d      	strb	r5, [r3, #0]
 80066fa:	e7db      	b.n	80066b4 <_puts_r+0x88>
 80066fc:	08007128 	.word	0x08007128
 8006700:	08007148 	.word	0x08007148
 8006704:	08007108 	.word	0x08007108

08006708 <puts>:
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <puts+0xc>)
 800670a:	4601      	mov	r1, r0
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f7ff bf8d 	b.w	800662c <_puts_r>
 8006712:	bf00      	nop
 8006714:	20000010 	.word	0x20000010

08006718 <__swbuf_r>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	460e      	mov	r6, r1
 800671c:	4614      	mov	r4, r2
 800671e:	4605      	mov	r5, r0
 8006720:	b118      	cbz	r0, 800672a <__swbuf_r+0x12>
 8006722:	6983      	ldr	r3, [r0, #24]
 8006724:	b90b      	cbnz	r3, 800672a <__swbuf_r+0x12>
 8006726:	f000 f9d1 	bl	8006acc <__sinit>
 800672a:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <__swbuf_r+0x98>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d12b      	bne.n	8006788 <__swbuf_r+0x70>
 8006730:	686c      	ldr	r4, [r5, #4]
 8006732:	69a3      	ldr	r3, [r4, #24]
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	071a      	lsls	r2, r3, #28
 800673a:	d52f      	bpl.n	800679c <__swbuf_r+0x84>
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	b36b      	cbz	r3, 800679c <__swbuf_r+0x84>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1ac0      	subs	r0, r0, r3
 8006746:	6963      	ldr	r3, [r4, #20]
 8006748:	b2f6      	uxtb	r6, r6
 800674a:	4283      	cmp	r3, r0
 800674c:	4637      	mov	r7, r6
 800674e:	dc04      	bgt.n	800675a <__swbuf_r+0x42>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f926 	bl	80069a4 <_fflush_r>
 8006758:	bb30      	cbnz	r0, 80067a8 <__swbuf_r+0x90>
 800675a:	68a3      	ldr	r3, [r4, #8]
 800675c:	3b01      	subs	r3, #1
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	701e      	strb	r6, [r3, #0]
 8006768:	6963      	ldr	r3, [r4, #20]
 800676a:	3001      	adds	r0, #1
 800676c:	4283      	cmp	r3, r0
 800676e:	d004      	beq.n	800677a <__swbuf_r+0x62>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d506      	bpl.n	8006784 <__swbuf_r+0x6c>
 8006776:	2e0a      	cmp	r6, #10
 8006778:	d104      	bne.n	8006784 <__swbuf_r+0x6c>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f911 	bl	80069a4 <_fflush_r>
 8006782:	b988      	cbnz	r0, 80067a8 <__swbuf_r+0x90>
 8006784:	4638      	mov	r0, r7
 8006786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <__swbuf_r+0x9c>)
 800678a:	429c      	cmp	r4, r3
 800678c:	d101      	bne.n	8006792 <__swbuf_r+0x7a>
 800678e:	68ac      	ldr	r4, [r5, #8]
 8006790:	e7cf      	b.n	8006732 <__swbuf_r+0x1a>
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <__swbuf_r+0xa0>)
 8006794:	429c      	cmp	r4, r3
 8006796:	bf08      	it	eq
 8006798:	68ec      	ldreq	r4, [r5, #12]
 800679a:	e7ca      	b.n	8006732 <__swbuf_r+0x1a>
 800679c:	4621      	mov	r1, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f80c 	bl	80067bc <__swsetup_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d0cb      	beq.n	8006740 <__swbuf_r+0x28>
 80067a8:	f04f 37ff 	mov.w	r7, #4294967295
 80067ac:	e7ea      	b.n	8006784 <__swbuf_r+0x6c>
 80067ae:	bf00      	nop
 80067b0:	08007128 	.word	0x08007128
 80067b4:	08007148 	.word	0x08007148
 80067b8:	08007108 	.word	0x08007108

080067bc <__swsetup_r>:
 80067bc:	4b32      	ldr	r3, [pc, #200]	; (8006888 <__swsetup_r+0xcc>)
 80067be:	b570      	push	{r4, r5, r6, lr}
 80067c0:	681d      	ldr	r5, [r3, #0]
 80067c2:	4606      	mov	r6, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	b125      	cbz	r5, 80067d2 <__swsetup_r+0x16>
 80067c8:	69ab      	ldr	r3, [r5, #24]
 80067ca:	b913      	cbnz	r3, 80067d2 <__swsetup_r+0x16>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f97d 	bl	8006acc <__sinit>
 80067d2:	4b2e      	ldr	r3, [pc, #184]	; (800688c <__swsetup_r+0xd0>)
 80067d4:	429c      	cmp	r4, r3
 80067d6:	d10f      	bne.n	80067f8 <__swsetup_r+0x3c>
 80067d8:	686c      	ldr	r4, [r5, #4]
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e0:	0719      	lsls	r1, r3, #28
 80067e2:	d42c      	bmi.n	800683e <__swsetup_r+0x82>
 80067e4:	06dd      	lsls	r5, r3, #27
 80067e6:	d411      	bmi.n	800680c <__swsetup_r+0x50>
 80067e8:	2309      	movs	r3, #9
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	e03e      	b.n	8006876 <__swsetup_r+0xba>
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <__swsetup_r+0xd4>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d101      	bne.n	8006802 <__swsetup_r+0x46>
 80067fe:	68ac      	ldr	r4, [r5, #8]
 8006800:	e7eb      	b.n	80067da <__swsetup_r+0x1e>
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <__swsetup_r+0xd8>)
 8006804:	429c      	cmp	r4, r3
 8006806:	bf08      	it	eq
 8006808:	68ec      	ldreq	r4, [r5, #12]
 800680a:	e7e6      	b.n	80067da <__swsetup_r+0x1e>
 800680c:	0758      	lsls	r0, r3, #29
 800680e:	d512      	bpl.n	8006836 <__swsetup_r+0x7a>
 8006810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006812:	b141      	cbz	r1, 8006826 <__swsetup_r+0x6a>
 8006814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <__swsetup_r+0x66>
 800681c:	4630      	mov	r0, r6
 800681e:	f000 fa5b 	bl	8006cd8 <_free_r>
 8006822:	2300      	movs	r3, #0
 8006824:	6363      	str	r3, [r4, #52]	; 0x34
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	2300      	movs	r3, #0
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	b94b      	cbnz	r3, 8006856 <__swsetup_r+0x9a>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684c:	d003      	beq.n	8006856 <__swsetup_r+0x9a>
 800684e:	4621      	mov	r1, r4
 8006850:	4630      	mov	r0, r6
 8006852:	f000 fa01 	bl	8006c58 <__smakebuf_r>
 8006856:	89a0      	ldrh	r0, [r4, #12]
 8006858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800685c:	f010 0301 	ands.w	r3, r0, #1
 8006860:	d00a      	beq.n	8006878 <__swsetup_r+0xbc>
 8006862:	2300      	movs	r3, #0
 8006864:	60a3      	str	r3, [r4, #8]
 8006866:	6963      	ldr	r3, [r4, #20]
 8006868:	425b      	negs	r3, r3
 800686a:	61a3      	str	r3, [r4, #24]
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	b943      	cbnz	r3, 8006882 <__swsetup_r+0xc6>
 8006870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006874:	d1ba      	bne.n	80067ec <__swsetup_r+0x30>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	0781      	lsls	r1, r0, #30
 800687a:	bf58      	it	pl
 800687c:	6963      	ldrpl	r3, [r4, #20]
 800687e:	60a3      	str	r3, [r4, #8]
 8006880:	e7f4      	b.n	800686c <__swsetup_r+0xb0>
 8006882:	2000      	movs	r0, #0
 8006884:	e7f7      	b.n	8006876 <__swsetup_r+0xba>
 8006886:	bf00      	nop
 8006888:	20000010 	.word	0x20000010
 800688c:	08007128 	.word	0x08007128
 8006890:	08007148 	.word	0x08007148
 8006894:	08007108 	.word	0x08007108

08006898 <__sflush_r>:
 8006898:	898a      	ldrh	r2, [r1, #12]
 800689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	4605      	mov	r5, r0
 80068a0:	0710      	lsls	r0, r2, #28
 80068a2:	460c      	mov	r4, r1
 80068a4:	d458      	bmi.n	8006958 <__sflush_r+0xc0>
 80068a6:	684b      	ldr	r3, [r1, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc05      	bgt.n	80068b8 <__sflush_r+0x20>
 80068ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dc02      	bgt.n	80068b8 <__sflush_r+0x20>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	d0f9      	beq.n	80068b2 <__sflush_r+0x1a>
 80068be:	2300      	movs	r3, #0
 80068c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068c4:	682f      	ldr	r7, [r5, #0]
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	d032      	beq.n	8006930 <__sflush_r+0x98>
 80068ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	075a      	lsls	r2, r3, #29
 80068d0:	d505      	bpl.n	80068de <__sflush_r+0x46>
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	1ac0      	subs	r0, r0, r3
 80068d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068d8:	b10b      	cbz	r3, 80068de <__sflush_r+0x46>
 80068da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068dc:	1ac0      	subs	r0, r0, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	4602      	mov	r2, r0
 80068e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e4:	6a21      	ldr	r1, [r4, #32]
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b0      	blx	r6
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	d106      	bne.n	80068fe <__sflush_r+0x66>
 80068f0:	6829      	ldr	r1, [r5, #0]
 80068f2:	291d      	cmp	r1, #29
 80068f4:	d82c      	bhi.n	8006950 <__sflush_r+0xb8>
 80068f6:	4a2a      	ldr	r2, [pc, #168]	; (80069a0 <__sflush_r+0x108>)
 80068f8:	40ca      	lsrs	r2, r1
 80068fa:	07d6      	lsls	r6, r2, #31
 80068fc:	d528      	bpl.n	8006950 <__sflush_r+0xb8>
 80068fe:	2200      	movs	r2, #0
 8006900:	6062      	str	r2, [r4, #4]
 8006902:	04d9      	lsls	r1, r3, #19
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	d504      	bpl.n	8006914 <__sflush_r+0x7c>
 800690a:	1c42      	adds	r2, r0, #1
 800690c:	d101      	bne.n	8006912 <__sflush_r+0x7a>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	b903      	cbnz	r3, 8006914 <__sflush_r+0x7c>
 8006912:	6560      	str	r0, [r4, #84]	; 0x54
 8006914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006916:	602f      	str	r7, [r5, #0]
 8006918:	2900      	cmp	r1, #0
 800691a:	d0ca      	beq.n	80068b2 <__sflush_r+0x1a>
 800691c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006920:	4299      	cmp	r1, r3
 8006922:	d002      	beq.n	800692a <__sflush_r+0x92>
 8006924:	4628      	mov	r0, r5
 8006926:	f000 f9d7 	bl	8006cd8 <_free_r>
 800692a:	2000      	movs	r0, #0
 800692c:	6360      	str	r0, [r4, #52]	; 0x34
 800692e:	e7c1      	b.n	80068b4 <__sflush_r+0x1c>
 8006930:	6a21      	ldr	r1, [r4, #32]
 8006932:	2301      	movs	r3, #1
 8006934:	4628      	mov	r0, r5
 8006936:	47b0      	blx	r6
 8006938:	1c41      	adds	r1, r0, #1
 800693a:	d1c7      	bne.n	80068cc <__sflush_r+0x34>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0c4      	beq.n	80068cc <__sflush_r+0x34>
 8006942:	2b1d      	cmp	r3, #29
 8006944:	d001      	beq.n	800694a <__sflush_r+0xb2>
 8006946:	2b16      	cmp	r3, #22
 8006948:	d101      	bne.n	800694e <__sflush_r+0xb6>
 800694a:	602f      	str	r7, [r5, #0]
 800694c:	e7b1      	b.n	80068b2 <__sflush_r+0x1a>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	e7ad      	b.n	80068b4 <__sflush_r+0x1c>
 8006958:	690f      	ldr	r7, [r1, #16]
 800695a:	2f00      	cmp	r7, #0
 800695c:	d0a9      	beq.n	80068b2 <__sflush_r+0x1a>
 800695e:	0793      	lsls	r3, r2, #30
 8006960:	680e      	ldr	r6, [r1, #0]
 8006962:	bf08      	it	eq
 8006964:	694b      	ldreq	r3, [r1, #20]
 8006966:	600f      	str	r7, [r1, #0]
 8006968:	bf18      	it	ne
 800696a:	2300      	movne	r3, #0
 800696c:	eba6 0807 	sub.w	r8, r6, r7
 8006970:	608b      	str	r3, [r1, #8]
 8006972:	f1b8 0f00 	cmp.w	r8, #0
 8006976:	dd9c      	ble.n	80068b2 <__sflush_r+0x1a>
 8006978:	6a21      	ldr	r1, [r4, #32]
 800697a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800697c:	4643      	mov	r3, r8
 800697e:	463a      	mov	r2, r7
 8006980:	4628      	mov	r0, r5
 8006982:	47b0      	blx	r6
 8006984:	2800      	cmp	r0, #0
 8006986:	dc06      	bgt.n	8006996 <__sflush_r+0xfe>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e78e      	b.n	80068b4 <__sflush_r+0x1c>
 8006996:	4407      	add	r7, r0
 8006998:	eba8 0800 	sub.w	r8, r8, r0
 800699c:	e7e9      	b.n	8006972 <__sflush_r+0xda>
 800699e:	bf00      	nop
 80069a0:	20400001 	.word	0x20400001

080069a4 <_fflush_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	690b      	ldr	r3, [r1, #16]
 80069a8:	4605      	mov	r5, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b913      	cbnz	r3, 80069b4 <_fflush_r+0x10>
 80069ae:	2500      	movs	r5, #0
 80069b0:	4628      	mov	r0, r5
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	b118      	cbz	r0, 80069be <_fflush_r+0x1a>
 80069b6:	6983      	ldr	r3, [r0, #24]
 80069b8:	b90b      	cbnz	r3, 80069be <_fflush_r+0x1a>
 80069ba:	f000 f887 	bl	8006acc <__sinit>
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <_fflush_r+0x6c>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	d11b      	bne.n	80069fc <_fflush_r+0x58>
 80069c4:	686c      	ldr	r4, [r5, #4]
 80069c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0ef      	beq.n	80069ae <_fflush_r+0xa>
 80069ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069d0:	07d0      	lsls	r0, r2, #31
 80069d2:	d404      	bmi.n	80069de <_fflush_r+0x3a>
 80069d4:	0599      	lsls	r1, r3, #22
 80069d6:	d402      	bmi.n	80069de <_fflush_r+0x3a>
 80069d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069da:	f000 f915 	bl	8006c08 <__retarget_lock_acquire_recursive>
 80069de:	4628      	mov	r0, r5
 80069e0:	4621      	mov	r1, r4
 80069e2:	f7ff ff59 	bl	8006898 <__sflush_r>
 80069e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e8:	07da      	lsls	r2, r3, #31
 80069ea:	4605      	mov	r5, r0
 80069ec:	d4e0      	bmi.n	80069b0 <_fflush_r+0xc>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	059b      	lsls	r3, r3, #22
 80069f2:	d4dd      	bmi.n	80069b0 <_fflush_r+0xc>
 80069f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069f6:	f000 f908 	bl	8006c0a <__retarget_lock_release_recursive>
 80069fa:	e7d9      	b.n	80069b0 <_fflush_r+0xc>
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_fflush_r+0x70>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <_fflush_r+0x62>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7df      	b.n	80069c6 <_fflush_r+0x22>
 8006a06:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <_fflush_r+0x74>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	bf08      	it	eq
 8006a0c:	68ec      	ldreq	r4, [r5, #12]
 8006a0e:	e7da      	b.n	80069c6 <_fflush_r+0x22>
 8006a10:	08007128 	.word	0x08007128
 8006a14:	08007148 	.word	0x08007148
 8006a18:	08007108 	.word	0x08007108

08006a1c <std>:
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	b510      	push	{r4, lr}
 8006a20:	4604      	mov	r4, r0
 8006a22:	e9c0 3300 	strd	r3, r3, [r0]
 8006a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a2a:	6083      	str	r3, [r0, #8]
 8006a2c:	8181      	strh	r1, [r0, #12]
 8006a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a30:	81c2      	strh	r2, [r0, #14]
 8006a32:	6183      	str	r3, [r0, #24]
 8006a34:	4619      	mov	r1, r3
 8006a36:	2208      	movs	r2, #8
 8006a38:	305c      	adds	r0, #92	; 0x5c
 8006a3a:	f7ff fdef 	bl	800661c <memset>
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <std+0x38>)
 8006a40:	6263      	str	r3, [r4, #36]	; 0x24
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x3c>)
 8006a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <std+0x40>)
 8006a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <std+0x44>)
 8006a4c:	6224      	str	r4, [r4, #32]
 8006a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	bf00      	nop
 8006a54:	08006eb9 	.word	0x08006eb9
 8006a58:	08006edb 	.word	0x08006edb
 8006a5c:	08006f13 	.word	0x08006f13
 8006a60:	08006f37 	.word	0x08006f37

08006a64 <_cleanup_r>:
 8006a64:	4901      	ldr	r1, [pc, #4]	; (8006a6c <_cleanup_r+0x8>)
 8006a66:	f000 b8af 	b.w	8006bc8 <_fwalk_reent>
 8006a6a:	bf00      	nop
 8006a6c:	080069a5 	.word	0x080069a5

08006a70 <__sfmoreglue>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	2268      	movs	r2, #104	; 0x68
 8006a74:	1e4d      	subs	r5, r1, #1
 8006a76:	4355      	muls	r5, r2
 8006a78:	460e      	mov	r6, r1
 8006a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a7e:	f000 f997 	bl	8006db0 <_malloc_r>
 8006a82:	4604      	mov	r4, r0
 8006a84:	b140      	cbz	r0, 8006a98 <__sfmoreglue+0x28>
 8006a86:	2100      	movs	r1, #0
 8006a88:	e9c0 1600 	strd	r1, r6, [r0]
 8006a8c:	300c      	adds	r0, #12
 8006a8e:	60a0      	str	r0, [r4, #8]
 8006a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a94:	f7ff fdc2 	bl	800661c <memset>
 8006a98:	4620      	mov	r0, r4
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}

08006a9c <__sfp_lock_acquire>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__sfp_lock_acquire+0x8>)
 8006a9e:	f000 b8b3 	b.w	8006c08 <__retarget_lock_acquire_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20001af9 	.word	0x20001af9

08006aa8 <__sfp_lock_release>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__sfp_lock_release+0x8>)
 8006aaa:	f000 b8ae 	b.w	8006c0a <__retarget_lock_release_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20001af9 	.word	0x20001af9

08006ab4 <__sinit_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__sinit_lock_acquire+0x8>)
 8006ab6:	f000 b8a7 	b.w	8006c08 <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20001afa 	.word	0x20001afa

08006ac0 <__sinit_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	; (8006ac8 <__sinit_lock_release+0x8>)
 8006ac2:	f000 b8a2 	b.w	8006c0a <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20001afa 	.word	0x20001afa

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sinit_lock_acquire>
 8006ad4:	69a3      	ldr	r3, [r4, #24]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sinit_lock_release>
 8006ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <__sinit+0x68>)
 8006ae8:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <__sinit+0x6c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	bf04      	itt	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	61a3      	streq	r3, [r4, #24]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f820 	bl	8006b3c <__sfp>
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f81c 	bl	8006b3c <__sfp>
 8006b04:	60a0      	str	r0, [r4, #8]
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f818 	bl	8006b3c <__sfp>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60e0      	str	r0, [r4, #12]
 8006b10:	2104      	movs	r1, #4
 8006b12:	6860      	ldr	r0, [r4, #4]
 8006b14:	f7ff ff82 	bl	8006a1c <std>
 8006b18:	68a0      	ldr	r0, [r4, #8]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	2109      	movs	r1, #9
 8006b1e:	f7ff ff7d 	bl	8006a1c <std>
 8006b22:	68e0      	ldr	r0, [r4, #12]
 8006b24:	2202      	movs	r2, #2
 8006b26:	2112      	movs	r1, #18
 8006b28:	f7ff ff78 	bl	8006a1c <std>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	61a3      	str	r3, [r4, #24]
 8006b30:	e7d2      	b.n	8006ad8 <__sinit+0xc>
 8006b32:	bf00      	nop
 8006b34:	08007104 	.word	0x08007104
 8006b38:	08006a65 	.word	0x08006a65

08006b3c <__sfp>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	4607      	mov	r7, r0
 8006b40:	f7ff ffac 	bl	8006a9c <__sfp_lock_acquire>
 8006b44:	4b1e      	ldr	r3, [pc, #120]	; (8006bc0 <__sfp+0x84>)
 8006b46:	681e      	ldr	r6, [r3, #0]
 8006b48:	69b3      	ldr	r3, [r6, #24]
 8006b4a:	b913      	cbnz	r3, 8006b52 <__sfp+0x16>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ffbd 	bl	8006acc <__sinit>
 8006b52:	3648      	adds	r6, #72	; 0x48
 8006b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	d503      	bpl.n	8006b64 <__sfp+0x28>
 8006b5c:	6833      	ldr	r3, [r6, #0]
 8006b5e:	b30b      	cbz	r3, 8006ba4 <__sfp+0x68>
 8006b60:	6836      	ldr	r6, [r6, #0]
 8006b62:	e7f7      	b.n	8006b54 <__sfp+0x18>
 8006b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b68:	b9d5      	cbnz	r5, 8006ba0 <__sfp+0x64>
 8006b6a:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <__sfp+0x88>)
 8006b6c:	60e3      	str	r3, [r4, #12]
 8006b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b72:	6665      	str	r5, [r4, #100]	; 0x64
 8006b74:	f000 f847 	bl	8006c06 <__retarget_lock_init_recursive>
 8006b78:	f7ff ff96 	bl	8006aa8 <__sfp_lock_release>
 8006b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	61a5      	str	r5, [r4, #24]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b90:	f7ff fd44 	bl	800661c <memset>
 8006b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba0:	3468      	adds	r4, #104	; 0x68
 8006ba2:	e7d9      	b.n	8006b58 <__sfp+0x1c>
 8006ba4:	2104      	movs	r1, #4
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff ff62 	bl	8006a70 <__sfmoreglue>
 8006bac:	4604      	mov	r4, r0
 8006bae:	6030      	str	r0, [r6, #0]
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d1d5      	bne.n	8006b60 <__sfp+0x24>
 8006bb4:	f7ff ff78 	bl	8006aa8 <__sfp_lock_release>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	e7ee      	b.n	8006b9c <__sfp+0x60>
 8006bbe:	bf00      	nop
 8006bc0:	08007104 	.word	0x08007104
 8006bc4:	ffff0001 	.word	0xffff0001

08006bc8 <_fwalk_reent>:
 8006bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bcc:	4606      	mov	r6, r0
 8006bce:	4688      	mov	r8, r1
 8006bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bd4:	2700      	movs	r7, #0
 8006bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bda:	f1b9 0901 	subs.w	r9, r9, #1
 8006bde:	d505      	bpl.n	8006bec <_fwalk_reent+0x24>
 8006be0:	6824      	ldr	r4, [r4, #0]
 8006be2:	2c00      	cmp	r4, #0
 8006be4:	d1f7      	bne.n	8006bd6 <_fwalk_reent+0xe>
 8006be6:	4638      	mov	r0, r7
 8006be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bec:	89ab      	ldrh	r3, [r5, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d907      	bls.n	8006c02 <_fwalk_reent+0x3a>
 8006bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	d003      	beq.n	8006c02 <_fwalk_reent+0x3a>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	47c0      	blx	r8
 8006c00:	4307      	orrs	r7, r0
 8006c02:	3568      	adds	r5, #104	; 0x68
 8006c04:	e7e9      	b.n	8006bda <_fwalk_reent+0x12>

08006c06 <__retarget_lock_init_recursive>:
 8006c06:	4770      	bx	lr

08006c08 <__retarget_lock_acquire_recursive>:
 8006c08:	4770      	bx	lr

08006c0a <__retarget_lock_release_recursive>:
 8006c0a:	4770      	bx	lr

08006c0c <__swhatbuf_r>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	460e      	mov	r6, r1
 8006c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c14:	2900      	cmp	r1, #0
 8006c16:	b096      	sub	sp, #88	; 0x58
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	da08      	bge.n	8006c30 <__swhatbuf_r+0x24>
 8006c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	602a      	str	r2, [r5, #0]
 8006c26:	061a      	lsls	r2, r3, #24
 8006c28:	d410      	bmi.n	8006c4c <__swhatbuf_r+0x40>
 8006c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2e:	e00e      	b.n	8006c4e <__swhatbuf_r+0x42>
 8006c30:	466a      	mov	r2, sp
 8006c32:	f000 f9a7 	bl	8006f84 <_fstat_r>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	dbf1      	blt.n	8006c1e <__swhatbuf_r+0x12>
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c44:	425a      	negs	r2, r3
 8006c46:	415a      	adcs	r2, r3
 8006c48:	602a      	str	r2, [r5, #0]
 8006c4a:	e7ee      	b.n	8006c2a <__swhatbuf_r+0x1e>
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	2000      	movs	r0, #0
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	b016      	add	sp, #88	; 0x58
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c58 <__smakebuf_r>:
 8006c58:	898b      	ldrh	r3, [r1, #12]
 8006c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c5c:	079d      	lsls	r5, r3, #30
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	d507      	bpl.n	8006c74 <__smakebuf_r+0x1c>
 8006c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	6163      	str	r3, [r4, #20]
 8006c70:	b002      	add	sp, #8
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	ab01      	add	r3, sp, #4
 8006c76:	466a      	mov	r2, sp
 8006c78:	f7ff ffc8 	bl	8006c0c <__swhatbuf_r>
 8006c7c:	9900      	ldr	r1, [sp, #0]
 8006c7e:	4605      	mov	r5, r0
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 f895 	bl	8006db0 <_malloc_r>
 8006c86:	b948      	cbnz	r0, 8006c9c <__smakebuf_r+0x44>
 8006c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8c:	059a      	lsls	r2, r3, #22
 8006c8e:	d4ef      	bmi.n	8006c70 <__smakebuf_r+0x18>
 8006c90:	f023 0303 	bic.w	r3, r3, #3
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	e7e3      	b.n	8006c64 <__smakebuf_r+0xc>
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <__smakebuf_r+0x7c>)
 8006c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	6020      	str	r0, [r4, #0]
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	9b00      	ldr	r3, [sp, #0]
 8006cac:	6163      	str	r3, [r4, #20]
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	6120      	str	r0, [r4, #16]
 8006cb2:	b15b      	cbz	r3, 8006ccc <__smakebuf_r+0x74>
 8006cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f975 	bl	8006fa8 <_isatty_r>
 8006cbe:	b128      	cbz	r0, 8006ccc <__smakebuf_r+0x74>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	89a0      	ldrh	r0, [r4, #12]
 8006cce:	4305      	orrs	r5, r0
 8006cd0:	81a5      	strh	r5, [r4, #12]
 8006cd2:	e7cd      	b.n	8006c70 <__smakebuf_r+0x18>
 8006cd4:	08006a65 	.word	0x08006a65

08006cd8 <_free_r>:
 8006cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	d044      	beq.n	8006d68 <_free_r+0x90>
 8006cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce2:	9001      	str	r0, [sp, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8006cea:	bfb8      	it	lt
 8006cec:	18e4      	addlt	r4, r4, r3
 8006cee:	f000 f97d 	bl	8006fec <__malloc_lock>
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <_free_r+0x94>)
 8006cf4:	9801      	ldr	r0, [sp, #4]
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	b933      	cbnz	r3, 8006d08 <_free_r+0x30>
 8006cfa:	6063      	str	r3, [r4, #4]
 8006cfc:	6014      	str	r4, [r2, #0]
 8006cfe:	b003      	add	sp, #12
 8006d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d04:	f000 b978 	b.w	8006ff8 <__malloc_unlock>
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d908      	bls.n	8006d1e <_free_r+0x46>
 8006d0c:	6825      	ldr	r5, [r4, #0]
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf01      	itttt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	1949      	addeq	r1, r1, r5
 8006d1a:	6021      	streq	r1, [r4, #0]
 8006d1c:	e7ed      	b.n	8006cfa <_free_r+0x22>
 8006d1e:	461a      	mov	r2, r3
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	b10b      	cbz	r3, 8006d28 <_free_r+0x50>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d9fa      	bls.n	8006d1e <_free_r+0x46>
 8006d28:	6811      	ldr	r1, [r2, #0]
 8006d2a:	1855      	adds	r5, r2, r1
 8006d2c:	42a5      	cmp	r5, r4
 8006d2e:	d10b      	bne.n	8006d48 <_free_r+0x70>
 8006d30:	6824      	ldr	r4, [r4, #0]
 8006d32:	4421      	add	r1, r4
 8006d34:	1854      	adds	r4, r2, r1
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	d1e0      	bne.n	8006cfe <_free_r+0x26>
 8006d3c:	681c      	ldr	r4, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	6053      	str	r3, [r2, #4]
 8006d42:	4421      	add	r1, r4
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	e7da      	b.n	8006cfe <_free_r+0x26>
 8006d48:	d902      	bls.n	8006d50 <_free_r+0x78>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	6003      	str	r3, [r0, #0]
 8006d4e:	e7d6      	b.n	8006cfe <_free_r+0x26>
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	1961      	adds	r1, r4, r5
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf04      	itt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	6063      	str	r3, [r4, #4]
 8006d5e:	bf04      	itt	eq
 8006d60:	1949      	addeq	r1, r1, r5
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	6054      	str	r4, [r2, #4]
 8006d66:	e7ca      	b.n	8006cfe <_free_r+0x26>
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}
 8006d6c:	20001afc 	.word	0x20001afc

08006d70 <sbrk_aligned>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4e0e      	ldr	r6, [pc, #56]	; (8006dac <sbrk_aligned+0x3c>)
 8006d74:	460c      	mov	r4, r1
 8006d76:	6831      	ldr	r1, [r6, #0]
 8006d78:	4605      	mov	r5, r0
 8006d7a:	b911      	cbnz	r1, 8006d82 <sbrk_aligned+0x12>
 8006d7c:	f000 f88c 	bl	8006e98 <_sbrk_r>
 8006d80:	6030      	str	r0, [r6, #0]
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f887 	bl	8006e98 <_sbrk_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d00a      	beq.n	8006da4 <sbrk_aligned+0x34>
 8006d8e:	1cc4      	adds	r4, r0, #3
 8006d90:	f024 0403 	bic.w	r4, r4, #3
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d007      	beq.n	8006da8 <sbrk_aligned+0x38>
 8006d98:	1a21      	subs	r1, r4, r0
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 f87c 	bl	8006e98 <_sbrk_r>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d101      	bne.n	8006da8 <sbrk_aligned+0x38>
 8006da4:	f04f 34ff 	mov.w	r4, #4294967295
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	20001b00 	.word	0x20001b00

08006db0 <_malloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	1ccd      	adds	r5, r1, #3
 8006db6:	f025 0503 	bic.w	r5, r5, #3
 8006dba:	3508      	adds	r5, #8
 8006dbc:	2d0c      	cmp	r5, #12
 8006dbe:	bf38      	it	cc
 8006dc0:	250c      	movcc	r5, #12
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	db01      	blt.n	8006dcc <_malloc_r+0x1c>
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d905      	bls.n	8006dd8 <_malloc_r+0x28>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	4e2e      	ldr	r6, [pc, #184]	; (8006e94 <_malloc_r+0xe4>)
 8006dda:	f000 f907 	bl	8006fec <__malloc_lock>
 8006dde:	6833      	ldr	r3, [r6, #0]
 8006de0:	461c      	mov	r4, r3
 8006de2:	bb34      	cbnz	r4, 8006e32 <_malloc_r+0x82>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7ff ffc2 	bl	8006d70 <sbrk_aligned>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	4604      	mov	r4, r0
 8006df0:	d14d      	bne.n	8006e8e <_malloc_r+0xde>
 8006df2:	6834      	ldr	r4, [r6, #0]
 8006df4:	4626      	mov	r6, r4
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	d140      	bne.n	8006e7c <_malloc_r+0xcc>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4638      	mov	r0, r7
 8006e00:	eb04 0803 	add.w	r8, r4, r3
 8006e04:	f000 f848 	bl	8006e98 <_sbrk_r>
 8006e08:	4580      	cmp	r8, r0
 8006e0a:	d13a      	bne.n	8006e82 <_malloc_r+0xd2>
 8006e0c:	6821      	ldr	r1, [r4, #0]
 8006e0e:	3503      	adds	r5, #3
 8006e10:	1a6d      	subs	r5, r5, r1
 8006e12:	f025 0503 	bic.w	r5, r5, #3
 8006e16:	3508      	adds	r5, #8
 8006e18:	2d0c      	cmp	r5, #12
 8006e1a:	bf38      	it	cc
 8006e1c:	250c      	movcc	r5, #12
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7ff ffa5 	bl	8006d70 <sbrk_aligned>
 8006e26:	3001      	adds	r0, #1
 8006e28:	d02b      	beq.n	8006e82 <_malloc_r+0xd2>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	442b      	add	r3, r5
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	e00e      	b.n	8006e50 <_malloc_r+0xa0>
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	1b52      	subs	r2, r2, r5
 8006e36:	d41e      	bmi.n	8006e76 <_malloc_r+0xc6>
 8006e38:	2a0b      	cmp	r2, #11
 8006e3a:	d916      	bls.n	8006e6a <_malloc_r+0xba>
 8006e3c:	1961      	adds	r1, r4, r5
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	6025      	str	r5, [r4, #0]
 8006e42:	bf18      	it	ne
 8006e44:	6059      	strne	r1, [r3, #4]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	bf08      	it	eq
 8006e4a:	6031      	streq	r1, [r6, #0]
 8006e4c:	5162      	str	r2, [r4, r5]
 8006e4e:	604b      	str	r3, [r1, #4]
 8006e50:	4638      	mov	r0, r7
 8006e52:	f104 060b 	add.w	r6, r4, #11
 8006e56:	f000 f8cf 	bl	8006ff8 <__malloc_unlock>
 8006e5a:	f026 0607 	bic.w	r6, r6, #7
 8006e5e:	1d23      	adds	r3, r4, #4
 8006e60:	1af2      	subs	r2, r6, r3
 8006e62:	d0b6      	beq.n	8006dd2 <_malloc_r+0x22>
 8006e64:	1b9b      	subs	r3, r3, r6
 8006e66:	50a3      	str	r3, [r4, r2]
 8006e68:	e7b3      	b.n	8006dd2 <_malloc_r+0x22>
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	bf0c      	ite	eq
 8006e70:	6032      	streq	r2, [r6, #0]
 8006e72:	605a      	strne	r2, [r3, #4]
 8006e74:	e7ec      	b.n	8006e50 <_malloc_r+0xa0>
 8006e76:	4623      	mov	r3, r4
 8006e78:	6864      	ldr	r4, [r4, #4]
 8006e7a:	e7b2      	b.n	8006de2 <_malloc_r+0x32>
 8006e7c:	4634      	mov	r4, r6
 8006e7e:	6876      	ldr	r6, [r6, #4]
 8006e80:	e7b9      	b.n	8006df6 <_malloc_r+0x46>
 8006e82:	230c      	movs	r3, #12
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	4638      	mov	r0, r7
 8006e88:	f000 f8b6 	bl	8006ff8 <__malloc_unlock>
 8006e8c:	e7a1      	b.n	8006dd2 <_malloc_r+0x22>
 8006e8e:	6025      	str	r5, [r4, #0]
 8006e90:	e7de      	b.n	8006e50 <_malloc_r+0xa0>
 8006e92:	bf00      	nop
 8006e94:	20001afc 	.word	0x20001afc

08006e98 <_sbrk_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d06      	ldr	r5, [pc, #24]	; (8006eb4 <_sbrk_r+0x1c>)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	f7f9 fe40 	bl	8000b28 <_sbrk>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_sbrk_r+0x1a>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_sbrk_r+0x1a>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20001b04 	.word	0x20001b04

08006eb8 <__sread>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	460c      	mov	r4, r1
 8006ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec0:	f000 f8a0 	bl	8007004 <_read_r>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	bfab      	itete	ge
 8006ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eca:	89a3      	ldrhlt	r3, [r4, #12]
 8006ecc:	181b      	addge	r3, r3, r0
 8006ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ed2:	bfac      	ite	ge
 8006ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ed6:	81a3      	strhlt	r3, [r4, #12]
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <__swrite>:
 8006eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ede:	461f      	mov	r7, r3
 8006ee0:	898b      	ldrh	r3, [r1, #12]
 8006ee2:	05db      	lsls	r3, r3, #23
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	4616      	mov	r6, r2
 8006eea:	d505      	bpl.n	8006ef8 <__swrite+0x1e>
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f000 f868 	bl	8006fc8 <_lseek_r>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	4632      	mov	r2, r6
 8006f06:	463b      	mov	r3, r7
 8006f08:	4628      	mov	r0, r5
 8006f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	f000 b817 	b.w	8006f40 <_write_r>

08006f12 <__sseek>:
 8006f12:	b510      	push	{r4, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1a:	f000 f855 	bl	8006fc8 <_lseek_r>
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	bf15      	itete	ne
 8006f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2e:	81a3      	strheq	r3, [r4, #12]
 8006f30:	bf18      	it	ne
 8006f32:	81a3      	strhne	r3, [r4, #12]
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <__sclose>:
 8006f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3a:	f000 b813 	b.w	8006f64 <_close_r>
	...

08006f40 <_write_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	; (8006f60 <_write_r+0x20>)
 8006f44:	4604      	mov	r4, r0
 8006f46:	4608      	mov	r0, r1
 8006f48:	4611      	mov	r1, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	602a      	str	r2, [r5, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f7f9 fd99 	bl	8000a86 <_write>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_write_r+0x1e>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_write_r+0x1e>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20001b04 	.word	0x20001b04

08006f64 <_close_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d06      	ldr	r5, [pc, #24]	; (8006f80 <_close_r+0x1c>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7f9 fda5 	bl	8000abe <_close>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_close_r+0x1a>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_close_r+0x1a>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20001b04 	.word	0x20001b04

08006f84 <_fstat_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	; (8006fa4 <_fstat_r+0x20>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	f7f9 fda0 	bl	8000ad6 <_fstat>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	d102      	bne.n	8006fa0 <_fstat_r+0x1c>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	b103      	cbz	r3, 8006fa0 <_fstat_r+0x1c>
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20001b04 	.word	0x20001b04

08006fa8 <_isatty_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_isatty_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7f9 fd9f 	bl	8000af6 <_isatty>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_isatty_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_isatty_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20001b04 	.word	0x20001b04

08006fc8 <_lseek_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_lseek_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7f9 fd98 	bl	8000b0c <_lseek>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_lseek_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_lseek_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20001b04 	.word	0x20001b04

08006fec <__malloc_lock>:
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <__malloc_lock+0x8>)
 8006fee:	f7ff be0b 	b.w	8006c08 <__retarget_lock_acquire_recursive>
 8006ff2:	bf00      	nop
 8006ff4:	20001af8 	.word	0x20001af8

08006ff8 <__malloc_unlock>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	; (8007000 <__malloc_unlock+0x8>)
 8006ffa:	f7ff be06 	b.w	8006c0a <__retarget_lock_release_recursive>
 8006ffe:	bf00      	nop
 8007000:	20001af8 	.word	0x20001af8

08007004 <_read_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d07      	ldr	r5, [pc, #28]	; (8007024 <_read_r+0x20>)
 8007008:	4604      	mov	r4, r0
 800700a:	4608      	mov	r0, r1
 800700c:	4611      	mov	r1, r2
 800700e:	2200      	movs	r2, #0
 8007010:	602a      	str	r2, [r5, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f7f9 fd1a 	bl	8000a4c <_read>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_read_r+0x1e>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_read_r+0x1e>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20001b04 	.word	0x20001b04

08007028 <_init>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr

08007034 <_fini>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	bf00      	nop
 8007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703a:	bc08      	pop	{r3}
 800703c:	469e      	mov	lr, r3
 800703e:	4770      	bx	lr
