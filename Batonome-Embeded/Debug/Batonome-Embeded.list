
Batonome-Embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f0  080064f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  20000010  08006508  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  08006508  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba09  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ec  00000000  00000000  0003ba49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0003f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  00040958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003634  00000000  00000000  00041f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196fe  00000000  00000000  00045564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ef6  00000000  00000000  0005ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133b58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000618c  00000000  00000000  00133ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006410 	.word	0x08006410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006410 	.word	0x08006410

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fab7 	bl	8000a4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f828 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8cc 	bl	800067c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f86a 	bl	80005bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f898 	bl	800061c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f003 fa04 	bl	80038f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0x44>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x48>)
 80004f6:	f003 fa49 	bl	800398c <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x4c>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x54>)
 8000506:	f003 fa41 	bl	800398c <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x58>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f003 fa16 	bl	8003940 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x40>
 8000516:	bf00      	nop
 8000518:	08006458 	.word	0x08006458
 800051c:	080006ad 	.word	0x080006ad
 8000520:	20000134 	.word	0x20000134
 8000524:	0800647c 	.word	0x0800647c
 8000528:	080006bd 	.word	0x080006bd
 800052c:	20000138 	.word	0x20000138

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 ff5e 	bl	8006400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f000 fd8b 	bl	8001070 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f8c6 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000564:	2310      	movs	r3, #16
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fdcd 	bl	800111c <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000588:	f000 f8b2 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f9cd 	bl	8001944 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b0:	f000 f89e 	bl	80006f0 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3758      	adds	r7, #88	; 0x58
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <MX_USART1_UART_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_USART1_UART_Init+0x58>)
 8000600:	f002 f95e 	bl	80028c0 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800060a:	f000 f871 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000002c 	.word	0x2000002c
 8000618:	40013800 	.word	0x40013800

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_USART2_UART_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000660:	f002 f92e 	bl	80028c0 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f841 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000b0 	.word	0x200000b0
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_GPIO_Init+0x2c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <MX_GPIO_Init+0x2c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_GPIO_Init+0x2c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f003 f9fb 	bl	8003ab0 <osDelay>
 80006ba:	e7fb      	b.n	80006b4 <StartDefaultTask+0x8>

080006bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f003 f9f3 	bl	8003ab0 <osDelay>
 80006ca:	e7fb      	b.n	80006c4 <StartTask02+0x8>

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006de:	f000 f9cd 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40001000 	.word	0x40001000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_MspInit+0x4c>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	4a10      	ldr	r2, [pc, #64]	; (8000748 <HAL_MspInit+0x4c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6613      	str	r3, [r2, #96]	; 0x60
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_MspInit+0x4c>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_MspInit+0x4c>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_MspInit+0x4c>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	f06f 0001 	mvn.w	r0, #1
 800073a:	f000 fa77 	bl	8000c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0a0      	sub	sp, #128	; 0x80
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2254      	movs	r2, #84	; 0x54
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fe47 	bl	8006400 <memset>
  if(huart->Instance==USART1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <HAL_UART_MspInit+0x134>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d140      	bne.n	80007fe <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fb31 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000794:	f7ff ffac 	bl	80006f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <HAL_UART_MspInit+0x138>)
 800079a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079c:	4a39      	ldr	r2, [pc, #228]	; (8000884 <HAL_UART_MspInit+0x138>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6613      	str	r3, [r2, #96]	; 0x60
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_UART_MspInit+0x138>)
 80007a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_UART_MspInit+0x138>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a33      	ldr	r2, [pc, #204]	; (8000884 <HAL_UART_MspInit+0x138>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HAL_UART_MspInit+0x138>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007da:	2307      	movs	r3, #7
 80007dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 faca 	bl	8000d80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2105      	movs	r1, #5
 80007f0:	2025      	movs	r0, #37	; 0x25
 80007f2:	f000 fa1b 	bl	8000c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007f6:	2025      	movs	r0, #37	; 0x25
 80007f8:	f000 fa34 	bl	8000c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fc:	e03b      	b.n	8000876 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <HAL_UART_MspInit+0x13c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d136      	bne.n	8000876 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000808:	2302      	movs	r3, #2
 800080a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f001 faeb 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000820:	f7ff ff66 	bl	80006f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_UART_MspInit+0x138>)
 8000826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <HAL_UART_MspInit+0x138>)
 800082a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082e:	6593      	str	r3, [r2, #88]	; 0x58
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_UART_MspInit+0x138>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_MspInit+0x138>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_UART_MspInit+0x138>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_UART_MspInit+0x138>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000854:	230c      	movs	r3, #12
 8000856:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fa85 	bl	8000d80 <HAL_GPIO_Init>
}
 8000876:	bf00      	nop
 8000878:	3780      	adds	r7, #128	; 0x80
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40013800 	.word	0x40013800
 8000884:	40021000 	.word	0x40021000
 8000888:	40004400 	.word	0x40004400

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_InitTick+0xe0>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a33      	ldr	r2, [pc, #204]	; (800096c <HAL_InitTick+0xe0>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <HAL_InitTick+0xe0>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b2:	f107 0210 	add.w	r2, r7, #16
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fa05 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008cc:	f001 f9d2 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80008d0:	6378      	str	r0, [r7, #52]	; 0x34
 80008d2:	e004      	b.n	80008de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008d4:	f001 f9ce 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80008d8:	4603      	mov	r3, r0
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	4a23      	ldr	r2, [pc, #140]	; (8000970 <HAL_InitTick+0xe4>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	0c9b      	lsrs	r3, r3, #18
 80008e8:	3b01      	subs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <HAL_InitTick+0xe8>)
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <HAL_InitTick+0xec>)
 80008f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <HAL_InitTick+0xe8>)
 80008f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_InitTick+0xe8>)
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_InitTick+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_InitTick+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_InitTick+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <HAL_InitTick+0xe8>)
 8000914:	f001 fd54 	bl	80023c0 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800091e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11b      	bne.n	800095e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <HAL_InitTick+0xe8>)
 8000928:	f001 fdac 	bl	8002484 <HAL_TIM_Base_Start_IT>
 800092c:	4603      	mov	r3, r0
 800092e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000932:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000936:	2b00      	cmp	r3, #0
 8000938:	d111      	bne.n	800095e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800093a:	2036      	movs	r0, #54	; 0x36
 800093c:	f000 f992 	bl	8000c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d808      	bhi.n	8000958 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	2036      	movs	r0, #54	; 0x36
 800094c:	f000 f96e 	bl	8000c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_InitTick+0xf0>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e002      	b.n	800095e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000962:	4618      	mov	r0, r3
 8000964:	3738      	adds	r7, #56	; 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	431bde83 	.word	0x431bde83
 8000974:	2000013c 	.word	0x2000013c
 8000978:	40001000 	.word	0x40001000
 800097c:	20000004 	.word	0x20000004

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USART1_IRQHandler+0x10>)
 80009b2:	f001 ffd3 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000002c 	.word	0x2000002c

080009c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM6_DAC_IRQHandler+0x10>)
 80009c6:	f001 fdb1 	bl	800252c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000013c 	.word	0x2000013c

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff ffea 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f005 fcb9 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2a:	f7ff fd53 	bl	80004d4 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	080064f8 	.word	0x080064f8
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	20001a94 	.word	0x20001a94

08000a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_IRQHandler>

08000a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f8de 	bl	8000c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f7ff ff16 	bl	800088c <HAL_InitTick>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	e001      	b.n	8000a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a6c:	f7ff fe46 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000188 	.word	0x20000188

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000188 	.word	0x20000188

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <__NVIC_EnableIRQ+0x38>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ff4c 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3e:	f7ff ff61 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	f7ff ffb1 	bl	8000bb0 <NVIC_EncodePriority>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff80 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff54 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d008      	beq.n	8000caa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e022      	b.n	8000cf0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 020e 	bic.w	r2, r2, #14
 8000cb8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f003 021c 	and.w	r2, r3, #28
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d005      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2204      	movs	r2, #4
 8000d18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e029      	b.n	8000d74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 020e 	bic.w	r2, r2, #14
 8000d2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	f003 021c 	and.w	r2, r3, #28
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
    }
  }
  return status;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e148      	b.n	8001022 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 813a 	beq.w	800101c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	6939      	ldr	r1, [r7, #16]
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0203 	and.w	r2, r3, #3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8094 	beq.w	800101c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x2c0>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	4a51      	ldr	r2, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x2c0>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6613      	str	r3, [r2, #96]	; 0x60
 8000f00:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f36:	d00d      	beq.n	8000f54 <HAL_GPIO_Init+0x1d4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a43      	ldr	r2, [pc, #268]	; (8001048 <HAL_GPIO_Init+0x2c8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x1d0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a42      	ldr	r2, [pc, #264]	; (800104c <HAL_GPIO_Init+0x2cc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e004      	b.n	8000f56 <HAL_GPIO_Init+0x1d6>
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x1d6>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_GPIO_Init+0x1d6>
 8000f54:	2300      	movs	r3, #0
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	f002 0203 	and.w	r2, r2, #3
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f98:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f aeaf 	bne.w	8000d90 <HAL_GPIO_Init+0x10>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_PWREx_GetVoltageRange+0x18>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007000 	.word	0x40007000

08001070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107e:	d130      	bne.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108c:	d038      	beq.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2232      	movs	r2, #50	; 0x32
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b4:	e002      	b.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d102      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f2      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	d110      	bne.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e00f      	b.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d007      	beq.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f8:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40007000 	.word	0x40007000
 8001114:	20000000 	.word	0x20000000
 8001118:	431bde83 	.word	0x431bde83

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f000 bc02 	b.w	8001934 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001130:	4b96      	ldr	r3, [pc, #600]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113a:	4b94      	ldr	r3, [pc, #592]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80e4 	beq.w	800131a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <HAL_RCC_OscConfig+0x4c>
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	f040 808b 	bne.w	8001276 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b01      	cmp	r3, #1
 8001164:	f040 8087 	bne.w	8001276 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x64>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e3d9      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <HAL_RCC_OscConfig+0x7e>
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001198:	e005      	b.n	80011a6 <HAL_RCC_OscConfig+0x8a>
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800119c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d223      	bcs.n	80011f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fdbe 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e3ba      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a72      	ldr	r2, [pc, #456]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b70      	ldr	r3, [pc, #448]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	496d      	ldr	r1, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011dc:	4b6b      	ldr	r3, [pc, #428]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	4968      	ldr	r1, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
 80011f0:	e025      	b.n	800123e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4960      	ldr	r1, [pc, #384]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	495b      	ldr	r1, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fd7e 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e37a      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800123e:	f000 fc81 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001242:	4602      	mov	r2, r0
 8001244:	4b51      	ldr	r3, [pc, #324]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	4950      	ldr	r1, [pc, #320]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001250:	5ccb      	ldrb	r3, [r1, r3]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <HAL_RCC_OscConfig+0x278>)
 800125c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800125e:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <HAL_RCC_OscConfig+0x27c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fb12 	bl	800088c <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d052      	beq.n	8001318 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	e35e      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d032      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128a:	f7ff fc0b 	bl	8000aa4 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001292:	f7ff fc07 	bl	8000aa4 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e347      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a35      	ldr	r2, [pc, #212]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4930      	ldr	r1, [pc, #192]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	492b      	ldr	r1, [pc, #172]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e01a      	b.n	800131a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a28      	ldr	r2, [pc, #160]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fbd8 	bl	8000aa4 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f8:	f7ff fbd4 	bl	8000aa4 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e314      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1dc>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d073      	beq.n	800140e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x21c>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d063      	beq.n	800140c <HAL_RCC_OscConfig+0x2f0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d15f      	bne.n	800140c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e2f1      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x24c>
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e025      	b.n	80013b4 <HAL_RCC_OscConfig+0x298>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d114      	bne.n	800139c <HAL_RCC_OscConfig+0x280>
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a02      	ldr	r2, [pc, #8]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e013      	b.n	80013b4 <HAL_RCC_OscConfig+0x298>
 800138c:	40021000 	.word	0x40021000
 8001390:	080064a0 	.word	0x080064a0
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004
 800139c:	4ba0      	ldr	r3, [pc, #640]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a9f      	ldr	r2, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b9d      	ldr	r3, [pc, #628]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a9c      	ldr	r2, [pc, #624]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb72 	bl	8000aa4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fb6e 	bl	8000aa4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e2ae      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d6:	4b92      	ldr	r3, [pc, #584]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2a8>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb5e 	bl	8000aa4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb5a 	bl	8000aa4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e29a      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d0>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d060      	beq.n	80014dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x310>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d119      	bne.n	800145a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d116      	bne.n	800145a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	4b7c      	ldr	r3, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x328>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e277      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4973      	ldr	r1, [pc, #460]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001458:	e040      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d023      	beq.n	80014aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fb19 	bl	8000aa4 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fb15 	bl	8000aa4 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e255      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	495f      	ldr	r1, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e018      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a5c      	ldr	r2, [pc, #368]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff faf5 	bl	8000aa4 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff faf1 	bl	8000aa4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e231      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03c      	beq.n	8001562 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01c      	beq.n	800152a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f6:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff fad0 	bl	8000aa4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff facc 	bl	8000aa4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e20c      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ef      	beq.n	8001508 <HAL_RCC_OscConfig+0x3ec>
 8001528:	e01b      	b.n	8001562 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800152c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001530:	4a3b      	ldr	r2, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fab3 	bl	8000aa4 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff faaf 	bl	8000aa4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1ef      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ef      	bne.n	8001542 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a6 	beq.w	80016bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	4a26      	ldr	r2, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158a:	6593      	str	r3, [r2, #88]	; 0x58
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001598:	2301      	movs	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x508>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d118      	bne.n	80015da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_RCC_OscConfig+0x508>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_RCC_OscConfig+0x508>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa76 	bl	8000aa4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff fa72 	bl	8000aa4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1b2      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_RCC_OscConfig+0x508>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d8>
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f2:	e029      	b.n	8001648 <HAL_RCC_OscConfig+0x52c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d115      	bne.n	8001628 <HAL_RCC_OscConfig+0x50c>
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	4a03      	ldr	r2, [pc, #12]	; (8001620 <HAL_RCC_OscConfig+0x504>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x52c>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	4b9a      	ldr	r3, [pc, #616]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	4a99      	ldr	r2, [pc, #612]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001638:	4b96      	ldr	r3, [pc, #600]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	4a95      	ldr	r2, [pc, #596]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d016      	beq.n	800167e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7ff fa28 	bl	8000aa4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fa24 	bl	8000aa4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e162      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ed      	beq.n	8001658 <HAL_RCC_OscConfig+0x53c>
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fa11 	bl	8000aa4 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fa0d 	bl	8000aa4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e14b      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	4b7d      	ldr	r3, [pc, #500]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ed      	bne.n	8001686 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d03c      	beq.n	8001742 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01c      	beq.n	800170a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016d0:	4b70      	ldr	r3, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80016d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d6:	4a6f      	ldr	r2, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff f9e0 	bl	8000aa4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e8:	f7ff f9dc 	bl	8000aa4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e11c      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80016fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ef      	beq.n	80016e8 <HAL_RCC_OscConfig+0x5cc>
 8001708:	e01b      	b.n	8001742 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800170a:	4b62      	ldr	r3, [pc, #392]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800170c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001710:	4a60      	ldr	r2, [pc, #384]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff f9c3 	bl	8000aa4 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001722:	f7ff f9bf 	bl	8000aa4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0ff      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001734:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ef      	bne.n	8001722 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80f3 	beq.w	8001932 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	2b02      	cmp	r3, #2
 8001752:	f040 80c9 	bne.w	80018e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001756:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	429a      	cmp	r2, r3
 8001768:	d12c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	3b01      	subs	r3, #1
 8001776:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d123      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d11b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d113      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d109      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d06b      	beq.n	800189c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d062      	beq.n	8001890 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0ac      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 80017e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e6:	f7ff f95d 	bl	8000aa4 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff f959 	bl	8000aa4 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e099      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x77c>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800181c:	3a01      	subs	r2, #1
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	4311      	orrs	r1, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001826:	0212      	lsls	r2, r2, #8
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800182e:	0852      	lsrs	r2, r2, #1
 8001830:	3a01      	subs	r2, #1
 8001832:	0552      	lsls	r2, r2, #21
 8001834:	4311      	orrs	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183a:	0852      	lsrs	r2, r2, #1
 800183c:	3a01      	subs	r2, #1
 800183e:	0652      	lsls	r2, r2, #25
 8001840:	4311      	orrs	r1, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001846:	06d2      	lsls	r2, r2, #27
 8001848:	430a      	orrs	r2, r1
 800184a:	4912      	ldr	r1, [pc, #72]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001868:	f7ff f91c 	bl	8000aa4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f918 	bl	8000aa4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e058      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_RCC_OscConfig+0x778>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188e:	e050      	b.n	8001932 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e04f      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
 8001894:	40021000 	.word	0x40021000
 8001898:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x820>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d144      	bne.n	8001932 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018c0:	f7ff f8f0 	bl	8000aa4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f8ec 	bl	8000aa4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e02c      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x7ac>
 80018e6:	e024      	b.n	8001932 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d01f      	beq.n	800192e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_RCC_OscConfig+0x820>)
 80018f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8d3 	bl	8000aa4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff f8cf 	bl	8000aa4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e00f      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_OscConfig+0x820>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_OscConfig+0x820>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4905      	ldr	r1, [pc, #20]	; (800193c <HAL_RCC_OscConfig+0x820>)
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x824>)
 8001928:	4013      	ands	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e001      	b.n	8001932 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	feeefffc 	.word	0xfeeefffc

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0e7      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4970      	ldr	r1, [pc, #448]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0cf      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d010      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d908      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4960      	ldr	r1, [pc, #384]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d04c      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d121      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0a6      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b54      	ldr	r3, [pc, #336]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09a      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e08e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e086      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4943      	ldr	r1, [pc, #268]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f83a 	bl	8000aa4 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f836 	bl	8000aa4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e06e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d208      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	492b      	ldr	r1, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d210      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 0207 	bic.w	r2, r3, #7
 8001aa0:	4923      	ldr	r1, [pc, #140]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e036      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4918      	ldr	r1, [pc, #96]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4910      	ldr	r1, [pc, #64]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af8:	f000 f824 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	490b      	ldr	r1, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1f4>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1fc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe feb5 	bl	800088c <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b26:	7afb      	ldrb	r3, [r7, #11]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080064a0 	.word	0x080064a0
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d121      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11e      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	e004      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d134      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0xa6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8001be8:	e005      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bec:	617b      	str	r3, [r7, #20]
      break;
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf2:	617b      	str	r3, [r7, #20]
      break;
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	617b      	str	r3, [r7, #20]
      break;
 8001bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	3301      	adds	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	fb03 f202 	mul.w	r2, r3, r2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	0e5b      	lsrs	r3, r3, #25
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	080064b8 	.word	0x080064b8
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	080064b0 	.word	0x080064b0

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca4:	f7ff ffda 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080064b0 	.word	0x080064b0

08001ccc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220f      	movs	r2, #15
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetClockConfig+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0207 	and.w	r2, r3, #7
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022000 	.word	0x40022000

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff f984 	bl	8001054 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f974 	bl	8001054 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d031      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e14:	d01a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e1a:	d814      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e24:	d10f      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e32:	e00c      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9ce 	bl	80021dc <RCCEx_PLLSAI1_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e44:	e003      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	74fb      	strb	r3, [r7, #19]
      break;
 8001e4a:	e000      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	494e      	ldr	r1, [pc, #312]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e6a:	e001      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 809e 	beq.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a39      	ldr	r2, [pc, #228]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ec0:	f7fe fdf0 	bl	8000aa4 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec6:	e009      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7fe fdec 	bl	8000aa4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d902      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ef      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d15a      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01e      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d019      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d016      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fdac 	bl	8000aa4 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe fda8 	bl	8000aa4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	74fb      	strb	r3, [r7, #19]
            break;
 8001f66:	e006      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ec      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
 8001f98:	e006      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a89      	ldr	r2, [pc, #548]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f023 0203 	bic.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4980      	ldr	r1, [pc, #512]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	4978      	ldr	r1, [pc, #480]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	496f      	ldr	r1, [pc, #444]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	4967      	ldr	r1, [pc, #412]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	495e      	ldr	r1, [pc, #376]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	4956      	ldr	r1, [pc, #344]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d028      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4945      	ldr	r1, [pc, #276]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020de:	60d3      	str	r3, [r2, #12]
 80020e0:	e011      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ea:	d10c      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f872 	bl	80021dc <RCCEx_PLLSAI1_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d028      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002130:	d106      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213c:	60d3      	str	r3, [r2, #12]
 800213e:	e011      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002148:	d10c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	2101      	movs	r1, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f843 	bl	80021dc <RCCEx_PLLSAI1_Config>
 8002156:	4603      	mov	r3, r0
 8002158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218e:	d10c      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f820 	bl	80021dc <RCCEx_PLLSAI1_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4904      	ldr	r1, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000

080021dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ea:	4b74      	ldr	r3, [pc, #464]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d018      	beq.n	8002228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021f6:	4b71      	ldr	r3, [pc, #452]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0203 	and.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d10d      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
       ||
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
       ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d047      	beq.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e044      	b.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d018      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x86>
 8002230:	2b03      	cmp	r3, #3
 8002232:	d825      	bhi.n	8002280 <RCCEx_PLLSAI1_Config+0xa4>
 8002234:	2b01      	cmp	r3, #1
 8002236:	d002      	beq.n	800223e <RCCEx_PLLSAI1_Config+0x62>
 8002238:	2b02      	cmp	r3, #2
 800223a:	d009      	beq.n	8002250 <RCCEx_PLLSAI1_Config+0x74>
 800223c:	e020      	b.n	8002280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11d      	bne.n	8002286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224e:	e01a      	b.n	8002286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002250:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d116      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002260:	e013      	b.n	800228a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002262:	4b56      	ldr	r3, [pc, #344]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800227e:	e006      	b.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e004      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	430b      	orrs	r3, r1
 80022ac:	4943      	ldr	r1, [pc, #268]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d17c      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fbee 	bl	8000aa4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ca:	e009      	b.n	80022e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022cc:	f7fe fbea 	bl	8000aa4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d902      	bls.n	80022e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	73fb      	strb	r3, [r7, #15]
        break;
 80022de:	e005      	b.n	80022ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ef      	bne.n	80022cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15f      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d110      	bne.n	800231a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6892      	ldr	r2, [r2, #8]
 8002308:	0211      	lsls	r1, r2, #8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	06d2      	lsls	r2, r2, #27
 8002310:	430a      	orrs	r2, r1
 8002312:	492a      	ldr	r1, [pc, #168]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	610b      	str	r3, [r1, #16]
 8002318:	e027      	b.n	800236a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d112      	bne.n	8002346 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002328:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6892      	ldr	r2, [r2, #8]
 8002330:	0211      	lsls	r1, r2, #8
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6912      	ldr	r2, [r2, #16]
 8002336:	0852      	lsrs	r2, r2, #1
 8002338:	3a01      	subs	r2, #1
 800233a:	0552      	lsls	r2, r2, #21
 800233c:	430a      	orrs	r2, r1
 800233e:	491f      	ldr	r1, [pc, #124]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	610b      	str	r3, [r1, #16]
 8002344:	e011      	b.n	800236a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800234e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	0211      	lsls	r1, r2, #8
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6952      	ldr	r2, [r2, #20]
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0652      	lsls	r2, r2, #25
 8002362:	430a      	orrs	r2, r1
 8002364:	4915      	ldr	r1, [pc, #84]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fb95 	bl	8000aa4 <HAL_GetTick>
 800237a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800237c:	e009      	b.n	8002392 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800237e:	f7fe fb91 	bl	8000aa4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d902      	bls.n	8002392 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	73fb      	strb	r3, [r7, #15]
          break;
 8002390:	e005      	b.n	800239e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ef      	beq.n	800237e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e049      	b.n	8002466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f841 	bl	800246e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 f9dc 	bl	80027bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d001      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e03b      	b.n	8002514 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_TIM_Base_Start_IT+0x9c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_TIM_Base_Start_IT+0x4e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d004      	beq.n	80024d2 <HAL_TIM_Base_Start_IT+0x4e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_TIM_Base_Start_IT+0xa0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d115      	bne.n	80024fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_TIM_Base_Start_IT+0xa4>)
 80024da:	4013      	ands	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d015      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x8c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d011      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fc:	e008      	b.n	8002510 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e000      	b.n	8002512 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002510:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40014000 	.word	0x40014000
 8002528:	00010007 	.word	0x00010007

0800252c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0202 	mvn.w	r2, #2
 8002558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f905 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8f7 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f908 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0204 	mvn.w	r2, #4
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8db 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f8cd 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f8de 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0208 	mvn.w	r2, #8
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8b1 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8a3 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f8b4 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b10      	cmp	r3, #16
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b10      	cmp	r3, #16
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0210 	mvn.w	r2, #16
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2208      	movs	r2, #8
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f887 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f879 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f88a 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0201 	mvn.w	r2, #1
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe f80e 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8de 	bl	8002898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	d10e      	bne.n	800270a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d107      	bne.n	800270a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8d1 	bl	80028ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d10e      	bne.n	8002736 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d107      	bne.n	8002736 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f838 	bl	80027a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b20      	cmp	r3, #32
 8002742:	d10e      	bne.n	8002762 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	d107      	bne.n	8002762 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0220 	mvn.w	r2, #32
 800275a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f891 	bl	8002884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <TIM_Base_SetConfig+0xbc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x20>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <TIM_Base_SetConfig+0xbc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00b      	beq.n	800280e <TIM_Base_SetConfig+0x52>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d007      	beq.n	800280e <TIM_Base_SetConfig+0x52>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <TIM_Base_SetConfig+0xc0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d003      	beq.n	800280e <TIM_Base_SetConfig+0x52>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <TIM_Base_SetConfig+0xc4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <TIM_Base_SetConfig+0xbc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <TIM_Base_SetConfig+0xa0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <TIM_Base_SetConfig+0xc0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0xa0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <TIM_Base_SetConfig+0xc4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	615a      	str	r2, [r3, #20]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40014000 	.word	0x40014000
 8002880:	40014400 	.word	0x40014400

08002884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e040      	b.n	8002954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fd ff32 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fb2e 	bl	8002f60 <UART_SetConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e022      	b.n	8002954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fd4e 	bl	80033b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800292a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800293a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fdd5 	bl	80034fc <UART_CheckIdleState>
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0ba      	sub	sp, #232	; 0xe8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002982:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002986:	f640 030f 	movw	r3, #2063	; 0x80f
 800298a:	4013      	ands	r3, r2
 800298c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d115      	bne.n	80029c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00f      	beq.n	80029c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 82a6 	beq.w	8002f06 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
      }
      return;
 80029c2:	e2a0      	b.n	8002f06 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8117 	beq.w	8002bfc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029de:	4b85      	ldr	r3, [pc, #532]	; (8002bf4 <HAL_UART_IRQHandler+0x298>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 810a 	beq.w	8002bfc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d011      	beq.n	8002a18 <HAL_UART_IRQHandler+0xbc>
 80029f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d011      	beq.n	8002a48 <HAL_UART_IRQHandler+0xec>
 8002a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2202      	movs	r2, #2
 8002a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a3e:	f043 0204 	orr.w	r2, r3, #4
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d011      	beq.n	8002a78 <HAL_UART_IRQHandler+0x11c>
 8002a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d017      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	f043 0208 	orr.w	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x18a>
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 820c 	beq.w	8002f0a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04f      	beq.n	8002bde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fde9 	bl	8003716 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d141      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3308      	adds	r3, #8
 8002b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1d9      	bne.n	8002b52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_UART_IRQHandler+0x29c>)
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe f8a2 	bl	8000cfc <HAL_DMA_Abort_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d017      	beq.n	8002bee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e00f      	b.n	8002bee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9b0 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00b      	b.n	8002bee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9ac 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e007      	b.n	8002bee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9a8 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002bec:	e18d      	b.n	8002f0a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bee:	bf00      	nop
    return;
 8002bf0:	e18b      	b.n	8002f0a <HAL_UART_IRQHandler+0x5ae>
 8002bf2:	bf00      	nop
 8002bf4:	04000120 	.word	0x04000120
 8002bf8:	080037dd 	.word	0x080037dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 8146 	bne.w	8002e92 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 813f 	beq.w	8002e92 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8138 	beq.w	8002e92 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2210      	movs	r2, #16
 8002c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	f040 80b4 	bne.w	8002da2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 815f 	beq.w	8002f0e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	f080 8157 	bcs.w	8002f0e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8085 	bne.w	8002d86 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002caa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1da      	bne.n	8002c7c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e1      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e3      	bne.n	8002d02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	f023 0310 	bic.w	r3, r3, #16
 8002d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e4      	bne.n	8002d46 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd ff7d 	bl	8000c80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8d4 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da0:	e0b5      	b.n	8002f0e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a7 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a2 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
 8002df2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e4      	bne.n	8002dce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	623b      	str	r3, [r7, #32]
   return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e28:	633a      	str	r2, [r7, #48]	; 0x30
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e3      	bne.n	8002e04 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	69b9      	ldr	r1, [r7, #24]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e4      	bne.n	8002e4e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f85c 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_UART_IRQHandler+0x560>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fcd1 	bl	800385c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eba:	e02d      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
    }
    return;
 8002ee4:	e017      	b.n	8002f16 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fc82 	bl	8003808 <UART_EndTransmit_IT>
    return;
 8002f04:	e008      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f18:	37e8      	adds	r7, #232	; 0xe8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b08a      	sub	sp, #40	; 0x28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4bb4      	ldr	r3, [pc, #720]	; (8003260 <UART_SetConfig+0x300>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4aa9      	ldr	r2, [pc, #676]	; (8003264 <UART_SetConfig+0x304>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4aa0      	ldr	r2, [pc, #640]	; (8003268 <UART_SetConfig+0x308>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d126      	bne.n	8003038 <UART_SetConfig+0xd8>
 8002fea:	4ba0      	ldr	r3, [pc, #640]	; (800326c <UART_SetConfig+0x30c>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d81b      	bhi.n	8003030 <UART_SetConfig+0xd0>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0xa0>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003011 	.word	0x08003011
 8003004:	08003021 	.word	0x08003021
 8003008:	08003019 	.word	0x08003019
 800300c:	08003029 	.word	0x08003029
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e080      	b.n	800311a <UART_SetConfig+0x1ba>
 8003018:	2302      	movs	r3, #2
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e07c      	b.n	800311a <UART_SetConfig+0x1ba>
 8003020:	2304      	movs	r3, #4
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e078      	b.n	800311a <UART_SetConfig+0x1ba>
 8003028:	2308      	movs	r3, #8
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302e:	e074      	b.n	800311a <UART_SetConfig+0x1ba>
 8003030:	2310      	movs	r3, #16
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003036:	e070      	b.n	800311a <UART_SetConfig+0x1ba>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a8c      	ldr	r2, [pc, #560]	; (8003270 <UART_SetConfig+0x310>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d138      	bne.n	80030b4 <UART_SetConfig+0x154>
 8003042:	4b8a      	ldr	r3, [pc, #552]	; (800326c <UART_SetConfig+0x30c>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d82d      	bhi.n	80030ac <UART_SetConfig+0x14c>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <UART_SetConfig+0xf8>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	0800308d 	.word	0x0800308d
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ad 	.word	0x080030ad
 8003064:	080030ad 	.word	0x080030ad
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	08003095 	.word	0x08003095
 800307c:	080030ad 	.word	0x080030ad
 8003080:	080030ad 	.word	0x080030ad
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030a5 	.word	0x080030a5
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e042      	b.n	800311a <UART_SetConfig+0x1ba>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e03e      	b.n	800311a <UART_SetConfig+0x1ba>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e03a      	b.n	800311a <UART_SetConfig+0x1ba>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e036      	b.n	800311a <UART_SetConfig+0x1ba>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e032      	b.n	800311a <UART_SetConfig+0x1ba>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <UART_SetConfig+0x304>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12a      	bne.n	8003114 <UART_SetConfig+0x1b4>
 80030be:	4b6b      	ldr	r3, [pc, #428]	; (800326c <UART_SetConfig+0x30c>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030cc:	d01a      	beq.n	8003104 <UART_SetConfig+0x1a4>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d81b      	bhi.n	800310c <UART_SetConfig+0x1ac>
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d8:	d00c      	beq.n	80030f4 <UART_SetConfig+0x194>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d815      	bhi.n	800310c <UART_SetConfig+0x1ac>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <UART_SetConfig+0x18c>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d008      	beq.n	80030fc <UART_SetConfig+0x19c>
 80030ea:	e00f      	b.n	800310c <UART_SetConfig+0x1ac>
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e012      	b.n	800311a <UART_SetConfig+0x1ba>
 80030f4:	2302      	movs	r3, #2
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e00e      	b.n	800311a <UART_SetConfig+0x1ba>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e00a      	b.n	800311a <UART_SetConfig+0x1ba>
 8003104:	2308      	movs	r3, #8
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e006      	b.n	800311a <UART_SetConfig+0x1ba>
 800310c:	2310      	movs	r3, #16
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e002      	b.n	800311a <UART_SetConfig+0x1ba>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a51      	ldr	r2, [pc, #324]	; (8003264 <UART_SetConfig+0x304>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d17a      	bne.n	800321a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003128:	2b08      	cmp	r3, #8
 800312a:	d824      	bhi.n	8003176 <UART_SetConfig+0x216>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x1d4>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003159 	.word	0x08003159
 8003138:	08003177 	.word	0x08003177
 800313c:	08003161 	.word	0x08003161
 8003140:	08003177 	.word	0x08003177
 8003144:	08003167 	.word	0x08003167
 8003148:	08003177 	.word	0x08003177
 800314c:	08003177 	.word	0x08003177
 8003150:	08003177 	.word	0x08003177
 8003154:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7fe fd8c 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800315c:	61f8      	str	r0, [r7, #28]
        break;
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <UART_SetConfig+0x314>)
 8003162:	61fb      	str	r3, [r7, #28]
        break;
 8003164:	e00d      	b.n	8003182 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7fe fced 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 800316a:	61f8      	str	r0, [r7, #28]
        break;
 800316c:	e009      	b.n	8003182 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003172:	61fb      	str	r3, [r7, #28]
        break;
 8003174:	e005      	b.n	8003182 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8107 	beq.w	8003398 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	429a      	cmp	r2, r3
 8003198:	d305      	bcc.n	80031a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d903      	bls.n	80031ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ac:	e0f4      	b.n	8003398 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2200      	movs	r2, #0
 80031b2:	461c      	mov	r4, r3
 80031b4:	4615      	mov	r5, r2
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	022b      	lsls	r3, r5, #8
 80031c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031c4:	0222      	lsls	r2, r4, #8
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	6849      	ldr	r1, [r1, #4]
 80031ca:	0849      	lsrs	r1, r1, #1
 80031cc:	2000      	movs	r0, #0
 80031ce:	4688      	mov	r8, r1
 80031d0:	4681      	mov	r9, r0
 80031d2:	eb12 0a08 	adds.w	sl, r2, r8
 80031d6:	eb43 0b09 	adc.w	fp, r3, r9
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e8:	4650      	mov	r0, sl
 80031ea:	4659      	mov	r1, fp
 80031ec:	f7fc fff0 	bl	80001d0 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fe:	d308      	bcc.n	8003212 <UART_SetConfig+0x2b2>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003206:	d204      	bcs.n	8003212 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	e0c2      	b.n	8003398 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003218:	e0be      	b.n	8003398 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003222:	d16a      	bne.n	80032fa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003228:	2b08      	cmp	r3, #8
 800322a:	d834      	bhi.n	8003296 <UART_SetConfig+0x336>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0x2d4>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003279 	.word	0x08003279
 800323c:	08003281 	.word	0x08003281
 8003240:	08003297 	.word	0x08003297
 8003244:	08003287 	.word	0x08003287
 8003248:	08003297 	.word	0x08003297
 800324c:	08003297 	.word	0x08003297
 8003250:	08003297 	.word	0x08003297
 8003254:	0800328f 	.word	0x0800328f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7fe fd0c 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800325c:	61f8      	str	r0, [r7, #28]
        break;
 800325e:	e020      	b.n	80032a2 <UART_SetConfig+0x342>
 8003260:	efff69f3 	.word	0xefff69f3
 8003264:	40008000 	.word	0x40008000
 8003268:	40013800 	.word	0x40013800
 800326c:	40021000 	.word	0x40021000
 8003270:	40004400 	.word	0x40004400
 8003274:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7fe fd12 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e010      	b.n	80032a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <UART_SetConfig+0x454>)
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e00d      	b.n	80032a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fc5d 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 800328a:	61f8      	str	r0, [r7, #28]
        break;
 800328c:	e009      	b.n	80032a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	61fb      	str	r3, [r7, #28]
        break;
 8003294:	e005      	b.n	80032a2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d077      	beq.n	8003398 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005a      	lsls	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d916      	bls.n	80032f2 <UART_SetConfig+0x392>
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d212      	bcs.n	80032f2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f023 030f 	bic.w	r3, r3, #15
 80032d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	8afb      	ldrh	r3, [r7, #22]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	8afa      	ldrh	r2, [r7, #22]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	e052      	b.n	8003398 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032f8:	e04e      	b.n	8003398 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d827      	bhi.n	8003352 <UART_SetConfig+0x3f2>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0x3a8>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003335 	.word	0x08003335
 8003310:	0800333d 	.word	0x0800333d
 8003314:	08003353 	.word	0x08003353
 8003318:	08003343 	.word	0x08003343
 800331c:	08003353 	.word	0x08003353
 8003320:	08003353 	.word	0x08003353
 8003324:	08003353 	.word	0x08003353
 8003328:	0800334b 	.word	0x0800334b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800332c:	f7fe fca2 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003330:	61f8      	str	r0, [r7, #28]
        break;
 8003332:	e014      	b.n	800335e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003334:	f7fe fcb4 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8003338:	61f8      	str	r0, [r7, #28]
        break;
 800333a:	e010      	b.n	800335e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <UART_SetConfig+0x454>)
 800333e:	61fb      	str	r3, [r7, #28]
        break;
 8003340:	e00d      	b.n	800335e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003342:	f7fe fbff 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8003346:	61f8      	str	r0, [r7, #28]
        break;
 8003348:	e009      	b.n	800335e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	61fb      	str	r3, [r7, #28]
        break;
 8003350:	e005      	b.n	800335e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800335c:	bf00      	nop
    }

    if (pclk != 0U)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d019      	beq.n	8003398 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	085a      	lsrs	r2, r3, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d909      	bls.n	8003392 <UART_SetConfig+0x432>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d205      	bcs.n	8003392 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
 8003390:	e002      	b.n	8003398 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	00f42400 	.word	0x00f42400

080033b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01a      	beq.n	80034ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b6:	d10a      	bne.n	80034ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800350c:	f7fd faca 	bl	8000aa4 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d10e      	bne.n	800353e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f82d 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e023      	b.n	8003586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b04      	cmp	r3, #4
 800354a:	d10e      	bne.n	800356a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800354c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f817 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00d      	b.n	8003586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b09c      	sub	sp, #112	; 0x70
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	e0a5      	b.n	80036ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	f000 80a1 	beq.w	80036ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fd fa7b 	bl	8000aa4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80035ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13e      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035d4:	667b      	str	r3, [r7, #100]	; 0x64
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e6      	bne.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	663b      	str	r3, [r7, #96]	; 0x60
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3308      	adds	r3, #8
 8003610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003612:	64ba      	str	r2, [r7, #72]	; 0x48
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e067      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04f      	beq.n	80036ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365a:	d147      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003664:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800367a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
 8003686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e6      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	613b      	str	r3, [r7, #16]
   return(result);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036b8:	623a      	str	r2, [r7, #32]
 80036ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	69f9      	ldr	r1, [r7, #28]
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e010      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	429a      	cmp	r2, r3
 8003708:	f43f af4a 	beq.w	80035a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3770      	adds	r7, #112	; 0x70
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b095      	sub	sp, #84	; 0x54
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	643b      	str	r3, [r7, #64]	; 0x40
 800373e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e6      	bne.n	800371e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	2b01      	cmp	r3, #1
 800378a:	d118      	bne.n	80037be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60bb      	str	r3, [r7, #8]
   return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0310 	bic.w	r3, r3, #16
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e6      	bne.n	800378c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80037d0:	bf00      	nop
 80037d2:	3754      	adds	r7, #84	; 0x54
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fb9a 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	60bb      	str	r3, [r7, #8]
   return(result);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	613b      	str	r3, [r7, #16]
   return(result);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e6      	bne.n	8003810 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fb66 	bl	8002f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <__NVIC_SetPriority>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Handler+0x1c>)
 80038ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038cc:	f001 fcfe 	bl	80052cc <xTaskGetSchedulerState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038d6:	f002 fae7 	bl	8005ea8 <xPortSysTickHandler>
  }
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038e8:	2100      	movs	r1, #0
 80038ea:	f06f 0004 	mvn.w	r0, #4
 80038ee:	f7ff ffbf 	bl	8003870 <__NVIC_SetPriority>
#endif
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038fe:	f3ef 8305 	mrs	r3, IPSR
 8003902:	603b      	str	r3, [r7, #0]
  return(result);
 8003904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800390a:	f06f 0305 	mvn.w	r3, #5
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	e00c      	b.n	800392c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <osKernelInitialize+0x44>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <osKernelInitialize+0x44>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003920:	2300      	movs	r3, #0
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	e002      	b.n	800392c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000018c 	.word	0x2000018c

08003940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003946:	f3ef 8305 	mrs	r3, IPSR
 800394a:	603b      	str	r3, [r7, #0]
  return(result);
 800394c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003952:	f06f 0305 	mvn.w	r3, #5
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e010      	b.n	800397c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <osKernelStart+0x48>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d109      	bne.n	8003976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003962:	f7ff ffbf 	bl	80038e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <osKernelStart+0x48>)
 8003968:	2202      	movs	r2, #2
 800396a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800396c:	f001 f866 	bl	8004a3c <vTaskStartScheduler>
      stat = osOK;
 8003970:	2300      	movs	r3, #0
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	e002      	b.n	800397c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2000018c 	.word	0x2000018c

0800398c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b08e      	sub	sp, #56	; 0x38
 8003990:	af04      	add	r7, sp, #16
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399c:	f3ef 8305 	mrs	r3, IPSR
 80039a0:	617b      	str	r3, [r7, #20]
  return(result);
 80039a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d17e      	bne.n	8003aa6 <osThreadNew+0x11a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d07b      	beq.n	8003aa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039b2:	2318      	movs	r3, #24
 80039b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d045      	beq.n	8003a52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <osThreadNew+0x48>
        name = attr->name;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <osThreadNew+0x6e>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b38      	cmp	r3, #56	; 0x38
 80039ec:	d805      	bhi.n	80039fa <osThreadNew+0x6e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <osThreadNew+0x72>
        return (NULL);
 80039fa:	2300      	movs	r3, #0
 80039fc:	e054      	b.n	8003aa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00e      	beq.n	8003a34 <osThreadNew+0xa8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b5b      	cmp	r3, #91	; 0x5b
 8003a1c:	d90a      	bls.n	8003a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <osThreadNew+0xa8>
        mem = 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e010      	b.n	8003a56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10c      	bne.n	8003a56 <osThreadNew+0xca>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <osThreadNew+0xca>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <osThreadNew+0xca>
          mem = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e001      	b.n	8003a56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d110      	bne.n	8003a7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a64:	9202      	str	r2, [sp, #8]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fe0c 	bl	8004690 <xTaskCreateStatic>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	e013      	b.n	8003aa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d110      	bne.n	8003aa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fe57 	bl	800474a <xTaskCreate>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <osThreadNew+0x11a>
            hTask = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003aa6:	693b      	ldr	r3, [r7, #16]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab8:	f3ef 8305 	mrs	r3, IPSR
 8003abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <osDelay+0x1c>
    stat = osErrorISR;
 8003ac4:	f06f 0305 	mvn.w	r3, #5
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e007      	b.n	8003adc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 ff7c 	bl	80049d4 <vTaskDelay>
    }
  }

  return (stat);
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <vApplicationGetIdleTaskMemory+0x30>)
 8003afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000190 	.word	0x20000190
 8003b18:	200001ec 	.word	0x200001ec

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	200003ec 	.word	0x200003ec
 8003b4c:	20000448 	.word	0x20000448

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d103      	bne.n	8003c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e00c      	b.n	8003c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3308      	adds	r3, #8
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e002      	b.n	8003c20 <vListInsert+0x2e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d2f6      	bcs.n	8003c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6852      	ldr	r2, [r2, #4]
 8003c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d103      	bne.n	8003c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ce2:	f002 f84f 	bl	8005d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d114      	bne.n	8003d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01a      	beq.n	8003d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3310      	adds	r3, #16
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f903 	bl	8004f50 <xTaskRemoveFromEventList>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <xQueueGenericReset+0xcc>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	e009      	b.n	8003d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3310      	adds	r3, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fef2 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff feed 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d76:	f002 f835 	bl	8005de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	; 0x38
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <xQueueGenericCreateStatic+0x52>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <xQueueGenericCreateStatic+0x56>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueGenericCreateStatic+0x58>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <xQueueGenericCreateStatic+0x7e>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueGenericCreateStatic+0x82>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueGenericCreateStatic+0x84>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e26:	2350      	movs	r3, #80	; 0x50
 8003e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d00a      	beq.n	8003e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	61bb      	str	r3, [r7, #24]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f805 	bl	8003e78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3730      	adds	r7, #48	; 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e002      	b.n	8003e9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	69b8      	ldr	r0, [r7, #24]
 8003eaa:	f7ff ff05 	bl	8003cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	; 0x38
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueGenericSend+0x32>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <xQueueGenericSend+0x40>
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <xQueueGenericSend+0x44>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <xQueueGenericSend+0x46>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xQueueGenericSend+0x60>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d103      	bne.n	8003f2e <xQueueGenericSend+0x6e>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <xQueueGenericSend+0x72>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueGenericSend+0x74>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericSend+0x8e>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	623b      	str	r3, [r7, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f4e:	f001 f9bd 	bl	80052cc <xTaskGetSchedulerState>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <xQueueGenericSend+0x9e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueGenericSend+0xa2>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueGenericSend+0xa4>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <xQueueGenericSend+0xbe>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61fb      	str	r3, [r7, #28]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f7e:	f001 ff01 	bl	8005d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <xQueueGenericSend+0xd4>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d129      	bne.n	8003fe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9a:	f000 fa0b 	bl	80043b4 <prvCopyDataToQueue>
 8003f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 ffcf 	bl	8004f50 <xTaskRemoveFromEventList>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fb8:	4b3f      	ldr	r3, [pc, #252]	; (80040b8 <xQueueGenericSend+0x1f8>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	e00a      	b.n	8003fe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <xQueueGenericSend+0x1f8>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fe0:	f001 ff00 	bl	8005de4 <vPortExitCritical>
				return pdPASS;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e063      	b.n	80040b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fee:	f001 fef9 	bl	8005de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e05c      	b.n	80040b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f809 	bl	8005018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004006:	2301      	movs	r3, #1
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800400a:	f001 feeb 	bl	8005de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800400e:	f000 fd7b 	bl	8004b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004012:	f001 feb7 	bl	8005d84 <vPortEnterCritical>
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d103      	bne.n	800402c <xQueueGenericSend+0x16c>
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004032:	b25b      	sxtb	r3, r3
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d103      	bne.n	8004042 <xQueueGenericSend+0x182>
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004042:	f001 fecf 	bl	8005de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004046:	1d3a      	adds	r2, r7, #4
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fff8 	bl	8005044 <xTaskCheckForTimeOut>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d124      	bne.n	80040a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800405a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800405c:	f000 faa2 	bl	80045a4 <prvIsQueueFull>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	3310      	adds	r3, #16
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 ff1e 	bl	8004eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004076:	f000 fa2d 	bl	80044d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800407a:	f000 fd53 	bl	8004b24 <xTaskResumeAll>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	f47f af7c 	bne.w	8003f7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <xQueueGenericSend+0x1f8>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	e772      	b.n	8003f7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409a:	f000 fa1b 	bl	80044d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800409e:	f000 fd41 	bl	8004b24 <xTaskResumeAll>
 80040a2:	e76c      	b.n	8003f7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a6:	f000 fa15 	bl	80044d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040aa:	f000 fd3b 	bl	8004b24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3738      	adds	r7, #56	; 0x38
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b090      	sub	sp, #64	; 0x40
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <xQueueGenericSendFromISR+0x3c>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <xQueueGenericSendFromISR+0x40>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <xQueueGenericSendFromISR+0x42>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d103      	bne.n	8004126 <xQueueGenericSendFromISR+0x6a>
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <xQueueGenericSendFromISR+0x6e>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <xQueueGenericSendFromISR+0x70>
 800412a:	2300      	movs	r3, #0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	623b      	str	r3, [r7, #32]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004146:	f001 feff 	bl	8005f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800414a:	f3ef 8211 	mrs	r2, BASEPRI
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	61fa      	str	r2, [r7, #28]
 8004160:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004162:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <xQueueGenericSendFromISR+0xbc>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d12f      	bne.n	80041d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800418e:	f000 f911 	bl	80043b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004192:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d112      	bne.n	80041c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fed1 	bl	8004f50 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	b25a      	sxtb	r2, r3
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80041d6:	e001      	b.n	80041dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3740      	adds	r7, #64	; 0x40
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <xQueueReceive+0x30>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	623b      	str	r3, [r7, #32]
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <xQueueReceive+0x3e>
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <xQueueReceive+0x42>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <xQueueReceive+0x44>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueReceive+0x5e>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61fb      	str	r3, [r7, #28]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004252:	f001 f83b 	bl	80052cc <xTaskGetSchedulerState>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <xQueueReceive+0x6e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <xQueueReceive+0x72>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <xQueueReceive+0x74>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xQueueReceive+0x8e>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61bb      	str	r3, [r7, #24]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004282:	f001 fd7f 	bl	8005d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004296:	f000 f8f7 	bl	8004488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00f      	beq.n	80042ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	3310      	adds	r3, #16
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fe4e 	bl	8004f50 <xTaskRemoveFromEventList>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <xQueueReceive+0x1bc>)
 80042bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042ca:	f001 fd8b 	bl	8005de4 <vPortExitCritical>
				return pdPASS;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e069      	b.n	80043a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042d8:	f001 fd84 	bl	8005de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042dc:	2300      	movs	r3, #0
 80042de:	e062      	b.n	80043a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e6:	f107 0310 	add.w	r3, r7, #16
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fe94 	bl	8005018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f4:	f001 fd76 	bl	8005de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042f8:	f000 fc06 	bl	8004b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042fc:	f001 fd42 	bl	8005d84 <vPortEnterCritical>
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004306:	b25b      	sxtb	r3, r3
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d103      	bne.n	8004316 <xQueueReceive+0x122>
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d103      	bne.n	800432c <xQueueReceive+0x138>
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432c:	f001 fd5a 	bl	8005de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004330:	1d3a      	adds	r2, r7, #4
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fe83 	bl	8005044 <xTaskCheckForTimeOut>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d123      	bne.n	800438c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004346:	f000 f917 	bl	8004578 <prvIsQueueEmpty>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d017      	beq.n	8004380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	3324      	adds	r3, #36	; 0x24
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fda9 	bl	8004eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800435e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004360:	f000 f8b8 	bl	80044d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004364:	f000 fbde 	bl	8004b24 <xTaskResumeAll>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d189      	bne.n	8004282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <xQueueReceive+0x1bc>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	e780      	b.n	8004282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004382:	f000 f8a7 	bl	80044d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004386:	f000 fbcd 	bl	8004b24 <xTaskResumeAll>
 800438a:	e77a      	b.n	8004282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800438c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438e:	f000 f8a1 	bl	80044d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004392:	f000 fbc7 	bl	8004b24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004398:	f000 f8ee 	bl	8004578 <prvIsQueueEmpty>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f43f af6f 	beq.w	8004282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3730      	adds	r7, #48	; 0x30
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d14d      	bne.n	8004476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 ff92 	bl	8005308 <xTaskPriorityDisinherit>
 80043e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e043      	b.n	8004476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d119      	bne.n	8004428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6858      	ldr	r0, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	461a      	mov	r2, r3
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	f001 fff0 	bl	80063e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	441a      	add	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d32b      	bcc.n	8004476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e026      	b.n	8004476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68d8      	ldr	r0, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	461a      	mov	r2, r3
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	f001 ffd6 	bl	80063e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	425b      	negs	r3, r3
 8004442:	441a      	add	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	425b      	negs	r3, r3
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d105      	bne.n	8004476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3b01      	subs	r3, #1
 8004474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800447e:	697b      	ldr	r3, [r7, #20]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	441a      	add	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d303      	bcc.n	80044bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	461a      	mov	r2, r3
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	f001 ff8c 	bl	80063e4 <memcpy>
	}
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044dc:	f001 fc52 	bl	8005d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044e8:	e011      	b.n	800450e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3324      	adds	r3, #36	; 0x24
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fd2a 	bl	8004f50 <xTaskRemoveFromEventList>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004502:	f000 fe01 	bl	8005108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	3b01      	subs	r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	dce9      	bgt.n	80044ea <prvUnlockQueue+0x16>
 8004516:	e000      	b.n	800451a <prvUnlockQueue+0x46>
					break;
 8004518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004522:	f001 fc5f 	bl	8005de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004526:	f001 fc2d 	bl	8005d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004532:	e011      	b.n	8004558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d012      	beq.n	8004562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3310      	adds	r3, #16
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd05 	bl	8004f50 <xTaskRemoveFromEventList>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800454c:	f000 fddc 	bl	8005108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	3b01      	subs	r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800455c:	2b00      	cmp	r3, #0
 800455e:	dce9      	bgt.n	8004534 <prvUnlockQueue+0x60>
 8004560:	e000      	b.n	8004564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800456c:	f001 fc3a 	bl	8005de4 <vPortExitCritical>
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004580:	f001 fc00 	bl	8005d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e001      	b.n	8004596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004596:	f001 fc25 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ac:	f001 fbea 	bl	8005d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d102      	bne.n	80045c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e001      	b.n	80045c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f001 fc0d 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e014      	b.n	800460e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045e4:	4a0f      	ldr	r2, [pc, #60]	; (8004624 <vQueueAddToRegistry+0x50>)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <vQueueAddToRegistry+0x50>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <vQueueAddToRegistry+0x50>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004606:	e006      	b.n	8004616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b07      	cmp	r3, #7
 8004612:	d9e7      	bls.n	80045e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000848 	.word	0x20000848

08004628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004638:	f001 fba4 	bl	8005d84 <vPortEnterCritical>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004642:	b25b      	sxtb	r3, r3
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d103      	bne.n	8004652 <vQueueWaitForMessageRestricted+0x2a>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004658:	b25b      	sxtb	r3, r3
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d103      	bne.n	8004668 <vQueueWaitForMessageRestricted+0x40>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004668:	f001 fbbc 	bl	8005de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fc3b 	bl	8004ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff ff26 	bl	80044d4 <prvUnlockQueue>
	}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08e      	sub	sp, #56	; 0x38
 8004694:	af04      	add	r7, sp, #16
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	623b      	str	r3, [r7, #32]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	61fb      	str	r3, [r7, #28]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046d6:	235c      	movs	r3, #92	; 0x5c
 80046d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b5c      	cmp	r3, #92	; 0x5c
 80046de:	d00a      	beq.n	80046f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61bb      	str	r3, [r7, #24]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01e      	beq.n	800473c <xTaskCreateStatic+0xac>
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01b      	beq.n	800473c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800470c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004716:	2300      	movs	r3, #0
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	f107 0314 	add.w	r3, r7, #20
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f850 	bl	80047d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004736:	f000 f8dd 	bl	80048f4 <prvAddNewTaskToReadyList>
 800473a:	e001      	b.n	8004740 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004740:	697b      	ldr	r3, [r7, #20]
	}
 8004742:	4618      	mov	r0, r3
 8004744:	3728      	adds	r7, #40	; 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08c      	sub	sp, #48	; 0x30
 800474e:	af04      	add	r7, sp, #16
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4618      	mov	r0, r3
 8004760:	f001 fc32 	bl	8005fc8 <pvPortMalloc>
 8004764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800476c:	205c      	movs	r0, #92	; 0x5c
 800476e:	f001 fc2b 	bl	8005fc8 <pvPortMalloc>
 8004772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
 8004780:	e005      	b.n	800478e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f001 fcec 	bl	8006160 <vPortFree>
 8004788:	e001      	b.n	800478e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	2300      	movs	r3, #0
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f80e 	bl	80047d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047b8:	69f8      	ldr	r0, [r7, #28]
 80047ba:	f000 f89b 	bl	80048f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e002      	b.n	80047ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047ca:	69bb      	ldr	r3, [r7, #24]
	}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	461a      	mov	r2, r3
 80047ec:	21a5      	movs	r1, #165	; 0xa5
 80047ee:	f001 fe07 	bl	8006400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047fc:	3b01      	subs	r3, #1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	617b      	str	r3, [r7, #20]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01f      	beq.n	8004872 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e012      	b.n	800485e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	7819      	ldrb	r1, [r3, #0]
 8004840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	3334      	adds	r3, #52	; 0x34
 8004848:	460a      	mov	r2, r1
 800484a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b0f      	cmp	r3, #15
 8004862:	d9e9      	bls.n	8004838 <prvInitialiseNewTask+0x64>
 8004864:	e000      	b.n	8004868 <prvInitialiseNewTask+0x94>
			{
				break;
 8004866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004870:	e003      	b.n	800487a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b37      	cmp	r3, #55	; 0x37
 800487e:	d901      	bls.n	8004884 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004880:	2337      	movs	r3, #55	; 0x37
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	2200      	movs	r2, #0
 8004894:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	3304      	adds	r3, #4
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f978 	bl	8003b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	3318      	adds	r3, #24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff f973 	bl	8003b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	69b8      	ldr	r0, [r7, #24]
 80048d4:	f001 f928 	bl	8005b28 <pxPortInitialiseStack>
 80048d8:	4602      	mov	r2, r0
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048fc:	f001 fa42 	bl	8005d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004900:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <prvAddNewTaskToReadyList+0xc4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <prvAddNewTaskToReadyList+0xc4>)
 8004908:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800490a:	4b2c      	ldr	r3, [pc, #176]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004918:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <prvAddNewTaskToReadyList+0xc4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d110      	bne.n	8004942 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004920:	f000 fc16 	bl	8005150 <prvInitialiseTaskLists>
 8004924:	e00d      	b.n	8004942 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <prvAddNewTaskToReadyList+0xcc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d802      	bhi.n	8004942 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <prvAddNewTaskToReadyList+0xd0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <prvAddNewTaskToReadyList+0xd0>)
 800494a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800494c:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <prvAddNewTaskToReadyList+0xd0>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <prvAddNewTaskToReadyList+0xd4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d903      	bls.n	8004968 <prvAddNewTaskToReadyList+0x74>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <prvAddNewTaskToReadyList+0xd4>)
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <prvAddNewTaskToReadyList+0xd8>)
 8004976:	441a      	add	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7ff f913 	bl	8003baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004984:	f001 fa2e 	bl	8005de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <prvAddNewTaskToReadyList+0xcc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	429a      	cmp	r2, r3
 800499c:	d207      	bcs.n	80049ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <prvAddNewTaskToReadyList+0xdc>)
 80049a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000d5c 	.word	0x20000d5c
 80049bc:	20000888 	.word	0x20000888
 80049c0:	20000d68 	.word	0x20000d68
 80049c4:	20000d78 	.word	0x20000d78
 80049c8:	20000d64 	.word	0x20000d64
 80049cc:	2000088c 	.word	0x2000088c
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d017      	beq.n	8004a16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <vTaskDelay+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <vTaskDelay+0x30>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60bb      	str	r3, [r7, #8]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a04:	f000 f880 	bl	8004b08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fcea 	bl	80053e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a10:	f000 f888 	bl	8004b24 <xTaskResumeAll>
 8004a14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <vTaskDelay+0x64>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000d84 	.word	0x20000d84
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a4a:	463a      	mov	r2, r7
 8004a4c:	1d39      	adds	r1, r7, #4
 8004a4e:	f107 0308 	add.w	r3, r7, #8
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff f848 	bl	8003ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	9202      	str	r2, [sp, #8]
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	460a      	mov	r2, r1
 8004a6a:	4921      	ldr	r1, [pc, #132]	; (8004af0 <vTaskStartScheduler+0xb4>)
 8004a6c:	4821      	ldr	r0, [pc, #132]	; (8004af4 <vTaskStartScheduler+0xb8>)
 8004a6e:	f7ff fe0f 	bl	8004690 <xTaskCreateStatic>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <vTaskStartScheduler+0xbc>)
 8004a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a78:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <vTaskStartScheduler+0xbc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e001      	b.n	8004a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a90:	f000 fcfc 	bl	800548c <xTimerCreateTimerTask>
 8004a94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d116      	bne.n	8004aca <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	613b      	str	r3, [r7, #16]
}
 8004aae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <vTaskStartScheduler+0xc0>)
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <vTaskStartScheduler+0xc4>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <vTaskStartScheduler+0xc8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ac4:	f001 f8bc 	bl	8005c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ac8:	e00e      	b.n	8004ae8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d10a      	bne.n	8004ae8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <vTaskStartScheduler+0xaa>
}
 8004ae8:	bf00      	nop
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08006440 	.word	0x08006440
 8004af4:	08005121 	.word	0x08005121
 8004af8:	20000d80 	.word	0x20000d80
 8004afc:	20000d7c 	.word	0x20000d7c
 8004b00:	20000d68 	.word	0x20000d68
 8004b04:	20000d60 	.word	0x20000d60

08004b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <vTaskSuspendAll+0x18>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <vTaskSuspendAll+0x18>)
 8004b14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000d84 	.word	0x20000d84

08004b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <xTaskResumeAll+0x118>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	603b      	str	r3, [r7, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b50:	f001 f918 	bl	8005d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b54:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xTaskResumeAll+0x118>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	4a38      	ldr	r2, [pc, #224]	; (8004c3c <xTaskResumeAll+0x118>)
 8004b5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <xTaskResumeAll+0x118>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d162      	bne.n	8004c2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b66:	4b36      	ldr	r3, [pc, #216]	; (8004c40 <xTaskResumeAll+0x11c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d05e      	beq.n	8004c2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b6e:	e02f      	b.n	8004bd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b70:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <xTaskResumeAll+0x120>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f871 	bl	8003c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f86c 	bl	8003c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <xTaskResumeAll+0x124>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d903      	bls.n	8004ba0 <xTaskResumeAll+0x7c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <xTaskResumeAll+0x124>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <xTaskResumeAll+0x128>)
 8004bae:	441a      	add	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fff7 	bl	8003baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <xTaskResumeAll+0x12c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <xTaskResumeAll+0x130>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xTaskResumeAll+0x120>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1cb      	bne.n	8004b70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bde:	f000 fb55 	bl	800528c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <xTaskResumeAll+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bee:	f000 f847 	bl	8004c80 <xTaskIncrementTick>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <xTaskResumeAll+0x130>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f1      	bne.n	8004bee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <xTaskResumeAll+0x134>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <xTaskResumeAll+0x130>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <xTaskResumeAll+0x138>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c2c:	f001 f8da 	bl	8005de4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c30:	68bb      	ldr	r3, [r7, #8]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000d84 	.word	0x20000d84
 8004c40:	20000d5c 	.word	0x20000d5c
 8004c44:	20000d1c 	.word	0x20000d1c
 8004c48:	20000d64 	.word	0x20000d64
 8004c4c:	2000088c 	.word	0x2000088c
 8004c50:	20000888 	.word	0x20000888
 8004c54:	20000d70 	.word	0x20000d70
 8004c58:	20000d6c 	.word	0x20000d6c
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <xTaskGetTickCount+0x1c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c6c:	687b      	ldr	r3, [r7, #4]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000d60 	.word	0x20000d60

08004c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <xTaskIncrementTick+0x148>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 808f 	bne.w	8004db2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c94:	4b4d      	ldr	r3, [pc, #308]	; (8004dcc <xTaskIncrementTick+0x14c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c9c:	4a4b      	ldr	r2, [pc, #300]	; (8004dcc <xTaskIncrementTick+0x14c>)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d120      	bne.n	8004cea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ca8:	4b49      	ldr	r3, [pc, #292]	; (8004dd0 <xTaskIncrementTick+0x150>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	603b      	str	r3, [r7, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xTaskIncrementTick+0x46>
 8004cc8:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <xTaskIncrementTick+0x150>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <xTaskIncrementTick+0x154>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3f      	ldr	r2, [pc, #252]	; (8004dd0 <xTaskIncrementTick+0x150>)
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <xTaskIncrementTick+0x154>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <xTaskIncrementTick+0x158>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a3d      	ldr	r2, [pc, #244]	; (8004dd8 <xTaskIncrementTick+0x158>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	f000 fad1 	bl	800528c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cea:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <xTaskIncrementTick+0x15c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d349      	bcc.n	8004d88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <xTaskIncrementTick+0x150>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <xTaskIncrementTick+0x15c>)
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	601a      	str	r2, [r3, #0]
					break;
 8004d06:	e03f      	b.n	8004d88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d08:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <xTaskIncrementTick+0x150>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d203      	bcs.n	8004d28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d20:	4a2e      	ldr	r2, [pc, #184]	; (8004ddc <xTaskIncrementTick+0x15c>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d26:	e02f      	b.n	8004d88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe ff99 	bl	8003c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe ff90 	bl	8003c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <xTaskIncrementTick+0x160>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d903      	bls.n	8004d58 <xTaskIncrementTick+0xd8>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <xTaskIncrementTick+0x160>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <xTaskIncrementTick+0x164>)
 8004d66:	441a      	add	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fe ff1b 	bl	8003baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3b8      	bcc.n	8004cf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d86:	e7b5      	b.n	8004cf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d88:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	4915      	ldr	r1, [pc, #84]	; (8004de4 <xTaskIncrementTick+0x164>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d901      	bls.n	8004da4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <xTaskIncrementTick+0x16c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e004      	b.n	8004dbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <xTaskIncrementTick+0x170>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <xTaskIncrementTick+0x170>)
 8004dba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004dbc:	697b      	ldr	r3, [r7, #20]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000d84 	.word	0x20000d84
 8004dcc:	20000d60 	.word	0x20000d60
 8004dd0:	20000d14 	.word	0x20000d14
 8004dd4:	20000d18 	.word	0x20000d18
 8004dd8:	20000d74 	.word	0x20000d74
 8004ddc:	20000d7c 	.word	0x20000d7c
 8004de0:	20000d64 	.word	0x20000d64
 8004de4:	2000088c 	.word	0x2000088c
 8004de8:	20000888 	.word	0x20000888
 8004dec:	20000d70 	.word	0x20000d70
 8004df0:	20000d6c 	.word	0x20000d6c

08004df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dfa:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <vTaskSwitchContext+0xa8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e02:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <vTaskSwitchContext+0xac>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e08:	e041      	b.n	8004e8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e0a:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <vTaskSwitchContext+0xac>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e10:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <vTaskSwitchContext+0xb0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e010      	b.n	8004e3a <vTaskSwitchContext+0x46>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <vTaskSwitchContext+0x3e>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	491b      	ldr	r1, [pc, #108]	; (8004ea8 <vTaskSwitchContext+0xb4>)
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0e4      	beq.n	8004e18 <vTaskSwitchContext+0x24>
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <vTaskSwitchContext+0xb4>)
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d104      	bne.n	8004e7e <vTaskSwitchContext+0x8a>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a09      	ldr	r2, [pc, #36]	; (8004eac <vTaskSwitchContext+0xb8>)
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <vTaskSwitchContext+0xb0>)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6013      	str	r3, [r2, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000d84 	.word	0x20000d84
 8004ea0:	20000d70 	.word	0x20000d70
 8004ea4:	20000d64 	.word	0x20000d64
 8004ea8:	2000088c 	.word	0x2000088c
 8004eac:	20000888 	.word	0x20000888

08004eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <vTaskPlaceOnEventList+0x44>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3318      	adds	r3, #24
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe fe87 	bl	8003bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	6838      	ldr	r0, [r7, #0]
 8004ee8:	f000 fa7c 	bl	80053e4 <prvAddCurrentTaskToDelayedList>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000888 	.word	0x20000888

08004ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	617b      	str	r3, [r7, #20]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x54>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3318      	adds	r3, #24
 8004f26:	4619      	mov	r1, r3
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7fe fe3e 	bl	8003baa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	f000 fa51 	bl	80053e4 <prvAddCurrentTaskToDelayedList>
	}
 8004f42:	bf00      	nop
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000888 	.word	0x20000888

08004f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3318      	adds	r3, #24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe fe6f 	bl	8003c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <xTaskRemoveFromEventList+0xb0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11d      	bne.n	8004fca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fe66 	bl	8003c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <xTaskRemoveFromEventList+0xb4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <xTaskRemoveFromEventList+0x5c>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <xTaskRemoveFromEventList+0xb4>)
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4a13      	ldr	r2, [pc, #76]	; (8005008 <xTaskRemoveFromEventList+0xb8>)
 8004fba:	441a      	add	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fe fdf1 	bl	8003baa <vListInsertEnd>
 8004fc8:	e005      	b.n	8004fd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3318      	adds	r3, #24
 8004fce:	4619      	mov	r1, r3
 8004fd0:	480e      	ldr	r0, [pc, #56]	; (800500c <xTaskRemoveFromEventList+0xbc>)
 8004fd2:	f7fe fdea 	bl	8003baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <xTaskRemoveFromEventList+0xc0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d905      	bls.n	8004ff0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <xTaskRemoveFromEventList+0xc4>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e001      	b.n	8004ff4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000d84 	.word	0x20000d84
 8005004:	20000d64 	.word	0x20000d64
 8005008:	2000088c 	.word	0x2000088c
 800500c:	20000d1c 	.word	0x20000d1c
 8005010:	20000888 	.word	0x20000888
 8005014:	20000d70 	.word	0x20000d70

08005018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <vTaskInternalSetTimeOutState+0x24>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <vTaskInternalSetTimeOutState+0x28>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000d74 	.word	0x20000d74
 8005040:	20000d60 	.word	0x20000d60

08005044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005086:	f000 fe7d 	bl	8005d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <xTaskCheckForTimeOut+0xbc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d102      	bne.n	80050aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e023      	b.n	80050f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <xTaskCheckForTimeOut+0xc0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d007      	beq.n	80050c6 <xTaskCheckForTimeOut+0x82>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e015      	b.n	80050f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d20b      	bcs.n	80050e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff9b 	bl	8005018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e004      	b.n	80050f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050f2:	f000 fe77 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000d60 	.word	0x20000d60
 8005104:	20000d74 	.word	0x20000d74

08005108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <vTaskMissedYield+0x14>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000d70 	.word	0x20000d70

08005120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005128:	f000 f852 	bl	80051d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <prvIdleTask+0x28>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d9f9      	bls.n	8005128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <prvIdleTask+0x2c>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005144:	e7f0      	b.n	8005128 <prvIdleTask+0x8>
 8005146:	bf00      	nop
 8005148:	2000088c 	.word	0x2000088c
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	e00c      	b.n	8005176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <prvInitialiseTaskLists+0x60>)
 8005168:	4413      	add	r3, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe fcf0 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b37      	cmp	r3, #55	; 0x37
 800517a:	d9ef      	bls.n	800515c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800517c:	480d      	ldr	r0, [pc, #52]	; (80051b4 <prvInitialiseTaskLists+0x64>)
 800517e:	f7fe fce7 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005182:	480d      	ldr	r0, [pc, #52]	; (80051b8 <prvInitialiseTaskLists+0x68>)
 8005184:	f7fe fce4 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005188:	480c      	ldr	r0, [pc, #48]	; (80051bc <prvInitialiseTaskLists+0x6c>)
 800518a:	f7fe fce1 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800518e:	480c      	ldr	r0, [pc, #48]	; (80051c0 <prvInitialiseTaskLists+0x70>)
 8005190:	f7fe fcde 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005194:	480b      	ldr	r0, [pc, #44]	; (80051c4 <prvInitialiseTaskLists+0x74>)
 8005196:	f7fe fcdb 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <prvInitialiseTaskLists+0x78>)
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <prvInitialiseTaskLists+0x64>)
 800519e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <prvInitialiseTaskLists+0x7c>)
 80051a2:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <prvInitialiseTaskLists+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000088c 	.word	0x2000088c
 80051b4:	20000cec 	.word	0x20000cec
 80051b8:	20000d00 	.word	0x20000d00
 80051bc:	20000d1c 	.word	0x20000d1c
 80051c0:	20000d30 	.word	0x20000d30
 80051c4:	20000d48 	.word	0x20000d48
 80051c8:	20000d14 	.word	0x20000d14
 80051cc:	20000d18 	.word	0x20000d18

080051d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d6:	e019      	b.n	800520c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051d8:	f000 fdd4 	bl	8005d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <prvCheckTasksWaitingTermination+0x50>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fd3b 	bl	8003c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <prvCheckTasksWaitingTermination+0x58>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <prvCheckTasksWaitingTermination+0x58>)
 8005200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005202:	f000 fdef 	bl	8005de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f810 	bl	800522c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <prvCheckTasksWaitingTermination+0x58>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e1      	bne.n	80051d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000d30 	.word	0x20000d30
 8005224:	20000d5c 	.word	0x20000d5c
 8005228:	20000d44 	.word	0x20000d44

0800522c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	4618      	mov	r0, r3
 8005244:	f000 ff8c 	bl	8006160 <vPortFree>
				vPortFree( pxTCB );
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 ff89 	bl	8006160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800524e:	e018      	b.n	8005282 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005256:	2b01      	cmp	r3, #1
 8005258:	d103      	bne.n	8005262 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 ff80 	bl	8006160 <vPortFree>
	}
 8005260:	e00f      	b.n	8005282 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005268:	2b02      	cmp	r3, #2
 800526a:	d00a      	beq.n	8005282 <prvDeleteTCB+0x56>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <prvDeleteTCB+0x54>
	}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <prvResetNextTaskUnblockTime+0x38>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvResetNextTaskUnblockTime+0x3c>)
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052a4:	e008      	b.n	80052b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <prvResetNextTaskUnblockTime+0x38>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <prvResetNextTaskUnblockTime+0x3c>)
 80052b6:	6013      	str	r3, [r2, #0]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000d14 	.word	0x20000d14
 80052c8:	20000d7c 	.word	0x20000d7c

080052cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <xTaskGetSchedulerState+0x34>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052da:	2301      	movs	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e008      	b.n	80052f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <xTaskGetSchedulerState+0x38>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052e8:	2302      	movs	r3, #2
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	e001      	b.n	80052f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052f2:	687b      	ldr	r3, [r7, #4]
	}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000d68 	.word	0x20000d68
 8005304:	20000d84 	.word	0x20000d84

08005308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d056      	beq.n	80053cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800531e:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <xTaskPriorityDisinherit+0xd0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	429a      	cmp	r2, r3
 8005326:	d00a      	beq.n	800533e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	429a      	cmp	r2, r3
 8005370:	d02c      	beq.n	80053cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	2b00      	cmp	r3, #0
 8005378:	d128      	bne.n	80053cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fc70 	bl	8003c64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xTaskPriorityDisinherit+0xd4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d903      	bls.n	80053ac <xTaskPriorityDisinherit+0xa4>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <xTaskPriorityDisinherit+0xd4>)
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <xTaskPriorityDisinherit+0xd8>)
 80053ba:	441a      	add	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fe fbf1 	bl	8003baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
	}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000888 	.word	0x20000888
 80053dc:	20000d64 	.word	0x20000d64
 80053e0:	2000088c 	.word	0x2000088c

080053e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ee:	4b21      	ldr	r3, [pc, #132]	; (8005474 <prvAddCurrentTaskToDelayedList+0x90>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fc32 	bl	8003c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d10a      	bne.n	800541e <prvAddCurrentTaskToDelayedList+0x3a>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4819      	ldr	r0, [pc, #100]	; (800547c <prvAddCurrentTaskToDelayedList+0x98>)
 8005418:	f7fe fbc7 	bl	8003baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800541c:	e026      	b.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d209      	bcs.n	800544a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fbd5 	bl	8003bf2 <vListInsert>
}
 8005448:	e010      	b.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fe fbcb 	bl	8003bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d202      	bcs.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000d60 	.word	0x20000d60
 8005478:	20000888 	.word	0x20000888
 800547c:	20000d48 	.word	0x20000d48
 8005480:	20000d18 	.word	0x20000d18
 8005484:	20000d14 	.word	0x20000d14
 8005488:	20000d7c 	.word	0x20000d7c

0800548c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005496:	f000 fb07 	bl	8005aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <xTimerCreateTimerTask+0x80>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d021      	beq.n	80054e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054aa:	1d3a      	adds	r2, r7, #4
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe fb31 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	9202      	str	r2, [sp, #8]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	2302      	movs	r3, #2
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	460a      	mov	r2, r1
 80054cc:	4910      	ldr	r1, [pc, #64]	; (8005510 <xTimerCreateTimerTask+0x84>)
 80054ce:	4811      	ldr	r0, [pc, #68]	; (8005514 <xTimerCreateTimerTask+0x88>)
 80054d0:	f7ff f8de 	bl	8004690 <xTaskCreateStatic>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <xTimerCreateTimerTask+0x8c>)
 80054d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <xTimerCreateTimerTask+0x8c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054e2:	2301      	movs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	613b      	str	r3, [r7, #16]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000db8 	.word	0x20000db8
 8005510:	08006448 	.word	0x08006448
 8005514:	08005651 	.word	0x08005651
 8005518:	20000dbc 	.word	0x20000dbc

0800551c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623b      	str	r3, [r7, #32]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <xTimerGenericCommand+0x98>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02a      	beq.n	80055a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b05      	cmp	r3, #5
 8005562:	dc18      	bgt.n	8005596 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005564:	f7ff feb2 	bl	80052cc <xTaskGetSchedulerState>
 8005568:	4603      	mov	r3, r0
 800556a:	2b02      	cmp	r3, #2
 800556c:	d109      	bne.n	8005582 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <xTimerGenericCommand+0x98>)
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	f107 0110 	add.w	r1, r7, #16
 8005576:	2300      	movs	r3, #0
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	f7fe fca1 	bl	8003ec0 <xQueueGenericSend>
 800557e:	6278      	str	r0, [r7, #36]	; 0x24
 8005580:	e012      	b.n	80055a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <xTimerGenericCommand+0x98>)
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	f107 0110 	add.w	r1, r7, #16
 800558a:	2300      	movs	r3, #0
 800558c:	2200      	movs	r2, #0
 800558e:	f7fe fc97 	bl	8003ec0 <xQueueGenericSend>
 8005592:	6278      	str	r0, [r7, #36]	; 0x24
 8005594:	e008      	b.n	80055a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005596:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <xTimerGenericCommand+0x98>)
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f107 0110 	add.w	r1, r7, #16
 800559e:	2300      	movs	r3, #0
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	f7fe fd8b 	bl	80040bc <xQueueGenericSendFromISR>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3728      	adds	r7, #40	; 0x28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000db8 	.word	0x20000db8

080055b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <prvProcessExpiredTimer+0x94>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fb47 	bl	8003c64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d022      	beq.n	800562a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	18d1      	adds	r1, r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	f000 f8d1 	bl	8005798 <prvInsertTimerInActiveList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01f      	beq.n	800563c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	2100      	movs	r1, #0
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7ff ff88 	bl	800551c <xTimerGenericCommand>
 800560c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60fb      	str	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	b2da      	uxtb	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	6978      	ldr	r0, [r7, #20]
 8005642:	4798      	blx	r3
}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000db0 	.word	0x20000db0

08005650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f857 	bl	8005710 <prvGetNextExpireTime>
 8005662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f803 	bl	8005674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800566e:	f000 f8d5 	bl	800581c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005672:	e7f1      	b.n	8005658 <prvTimerTask+0x8>

08005674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800567e:	f7ff fa43 	bl	8004b08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f866 	bl	8005758 <prvSampleTimeNow>
 800568c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d130      	bne.n	80056f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <prvProcessTimerOrBlockTask+0x3c>
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d806      	bhi.n	80056b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056a2:	f7ff fa3f 	bl	8004b24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff ff85 	bl	80055b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056ae:	e024      	b.n	80056fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <prvProcessTimerOrBlockTask+0x90>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <prvProcessTimerOrBlockTask+0x50>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <prvProcessTimerOrBlockTask+0x52>
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <prvProcessTimerOrBlockTask+0x94>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f7fe ffa7 	bl	8004628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056da:	f7ff fa23 	bl	8004b24 <xTaskResumeAll>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <prvProcessTimerOrBlockTask+0x98>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
}
 80056f4:	e001      	b.n	80056fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056f6:	f7ff fa15 	bl	8004b24 <xTaskResumeAll>
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000db4 	.word	0x20000db4
 8005708:	20000db8 	.word	0x20000db8
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <prvGetNextExpireTime+0x44>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <prvGetNextExpireTime+0x16>
 8005722:	2201      	movs	r2, #1
 8005724:	e000      	b.n	8005728 <prvGetNextExpireTime+0x18>
 8005726:	2200      	movs	r2, #0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <prvGetNextExpireTime+0x44>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e001      	b.n	8005744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005744:	68fb      	ldr	r3, [r7, #12]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000db0 	.word	0x20000db0

08005758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005760:	f7ff fa7e 	bl	8004c60 <xTaskGetTickCount>
 8005764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <prvSampleTimeNow+0x3c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	429a      	cmp	r2, r3
 800576e:	d205      	bcs.n	800577c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005770:	f000 f936 	bl	80059e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e002      	b.n	8005782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005782:	4a04      	ldr	r2, [pc, #16]	; (8005794 <prvSampleTimeNow+0x3c>)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005788:	68fb      	ldr	r3, [r7, #12]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000dc0 	.word	0x20000dc0

08005798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d812      	bhi.n	80057e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e01b      	b.n	800580a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <prvInsertTimerInActiveList+0x7c>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fe fa08 	bl	8003bf2 <vListInsert>
 80057e2:	e012      	b.n	800580a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d206      	bcs.n	80057fa <prvInsertTimerInActiveList+0x62>
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d302      	bcc.n	80057fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e007      	b.n	800580a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <prvInsertTimerInActiveList+0x80>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7fe f9f4 	bl	8003bf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000db4 	.word	0x20000db4
 8005818:	20000db0 	.word	0x20000db0

0800581c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005822:	e0ca      	b.n	80059ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da18      	bge.n	800585c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	3304      	adds	r3, #4
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61fb      	str	r3, [r7, #28]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005852:	6850      	ldr	r0, [r2, #4]
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	6892      	ldr	r2, [r2, #8]
 8005858:	4611      	mov	r1, r2
 800585a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f2c0 80aa 	blt.w	80059b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe f9f5 	bl	8003c64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800587a:	463b      	mov	r3, r7
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff6b 	bl	8005758 <prvSampleTimeNow>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b09      	cmp	r3, #9
 8005888:	f200 8097 	bhi.w	80059ba <prvProcessReceivedCommands+0x19e>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <prvProcessReceivedCommands+0x78>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	08005931 	.word	0x08005931
 80058a4:	08005945 	.word	0x08005945
 80058a8:	0800598f 	.word	0x0800598f
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	080058bd 	.word	0x080058bd
 80058b4:	08005931 	.word	0x08005931
 80058b8:	08005945 	.word	0x08005945
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	18d1      	adds	r1, r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058dc:	f7ff ff5c 	bl	8005798 <prvInsertTimerInActiveList>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d069      	beq.n	80059ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05e      	beq.n	80059ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	441a      	add	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	2100      	movs	r1, #0
 800590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590e:	f7ff fe05 	bl	800551c <xTimerGenericCommand>
 8005912:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d14f      	bne.n	80059ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	61bb      	str	r3, [r7, #24]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005942:	e03a      	b.n	80059ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	b2da      	uxtb	r2, r3
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	617b      	str	r3, [r7, #20]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	18d1      	adds	r1, r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005988:	f7ff ff06 	bl	8005798 <prvInsertTimerInActiveList>
					break;
 800598c:	e015      	b.n	80059ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d103      	bne.n	80059a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800599c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599e:	f000 fbdf 	bl	8006160 <vPortFree>
 80059a2:	e00a      	b.n	80059ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059b6:	e000      	b.n	80059ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <prvProcessReceivedCommands+0x1c0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1d39      	adds	r1, r7, #4
 80059c0:	2200      	movs	r2, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fc16 	bl	80041f4 <xQueueReceive>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f af2a 	bne.w	8005824 <prvProcessReceivedCommands+0x8>
	}
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000db8 	.word	0x20000db8

080059e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059e6:	e048      	b.n	8005a7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059e8:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f2:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe f92f 	bl	8003c64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02e      	beq.n	8005a7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90e      	bls.n	8005a4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a3a:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7fe f8d4 	bl	8003bf2 <vListInsert>
 8005a4a:	e016      	b.n	8005a7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	2300      	movs	r3, #0
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	2100      	movs	r1, #0
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fd60 	bl	800551c <xTimerGenericCommand>
 8005a5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	603b      	str	r3, [r7, #0]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1b1      	bne.n	80059e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <prvSwitchTimerLists+0xc4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <prvSwitchTimerLists+0xc0>)
 8005a90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a92:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <prvSwitchTimerLists+0xc4>)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	6013      	str	r3, [r2, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000db0 	.word	0x20000db0
 8005aa4:	20000db4 	.word	0x20000db4

08005aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aae:	f000 f969 	bl	8005d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <prvCheckForValidListAndQueue+0x60>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d120      	bne.n	8005afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005aba:	4814      	ldr	r0, [pc, #80]	; (8005b0c <prvCheckForValidListAndQueue+0x64>)
 8005abc:	f7fe f848 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ac0:	4813      	ldr	r0, [pc, #76]	; (8005b10 <prvCheckForValidListAndQueue+0x68>)
 8005ac2:	f7fe f845 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <prvCheckForValidListAndQueue+0x6c>)
 8005ac8:	4a10      	ldr	r2, [pc, #64]	; (8005b0c <prvCheckForValidListAndQueue+0x64>)
 8005aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005acc:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <prvCheckForValidListAndQueue+0x70>)
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <prvCheckForValidListAndQueue+0x68>)
 8005ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <prvCheckForValidListAndQueue+0x74>)
 8005ad8:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <prvCheckForValidListAndQueue+0x78>)
 8005ada:	2110      	movs	r1, #16
 8005adc:	200a      	movs	r0, #10
 8005ade:	f7fe f953 	bl	8003d88 <xQueueGenericCreateStatic>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <prvCheckForValidListAndQueue+0x60>)
 8005ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <prvCheckForValidListAndQueue+0x60>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <prvCheckForValidListAndQueue+0x60>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	490b      	ldr	r1, [pc, #44]	; (8005b24 <prvCheckForValidListAndQueue+0x7c>)
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe fd6c 	bl	80045d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005afc:	f000 f972 	bl	8005de4 <vPortExitCritical>
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000db8 	.word	0x20000db8
 8005b0c:	20000d88 	.word	0x20000d88
 8005b10:	20000d9c 	.word	0x20000d9c
 8005b14:	20000db0 	.word	0x20000db0
 8005b18:	20000db4 	.word	0x20000db4
 8005b1c:	20000e64 	.word	0x20000e64
 8005b20:	20000dc4 	.word	0x20000dc4
 8005b24:	08006450 	.word	0x08006450

08005b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b04      	subs	r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b04      	subs	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3b04      	subs	r3, #4
 8005b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <pxPortInitialiseStack+0x64>)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b14      	subs	r3, #20
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f06f 0202 	mvn.w	r2, #2
 8005b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3b20      	subs	r3, #32
 8005b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	08005b91 	.word	0x08005b91

08005b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <prvTaskExitError+0x54>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d00a      	beq.n	8005bba <prvTaskExitError+0x2a>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	60fb      	str	r3, [r7, #12]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <prvTaskExitError+0x28>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	60bb      	str	r3, [r7, #8]
}
 8005bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bce:	bf00      	nop
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0fc      	beq.n	8005bd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	2000000c 	.word	0x2000000c
	...

08005bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <pxCurrentTCBConst2>)
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	6808      	ldr	r0, [r1, #0]
 8005bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	f380 8809 	msr	PSP, r0
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f380 8811 	msr	BASEPRI, r0
 8005c0a:	4770      	bx	lr
 8005c0c:	f3af 8000 	nop.w

08005c10 <pxCurrentTCBConst2>:
 8005c10:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop

08005c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c18:	4808      	ldr	r0, [pc, #32]	; (8005c3c <prvPortStartFirstTask+0x24>)
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f380 8808 	msr	MSP, r0
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8814 	msr	CONTROL, r0
 8005c2a:	b662      	cpsie	i
 8005c2c:	b661      	cpsie	f
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	df00      	svc	0
 8005c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c3a:	bf00      	nop
 8005c3c:	e000ed08 	.word	0xe000ed08

08005c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c46:	4b46      	ldr	r3, [pc, #280]	; (8005d60 <xPortStartScheduler+0x120>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a46      	ldr	r2, [pc, #280]	; (8005d64 <xPortStartScheduler+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10a      	bne.n	8005c66 <xPortStartScheduler+0x26>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	613b      	str	r3, [r7, #16]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c66:	4b3e      	ldr	r3, [pc, #248]	; (8005d60 <xPortStartScheduler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <xPortStartScheduler+0x128>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10a      	bne.n	8005c86 <xPortStartScheduler+0x46>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	60fb      	str	r3, [r7, #12]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <xPortStartScheduler+0x12c>)
 8005c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <xPortStartScheduler+0x130>)
 8005cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cb4:	e009      	b.n	8005cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d0ef      	beq.n	8005cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1c3 0307 	rsb	r3, r3, #7
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d00a      	beq.n	8005cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60bb      	str	r3, [r7, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d2e:	f000 f8dd 	bl	8005eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <xPortStartScheduler+0x13c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d38:	f000 f8fc 	bl	8005f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <xPortStartScheduler+0x140>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <xPortStartScheduler+0x140>)
 8005d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d48:	f7ff ff66 	bl	8005c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d4c:	f7ff f852 	bl	8004df4 <vTaskSwitchContext>
	prvTaskExitError();
 8005d50:	f7ff ff1e 	bl	8005b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	e000ed00 	.word	0xe000ed00
 8005d64:	410fc271 	.word	0x410fc271
 8005d68:	410fc270 	.word	0x410fc270
 8005d6c:	e000e400 	.word	0xe000e400
 8005d70:	20000eb4 	.word	0x20000eb4
 8005d74:	20000eb8 	.word	0x20000eb8
 8005d78:	e000ed20 	.word	0xe000ed20
 8005d7c:	2000000c 	.word	0x2000000c
 8005d80:	e000ef34 	.word	0xe000ef34

08005d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <vPortEnterCritical+0x58>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <vPortEnterCritical+0x58>)
 8005da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <vPortEnterCritical+0x58>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <vPortEnterCritical+0x5c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	603b      	str	r3, [r7, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <vPortEnterCritical+0x4a>
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000000c 	.word	0x2000000c
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <vPortExitCritical+0x50>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <vPortExitCritical+0x24>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <vPortExitCritical+0x50>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <vPortExitCritical+0x50>)
 8005e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <vPortExitCritical+0x50>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <vPortExitCritical+0x42>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f383 8811 	msr	BASEPRI, r3
}
 8005e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c
	...

08005e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e40:	f3ef 8009 	mrs	r0, PSP
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <pxCurrentTCBConst>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f01e 0f10 	tst.w	lr, #16
 8005e50:	bf08      	it	eq
 8005e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	6010      	str	r0, [r2, #0]
 8005e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e64:	f380 8811 	msr	BASEPRI, r0
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f7fe ffc0 	bl	8004df4 <vTaskSwitchContext>
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f380 8811 	msr	BASEPRI, r0
 8005e7c:	bc09      	pop	{r0, r3}
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	f01e 0f10 	tst.w	lr, #16
 8005e8a:	bf08      	it	eq
 8005e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e90:	f380 8809 	msr	PSP, r0
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst>:
 8005ea0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
}
 8005ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ec2:	f7fe fedd 	bl	8004c80 <xTaskIncrementTick>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <xPortSysTickHandler+0x40>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f383 8811 	msr	BASEPRI, r3
}
 8005ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <vPortSetupTimerInterrupt+0x38>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vPortSetupTimerInterrupt+0x3c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <vPortSetupTimerInterrupt+0x40>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <vPortSetupTimerInterrupt+0x44>)
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f0e:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	e000e010 	.word	0xe000e010
 8005f24:	e000e018 	.word	0xe000e018
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	10624dd3 	.word	0x10624dd3
 8005f30:	e000e014 	.word	0xe000e014

08005f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f44 <vPortEnableVFP+0x10>
 8005f38:	6801      	ldr	r1, [r0, #0]
 8005f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f3e:	6001      	str	r1, [r0, #0]
 8005f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f42:	bf00      	nop
 8005f44:	e000ed88 	.word	0xe000ed88

08005f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f4e:	f3ef 8305 	mrs	r3, IPSR
 8005f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d914      	bls.n	8005f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <vPortValidateInterruptPriority+0x70>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <vPortValidateInterruptPriority+0x74>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	7afa      	ldrb	r2, [r7, #11]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d20a      	bcs.n	8005f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f84:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <vPortValidateInterruptPriority+0x78>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <vPortValidateInterruptPriority+0x7c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d90a      	bls.n	8005faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	603b      	str	r3, [r7, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <vPortValidateInterruptPriority+0x60>
	}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	e000e3f0 	.word	0xe000e3f0
 8005fbc:	20000eb4 	.word	0x20000eb4
 8005fc0:	e000ed0c 	.word	0xe000ed0c
 8005fc4:	20000eb8 	.word	0x20000eb8

08005fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fd4:	f7fe fd98 	bl	8004b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <pvPortMalloc+0x180>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fe0:	f000 f920 	bl	8006224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <pvPortMalloc+0x184>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8093 	bne.w	8006118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <pvPortMalloc+0x6c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d06e      	beq.n	8006118 <pvPortMalloc+0x150>
 800603a:	4b45      	ldr	r3, [pc, #276]	; (8006150 <pvPortMalloc+0x188>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d869      	bhi.n	8006118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006044:	4b43      	ldr	r3, [pc, #268]	; (8006154 <pvPortMalloc+0x18c>)
 8006046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006048:	4b42      	ldr	r3, [pc, #264]	; (8006154 <pvPortMalloc+0x18c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604e:	e004      	b.n	800605a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d903      	bls.n	800606c <pvPortMalloc+0xa4>
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f1      	bne.n	8006050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800606c:	4b36      	ldr	r3, [pc, #216]	; (8006148 <pvPortMalloc+0x180>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006072:	429a      	cmp	r2, r3
 8006074:	d050      	beq.n	8006118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2208      	movs	r2, #8
 800607c:	4413      	add	r3, r2
 800607e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	2308      	movs	r3, #8
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	429a      	cmp	r2, r3
 8006096:	d91f      	bls.n	80060d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <pvPortMalloc+0xf8>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	613b      	str	r3, [r7, #16]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060d2:	69b8      	ldr	r0, [r7, #24]
 80060d4:	f000 f908 	bl	80062e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <pvPortMalloc+0x188>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <pvPortMalloc+0x188>)
 80060e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060e6:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <pvPortMalloc+0x188>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <pvPortMalloc+0x190>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d203      	bcs.n	80060fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <pvPortMalloc+0x188>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <pvPortMalloc+0x190>)
 80060f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <pvPortMalloc+0x184>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	431a      	orrs	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <pvPortMalloc+0x194>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <pvPortMalloc+0x194>)
 8006116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006118:	f7fe fd04 	bl	8004b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <pvPortMalloc+0x174>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <pvPortMalloc+0x172>
	return pvReturn;
 800613c:	69fb      	ldr	r3, [r7, #28]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3728      	adds	r7, #40	; 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20001a7c 	.word	0x20001a7c
 800614c:	20001a90 	.word	0x20001a90
 8006150:	20001a80 	.word	0x20001a80
 8006154:	20001a74 	.word	0x20001a74
 8006158:	20001a84 	.word	0x20001a84
 800615c:	20001a88 	.word	0x20001a88

08006160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d04d      	beq.n	800620e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006172:	2308      	movs	r3, #8
 8006174:	425b      	negs	r3, r3
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	4b24      	ldr	r3, [pc, #144]	; (8006218 <vPortFree+0xb8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <vPortFree+0x44>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <vPortFree+0x62>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60bb      	str	r3, [r7, #8]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <vPortFree+0xb8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01e      	beq.n	800620e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11a      	bne.n	800620e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <vPortFree+0xb8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061e8:	f7fe fc8e 	bl	8004b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <vPortFree+0xbc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <vPortFree+0xbc>)
 80061f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f000 f874 	bl	80062e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <vPortFree+0xc0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	4a06      	ldr	r2, [pc, #24]	; (8006220 <vPortFree+0xc0>)
 8006208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800620a:	f7fe fc8b 	bl	8004b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800620e:	bf00      	nop
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20001a90 	.word	0x20001a90
 800621c:	20001a80 	.word	0x20001a80
 8006220:	20001a8c 	.word	0x20001a8c

08006224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800622a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800622e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <prvHeapInit+0xac>)
 8006232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <prvHeapInit+0xac>)
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <prvHeapInit+0xb0>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <prvHeapInit+0xb0>)
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006270:	2208      	movs	r2, #8
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <prvHeapInit+0xb4>)
 8006284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <prvHeapInit+0xb4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800628e:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <prvHeapInit+0xb4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvHeapInit+0xb4>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvHeapInit+0xb8>)
 80062b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <prvHeapInit+0xbc>)
 80062ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062bc:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <prvHeapInit+0xc0>)
 80062be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000ebc 	.word	0x20000ebc
 80062d4:	20001a74 	.word	0x20001a74
 80062d8:	20001a7c 	.word	0x20001a7c
 80062dc:	20001a84 	.word	0x20001a84
 80062e0:	20001a80 	.word	0x20001a80
 80062e4:	20001a90 	.word	0x20001a90

080062e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <prvInsertBlockIntoFreeList+0xac>)
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e002      	b.n	80062fc <prvInsertBlockIntoFreeList+0x14>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d8f7      	bhi.n	80062f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d108      	bne.n	800632a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d118      	bne.n	8006370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d00d      	beq.n	8006366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e008      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e003      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d002      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20001a74 	.word	0x20001a74
 8006398:	20001a7c 	.word	0x20001a7c

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4d0d      	ldr	r5, [pc, #52]	; (80063d4 <__libc_init_array+0x38>)
 80063a0:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a2:	1b64      	subs	r4, r4, r5
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	2600      	movs	r6, #0
 80063a8:	42a6      	cmp	r6, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	4d0b      	ldr	r5, [pc, #44]	; (80063dc <__libc_init_array+0x40>)
 80063ae:	4c0c      	ldr	r4, [pc, #48]	; (80063e0 <__libc_init_array+0x44>)
 80063b0:	f000 f82e 	bl	8006410 <_init>
 80063b4:	1b64      	subs	r4, r4, r5
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	2600      	movs	r6, #0
 80063ba:	42a6      	cmp	r6, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c4:	4798      	blx	r3
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ce:	4798      	blx	r3
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	080064f0 	.word	0x080064f0
 80063d8:	080064f0 	.word	0x080064f0
 80063dc:	080064f0 	.word	0x080064f0
 80063e0:	080064f4 	.word	0x080064f4

080063e4 <memcpy>:
 80063e4:	440a      	add	r2, r1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	4770      	bx	lr
 80063f0:	b510      	push	{r4, lr}
 80063f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fa:	4291      	cmp	r1, r2
 80063fc:	d1f9      	bne.n	80063f2 <memcpy+0xe>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <memset>:
 8006400:	4402      	add	r2, r0
 8006402:	4603      	mov	r3, r0
 8006404:	4293      	cmp	r3, r2
 8006406:	d100      	bne.n	800640a <memset+0xa>
 8006408:	4770      	bx	lr
 800640a:	f803 1b01 	strb.w	r1, [r3], #1
 800640e:	e7f9      	b.n	8006404 <memset+0x4>

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
