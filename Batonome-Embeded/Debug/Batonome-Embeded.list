
Batonome-Embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800a180  0800a180  0001a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a634  0800a634  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a63c  0800a63c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  200001e0  0800a824  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d1c  0800a824  00021d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002007c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004278  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00044508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  00046070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000058ae  00000000  00000000  00047a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209d2  00000000  00000000  0004d2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85b8  00000000  00000000  0006dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008384  00000000  00000000  001462a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a168 	.word	0x0800a168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a168 	.word	0x0800a168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <gpsTask>:

#include "cmsis_os.h"
#include "main.h"

void gpsTask()
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	for(;;)
 8000eb0:	e7fe      	b.n	8000eb0 <gpsTask+0x4>
	...

08000eb4 <gps_Init>:
}



void gps_Init()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t gpsHandle;
	const osThreadAttr_t gps_attributes = {
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2224      	movs	r2, #36	; 0x24
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f006 fbcb 	bl	800765c <memset>
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <gps_Init+0x38>)
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	2318      	movs	r3, #24
 8000ed2:	61bb      	str	r3, [r7, #24]
	  .name = "gps",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	gpsHandle = osThreadNew(gpsTask, NULL, &gps_attributes);
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <gps_Init+0x3c>)
 8000edc:	f003 fe80 	bl	8004be0 <osThreadNew>
 8000ee0:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0800a180 	.word	0x0800a180
 8000ef0:	08000ead 	.word	0x08000ead

08000ef4 <ImuManagementTask>:

#include "cmsis_os.h"
#include "main.h"

void ImuManagementTask()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	printf("IMU management task is launched\n");
 8000ef8:	4801      	ldr	r0, [pc, #4]	; (8000f00 <ImuManagementTask+0xc>)
 8000efa:	f007 f88f 	bl	800801c <puts>

	for(;;)
 8000efe:	e7fe      	b.n	8000efe <ImuManagementTask+0xa>
 8000f00:	0800a184 	.word	0x0800a184

08000f04 <imu_Init>:
}



void imu_Init()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t imuHandle;
	const osThreadAttr_t imu_attributes = {
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2224      	movs	r2, #36	; 0x24
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fba3 	bl	800765c <memset>
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <imu_Init+0x38>)
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	2318      	movs	r3, #24
 8000f22:	61bb      	str	r3, [r7, #24]
	  .name = "imu",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	imuHandle = osThreadNew(ImuManagementTask, NULL, &imu_attributes);
 8000f24:	463b      	mov	r3, r7
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <imu_Init+0x3c>)
 8000f2c:	f003 fe58 	bl	8004be0 <osThreadNew>
 8000f30:	6278      	str	r0, [r7, #36]	; 0x24
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800a1a4 	.word	0x0800a1a4
 8000f40:	08000ef5 	.word	0x08000ef5

08000f44 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f4c:	1d39      	adds	r1, r7, #4
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	2201      	movs	r2, #1
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <__io_putchar+0x20>)
 8000f56:	f002 fd97 	bl	8003a88 <HAL_UART_Transmit>
  return ch;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000328 	.word	0x20000328

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 fcdd 	bl	800192a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f828 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f000 f948 	bl	8001208 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f78:	f000 f8e6 	bl	8001148 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f7c:	f000 f914 	bl	80011a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f80:	f000 f866 	bl	8001050 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000f84:	f000 f8a2 	bl	80010cc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  printf("Welcome BATONOME V1.0.0\n");
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <main+0x4c>)
 8000f8a:	f007 f847 	bl	800801c <puts>
  gps_Init();
 8000f8e:	f7ff ff91 	bl	8000eb4 <gps_Init>
  imu_Init();
 8000f92:	f7ff ffb7 	bl	8000f04 <imu_Init>
  zigbee_Init();
 8000f96:	f000 fc7f 	bl	8001898 <zigbee_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f9a:	f003 fdd7 	bl	8004b4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <main+0x50>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <main+0x54>)
 8000fa4:	f003 fe1c 	bl	8004be0 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <main+0x58>)
 8000fac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fae:	f003 fdf1 	bl	8004b94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x4a>
 8000fb4:	0800a1b4 	.word	0x0800a1b4
 8000fb8:	0800a1f0 	.word	0x0800a1f0
 8000fbc:	08001251 	.word	0x08001251
 8000fc0:	200003ac 	.word	0x200003ac

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fb42 	bl	800765c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f001 f8d7 	bl	800219c <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 f946 	bl	8001284 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f919 	bl	8002248 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800101c:	f000 f932 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fd19 	bl	8002a70 <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001044:	f000 f91e 	bl	8001284 <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3758      	adds	r7, #88	; 0x58
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_I2C1_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_I2C1_Init+0x74>)
 800105c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001060:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_I2C1_Init+0x74>)
 800106a:	2201      	movs	r2, #1
 800106c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_I2C1_Init+0x74>)
 800108e:	f000 ff51 	bl	8001f34 <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 f8f4 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_I2C1_Init+0x74>)
 80010a0:	f000 ffd7 	bl	8002052 <HAL_I2CEx_ConfigAnalogFilter>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010aa:	f000 f8eb 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_I2C1_Init+0x74>)
 80010b2:	f001 f819 	bl	80020e8 <HAL_I2CEx_ConfigDigitalFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 f8e2 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001fc 	.word	0x200001fc
 80010c8:	40005400 	.word	0x40005400

080010cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C3_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C3_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C3_Init+0x74>)
 80010d8:	f640 6214 	movw	r2, #3604	; 0xe14
 80010dc:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C3_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_I2C3_Init+0x74>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C3_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_I2C3_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C3_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_I2C3_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C3_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_I2C3_Init+0x74>)
 800110a:	f000 ff13 	bl	8001f34 <HAL_I2C_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 f8b6 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C3_Init+0x74>)
 800111c:	f000 ff99 	bl	8002052 <HAL_I2CEx_ConfigAnalogFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001126:	f000 f8ad 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_I2C3_Init+0x74>)
 800112e:	f000 ffdb 	bl	80020e8 <HAL_I2CEx_ConfigDigitalFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 f8a4 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000250 	.word	0x20000250
 8001144:	40005c00 	.word	0x40005c00

08001148 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <MX_USART1_UART_Init+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001154:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001158:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART1_UART_Init+0x58>)
 800118c:	f002 fc2e 	bl	80039ec <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001196:	f000 f875 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200002a4 	.word	0x200002a4
 80011a4:	40013800 	.word	0x40013800

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <MX_USART2_UART_Init+0x5c>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ec:	f002 fbfe 	bl	80039ec <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 f845 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000328 	.word	0x20000328
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_GPIO_Init+0x44>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <MX_GPIO_Init+0x44>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_GPIO_Init+0x44>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_GPIO_Init+0x44>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <MX_GPIO_Init+0x44>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_GPIO_Init+0x44>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f003 fd53 	bl	8004d04 <osDelay>
 800125e:	e7fb      	b.n	8001258 <StartDefaultTask+0x8>

08001260 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001272:	f000 fb73 	bl	800195c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40001000 	.word	0x40001000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_MspInit+0x4c>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_MspInit+0x4c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_MspInit+0x4c>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_MspInit+0x4c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_MspInit+0x4c>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	210f      	movs	r1, #15
 80012ca:	f06f 0001 	mvn.w	r0, #1
 80012ce:	f000 fc1d 	bl	8001b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0a2      	sub	sp, #136	; 0x88
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	2254      	movs	r2, #84	; 0x54
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f006 f9ab 	bl	800765c <memset>
  if(hi2c->Instance==I2C1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <HAL_I2C_MspInit+0x164>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d138      	bne.n	8001382 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fdfd 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001328:	f7ff ffac 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_I2C_MspInit+0x168>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	4a45      	ldr	r2, [pc, #276]	; (8001448 <HAL_I2C_MspInit+0x168>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_I2C_MspInit+0x168>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001356:	2304      	movs	r3, #4
 8001358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001360:	4619      	mov	r1, r3
 8001362:	483a      	ldr	r0, [pc, #232]	; (800144c <HAL_I2C_MspInit+0x16c>)
 8001364:	f000 fc7c 	bl	8001c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_I2C_MspInit+0x168>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a36      	ldr	r2, [pc, #216]	; (8001448 <HAL_I2C_MspInit+0x168>)
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_I2C_MspInit+0x168>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001380:	e05c      	b.n	800143c <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_I2C_MspInit+0x170>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d157      	bne.n	800143c <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800138c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001390:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001392:	2300      	movs	r3, #0
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fdbe 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80013a6:	f7ff ff6d 	bl	8001284 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a26      	ldr	r2, [pc, #152]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a20      	ldr	r2, [pc, #128]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_I2C_MspInit+0x168>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013de:	2312      	movs	r3, #18
 80013e0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ec:	2304      	movs	r3, #4
 80013ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f000 fc30 	bl	8001c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001400:	2310      	movs	r3, #16
 8001402:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001412:	2304      	movs	r3, #4
 8001414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800141c:	4619      	mov	r1, r3
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_I2C_MspInit+0x16c>)
 8001420:	f000 fc1e 	bl	8001c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0x168>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_I2C_MspInit+0x168>)
 800142a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800142e:	6593      	str	r3, [r2, #88]	; 0x58
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_I2C_MspInit+0x168>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	bf00      	nop
 800143e:	3788      	adds	r7, #136	; 0x88
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40005400 	.word	0x40005400
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400
 8001450:	40005c00 	.word	0x40005c00

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0a0      	sub	sp, #128	; 0x80
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	2254      	movs	r2, #84	; 0x54
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f006 f8f1 	bl	800765c <memset>
  if(huart->Instance==USART1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a42      	ldr	r2, [pc, #264]	; (8001588 <HAL_UART_MspInit+0x134>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d140      	bne.n	8001506 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fd43 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800149c:	f7ff fef2 	bl	8001284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_UART_MspInit+0x138>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a4:	4a39      	ldr	r2, [pc, #228]	; (800158c <HAL_UART_MspInit+0x138>)
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014aa:	6613      	str	r3, [r2, #96]	; 0x60
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_UART_MspInit+0x138>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_UART_MspInit+0x138>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_UART_MspInit+0x138>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c4:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_UART_MspInit+0x138>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e2:	2307      	movs	r3, #7
 80014e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f000 fbb6 	bl	8001c60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2105      	movs	r1, #5
 80014f8:	2025      	movs	r0, #37	; 0x25
 80014fa:	f000 fb07 	bl	8001b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014fe:	2025      	movs	r0, #37	; 0x25
 8001500:	f000 fb20 	bl	8001b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001504:	e03b      	b.n	800157e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_UART_MspInit+0x13c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d136      	bne.n	800157e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fcfd 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001528:	f7ff feac 	bl	8001284 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_UART_MspInit+0x138>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_UART_MspInit+0x138>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_UART_MspInit+0x138>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_MspInit+0x138>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001548:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_UART_MspInit+0x138>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_UART_MspInit+0x138>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155c:	230c      	movs	r3, #12
 800155e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156c:	2307      	movs	r3, #7
 800156e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f000 fb71 	bl	8001c60 <HAL_GPIO_Init>
}
 800157e:	bf00      	nop
 8001580:	3780      	adds	r7, #128	; 0x80
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40013800 	.word	0x40013800
 800158c:	40021000 	.word	0x40021000
 8001590:	40004400 	.word	0x40004400

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_InitTick+0xe0>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a33      	ldr	r2, [pc, #204]	; (8001674 <HAL_InitTick+0xe0>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_InitTick+0xe0>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ba:	f107 0210 	add.w	r2, r7, #16
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fc17 	bl	8002df8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d103      	bne.n	80015dc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d4:	f001 fbe4 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 80015d8:	6378      	str	r0, [r7, #52]	; 0x34
 80015da:	e004      	b.n	80015e6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015dc:	f001 fbe0 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 80015e0:	4603      	mov	r3, r0
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_InitTick+0xe4>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	3b01      	subs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_InitTick+0xe8>)
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_InitTick+0xec>)
 80015f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_InitTick+0xe8>)
 80015fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001600:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_InitTick+0xe8>)
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_InitTick+0xe8>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_InitTick+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_InitTick+0xe8>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <HAL_InitTick+0xe8>)
 800161c:	f001 ff66 	bl	80034ec <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001626:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11b      	bne.n	8001666 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <HAL_InitTick+0xe8>)
 8001630:	f001 ffbe 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800163e:	2b00      	cmp	r3, #0
 8001640:	d111      	bne.n	8001666 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001642:	2036      	movs	r0, #54	; 0x36
 8001644:	f000 fa7e 	bl	8001b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	d808      	bhi.n	8001660 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800164e:	2200      	movs	r2, #0
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	2036      	movs	r0, #54	; 0x36
 8001654:	f000 fa5a 	bl	8001b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_InitTick+0xf0>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e002      	b.n	8001666 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800166a:	4618      	mov	r0, r3
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	431bde83 	.word	0x431bde83
 800167c:	200003b0 	.word	0x200003b0
 8001680:	40001000 	.word	0x40001000
 8001684:	20000004 	.word	0x20000004

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <USART1_IRQHandler+0x10>)
 80016ba:	f002 fa79 	bl	8003bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002a4 	.word	0x200002a4

080016c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM6_DAC_IRQHandler+0x10>)
 80016ce:	f001 ffc3 	bl	8003658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003b0 	.word	0x200003b0

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f6:	f005 ff79 	bl	80075ec <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fbe5 	bl	8000f44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
  }
  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
  return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f005 fede 	bl	80075ec <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20010000 	.word	0x20010000
 800185c:	00000400 	.word	0x00000400
 8001860:	200003fc 	.word	0x200003fc
 8001864:	20001d20 	.word	0x20001d20

08001868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <ZigbeeComTask>:
void zigbee_Init();



void ZigbeeComTask(void *argument)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */


  for(;;)
 8001894:	e7fe      	b.n	8001894 <ZigbeeComTask+0x8>
	...

08001898 <zigbee_Init>:
  }
  /* USER CODE END 5 */
}

void zigbee_Init()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
	/* Definitions for zigbee_com */
	osThreadId_t zigbeeComHandle;
	const osThreadAttr_t zigbee_com_attributes = {
 800189e:	463b      	mov	r3, r7
 80018a0:	2224      	movs	r2, #36	; 0x24
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 fed9 	bl	800765c <memset>
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <zigbee_Init+0x38>)
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	2318      	movs	r3, #24
 80018b6:	61bb      	str	r3, [r7, #24]
	  .name = "zigbee_com",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};

	zigbeeComHandle = osThreadNew(ZigbeeComTask, NULL, &zigbee_com_attributes);
 80018b8:	463b      	mov	r3, r7
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <zigbee_Init+0x3c>)
 80018c0:	f003 f98e 	bl	8004be0 <osThreadNew>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24
}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	0800a1cc 	.word	0x0800a1cc
 80018d4:	0800188d 	.word	0x0800188d

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff ffc4 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f005 fe77 	bl	80075f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7ff fb2d 	bl	8000f68 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800191c:	0800a644 	.word	0x0800a644
  ldr r2, =_sbss
 8001920:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001924:	20001d1c 	.word	0x20001d1c

08001928 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_IRQHandler>

0800192a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f000 f8de 	bl	8001af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193a:	200f      	movs	r0, #15
 800193c:	f7ff fe2a 	bl	8001594 <HAL_InitTick>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e001      	b.n	8001950 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194c:	f7ff fca0 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001950:	79fb      	ldrb	r3, [r7, #7]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008
 8001980:	20000400 	.word	0x20000400

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000400 	.word	0x20000400

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff4c 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1e:	f7ff ff61 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	6978      	ldr	r0, [r7, #20]
 8001b2a:	f7ff ffb1 	bl	8001a90 <NVIC_EncodePriority>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff80 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff54 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d008      	beq.n	8001b8a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e022      	b.n	8001bd0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 020e 	bic.w	r2, r2, #14
 8001b98:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 021c 	and.w	r2, r3, #28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d005      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e029      	b.n	8001c54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f003 021c 	and.w	r2, r3, #28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
    }
  }
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6e:	e148      	b.n	8001f02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 813a 	beq.w	8001efc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d005      	beq.n	8001ca0 <HAL_GPIO_Init+0x40>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d130      	bne.n	8001d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 0201 	and.w	r2, r3, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d017      	beq.n	8001d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d123      	bne.n	8001d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0203 	and.w	r2, r3, #3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8094 	beq.w	8001efc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd4:	4b52      	ldr	r3, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6613      	str	r3, [r2, #96]	; 0x60
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_GPIO_Init+0x2c4>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1d4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1d0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1cc>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e46:	4937      	ldr	r1, [pc, #220]	; (8001f24 <HAL_GPIO_Init+0x2c4>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e78:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f aeaf 	bne.w	8001c70 <HAL_GPIO_Init+0x10>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e081      	b.n	800204a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff f9c0 	bl	80012e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e006      	b.n	8001fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d104      	bne.n	8001fce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69d9      	ldr	r1, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b20      	cmp	r3, #32
 8002066:	d138      	bne.n	80020da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002072:	2302      	movs	r3, #2
 8002074:	e032      	b.n	80020dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2224      	movs	r2, #36	; 0x24
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d139      	bne.n	8002172 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002108:	2302      	movs	r3, #2
 800210a:	e033      	b.n	8002174 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800213a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_PWREx_GetVoltageRange+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	d130      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b8:	d038      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2232      	movs	r2, #50	; 0x32
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	e002      	b.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d102      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f2      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	d110      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d007      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f000 bc02 	b.w	8002a60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225c:	4b96      	ldr	r3, [pc, #600]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002266:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80e4 	beq.w	8002446 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_RCC_OscConfig+0x4c>
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	f040 808b 	bne.w	80023a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b01      	cmp	r3, #1
 8002290:	f040 8087 	bne.w	80023a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002294:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x64>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e3d9      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_RCC_OscConfig+0x7e>
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c4:	e005      	b.n	80022d2 <HAL_RCC_OscConfig+0x8a>
 80022c6:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d223      	bcs.n	800231e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fdbe 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e3ba      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	496d      	ldr	r1, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	4968      	ldr	r1, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
 800231c:	e025      	b.n	800236a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231e:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4960      	ldr	r1, [pc, #384]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	495b      	ldr	r1, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fd7e 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e37a      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800236a:	f000 fc81 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x278>)
 8002388:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f900 	bl	8001594 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d052      	beq.n	8002444 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	e35e      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d032      	beq.n	8002410 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fae5 	bl	8001984 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023be:	f7ff fae1 	bl	8001984 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e347      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e2:	f043 0308 	orr.w	r3, r3, #8
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4930      	ldr	r1, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	492b      	ldr	r1, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
 800240e:	e01a      	b.n	8002446 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241c:	f7ff fab2 	bl	8001984 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002424:	f7ff faae 	bl	8001984 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e314      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1dc>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d073      	beq.n	800253a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d005      	beq.n	8002464 <HAL_RCC_OscConfig+0x21c>
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d10e      	bne.n	800247c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d063      	beq.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d15f      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e2f1      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x24c>
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e025      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d114      	bne.n	80024c8 <HAL_RCC_OscConfig+0x280>
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e013      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	0800a214 	.word	0x0800a214
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9f      	ldr	r2, [pc, #636]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b9d      	ldr	r3, [pc, #628]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a9c      	ldr	r2, [pc, #624]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fa4c 	bl	8001984 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fa48 	bl	8001984 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e2ae      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2a8>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff fa38 	bl	8001984 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fa34 	bl	8001984 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e29a      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d0>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d060      	beq.n	8002608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x310>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d119      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x328>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e277      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4973      	ldr	r1, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e040      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff f9f3 	bl	8001984 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff f9ef 	bl	8001984 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e255      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	495f      	ldr	r1, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff f9cf 	bl	8001984 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff f9cb 	bl	8001984 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e231      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff f9aa 	bl	8001984 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff f9a6 	bl	8001984 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e20c      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x3ec>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff f98d 	bl	8001984 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff f989 	bl	8001984 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1ef      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7ff f950 	bl	8001984 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7ff f94c 	bl	8001984 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1b2      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x4d8>
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	e029      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x50c>
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	4b9a      	ldr	r3, [pc, #616]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a99      	ldr	r2, [pc, #612]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	4b96      	ldr	r3, [pc, #600]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a95      	ldr	r2, [pc, #596]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff f902 	bl	8001984 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff f8fe 	bl	8001984 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e162      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ed      	beq.n	8002784 <HAL_RCC_OscConfig+0x53c>
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff f8eb 	bl	8001984 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff f8e7 	bl	8001984 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e14b      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c8:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ed      	bne.n	80027b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b78      	ldr	r3, [pc, #480]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a77      	ldr	r2, [pc, #476]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03c      	beq.n	800286e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80027fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002802:	4a6f      	ldr	r2, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7ff f8ba 	bl	8001984 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002814:	f7ff f8b6 	bl	8001984 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e11c      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002826:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCC_OscConfig+0x5cc>
 8002834:	e01b      	b.n	800286e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800283c:	4a60      	ldr	r2, [pc, #384]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7ff f89d 	bl	8001984 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800284e:	f7ff f899 	bl	8001984 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0ff      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002860:	4b57      	ldr	r3, [pc, #348]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ef      	bne.n	800284e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80f3 	beq.w	8002a5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	f040 80c9 	bne.w	8002a14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	429a      	cmp	r2, r3
 8002894:	d12c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	3b01      	subs	r3, #1
 80028a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d123      	bne.n	80028f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d11b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d113      	bne.n	80028f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d109      	bne.n	80028f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d06b      	beq.n	80029c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d062      	beq.n	80029bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0ac      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800290c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002912:	f7ff f837 	bl	8001984 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7ff f833 	bl	8001984 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e099      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002948:	3a01      	subs	r2, #1
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	4311      	orrs	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002952:	0212      	lsls	r2, r2, #8
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0552      	lsls	r2, r2, #21
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002966:	0852      	lsrs	r2, r2, #1
 8002968:	3a01      	subs	r2, #1
 800296a:	0652      	lsls	r2, r2, #25
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002972:	06d2      	lsls	r2, r2, #27
 8002974:	430a      	orrs	r2, r1
 8002976:	4912      	ldr	r1, [pc, #72]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002994:	f7fe fff6 	bl	8001984 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fff2 	bl	8001984 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e058      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ba:	e050      	b.n	8002a5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e04f      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d144      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ec:	f7fe ffca 	bl	8001984 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe ffc6 	bl	8001984 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e02c      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x7ac>
 8002a12:	e024      	b.n	8002a5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d01f      	beq.n	8002a5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe ffad 	bl	8001984 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe ffa9 	bl	8001984 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4905      	ldr	r1, [pc, #20]	; (8002a68 <HAL_RCC_OscConfig+0x820>)
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_OscConfig+0x824>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e001      	b.n	8002a5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	feeefffc 	.word	0xfeeefffc

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0e7      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d910      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	4970      	ldr	r1, [pc, #448]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cf      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4960      	ldr	r1, [pc, #384]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0a6      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e08e      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e086      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4943      	ldr	r1, [pc, #268]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b58:	f7fe ff14 	bl	8001984 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fe ff10 	bl	8001984 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e06e      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d208      	bcs.n	8002bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	492b      	ldr	r1, [pc, #172]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d210      	bcs.n	8002be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 0207 	bic.w	r2, r3, #7
 8002bcc:	4923      	ldr	r1, [pc, #140]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e036      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4918      	ldr	r1, [pc, #96]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4910      	ldr	r1, [pc, #64]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c24:	f000 f824 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1f4>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1fc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fca3 	bl	8001594 <HAL_InitTick>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	0800a214 	.word	0x0800a214
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000004 	.word	0x20000004

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d121      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11e      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e005      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e004      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d134      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d003      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xac>
 8002d14:	e005      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d18:	617b      	str	r3, [r7, #20]
      break;
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1e:	617b      	str	r3, [r7, #20]
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	617b      	str	r3, [r7, #20]
      break;
 8002d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0e5b      	lsrs	r3, r3, #25
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d68:	69bb      	ldr	r3, [r7, #24]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	0800a22c 	.word	0x0800a22c
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000000 	.word	0x20000000

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da4:	f7ff fff0 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	0800a224 	.word	0x0800a224

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dd0:	f7ff ffda 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0adb      	lsrs	r3, r3, #11
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	0800a224 	.word	0x0800a224

08002df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	220f      	movs	r2, #15
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetClockConfig+0x60>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40022000 	.word	0x40022000

08002e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e74:	f7ff f984 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002e78:	6178      	str	r0, [r7, #20]
 8002e7a:	e014      	b.n	8002ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a24      	ldr	r2, [pc, #144]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e94:	f7ff f974 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d10b      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d919      	bls.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8002eb8:	d902      	bls.n	8002ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eba:	2302      	movs	r3, #2
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e013      	b.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e010      	b.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d902      	bls.n	8002ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ecc:	2303      	movs	r3, #3
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	e00a      	b.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d102      	bne.n	8002ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed8:	2302      	movs	r3, #2
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e004      	b.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d101      	bne.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 0207 	bic.w	r2, r3, #7
 8002ef0:	4909      	ldr	r1, [pc, #36]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40022000 	.word	0x40022000

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f24:	2300      	movs	r3, #0
 8002f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d031      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f40:	d01a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f46:	d814      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f52:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4a5c      	ldr	r2, [pc, #368]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f5e:	e00c      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f9ce 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	74fb      	strb	r3, [r7, #19]
      break;
 8002f76:	e000      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f80:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	494e      	ldr	r1, [pc, #312]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 809e 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fae:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a39      	ldr	r2, [pc, #228]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fcca 	bl	8001984 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff2:	e009      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe fcc6 	bl	8001984 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	74fb      	strb	r3, [r7, #19]
        break;
 8003006:	e005      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d15a      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	429a      	cmp	r2, r3
 8003034:	d019      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fc86 	bl	8001984 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	e00b      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fc82 	bl	8001984 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d902      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	74fb      	strb	r3, [r7, #19]
            break;
 8003092:	e006      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ec      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a89      	ldr	r2, [pc, #548]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4980      	ldr	r1, [pc, #512]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 020c 	bic.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	4978      	ldr	r1, [pc, #480]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	496f      	ldr	r1, [pc, #444]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003158:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	4967      	ldr	r1, [pc, #412]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	495e      	ldr	r1, [pc, #376]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4956      	ldr	r1, [pc, #344]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	494d      	ldr	r1, [pc, #308]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d028      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e0:	4b48      	ldr	r3, [pc, #288]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4945      	ldr	r1, [pc, #276]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fe:	d106      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003200:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a3f      	ldr	r2, [pc, #252]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320a:	60d3      	str	r3, [r2, #12]
 800320c:	e011      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003216:	d10c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f872 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d028      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	492d      	ldr	r1, [pc, #180]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325c:	d106      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003268:	60d3      	str	r3, [r2, #12]
 800326a:	e011      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003274:	d10c      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f843 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01c      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f820 	bl	8003308 <RCCEx_PLLSAI1_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003316:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003322:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d10d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
       ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800333a:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
       ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d047      	beq.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e044      	b.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d018      	beq.n	800338e <RCCEx_PLLSAI1_Config+0x86>
 800335c:	2b03      	cmp	r3, #3
 800335e:	d825      	bhi.n	80033ac <RCCEx_PLLSAI1_Config+0xa4>
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <RCCEx_PLLSAI1_Config+0x62>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d009      	beq.n	800337c <RCCEx_PLLSAI1_Config+0x74>
 8003368:	e020      	b.n	80033ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337a:	e01a      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800337c:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e013      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033aa:	e006      	b.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e004      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	430b      	orrs	r3, r1
 80033d8:	4943      	ldr	r1, [pc, #268]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d17c      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f0:	f7fe fac8 	bl	8001984 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f6:	e009      	b.n	800340c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f8:	f7fe fac4 	bl	8001984 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	73fb      	strb	r3, [r7, #15]
        break;
 800340a:	e005      	b.n	8003418 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ef      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d15f      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d110      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003424:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800342c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	0211      	lsls	r1, r2, #8
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	06d2      	lsls	r2, r2, #27
 800343c:	430a      	orrs	r2, r1
 800343e:	492a      	ldr	r1, [pc, #168]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003440:	4313      	orrs	r3, r2
 8003442:	610b      	str	r3, [r1, #16]
 8003444:	e027      	b.n	8003496 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d112      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6912      	ldr	r2, [r2, #16]
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0552      	lsls	r2, r2, #21
 8003468:	430a      	orrs	r2, r1
 800346a:	491f      	ldr	r1, [pc, #124]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	610b      	str	r3, [r1, #16]
 8003470:	e011      	b.n	8003496 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800347a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6952      	ldr	r2, [r2, #20]
 8003488:	0852      	lsrs	r2, r2, #1
 800348a:	3a01      	subs	r2, #1
 800348c:	0652      	lsls	r2, r2, #25
 800348e:	430a      	orrs	r2, r1
 8003490:	4915      	ldr	r1, [pc, #84]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800349c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fa6f 	bl	8001984 <HAL_GetTick>
 80034a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a8:	e009      	b.n	80034be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034aa:	f7fe fa6b 	bl	8001984 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d902      	bls.n	80034be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	73fb      	strb	r3, [r7, #15]
          break;
 80034bc:	e005      	b.n	80034ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ef      	beq.n	80034aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f841 	bl	800359a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 f9dc 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e03b      	b.n	8003640 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_TIM_Base_Start_IT+0x9c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x4e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d004      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x4e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <HAL_TIM_Base_Start_IT+0xa0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d115      	bne.n	800362a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_TIM_Base_Start_IT+0xa4>)
 8003606:	4013      	ands	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b06      	cmp	r3, #6
 800360e:	d015      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d011      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	e008      	b.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e000      	b.n	800363e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40014000 	.word	0x40014000
 8003654:	00010007 	.word	0x00010007

08003658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0202 	mvn.w	r2, #2
 8003684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f905 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8f7 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f908 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0204 	mvn.w	r2, #4
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8db 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8cd 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8de 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0208 	mvn.w	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8b1 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8a3 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8b4 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f887 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f879 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f88a 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0201 	mvn.w	r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fd42 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8de 	bl	80039c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d10e      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d107      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8d1 	bl	80039d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d10e      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d107      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f838 	bl	80038d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b20      	cmp	r3, #32
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0220 	mvn.w	r2, #32
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f891 	bl	80039b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <TIM_Base_SetConfig+0xbc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0x20>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d108      	bne.n	800391a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <TIM_Base_SetConfig+0xbc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0x52>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0x52>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <TIM_Base_SetConfig+0xc0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0x52>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <TIM_Base_SetConfig+0xc4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <TIM_Base_SetConfig+0xbc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0xa0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <TIM_Base_SetConfig+0xc0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0xa0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <TIM_Base_SetConfig+0xc4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400

080039b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e040      	b.n	8003a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fd20 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fbc2 	bl	80041b4 <UART_SetConfig>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fde2 	bl	800460c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fe69 	bl	8004750 <UART_CheckIdleState>
 8003a7e:	4603      	mov	r3, r0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	f040 8082 	bne.w	8003ba6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Transmit+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07a      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit+0x38>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e073      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd ff55 	bl	8001984 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b18:	e02d      	b.n	8003b76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fe5c 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e039      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b46:	b292      	uxth	r2, r2
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e008      	b.n	8003b64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1cb      	bne.n	8003b1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fe28 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e005      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0ba      	sub	sp, #232	; 0xe8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bda:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bde:	4013      	ands	r3, r2
 8003be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d115      	bne.n	8003c18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00f      	beq.n	8003c18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 82a6 	beq.w	800415a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
      }
      return;
 8003c16:	e2a0      	b.n	800415a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8117 	beq.w	8003e50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c32:	4b85      	ldr	r3, [pc, #532]	; (8003e48 <HAL_UART_IRQHandler+0x298>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 810a 	beq.w	8003e50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d011      	beq.n	8003c6c <HAL_UART_IRQHandler+0xbc>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d011      	beq.n	8003c9c <HAL_UART_IRQHandler+0xec>
 8003c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <HAL_UART_IRQHandler+0x11c>
 8003ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d012      	beq.n	8003d3a <HAL_UART_IRQHandler+0x18a>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00c      	beq.n	8003d3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 820c 	beq.w	800415e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d04f      	beq.n	8003e32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fde9 	bl	800496a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d141      	bne.n	8003e2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1d9      	bne.n	8003da6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d013      	beq.n	8003e22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_UART_IRQHandler+0x29c>)
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd fee8 	bl	8001bdc <HAL_DMA_Abort_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d017      	beq.n	8003e42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00f      	b.n	8003e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9b0 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00b      	b.n	8003e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9ac 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e007      	b.n	8003e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9a8 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e40:	e18d      	b.n	800415e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e42:	bf00      	nop
    return;
 8003e44:	e18b      	b.n	800415e <HAL_UART_IRQHandler+0x5ae>
 8003e46:	bf00      	nop
 8003e48:	04000120 	.word	0x04000120
 8003e4c:	08004a31 	.word	0x08004a31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 8146 	bne.w	80040e6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 813f 	beq.w	80040e6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8138 	beq.w	80040e6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	f040 80b4 	bne.w	8003ff6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 815f 	beq.w	8004162 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f080 8157 	bcs.w	8004162 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 8085 	bne.w	8003fda <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003efe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1da      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e1      	bne.n	8003f1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e3      	bne.n	8003f56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e4      	bne.n	8003f9a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd fdc3 	bl	8001b60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8d4 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff4:	e0b5      	b.n	8004162 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004002:	b29b      	uxth	r3, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80a7 	beq.w	8004166 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a2 	beq.w	8004166 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800404a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e4      	bne.n	8004022 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	623b      	str	r3, [r7, #32]
   return(result);
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3308      	adds	r3, #8
 8004078:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800407c:	633a      	str	r2, [r7, #48]	; 0x30
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e3      	bne.n	8004058 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0310 	bic.w	r3, r3, #16
 80040b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	617b      	str	r3, [r7, #20]
   return(result);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e4      	bne.n	80040a2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f85c 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040e4:	e03f      	b.n	8004166 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00e      	beq.n	8004110 <HAL_UART_IRQHandler+0x560>
 80040f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fcd1 	bl	8004ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800410e:	e02d      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
    }
    return;
 8004138:	e017      	b.n	800416a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <HAL_UART_IRQHandler+0x5bc>
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc82 	bl	8004a5c <UART_EndTransmit_IT>
    return;
 8004158:	e008      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
      return;
 800415a:	bf00      	nop
 800415c:	e006      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
    return;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_UART_IRQHandler+0x5bc>
    return;
 800416a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800416c:	37e8      	adds	r7, #232	; 0xe8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop

08004174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b08a      	sub	sp, #40	; 0x28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4bb4      	ldr	r3, [pc, #720]	; (80044b4 <UART_SetConfig+0x300>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4aa9      	ldr	r2, [pc, #676]	; (80044b8 <UART_SetConfig+0x304>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	4313      	orrs	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4aa0      	ldr	r2, [pc, #640]	; (80044bc <UART_SetConfig+0x308>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d126      	bne.n	800428c <UART_SetConfig+0xd8>
 800423e:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <UART_SetConfig+0x30c>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b03      	cmp	r3, #3
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0xd0>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xa0>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	08004275 	.word	0x08004275
 800425c:	0800426d 	.word	0x0800426d
 8004260:	0800427d 	.word	0x0800427d
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e080      	b.n	800436e <UART_SetConfig+0x1ba>
 800426c:	2302      	movs	r3, #2
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e07c      	b.n	800436e <UART_SetConfig+0x1ba>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e078      	b.n	800436e <UART_SetConfig+0x1ba>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e074      	b.n	800436e <UART_SetConfig+0x1ba>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e070      	b.n	800436e <UART_SetConfig+0x1ba>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a8c      	ldr	r2, [pc, #560]	; (80044c4 <UART_SetConfig+0x310>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d138      	bne.n	8004308 <UART_SetConfig+0x154>
 8004296:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <UART_SetConfig+0x30c>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d82d      	bhi.n	8004300 <UART_SetConfig+0x14c>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0xf8>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	08004301 	.word	0x08004301
 80042b4:	08004301 	.word	0x08004301
 80042b8:	08004301 	.word	0x08004301
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004301 	.word	0x08004301
 80042c4:	08004301 	.word	0x08004301
 80042c8:	08004301 	.word	0x08004301
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	08004301 	.word	0x08004301
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004301 	.word	0x08004301
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e042      	b.n	800436e <UART_SetConfig+0x1ba>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e03e      	b.n	800436e <UART_SetConfig+0x1ba>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e03a      	b.n	800436e <UART_SetConfig+0x1ba>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e036      	b.n	800436e <UART_SetConfig+0x1ba>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e032      	b.n	800436e <UART_SetConfig+0x1ba>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6a      	ldr	r2, [pc, #424]	; (80044b8 <UART_SetConfig+0x304>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12a      	bne.n	8004368 <UART_SetConfig+0x1b4>
 8004312:	4b6b      	ldr	r3, [pc, #428]	; (80044c0 <UART_SetConfig+0x30c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800431c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004320:	d01a      	beq.n	8004358 <UART_SetConfig+0x1a4>
 8004322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0x1ac>
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d00c      	beq.n	8004348 <UART_SetConfig+0x194>
 800432e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004332:	d815      	bhi.n	8004360 <UART_SetConfig+0x1ac>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x18c>
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d008      	beq.n	8004350 <UART_SetConfig+0x19c>
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x1ac>
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e012      	b.n	800436e <UART_SetConfig+0x1ba>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e00e      	b.n	800436e <UART_SetConfig+0x1ba>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e00a      	b.n	800436e <UART_SetConfig+0x1ba>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e006      	b.n	800436e <UART_SetConfig+0x1ba>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e002      	b.n	800436e <UART_SetConfig+0x1ba>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <UART_SetConfig+0x304>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d17a      	bne.n	800446e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800437c:	2b08      	cmp	r3, #8
 800437e:	d824      	bhi.n	80043ca <UART_SetConfig+0x216>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x1d4>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043bb 	.word	0x080043bb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043cb 	.word	0x080043cb
 80043a8:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fcf8 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <UART_SetConfig+0x314>)
 80043b6:	61fb      	str	r3, [r7, #28]
        break;
 80043b8:	e00d      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7fe fc59 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 80043be:	61f8      	str	r0, [r7, #28]
        break;
 80043c0:	e009      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e005      	b.n	80043d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8107 	beq.w	80045ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d305      	bcc.n	80043fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d903      	bls.n	8004402 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004400:	e0f4      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2200      	movs	r2, #0
 8004406:	461c      	mov	r4, r3
 8004408:	4615      	mov	r5, r2
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	022b      	lsls	r3, r5, #8
 8004414:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004418:	0222      	lsls	r2, r4, #8
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6849      	ldr	r1, [r1, #4]
 800441e:	0849      	lsrs	r1, r1, #1
 8004420:	2000      	movs	r0, #0
 8004422:	4688      	mov	r8, r1
 8004424:	4681      	mov	r9, r0
 8004426:	eb12 0a08 	adds.w	sl, r2, r8
 800442a:	eb43 0b09 	adc.w	fp, r3, r9
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	4650      	mov	r0, sl
 800443e:	4659      	mov	r1, fp
 8004440:	f7fc fbb2 	bl	8000ba8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004452:	d308      	bcc.n	8004466 <UART_SetConfig+0x2b2>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d204      	bcs.n	8004466 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e0c2      	b.n	80045ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800446c:	e0be      	b.n	80045ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004476:	d16a      	bne.n	800454e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800447c:	2b08      	cmp	r3, #8
 800447e:	d834      	bhi.n	80044ea <UART_SetConfig+0x336>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x2d4>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044eb 	.word	0x080044eb
 8004498:	080044db 	.word	0x080044db
 800449c:	080044eb 	.word	0x080044eb
 80044a0:	080044eb 	.word	0x080044eb
 80044a4:	080044eb 	.word	0x080044eb
 80044a8:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fc78 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 80044b0:	61f8      	str	r0, [r7, #28]
        break;
 80044b2:	e020      	b.n	80044f6 <UART_SetConfig+0x342>
 80044b4:	efff69f3 	.word	0xefff69f3
 80044b8:	40008000 	.word	0x40008000
 80044bc:	40013800 	.word	0x40013800
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40004400 	.word	0x40004400
 80044c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fc7e 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <UART_SetConfig+0x454>)
 80044d6:	61fb      	str	r3, [r7, #28]
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fe fbc9 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 80044de:	61f8      	str	r0, [r7, #28]
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d077      	beq.n	80045ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005a      	lsls	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	441a      	add	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d916      	bls.n	8004546 <UART_SetConfig+0x392>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d212      	bcs.n	8004546 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f023 030f 	bic.w	r3, r3, #15
 8004528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	b29a      	uxth	r2, r3
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	4313      	orrs	r3, r2
 800453a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	8afa      	ldrh	r2, [r7, #22]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e052      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800454c:	e04e      	b.n	80045ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800454e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004552:	2b08      	cmp	r3, #8
 8004554:	d827      	bhi.n	80045a6 <UART_SetConfig+0x3f2>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0x3a8>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004581 	.word	0x08004581
 8004560:	08004589 	.word	0x08004589
 8004564:	08004591 	.word	0x08004591
 8004568:	080045a7 	.word	0x080045a7
 800456c:	08004597 	.word	0x08004597
 8004570:	080045a7 	.word	0x080045a7
 8004574:	080045a7 	.word	0x080045a7
 8004578:	080045a7 	.word	0x080045a7
 800457c:	0800459f 	.word	0x0800459f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004580:	f7fe fc0e 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e014      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7fe fc20 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e010      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <UART_SetConfig+0x454>)
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e00d      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004596:	f7fe fb6b 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 800459a:	61f8      	str	r0, [r7, #28]
        break;
 800459c:	e009      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e005      	b.n	80045b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b0:	bf00      	nop
    }

    if (pclk != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	085a      	lsrs	r2, r3, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d909      	bls.n	80045e6 <UART_SetConfig+0x432>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d205      	bcs.n	80045e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e002      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	00f42400 	.word	0x00f42400

0800460c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d10a      	bne.n	8004722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004760:	f7fd f910 	bl	8001984 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d10e      	bne.n	8004792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f82d 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e023      	b.n	80047da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d10e      	bne.n	80047be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f817 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e00d      	b.n	80047da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b09c      	sub	sp, #112	; 0x70
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	e0a5      	b.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	f000 80a1 	beq.w	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fd f8c1 	bl	8001984 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004810:	2b00      	cmp	r3, #0
 8004812:	d13e      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004828:	667b      	str	r3, [r7, #100]	; 0x64
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e6      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	663b      	str	r3, [r7, #96]	; 0x60
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004866:	64ba      	str	r2, [r7, #72]	; 0x48
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800486c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e067      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d04f      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d147      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	613b      	str	r3, [r7, #16]
   return(result);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800490c:	623a      	str	r2, [r7, #32]
 800490e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69f9      	ldr	r1, [r7, #28]
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	61bb      	str	r3, [r7, #24]
   return(result);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e010      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	429a      	cmp	r2, r3
 800495c:	f43f af4a 	beq.w	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3770      	adds	r7, #112	; 0x70
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800496a:	b480      	push	{r7}
 800496c:	b095      	sub	sp, #84	; 0x54
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
 8004992:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d118      	bne.n	8004a12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6979      	ldr	r1, [r7, #20]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e6      	bne.n	80049e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a24:	bf00      	nop
 8004a26:	3754      	adds	r7, #84	; 0x54
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fb9a 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6979      	ldr	r1, [r7, #20]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e6      	bne.n	8004a64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fb66 	bl	8004174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa8:	bf00      	nop
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <__NVIC_SetPriority>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	490c      	ldr	r1, [pc, #48]	; (8004b10 <__NVIC_SetPriority+0x4c>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004aec:	e00a      	b.n	8004b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4908      	ldr	r1, [pc, #32]	; (8004b14 <__NVIC_SetPriority+0x50>)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	3b04      	subs	r3, #4
 8004afc:	0112      	lsls	r2, r2, #4
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	761a      	strb	r2, [r3, #24]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000e100 	.word	0xe000e100
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <SysTick_Handler+0x1c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b20:	f001 fcfe 	bl	8006520 <xTaskGetSchedulerState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b2a:	f002 fae5 	bl	80070f8 <xPortSysTickHandler>
  }
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000e010 	.word	0xe000e010

08004b38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f06f 0004 	mvn.w	r0, #4
 8004b42:	f7ff ffbf 	bl	8004ac4 <__NVIC_SetPriority>
#endif
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b52:	f3ef 8305 	mrs	r3, IPSR
 8004b56:	603b      	str	r3, [r7, #0]
  return(result);
 8004b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b5e:	f06f 0305 	mvn.w	r3, #5
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	e00c      	b.n	8004b80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <osKernelInitialize+0x44>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <osKernelInitialize+0x44>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	607b      	str	r3, [r7, #4]
 8004b78:	e002      	b.n	8004b80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b80:	687b      	ldr	r3, [r7, #4]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000404 	.word	0x20000404

08004b94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9a:	f3ef 8305 	mrs	r3, IPSR
 8004b9e:	603b      	str	r3, [r7, #0]
  return(result);
 8004ba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ba6:	f06f 0305 	mvn.w	r3, #5
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e010      	b.n	8004bd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <osKernelStart+0x48>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d109      	bne.n	8004bca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bb6:	f7ff ffbf 	bl	8004b38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <osKernelStart+0x48>)
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bc0:	f001 f866 	bl	8005c90 <vTaskStartScheduler>
      stat = osOK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	e002      	b.n	8004bd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bd0:	687b      	ldr	r3, [r7, #4]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000404 	.word	0x20000404

08004be0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08e      	sub	sp, #56	; 0x38
 8004be4:	af04      	add	r7, sp, #16
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf0:	f3ef 8305 	mrs	r3, IPSR
 8004bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d17e      	bne.n	8004cfa <osThreadNew+0x11a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d07b      	beq.n	8004cfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c06:	2318      	movs	r3, #24
 8004c08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d045      	beq.n	8004ca6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <osThreadNew+0x48>
        name = attr->name;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <osThreadNew+0x6e>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b38      	cmp	r3, #56	; 0x38
 8004c40:	d805      	bhi.n	8004c4e <osThreadNew+0x6e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <osThreadNew+0x72>
        return (NULL);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e054      	b.n	8004cfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00e      	beq.n	8004c88 <osThreadNew+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b5b      	cmp	r3, #91	; 0x5b
 8004c70:	d90a      	bls.n	8004c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <osThreadNew+0xa8>
        mem = 1;
 8004c82:	2301      	movs	r3, #1
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e010      	b.n	8004caa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <osThreadNew+0xca>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <osThreadNew+0xca>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <osThreadNew+0xca>
          mem = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e001      	b.n	8004caa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d110      	bne.n	8004cd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cb8:	9202      	str	r2, [sp, #8]
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fe0c 	bl	80058e4 <xTaskCreateStatic>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e013      	b.n	8004cfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fe57 	bl	800599e <xTaskCreate>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d001      	beq.n	8004cfa <osThreadNew+0x11a>
            hTask = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cfa:	693b      	ldr	r3, [r7, #16]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3728      	adds	r7, #40	; 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0c:	f3ef 8305 	mrs	r3, IPSR
 8004d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <osDelay+0x1c>
    stat = osErrorISR;
 8004d18:	f06f 0305 	mvn.w	r3, #5
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e007      	b.n	8004d30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 ff7c 	bl	8005c28 <vTaskDelay>
    }
  }

  return (stat);
 8004d30:	68fb      	ldr	r3, [r7, #12]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4a06      	ldr	r2, [pc, #24]	; (8004d6c <vApplicationGetIdleTaskMemory+0x30>)
 8004d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000408 	.word	0x20000408
 8004d6c:	20000464 	.word	0x20000464

08004d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a07      	ldr	r2, [pc, #28]	; (8004d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8004d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a06      	ldr	r2, [pc, #24]	; (8004da0 <vApplicationGetTimerTaskMemory+0x30>)
 8004d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d8e:	601a      	str	r2, [r3, #0]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20000664 	.word	0x20000664
 8004da0:	200006c0 	.word	0x200006c0

08004da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0208 	add.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f103 0208 	add.w	r2, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f103 0208 	add.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d103      	bne.n	8004e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e00c      	b.n	8004e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e002      	b.n	8004e74 <vListInsert+0x2e>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d2f6      	bcs.n	8004e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6892      	ldr	r2, [r2, #8]
 8004ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6852      	ldr	r2, [r2, #4]
 8004ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d103      	bne.n	8004eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f36:	f002 f84d 	bl	8006fd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	441a      	add	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	3b01      	subs	r3, #1
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d114      	bne.n	8004fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3310      	adds	r3, #16
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f903 	bl	80061a4 <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <xQueueGenericReset+0xcc>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	e009      	b.n	8004fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3310      	adds	r3, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fef2 	bl	8004da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3324      	adds	r3, #36	; 0x24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff feed 	bl	8004da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fca:	f002 f833 	bl	8007034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fce:	2301      	movs	r3, #1
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <xQueueGenericCreateStatic+0x52>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <xQueueGenericCreateStatic+0x56>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <xQueueGenericCreateStatic+0x58>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	623b      	str	r3, [r7, #32]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <xQueueGenericCreateStatic+0x7e>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueGenericCreateStatic+0x82>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericCreateStatic+0x84>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61fb      	str	r3, [r7, #28]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800507a:	2350      	movs	r3, #80	; 0x50
 800507c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d00a      	beq.n	800509a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61bb      	str	r3, [r7, #24]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800509a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f805 	bl	80050cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3730      	adds	r7, #48	; 0x30
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e002      	b.n	80050ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050fa:	2101      	movs	r1, #1
 80050fc:	69b8      	ldr	r0, [r7, #24]
 80050fe:	f7ff ff05 	bl	8004f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	; 0x38
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xQueueGenericSend+0x32>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <xQueueGenericSend+0x40>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <xQueueGenericSend+0x44>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <xQueueGenericSend+0x46>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <xQueueGenericSend+0x60>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d103      	bne.n	8005182 <xQueueGenericSend+0x6e>
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <xQueueGenericSend+0x72>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueGenericSend+0x74>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	623b      	str	r3, [r7, #32]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051a2:	f001 f9bd 	bl	8006520 <xTaskGetSchedulerState>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <xQueueGenericSend+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueGenericSend+0xa2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueGenericSend+0xa4>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fb      	str	r3, [r7, #28]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051d2:	f001 feff 	bl	8006fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <xQueueGenericSend+0xd4>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d129      	bne.n	800523c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ee:	f000 fa0b 	bl	8005608 <prvCopyDataToQueue>
 80051f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	4618      	mov	r0, r3
 8005202:	f000 ffcf 	bl	80061a4 <xTaskRemoveFromEventList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <xQueueGenericSend+0x1f8>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	e00a      	b.n	8005234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005224:	4b39      	ldr	r3, [pc, #228]	; (800530c <xQueueGenericSend+0x1f8>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005234:	f001 fefe 	bl	8007034 <vPortExitCritical>
				return pdPASS;
 8005238:	2301      	movs	r3, #1
 800523a:	e063      	b.n	8005304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005242:	f001 fef7 	bl	8007034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
 8005248:	e05c      	b.n	8005304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f809 	bl	800626c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800525e:	f001 fee9 	bl	8007034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005262:	f000 fd7b 	bl	8005d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005266:	f001 feb5 	bl	8006fd4 <vPortEnterCritical>
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005270:	b25b      	sxtb	r3, r3
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d103      	bne.n	8005280 <xQueueGenericSend+0x16c>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005286:	b25b      	sxtb	r3, r3
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d103      	bne.n	8005296 <xQueueGenericSend+0x182>
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005296:	f001 fecd 	bl	8007034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800529a:	1d3a      	adds	r2, r7, #4
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fff8 	bl	8006298 <xTaskCheckForTimeOut>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d124      	bne.n	80052f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b0:	f000 faa2 	bl	80057f8 <prvIsQueueFull>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d018      	beq.n	80052ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3310      	adds	r3, #16
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 ff1e 	bl	8006104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ca:	f000 fa2d 	bl	8005728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052ce:	f000 fd53 	bl	8005d78 <xTaskResumeAll>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af7c 	bne.w	80051d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <xQueueGenericSend+0x1f8>)
 80052dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	e772      	b.n	80051d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ee:	f000 fa1b 	bl	8005728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052f2:	f000 fd41 	bl	8005d78 <xTaskResumeAll>
 80052f6:	e76c      	b.n	80051d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fa:	f000 fa15 	bl	8005728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052fe:	f000 fd3b 	bl	8005d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005304:	4618      	mov	r0, r3
 8005306:	3738      	adds	r7, #56	; 0x38
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b090      	sub	sp, #64	; 0x40
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <xQueueGenericSendFromISR+0x3c>
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <xQueueGenericSendFromISR+0x40>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <xQueueGenericSendFromISR+0x42>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d103      	bne.n	800537a <xQueueGenericSendFromISR+0x6a>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <xQueueGenericSendFromISR+0x6e>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <xQueueGenericSendFromISR+0x70>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	623b      	str	r3, [r7, #32]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800539a:	f001 fefd 	bl	8007198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800539e:	f3ef 8211 	mrs	r2, BASEPRI
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	61fa      	str	r2, [r7, #28]
 80053b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <xQueueGenericSendFromISR+0xbc>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d12f      	bne.n	800542c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053e2:	f000 f911 	bl	8005608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d112      	bne.n	8005416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	3324      	adds	r3, #36	; 0x24
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fed1 	bl	80061a4 <xTaskRemoveFromEventList>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00e      	beq.n	8005426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e007      	b.n	8005426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800541a:	3301      	adds	r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	b25a      	sxtb	r2, r3
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005426:	2301      	movs	r3, #1
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800542a:	e001      	b.n	8005430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800543a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800543e:	4618      	mov	r0, r3
 8005440:	3740      	adds	r7, #64	; 0x40
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08c      	sub	sp, #48	; 0x30
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xQueueReceive+0x30>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	623b      	str	r3, [r7, #32]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <xQueueReceive+0x3e>
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <xQueueReceive+0x42>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <xQueueReceive+0x44>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueReceive+0x5e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	61fb      	str	r3, [r7, #28]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054a6:	f001 f83b 	bl	8006520 <xTaskGetSchedulerState>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <xQueueReceive+0x6e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <xQueueReceive+0x72>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueReceive+0x74>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueReceive+0x8e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	61bb      	str	r3, [r7, #24]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054d6:	f001 fd7d 	bl	8006fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01f      	beq.n	8005526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ea:	f000 f8f7 	bl	80056dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00f      	beq.n	800551e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	3310      	adds	r3, #16
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fe4e 	bl	80061a4 <xTaskRemoveFromEventList>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800550e:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <xQueueReceive+0x1bc>)
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800551e:	f001 fd89 	bl	8007034 <vPortExitCritical>
				return pdPASS;
 8005522:	2301      	movs	r3, #1
 8005524:	e069      	b.n	80055fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800552c:	f001 fd82 	bl	8007034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005530:	2300      	movs	r3, #0
 8005532:	e062      	b.n	80055fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800553a:	f107 0310 	add.w	r3, r7, #16
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fe94 	bl	800626c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005548:	f001 fd74 	bl	8007034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800554c:	f000 fc06 	bl	8005d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005550:	f001 fd40 	bl	8006fd4 <vPortEnterCritical>
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555a:	b25b      	sxtb	r3, r3
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d103      	bne.n	800556a <xQueueReceive+0x122>
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005570:	b25b      	sxtb	r3, r3
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d103      	bne.n	8005580 <xQueueReceive+0x138>
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005580:	f001 fd58 	bl	8007034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005584:	1d3a      	adds	r2, r7, #4
 8005586:	f107 0310 	add.w	r3, r7, #16
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe83 	bl	8006298 <xTaskCheckForTimeOut>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d123      	bne.n	80055e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559a:	f000 f917 	bl	80057cc <prvIsQueueEmpty>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fda9 	bl	8006104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b4:	f000 f8b8 	bl	8005728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055b8:	f000 fbde 	bl	8005d78 <xTaskResumeAll>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d189      	bne.n	80054d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80055c2:	4b10      	ldr	r3, [pc, #64]	; (8005604 <xQueueReceive+0x1bc>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	e780      	b.n	80054d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d6:	f000 f8a7 	bl	8005728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055da:	f000 fbcd 	bl	8005d78 <xTaskResumeAll>
 80055de:	e77a      	b.n	80054d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e2:	f000 f8a1 	bl	8005728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055e6:	f000 fbc7 	bl	8005d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ec:	f000 f8ee 	bl	80057cc <prvIsQueueEmpty>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f43f af6f 	beq.w	80054d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3730      	adds	r7, #48	; 0x30
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d14d      	bne.n	80056ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 ff92 	bl	800655c <xTaskPriorityDisinherit>
 8005638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	e043      	b.n	80056ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d119      	bne.n	800567c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6858      	ldr	r0, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	461a      	mov	r2, r3
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	f001 fff4 	bl	8007640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	441a      	add	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d32b      	bcc.n	80056ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	e026      	b.n	80056ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68d8      	ldr	r0, [r3, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	461a      	mov	r2, r3
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	f001 ffda 	bl	8007640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	425b      	negs	r3, r3
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	425b      	negs	r3, r3
 80056b2:	441a      	add	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d105      	bne.n	80056ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056d2:	697b      	ldr	r3, [r7, #20]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	441a      	add	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	d303      	bcc.n	8005710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68d9      	ldr	r1, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	461a      	mov	r2, r3
 800571a:	6838      	ldr	r0, [r7, #0]
 800571c:	f001 ff90 	bl	8007640 <memcpy>
	}
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005730:	f001 fc50 	bl	8006fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573c:	e011      	b.n	8005762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3324      	adds	r3, #36	; 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fd2a 	bl	80061a4 <xTaskRemoveFromEventList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005756:	f000 fe01 	bl	800635c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	3b01      	subs	r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dce9      	bgt.n	800573e <prvUnlockQueue+0x16>
 800576a:	e000      	b.n	800576e <prvUnlockQueue+0x46>
					break;
 800576c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	22ff      	movs	r2, #255	; 0xff
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005776:	f001 fc5d 	bl	8007034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800577a:	f001 fc2b 	bl	8006fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005786:	e011      	b.n	80057ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3310      	adds	r3, #16
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fd05 	bl	80061a4 <xTaskRemoveFromEventList>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057a0:	f000 fddc 	bl	800635c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dce9      	bgt.n	8005788 <prvUnlockQueue+0x60>
 80057b4:	e000      	b.n	80057b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057c0:	f001 fc38 	bl	8007034 <vPortExitCritical>
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057d4:	f001 fbfe 	bl	8006fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e001      	b.n	80057ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f001 fc23 	bl	8007034 <vPortExitCritical>

	return xReturn;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005800:	f001 fbe8 	bl	8006fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	429a      	cmp	r2, r3
 800580e:	d102      	bne.n	8005816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e001      	b.n	800581a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800581a:	f001 fc0b 	bl	8007034 <vPortExitCritical>

	return xReturn;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e014      	b.n	8005862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005838:	4a0f      	ldr	r2, [pc, #60]	; (8005878 <vQueueAddToRegistry+0x50>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005844:	490c      	ldr	r1, [pc, #48]	; (8005878 <vQueueAddToRegistry+0x50>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800584e:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <vQueueAddToRegistry+0x50>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800585a:	e006      	b.n	800586a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b07      	cmp	r3, #7
 8005866:	d9e7      	bls.n	8005838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000ac0 	.word	0x20000ac0

0800587c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800588c:	f001 fba2 	bl	8006fd4 <vPortEnterCritical>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005896:	b25b      	sxtb	r3, r3
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d103      	bne.n	80058a6 <vQueueWaitForMessageRestricted+0x2a>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d103      	bne.n	80058bc <vQueueWaitForMessageRestricted+0x40>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058bc:	f001 fbba 	bl	8007034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fc3b 	bl	800614c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff ff26 	bl	8005728 <prvUnlockQueue>
	}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xTaskCreateStatic+0x2a>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xTaskCreateStatic+0x46>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61fb      	str	r3, [r7, #28]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800592a:	235c      	movs	r3, #92	; 0x5c
 800592c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b5c      	cmp	r3, #92	; 0x5c
 8005932:	d00a      	beq.n	800594a <xTaskCreateStatic+0x66>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	61bb      	str	r3, [r7, #24]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800594a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01e      	beq.n	8005990 <xTaskCreateStatic+0xac>
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01b      	beq.n	8005990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800596a:	2300      	movs	r3, #0
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	9302      	str	r3, [sp, #8]
 8005972:	f107 0314 	add.w	r3, r7, #20
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f850 	bl	8005a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800598a:	f000 f8dd 	bl	8005b48 <prvAddNewTaskToReadyList>
 800598e:	e001      	b.n	8005994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005994:	697b      	ldr	r3, [r7, #20]
	}
 8005996:	4618      	mov	r0, r3
 8005998:	3728      	adds	r7, #40	; 0x28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b08c      	sub	sp, #48	; 0x30
 80059a2:	af04      	add	r7, sp, #16
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fc30 	bl	8007218 <pvPortMalloc>
 80059b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059c0:	205c      	movs	r0, #92	; 0x5c
 80059c2:	f001 fc29 	bl	8007218 <pvPortMalloc>
 80059c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
 80059d4:	e005      	b.n	80059e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f001 fcea 	bl	80073b0 <vPortFree>
 80059dc:	e001      	b.n	80059e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d017      	beq.n	8005a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f80e 	bl	8005a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a0c:	69f8      	ldr	r0, [r7, #28]
 8005a0e:	f000 f89b 	bl	8005b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e002      	b.n	8005a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	21a5      	movs	r1, #165	; 0xa5
 8005a42:	f001 fe0b 	bl	800765c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	3b01      	subs	r3, #1
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	617b      	str	r3, [r7, #20]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01f      	beq.n	8005ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e012      	b.n	8005ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	7819      	ldrb	r1, [r3, #0]
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	3334      	adds	r3, #52	; 0x34
 8005a9c:	460a      	mov	r2, r1
 8005a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d006      	beq.n	8005aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d9e9      	bls.n	8005a8c <prvInitialiseNewTask+0x64>
 8005ab8:	e000      	b.n	8005abc <prvInitialiseNewTask+0x94>
			{
				break;
 8005aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac4:	e003      	b.n	8005ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2b37      	cmp	r3, #55	; 0x37
 8005ad2:	d901      	bls.n	8005ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ad4:	2337      	movs	r3, #55	; 0x37
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff f978 	bl	8004de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	3318      	adds	r3, #24
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff f973 	bl	8004de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2200      	movs	r2, #0
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	69b8      	ldr	r0, [r7, #24]
 8005b28:	f001 f928 	bl	8006d7c <pxPortInitialiseStack>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b3e:	bf00      	nop
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b50:	f001 fa40 	bl	8006fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b54:	4b2d      	ldr	r3, [pc, #180]	; (8005c0c <prvAddNewTaskToReadyList+0xc4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <prvAddNewTaskToReadyList+0xc4>)
 8005b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b5e:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <prvAddNewTaskToReadyList+0xc8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b66:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <prvAddNewTaskToReadyList+0xc8>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b6c:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <prvAddNewTaskToReadyList+0xc4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d110      	bne.n	8005b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b74:	f000 fc16 	bl	80063a4 <prvInitialiseTaskLists>
 8005b78:	e00d      	b.n	8005b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <prvAddNewTaskToReadyList+0xcc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <prvAddNewTaskToReadyList+0xc8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d802      	bhi.n	8005b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b90:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <prvAddNewTaskToReadyList+0xc8>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <prvAddNewTaskToReadyList+0xd0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <prvAddNewTaskToReadyList+0xd0>)
 8005b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <prvAddNewTaskToReadyList+0xd0>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <prvAddNewTaskToReadyList+0xd4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <prvAddNewTaskToReadyList+0x74>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <prvAddNewTaskToReadyList+0xd4>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a15      	ldr	r2, [pc, #84]	; (8005c20 <prvAddNewTaskToReadyList+0xd8>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7ff f913 	bl	8004dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bd8:	f001 fa2c 	bl	8007034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <prvAddNewTaskToReadyList+0xcc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <prvAddNewTaskToReadyList+0xc8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d207      	bcs.n	8005c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <prvAddNewTaskToReadyList+0xdc>)
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000fd4 	.word	0x20000fd4
 8005c10:	20000b00 	.word	0x20000b00
 8005c14:	20000fe0 	.word	0x20000fe0
 8005c18:	20000ff0 	.word	0x20000ff0
 8005c1c:	20000fdc 	.word	0x20000fdc
 8005c20:	20000b04 	.word	0x20000b04
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d017      	beq.n	8005c6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <vTaskDelay+0x60>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <vTaskDelay+0x30>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60bb      	str	r3, [r7, #8]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c58:	f000 f880 	bl	8005d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fcea 	bl	8006638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c64:	f000 f888 	bl	8005d78 <xTaskResumeAll>
 8005c68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d107      	bne.n	8005c80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <vTaskDelay+0x64>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000ffc 	.word	0x20000ffc
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	1d39      	adds	r1, r7, #4
 8005ca2:	f107 0308 	add.w	r3, r7, #8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff f848 	bl	8004d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	4921      	ldr	r1, [pc, #132]	; (8005d44 <vTaskStartScheduler+0xb4>)
 8005cc0:	4821      	ldr	r0, [pc, #132]	; (8005d48 <vTaskStartScheduler+0xb8>)
 8005cc2:	f7ff fe0f 	bl	80058e4 <xTaskCreateStatic>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <vTaskStartScheduler+0xbc>)
 8005cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <vTaskStartScheduler+0xbc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e001      	b.n	8005cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d102      	bne.n	8005cea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ce4:	f000 fcfc 	bl	80066e0 <xTimerCreateTimerTask>
 8005ce8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d116      	bne.n	8005d1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <vTaskStartScheduler+0xc0>)
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <vTaskStartScheduler+0xc4>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <vTaskStartScheduler+0xc8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d18:	f001 f8ba 	bl	8006e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d1c:	e00e      	b.n	8005d3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d10a      	bne.n	8005d3c <vTaskStartScheduler+0xac>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60fb      	str	r3, [r7, #12]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <vTaskStartScheduler+0xaa>
}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0800a1d8 	.word	0x0800a1d8
 8005d48:	08006375 	.word	0x08006375
 8005d4c:	20000ff8 	.word	0x20000ff8
 8005d50:	20000ff4 	.word	0x20000ff4
 8005d54:	20000fe0 	.word	0x20000fe0
 8005d58:	20000fd8 	.word	0x20000fd8

08005d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <vTaskSuspendAll+0x18>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a03      	ldr	r2, [pc, #12]	; (8005d74 <vTaskSuspendAll+0x18>)
 8005d68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000ffc 	.word	0x20000ffc

08005d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d86:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <xTaskResumeAll+0x118>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	603b      	str	r3, [r7, #0]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005da4:	f001 f916 	bl	8006fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <xTaskResumeAll+0x118>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <xTaskResumeAll+0x118>)
 8005db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db2:	4b37      	ldr	r3, [pc, #220]	; (8005e90 <xTaskResumeAll+0x118>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d162      	bne.n	8005e80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dba:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <xTaskResumeAll+0x11c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d05e      	beq.n	8005e80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dc2:	e02f      	b.n	8005e24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc4:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <xTaskResumeAll+0x120>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff f871 	bl	8004eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff f86c 	bl	8004eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <xTaskResumeAll+0x124>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d903      	bls.n	8005df4 <xTaskResumeAll+0x7c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <xTaskResumeAll+0x124>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a27      	ldr	r2, [pc, #156]	; (8005ea0 <xTaskResumeAll+0x128>)
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe fff7 	bl	8004dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <xTaskResumeAll+0x12c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <xTaskResumeAll+0x130>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <xTaskResumeAll+0x120>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1cb      	bne.n	8005dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e32:	f000 fb55 	bl	80064e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <xTaskResumeAll+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d010      	beq.n	8005e64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e42:	f000 f847 	bl	8005ed4 <xTaskIncrementTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e4c:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <xTaskResumeAll+0x130>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f1      	bne.n	8005e42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <xTaskResumeAll+0x134>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <xTaskResumeAll+0x130>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <xTaskResumeAll+0x138>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f001 f8d8 	bl	8007034 <vPortExitCritical>

	return xAlreadyYielded;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000ffc 	.word	0x20000ffc
 8005e94:	20000fd4 	.word	0x20000fd4
 8005e98:	20000f94 	.word	0x20000f94
 8005e9c:	20000fdc 	.word	0x20000fdc
 8005ea0:	20000b04 	.word	0x20000b04
 8005ea4:	20000b00 	.word	0x20000b00
 8005ea8:	20000fe8 	.word	0x20000fe8
 8005eac:	20000fe4 	.word	0x20000fe4
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <xTaskGetTickCount+0x1c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ec0:	687b      	ldr	r3, [r7, #4]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000fd8 	.word	0x20000fd8

08005ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ede:	4b4f      	ldr	r3, [pc, #316]	; (800601c <xTaskIncrementTick+0x148>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 808f 	bne.w	8006006 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee8:	4b4d      	ldr	r3, [pc, #308]	; (8006020 <xTaskIncrementTick+0x14c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ef0:	4a4b      	ldr	r2, [pc, #300]	; (8006020 <xTaskIncrementTick+0x14c>)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d120      	bne.n	8005f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005efc:	4b49      	ldr	r3, [pc, #292]	; (8006024 <xTaskIncrementTick+0x150>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	603b      	str	r3, [r7, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <xTaskIncrementTick+0x46>
 8005f1c:	4b41      	ldr	r3, [pc, #260]	; (8006024 <xTaskIncrementTick+0x150>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	4b41      	ldr	r3, [pc, #260]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3f      	ldr	r2, [pc, #252]	; (8006024 <xTaskIncrementTick+0x150>)
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b3e      	ldr	r3, [pc, #248]	; (800602c <xTaskIncrementTick+0x158>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4a3d      	ldr	r2, [pc, #244]	; (800602c <xTaskIncrementTick+0x158>)
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	f000 fad1 	bl	80064e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <xTaskIncrementTick+0x15c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d349      	bcc.n	8005fdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <xTaskIncrementTick+0x150>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f52:	4b37      	ldr	r3, [pc, #220]	; (8006030 <xTaskIncrementTick+0x15c>)
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295
 8005f58:	601a      	str	r2, [r3, #0]
					break;
 8005f5a:	e03f      	b.n	8005fdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5c:	4b31      	ldr	r3, [pc, #196]	; (8006024 <xTaskIncrementTick+0x150>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d203      	bcs.n	8005f7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f74:	4a2e      	ldr	r2, [pc, #184]	; (8006030 <xTaskIncrementTick+0x15c>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f7a:	e02f      	b.n	8005fdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe ff99 	bl	8004eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	3318      	adds	r3, #24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe ff90 	bl	8004eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <xTaskIncrementTick+0x160>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <xTaskIncrementTick+0xd8>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a22      	ldr	r2, [pc, #136]	; (8006034 <xTaskIncrementTick+0x160>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <xTaskIncrementTick+0x164>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe ff1b 	bl	8004dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <xTaskIncrementTick+0x168>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3b8      	bcc.n	8005f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fda:	e7b5      	b.n	8005f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fdc:	4b17      	ldr	r3, [pc, #92]	; (800603c <xTaskIncrementTick+0x168>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe2:	4915      	ldr	r1, [pc, #84]	; (8006038 <xTaskIncrementTick+0x164>)
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d901      	bls.n	8005ff8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ff8:	4b11      	ldr	r3, [pc, #68]	; (8006040 <xTaskIncrementTick+0x16c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e004      	b.n	8006010 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <xTaskIncrementTick+0x170>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <xTaskIncrementTick+0x170>)
 800600e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006010:	697b      	ldr	r3, [r7, #20]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000ffc 	.word	0x20000ffc
 8006020:	20000fd8 	.word	0x20000fd8
 8006024:	20000f8c 	.word	0x20000f8c
 8006028:	20000f90 	.word	0x20000f90
 800602c:	20000fec 	.word	0x20000fec
 8006030:	20000ff4 	.word	0x20000ff4
 8006034:	20000fdc 	.word	0x20000fdc
 8006038:	20000b04 	.word	0x20000b04
 800603c:	20000b00 	.word	0x20000b00
 8006040:	20000fe8 	.word	0x20000fe8
 8006044:	20000fe4 	.word	0x20000fe4

08006048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <vTaskSwitchContext+0xa8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006056:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <vTaskSwitchContext+0xac>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800605c:	e041      	b.n	80060e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <vTaskSwitchContext+0xac>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <vTaskSwitchContext+0xb0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e010      	b.n	800608e <vTaskSwitchContext+0x46>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <vTaskSwitchContext+0x40>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	607b      	str	r3, [r7, #4]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <vTaskSwitchContext+0x3e>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	491b      	ldr	r1, [pc, #108]	; (80060fc <vTaskSwitchContext+0xb4>)
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0e4      	beq.n	800606c <vTaskSwitchContext+0x24>
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <vTaskSwitchContext+0xb4>)
 80060ae:	4413      	add	r3, r2
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3308      	adds	r3, #8
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d104      	bne.n	80060d2 <vTaskSwitchContext+0x8a>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <vTaskSwitchContext+0xb8>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <vTaskSwitchContext+0xb0>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6013      	str	r3, [r2, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000ffc 	.word	0x20000ffc
 80060f4:	20000fe8 	.word	0x20000fe8
 80060f8:	20000fdc 	.word	0x20000fdc
 80060fc:	20000b04 	.word	0x20000b04
 8006100:	20000b00 	.word	0x20000b00

08006104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <vTaskPlaceOnEventList+0x44>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3318      	adds	r3, #24
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fe fe87 	bl	8004e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006138:	2101      	movs	r1, #1
 800613a:	6838      	ldr	r0, [r7, #0]
 800613c:	f000 fa7c 	bl	8006638 <prvAddCurrentTaskToDelayedList>
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000b00 	.word	0x20000b00

0800614c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	617b      	str	r3, [r7, #20]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3318      	adds	r3, #24
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7fe fe3e 	bl	8004dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	68b8      	ldr	r0, [r7, #8]
 8006192:	f000 fa51 	bl	8006638 <prvAddCurrentTaskToDelayedList>
	}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000b00 	.word	0x20000b00

080061a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3318      	adds	r3, #24
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fe6f 	bl	8004eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061da:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <xTaskRemoveFromEventList+0xb0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11d      	bne.n	800621e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fe66 	bl	8004eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <xTaskRemoveFromEventList+0xb4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d903      	bls.n	8006200 <xTaskRemoveFromEventList+0x5c>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	4a16      	ldr	r2, [pc, #88]	; (8006258 <xTaskRemoveFromEventList+0xb4>)
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <xTaskRemoveFromEventList+0xb8>)
 800620e:	441a      	add	r2, r3
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f7fe fdf1 	bl	8004dfe <vListInsertEnd>
 800621c:	e005      	b.n	800622a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3318      	adds	r3, #24
 8006222:	4619      	mov	r1, r3
 8006224:	480e      	ldr	r0, [pc, #56]	; (8006260 <xTaskRemoveFromEventList+0xbc>)
 8006226:	f7fe fdea 	bl	8004dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <xTaskRemoveFromEventList+0xc0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	429a      	cmp	r2, r3
 8006236:	d905      	bls.n	8006244 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <xTaskRemoveFromEventList+0xc4>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e001      	b.n	8006248 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000ffc 	.word	0x20000ffc
 8006258:	20000fdc 	.word	0x20000fdc
 800625c:	20000b04 	.word	0x20000b04
 8006260:	20000f94 	.word	0x20000f94
 8006264:	20000b00 	.word	0x20000b00
 8006268:	20000fe8 	.word	0x20000fe8

0800626c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <vTaskInternalSetTimeOutState+0x24>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <vTaskInternalSetTimeOutState+0x28>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	605a      	str	r2, [r3, #4]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000fec 	.word	0x20000fec
 8006294:	20000fd8 	.word	0x20000fd8

08006298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	613b      	str	r3, [r7, #16]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062da:	f000 fe7b 	bl	8006fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <xTaskCheckForTimeOut+0xbc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d102      	bne.n	80062fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e023      	b.n	8006346 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <xTaskCheckForTimeOut+0xc0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d007      	beq.n	800631a <xTaskCheckForTimeOut+0x82>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e015      	b.n	8006346 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d20b      	bcs.n	800633c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff9b 	bl	800626c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e004      	b.n	8006346 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006346:	f000 fe75 	bl	8007034 <vPortExitCritical>

	return xReturn;
 800634a:	69fb      	ldr	r3, [r7, #28]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000fd8 	.word	0x20000fd8
 8006358:	20000fec 	.word	0x20000fec

0800635c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <vTaskMissedYield+0x14>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000fe8 	.word	0x20000fe8

08006374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800637c:	f000 f852 	bl	8006424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <prvIdleTask+0x28>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d9f9      	bls.n	800637c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvIdleTask+0x2c>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006398:	e7f0      	b.n	800637c <prvIdleTask+0x8>
 800639a:	bf00      	nop
 800639c:	20000b04 	.word	0x20000b04
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e00c      	b.n	80063ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <prvInitialiseTaskLists+0x60>)
 80063bc:	4413      	add	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fcf0 	bl	8004da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b37      	cmp	r3, #55	; 0x37
 80063ce:	d9ef      	bls.n	80063b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063d2:	f7fe fce7 	bl	8004da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d6:	480d      	ldr	r0, [pc, #52]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063d8:	f7fe fce4 	bl	8004da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063dc:	480c      	ldr	r0, [pc, #48]	; (8006410 <prvInitialiseTaskLists+0x6c>)
 80063de:	f7fe fce1 	bl	8004da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063e2:	480c      	ldr	r0, [pc, #48]	; (8006414 <prvInitialiseTaskLists+0x70>)
 80063e4:	f7fe fcde 	bl	8004da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e8:	480b      	ldr	r0, [pc, #44]	; (8006418 <prvInitialiseTaskLists+0x74>)
 80063ea:	f7fe fcdb 	bl	8004da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvInitialiseTaskLists+0x78>)
 80063f0:	4a05      	ldr	r2, [pc, #20]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvInitialiseTaskLists+0x7c>)
 80063f6:	4a05      	ldr	r2, [pc, #20]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000b04 	.word	0x20000b04
 8006408:	20000f64 	.word	0x20000f64
 800640c:	20000f78 	.word	0x20000f78
 8006410:	20000f94 	.word	0x20000f94
 8006414:	20000fa8 	.word	0x20000fa8
 8006418:	20000fc0 	.word	0x20000fc0
 800641c:	20000f8c 	.word	0x20000f8c
 8006420:	20000f90 	.word	0x20000f90

08006424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642a:	e019      	b.n	8006460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800642c:	f000 fdd2 	bl	8006fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006430:	4b10      	ldr	r3, [pc, #64]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fd3b 	bl	8004eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 800644a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <prvCheckTasksWaitingTermination+0x58>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	4a0a      	ldr	r2, [pc, #40]	; (800647c <prvCheckTasksWaitingTermination+0x58>)
 8006454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006456:	f000 fded 	bl	8007034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f810 	bl	8006480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <prvCheckTasksWaitingTermination+0x58>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e1      	bne.n	800642c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000fa8 	.word	0x20000fa8
 8006478:	20000fd4 	.word	0x20000fd4
 800647c:	20000fbc 	.word	0x20000fbc

08006480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800648e:	2b00      	cmp	r3, #0
 8006490:	d108      	bne.n	80064a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	4618      	mov	r0, r3
 8006498:	f000 ff8a 	bl	80073b0 <vPortFree>
				vPortFree( pxTCB );
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff87 	bl	80073b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064a2:	e018      	b.n	80064d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d103      	bne.n	80064b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 ff7e 	bl	80073b0 <vPortFree>
	}
 80064b4:	e00f      	b.n	80064d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d00a      	beq.n	80064d6 <prvDeleteTCB+0x56>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60fb      	str	r3, [r7, #12]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <prvDeleteTCB+0x54>
	}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e6:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <prvResetNextTaskUnblockTime+0x38>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <prvResetNextTaskUnblockTime+0x3c>)
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064f8:	e008      	b.n	800650c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fa:	4b07      	ldr	r3, [pc, #28]	; (8006518 <prvResetNextTaskUnblockTime+0x38>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <prvResetNextTaskUnblockTime+0x3c>)
 800650a:	6013      	str	r3, [r2, #0]
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000f8c 	.word	0x20000f8c
 800651c:	20000ff4 	.word	0x20000ff4

08006520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <xTaskGetSchedulerState+0x34>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800652e:	2301      	movs	r3, #1
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	e008      	b.n	8006546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <xTaskGetSchedulerState+0x38>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800653c:	2302      	movs	r3, #2
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e001      	b.n	8006546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006546:	687b      	ldr	r3, [r7, #4]
	}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000fe0 	.word	0x20000fe0
 8006558:	20000ffc 	.word	0x20000ffc

0800655c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d056      	beq.n	8006620 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <xTaskPriorityDisinherit+0xd0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	429a      	cmp	r2, r3
 800657a:	d00a      	beq.n	8006592 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60fb      	str	r3, [r7, #12]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60bb      	str	r3, [r7, #8]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d02c      	beq.n	8006620 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d128      	bne.n	8006620 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fc70 	bl	8004eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <xTaskPriorityDisinherit+0xd4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <xTaskPriorityDisinherit+0xa4>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <xTaskPriorityDisinherit+0xd4>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a09      	ldr	r2, [pc, #36]	; (8006634 <xTaskPriorityDisinherit+0xd8>)
 800660e:	441a      	add	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe fbf1 	bl	8004dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006620:	697b      	ldr	r3, [r7, #20]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000b00 	.word	0x20000b00
 8006630:	20000fdc 	.word	0x20000fdc
 8006634:	20000b04 	.word	0x20000b04

08006638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006642:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006648:	4b20      	ldr	r3, [pc, #128]	; (80066cc <prvAddCurrentTaskToDelayedList+0x94>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fc32 	bl	8004eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d10a      	bne.n	8006672 <prvAddCurrentTaskToDelayedList+0x3a>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006662:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4819      	ldr	r0, [pc, #100]	; (80066d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800666c:	f7fe fbc7 	bl	8004dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006670:	e026      	b.n	80066c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <prvAddCurrentTaskToDelayedList+0x94>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	429a      	cmp	r2, r3
 8006688:	d209      	bcs.n	800669e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fbd5 	bl	8004e46 <vListInsert>
}
 800669c:	e010      	b.n	80066c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669e:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prvAddCurrentTaskToDelayedList+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe fbcb 	bl	8004e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d202      	bcs.n	80066c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000fd8 	.word	0x20000fd8
 80066cc:	20000b00 	.word	0x20000b00
 80066d0:	20000fc0 	.word	0x20000fc0
 80066d4:	20000f90 	.word	0x20000f90
 80066d8:	20000f8c 	.word	0x20000f8c
 80066dc:	20000ff4 	.word	0x20000ff4

080066e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	; 0x28
 80066e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066ea:	f000 fb07 	bl	8006cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066ee:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <xTimerCreateTimerTask+0x80>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d021      	beq.n	800673a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066fe:	1d3a      	adds	r2, r7, #4
 8006700:	f107 0108 	add.w	r1, r7, #8
 8006704:	f107 030c 	add.w	r3, r7, #12
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fb31 	bl	8004d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	9202      	str	r2, [sp, #8]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	2302      	movs	r3, #2
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	460a      	mov	r2, r1
 8006720:	4910      	ldr	r1, [pc, #64]	; (8006764 <xTimerCreateTimerTask+0x84>)
 8006722:	4811      	ldr	r0, [pc, #68]	; (8006768 <xTimerCreateTimerTask+0x88>)
 8006724:	f7ff f8de 	bl	80058e4 <xTaskCreateStatic>
 8006728:	4603      	mov	r3, r0
 800672a:	4a10      	ldr	r2, [pc, #64]	; (800676c <xTimerCreateTimerTask+0x8c>)
 800672c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <xTimerCreateTimerTask+0x8c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006736:	2301      	movs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	613b      	str	r3, [r7, #16]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20001030 	.word	0x20001030
 8006764:	0800a1e0 	.word	0x0800a1e0
 8006768:	080068a5 	.word	0x080068a5
 800676c:	20001034 	.word	0x20001034

08006770 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	623b      	str	r3, [r7, #32]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <xTimerGenericCommand+0x98>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d02a      	beq.n	80067fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	dc18      	bgt.n	80067ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067b8:	f7ff feb2 	bl	8006520 <xTaskGetSchedulerState>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d109      	bne.n	80067d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <xTimerGenericCommand+0x98>)
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	f107 0110 	add.w	r1, r7, #16
 80067ca:	2300      	movs	r3, #0
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	f7fe fca1 	bl	8005114 <xQueueGenericSend>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24
 80067d4:	e012      	b.n	80067fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <xTimerGenericCommand+0x98>)
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	f107 0110 	add.w	r1, r7, #16
 80067de:	2300      	movs	r3, #0
 80067e0:	2200      	movs	r2, #0
 80067e2:	f7fe fc97 	bl	8005114 <xQueueGenericSend>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24
 80067e8:	e008      	b.n	80067fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <xTimerGenericCommand+0x98>)
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f107 0110 	add.w	r1, r7, #16
 80067f2:	2300      	movs	r3, #0
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	f7fe fd8b 	bl	8005310 <xQueueGenericSendFromISR>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20001030 	.word	0x20001030

0800680c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <prvProcessExpiredTimer+0x94>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3304      	adds	r3, #4
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fb47 	bl	8004eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d022      	beq.n	800687e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	18d1      	adds	r1, r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	6978      	ldr	r0, [r7, #20]
 8006846:	f000 f8d1 	bl	80069ec <prvInsertTimerInActiveList>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	2100      	movs	r1, #0
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f7ff ff88 	bl	8006770 <xTimerGenericCommand>
 8006860:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d113      	bne.n	8006890 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	60fb      	str	r3, [r7, #12]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	6978      	ldr	r0, [r7, #20]
 8006896:	4798      	blx	r3
}
 8006898:	bf00      	nop
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20001028 	.word	0x20001028

080068a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ac:	f107 0308 	add.w	r3, r7, #8
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 f857 	bl	8006964 <prvGetNextExpireTime>
 80068b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f803 	bl	80068c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068c2:	f000 f8d5 	bl	8006a70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068c6:	e7f1      	b.n	80068ac <prvTimerTask+0x8>

080068c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068d2:	f7ff fa43 	bl	8005d5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 f866 	bl	80069ac <prvSampleTimeNow>
 80068e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d130      	bne.n	800694a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <prvProcessTimerOrBlockTask+0x3c>
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d806      	bhi.n	8006904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068f6:	f7ff fa3f 	bl	8005d78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff ff85 	bl	800680c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006902:	e024      	b.n	800694e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <prvProcessTimerOrBlockTask+0x90>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <prvProcessTimerOrBlockTask+0x50>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <prvProcessTimerOrBlockTask+0x52>
 8006918:	2300      	movs	r3, #0
 800691a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <prvProcessTimerOrBlockTask+0x94>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	4619      	mov	r1, r3
 800692a:	f7fe ffa7 	bl	800587c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800692e:	f7ff fa23 	bl	8005d78 <xTaskResumeAll>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <prvProcessTimerOrBlockTask+0x98>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
}
 8006948:	e001      	b.n	800694e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800694a:	f7ff fa15 	bl	8005d78 <xTaskResumeAll>
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	2000102c 	.word	0x2000102c
 800695c:	20001030 	.word	0x20001030
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <prvGetNextExpireTime+0x44>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <prvGetNextExpireTime+0x16>
 8006976:	2201      	movs	r2, #1
 8006978:	e000      	b.n	800697c <prvGetNextExpireTime+0x18>
 800697a:	2200      	movs	r2, #0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <prvGetNextExpireTime+0x44>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	e001      	b.n	8006998 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20001028 	.word	0x20001028

080069ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069b4:	f7ff fa7e 	bl	8005eb4 <xTaskGetTickCount>
 80069b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <prvSampleTimeNow+0x3c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d205      	bcs.n	80069d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069c4:	f000 f936 	bl	8006c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e002      	b.n	80069d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069d6:	4a04      	ldr	r2, [pc, #16]	; (80069e8 <prvSampleTimeNow+0x3c>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069dc:	68fb      	ldr	r3, [r7, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20001038 	.word	0x20001038

080069ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d812      	bhi.n	8006a38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e01b      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <prvInsertTimerInActiveList+0x7c>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe fa08 	bl	8004e46 <vListInsert>
 8006a36:	e012      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d206      	bcs.n	8006a4e <prvInsertTimerInActiveList+0x62>
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e007      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <prvInsertTimerInActiveList+0x80>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7fe f9f4 	bl	8004e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a5e:	697b      	ldr	r3, [r7, #20]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2000102c 	.word	0x2000102c
 8006a6c:	20001028 	.word	0x20001028

08006a70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a76:	e0ca      	b.n	8006c0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da18      	bge.n	8006ab0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	3304      	adds	r3, #4
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	61fb      	str	r3, [r7, #28]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa6:	6850      	ldr	r0, [r2, #4]
 8006aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aaa:	6892      	ldr	r2, [r2, #8]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f2c0 80aa 	blt.w	8006c0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f9f5 	bl	8004eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff ff6b 	bl	80069ac <prvSampleTimeNow>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	f200 8097 	bhi.w	8006c0e <prvProcessReceivedCommands+0x19e>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <prvProcessReceivedCommands+0x78>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006b85 	.word	0x08006b85
 8006af8:	08006b99 	.word	0x08006b99
 8006afc:	08006be3 	.word	0x08006be3
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b11 	.word	0x08006b11
 8006b08:	08006b85 	.word	0x08006b85
 8006b0c:	08006b99 	.word	0x08006b99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	18d1      	adds	r1, r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b30:	f7ff ff5c 	bl	80069ec <prvInsertTimerInActiveList>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d069      	beq.n	8006c0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05e      	beq.n	8006c0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	441a      	add	r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b62:	f7ff fe05 	bl	8006770 <xTimerGenericCommand>
 8006b66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d14f      	bne.n	8006c0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61bb      	str	r3, [r7, #24]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b96:	e03a      	b.n	8006c0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	617b      	str	r3, [r7, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	18d1      	adds	r1, r2, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bdc:	f7ff ff06 	bl	80069ec <prvInsertTimerInActiveList>
					break;
 8006be0:	e015      	b.n	8006c0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf2:	f000 fbdd 	bl	80073b0 <vPortFree>
 8006bf6:	e00a      	b.n	8006c0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfe:	f023 0301 	bic.w	r3, r3, #1
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c0a:	e000      	b.n	8006c0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <prvProcessReceivedCommands+0x1c0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	1d39      	adds	r1, r7, #4
 8006c14:	2200      	movs	r2, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc16 	bl	8005448 <xQueueReceive>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af2a 	bne.w	8006a78 <prvProcessReceivedCommands+0x8>
	}
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	3730      	adds	r7, #48	; 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20001030 	.word	0x20001030

08006c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c3a:	e048      	b.n	8006cce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c3c:	4b2d      	ldr	r3, [pc, #180]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe f92f 	bl	8004eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02e      	beq.n	8006cce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d90e      	bls.n	8006ca0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c8e:	4b19      	ldr	r3, [pc, #100]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7fe f8d4 	bl	8004e46 <vListInsert>
 8006c9e:	e016      	b.n	8006cce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fd60 	bl	8006770 <xTimerGenericCommand>
 8006cb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	603b      	str	r3, [r7, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1b1      	bne.n	8006c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20001028 	.word	0x20001028
 8006cf8:	2000102c 	.word	0x2000102c

08006cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d02:	f000 f967 	bl	8006fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d06:	4b15      	ldr	r3, [pc, #84]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d120      	bne.n	8006d50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d0e:	4814      	ldr	r0, [pc, #80]	; (8006d60 <prvCheckForValidListAndQueue+0x64>)
 8006d10:	f7fe f848 	bl	8004da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d14:	4813      	ldr	r0, [pc, #76]	; (8006d64 <prvCheckForValidListAndQueue+0x68>)
 8006d16:	f7fe f845 	bl	8004da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <prvCheckForValidListAndQueue+0x6c>)
 8006d1c:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <prvCheckForValidListAndQueue+0x64>)
 8006d1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d20:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <prvCheckForValidListAndQueue+0x70>)
 8006d22:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <prvCheckForValidListAndQueue+0x68>)
 8006d24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d26:	2300      	movs	r3, #0
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <prvCheckForValidListAndQueue+0x74>)
 8006d2c:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <prvCheckForValidListAndQueue+0x78>)
 8006d2e:	2110      	movs	r1, #16
 8006d30:	200a      	movs	r0, #10
 8006d32:	f7fe f953 	bl	8004fdc <xQueueGenericCreateStatic>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	490b      	ldr	r1, [pc, #44]	; (8006d78 <prvCheckForValidListAndQueue+0x7c>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fd6c 	bl	8005828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d50:	f000 f970 	bl	8007034 <vPortExitCritical>
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20001030 	.word	0x20001030
 8006d60:	20001000 	.word	0x20001000
 8006d64:	20001014 	.word	0x20001014
 8006d68:	20001028 	.word	0x20001028
 8006d6c:	2000102c 	.word	0x2000102c
 8006d70:	200010dc 	.word	0x200010dc
 8006d74:	2000103c 	.word	0x2000103c
 8006d78:	0800a1e8 	.word	0x0800a1e8

08006d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3b04      	subs	r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f023 0201 	bic.w	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3b04      	subs	r3, #4
 8006daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dac:	4a0c      	ldr	r2, [pc, #48]	; (8006de0 <pxPortInitialiseStack+0x64>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3b14      	subs	r3, #20
 8006db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f06f 0202 	mvn.w	r2, #2
 8006dca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3b20      	subs	r3, #32
 8006dd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	08006de5 	.word	0x08006de5

08006de4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <prvTaskExitError+0x54>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	d00a      	beq.n	8006e0e <prvTaskExitError+0x2a>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	60fb      	str	r3, [r7, #12]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <prvTaskExitError+0x28>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
}
 8006e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e22:	bf00      	nop
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0fc      	beq.n	8006e24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	2000000c 	.word	0x2000000c
 8006e3c:	00000000 	.word	0x00000000

08006e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <pxCurrentTCBConst2>)
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f380 8809 	msr	PSP, r0
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	4770      	bx	lr
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst2>:
 8006e60:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e68:	4808      	ldr	r0, [pc, #32]	; (8006e8c <prvPortStartFirstTask+0x24>)
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f380 8808 	msr	MSP, r0
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8814 	msr	CONTROL, r0
 8006e7a:	b662      	cpsie	i
 8006e7c:	b661      	cpsie	f
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	df00      	svc	0
 8006e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e8a:	bf00      	nop
 8006e8c:	e000ed08 	.word	0xe000ed08

08006e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e96:	4b46      	ldr	r3, [pc, #280]	; (8006fb0 <xPortStartScheduler+0x120>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a46      	ldr	r2, [pc, #280]	; (8006fb4 <xPortStartScheduler+0x124>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10a      	bne.n	8006eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eb6:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <xPortStartScheduler+0x120>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3f      	ldr	r2, [pc, #252]	; (8006fb8 <xPortStartScheduler+0x128>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d10a      	bne.n	8006ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	4b31      	ldr	r3, [pc, #196]	; (8006fc0 <xPortStartScheduler+0x130>)
 8006efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f04:	e009      	b.n	8006f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f06:	4b2f      	ldr	r3, [pc, #188]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	4a2d      	ldr	r2, [pc, #180]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d0ef      	beq.n	8006f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f26:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1c3 0307 	rsb	r3, r3, #7
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d00a      	beq.n	8006f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60bb      	str	r3, [r7, #8]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f48:	4b1e      	ldr	r3, [pc, #120]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f66:	4b18      	ldr	r3, [pc, #96]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f7e:	f000 f8dd 	bl	800713c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <xPortStartScheduler+0x13c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f88:	f000 f8fc 	bl	8007184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <xPortStartScheduler+0x140>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <xPortStartScheduler+0x140>)
 8006f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f98:	f7ff ff66 	bl	8006e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f9c:	f7ff f854 	bl	8006048 <vTaskSwitchContext>
	prvTaskExitError();
 8006fa0:	f7ff ff20 	bl	8006de4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	e000ed00 	.word	0xe000ed00
 8006fb4:	410fc271 	.word	0x410fc271
 8006fb8:	410fc270 	.word	0x410fc270
 8006fbc:	e000e400 	.word	0xe000e400
 8006fc0:	2000112c 	.word	0x2000112c
 8006fc4:	20001130 	.word	0x20001130
 8006fc8:	e000ed20 	.word	0xe000ed20
 8006fcc:	2000000c 	.word	0x2000000c
 8006fd0:	e000ef34 	.word	0xe000ef34

08006fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	607b      	str	r3, [r7, #4]
}
 8006fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <vPortEnterCritical+0x58>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	4a0d      	ldr	r2, [pc, #52]	; (800702c <vPortEnterCritical+0x58>)
 8006ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <vPortEnterCritical+0x58>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d10f      	bne.n	8007020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <vPortEnterCritical+0x5c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <vPortEnterCritical+0x4c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	603b      	str	r3, [r7, #0]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <vPortEnterCritical+0x4a>
	}
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	2000000c 	.word	0x2000000c
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <vPortExitCritical+0x50>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10a      	bne.n	8007058 <vPortExitCritical+0x24>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	607b      	str	r3, [r7, #4]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <vPortExitCritical+0x50>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3b01      	subs	r3, #1
 800705e:	4a09      	ldr	r2, [pc, #36]	; (8007084 <vPortExitCritical+0x50>)
 8007060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <vPortExitCritical+0x50>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <vPortExitCritical+0x42>
 800706a:	2300      	movs	r3, #0
 800706c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f383 8811 	msr	BASEPRI, r3
}
 8007074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000000c 	.word	0x2000000c
	...

08007090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007090:	f3ef 8009 	mrs	r0, PSP
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <pxCurrentTCBConst>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f01e 0f10 	tst.w	lr, #16
 80070a0:	bf08      	it	eq
 80070a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070b4:	f380 8811 	msr	BASEPRI, r0
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f7fe ffc2 	bl	8006048 <vTaskSwitchContext>
 80070c4:	f04f 0000 	mov.w	r0, #0
 80070c8:	f380 8811 	msr	BASEPRI, r0
 80070cc:	bc09      	pop	{r0, r3}
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	6808      	ldr	r0, [r1, #0]
 80070d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d6:	f01e 0f10 	tst.w	lr, #16
 80070da:	bf08      	it	eq
 80070dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070e0:	f380 8809 	msr	PSP, r0
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst>:
 80070f0:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007112:	f7fe fedf 	bl	8005ed4 <xTaskIncrementTick>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <xPortSysTickHandler+0x40>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f383 8811 	msr	BASEPRI, r3
}
 800712e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <vPortSetupTimerInterrupt+0x38>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <vPortSetupTimerInterrupt+0x3c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <vPortSetupTimerInterrupt+0x40>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <vPortSetupTimerInterrupt+0x44>)
 800715a:	3b01      	subs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800715e:	4b04      	ldr	r3, [pc, #16]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000e010 	.word	0xe000e010
 8007174:	e000e018 	.word	0xe000e018
 8007178:	20000000 	.word	0x20000000
 800717c:	10624dd3 	.word	0x10624dd3
 8007180:	e000e014 	.word	0xe000e014

08007184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007194 <vPortEnableVFP+0x10>
 8007188:	6801      	ldr	r1, [r0, #0]
 800718a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800718e:	6001      	str	r1, [r0, #0]
 8007190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007192:	bf00      	nop
 8007194:	e000ed88 	.word	0xe000ed88

08007198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800719e:	f3ef 8305 	mrs	r3, IPSR
 80071a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d914      	bls.n	80071d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071aa:	4a17      	ldr	r2, [pc, #92]	; (8007208 <vPortValidateInterruptPriority+0x70>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071b4:	4b15      	ldr	r3, [pc, #84]	; (800720c <vPortValidateInterruptPriority+0x74>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	7afa      	ldrb	r2, [r7, #11]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20a      	bcs.n	80071d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <vPortValidateInterruptPriority+0x78>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <vPortValidateInterruptPriority+0x7c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d90a      	bls.n	80071fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	603b      	str	r3, [r7, #0]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <vPortValidateInterruptPriority+0x60>
	}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	e000e3f0 	.word	0xe000e3f0
 800720c:	2000112c 	.word	0x2000112c
 8007210:	e000ed0c 	.word	0xe000ed0c
 8007214:	20001130 	.word	0x20001130

08007218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007224:	f7fe fd9a 	bl	8005d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007228:	4b5b      	ldr	r3, [pc, #364]	; (8007398 <pvPortMalloc+0x180>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007230:	f000 f920 	bl	8007474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007234:	4b59      	ldr	r3, [pc, #356]	; (800739c <pvPortMalloc+0x184>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 8093 	bne.w	8007368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01d      	beq.n	8007284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007248:	2208      	movs	r2, #8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f023 0307 	bic.w	r3, r3, #7
 8007260:	3308      	adds	r3, #8
 8007262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <pvPortMalloc+0x6c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	617b      	str	r3, [r7, #20]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d06e      	beq.n	8007368 <pvPortMalloc+0x150>
 800728a:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <pvPortMalloc+0x188>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d869      	bhi.n	8007368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007294:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <pvPortMalloc+0x18c>)
 8007296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007298:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <pvPortMalloc+0x18c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800729e:	e004      	b.n	80072aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <pvPortMalloc+0xa4>
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f1      	bne.n	80072a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <pvPortMalloc+0x180>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d050      	beq.n	8007368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2208      	movs	r2, #8
 80072cc:	4413      	add	r3, r2
 80072ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	2308      	movs	r3, #8
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d91f      	bls.n	8007328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <pvPortMalloc+0xf8>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	613b      	str	r3, [r7, #16]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007322:	69b8      	ldr	r0, [r7, #24]
 8007324:	f000 f908 	bl	8007538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007328:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <pvPortMalloc+0x188>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <pvPortMalloc+0x188>)
 8007334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007336:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <pvPortMalloc+0x188>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <pvPortMalloc+0x190>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d203      	bcs.n	800734a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007342:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <pvPortMalloc+0x188>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <pvPortMalloc+0x190>)
 8007348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <pvPortMalloc+0x184>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	431a      	orrs	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <pvPortMalloc+0x194>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a11      	ldr	r2, [pc, #68]	; (80073ac <pvPortMalloc+0x194>)
 8007366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007368:	f7fe fd06 	bl	8005d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <pvPortMalloc+0x174>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60fb      	str	r3, [r7, #12]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <pvPortMalloc+0x172>
	return pvReturn;
 800738c:	69fb      	ldr	r3, [r7, #28]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3728      	adds	r7, #40	; 0x28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20001cf4 	.word	0x20001cf4
 800739c:	20001d08 	.word	0x20001d08
 80073a0:	20001cf8 	.word	0x20001cf8
 80073a4:	20001cec 	.word	0x20001cec
 80073a8:	20001cfc 	.word	0x20001cfc
 80073ac:	20001d00 	.word	0x20001d00

080073b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04d      	beq.n	800745e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073c2:	2308      	movs	r3, #8
 80073c4:	425b      	negs	r3, r3
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4b24      	ldr	r3, [pc, #144]	; (8007468 <vPortFree+0xb8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4013      	ands	r3, r2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <vPortFree+0x44>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <vPortFree+0x62>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60bb      	str	r3, [r7, #8]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <vPortFree+0xb8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11a      	bne.n	800745e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <vPortFree+0xb8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	43db      	mvns	r3, r3
 8007432:	401a      	ands	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007438:	f7fe fc90 	bl	8005d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <vPortFree+0xbc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4413      	add	r3, r2
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <vPortFree+0xbc>)
 8007448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f000 f874 	bl	8007538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <vPortFree+0xc0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a06      	ldr	r2, [pc, #24]	; (8007470 <vPortFree+0xc0>)
 8007458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800745a:	f7fe fc8d 	bl	8005d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20001d08 	.word	0x20001d08
 800746c:	20001cf8 	.word	0x20001cf8
 8007470:	20001d04 	.word	0x20001d04

08007474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800747a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800747e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <prvHeapInit+0xac>)
 8007482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3307      	adds	r3, #7
 8007492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <prvHeapInit+0xac>)
 80074a4:	4413      	add	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <prvHeapInit+0xb0>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <prvHeapInit+0xb0>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074c0:	2208      	movs	r2, #8
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvHeapInit+0xb4>)
 80074d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <prvHeapInit+0xb4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <prvHeapInit+0xb4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <prvHeapInit+0xb4>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <prvHeapInit+0xb8>)
 8007502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <prvHeapInit+0xbc>)
 800750a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <prvHeapInit+0xc0>)
 800750e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20001134 	.word	0x20001134
 8007524:	20001cec 	.word	0x20001cec
 8007528:	20001cf4 	.word	0x20001cf4
 800752c:	20001cfc 	.word	0x20001cfc
 8007530:	20001cf8 	.word	0x20001cf8
 8007534:	20001d08 	.word	0x20001d08

08007538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <prvInsertBlockIntoFreeList+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e002      	b.n	800754c <prvInsertBlockIntoFreeList+0x14>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d8f7      	bhi.n	8007546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d108      	bne.n	800757a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d118      	bne.n	80075c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d00d      	beq.n	80075b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	441a      	add	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e008      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e003      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d002      	beq.n	80075d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20001cec 	.word	0x20001cec
 80075e8:	20001cf4 	.word	0x20001cf4

080075ec <__errno>:
 80075ec:	4b01      	ldr	r3, [pc, #4]	; (80075f4 <__errno+0x8>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000010 	.word	0x20000010

080075f8 <__libc_init_array>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4d0d      	ldr	r5, [pc, #52]	; (8007630 <__libc_init_array+0x38>)
 80075fc:	4c0d      	ldr	r4, [pc, #52]	; (8007634 <__libc_init_array+0x3c>)
 80075fe:	1b64      	subs	r4, r4, r5
 8007600:	10a4      	asrs	r4, r4, #2
 8007602:	2600      	movs	r6, #0
 8007604:	42a6      	cmp	r6, r4
 8007606:	d109      	bne.n	800761c <__libc_init_array+0x24>
 8007608:	4d0b      	ldr	r5, [pc, #44]	; (8007638 <__libc_init_array+0x40>)
 800760a:	4c0c      	ldr	r4, [pc, #48]	; (800763c <__libc_init_array+0x44>)
 800760c:	f002 fdac 	bl	800a168 <_init>
 8007610:	1b64      	subs	r4, r4, r5
 8007612:	10a4      	asrs	r4, r4, #2
 8007614:	2600      	movs	r6, #0
 8007616:	42a6      	cmp	r6, r4
 8007618:	d105      	bne.n	8007626 <__libc_init_array+0x2e>
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007620:	4798      	blx	r3
 8007622:	3601      	adds	r6, #1
 8007624:	e7ee      	b.n	8007604 <__libc_init_array+0xc>
 8007626:	f855 3b04 	ldr.w	r3, [r5], #4
 800762a:	4798      	blx	r3
 800762c:	3601      	adds	r6, #1
 800762e:	e7f2      	b.n	8007616 <__libc_init_array+0x1e>
 8007630:	0800a63c 	.word	0x0800a63c
 8007634:	0800a63c 	.word	0x0800a63c
 8007638:	0800a63c 	.word	0x0800a63c
 800763c:	0800a640 	.word	0x0800a640

08007640 <memcpy>:
 8007640:	440a      	add	r2, r1
 8007642:	4291      	cmp	r1, r2
 8007644:	f100 33ff 	add.w	r3, r0, #4294967295
 8007648:	d100      	bne.n	800764c <memcpy+0xc>
 800764a:	4770      	bx	lr
 800764c:	b510      	push	{r4, lr}
 800764e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007656:	4291      	cmp	r1, r2
 8007658:	d1f9      	bne.n	800764e <memcpy+0xe>
 800765a:	bd10      	pop	{r4, pc}

0800765c <memset>:
 800765c:	4402      	add	r2, r0
 800765e:	4603      	mov	r3, r0
 8007660:	4293      	cmp	r3, r2
 8007662:	d100      	bne.n	8007666 <memset+0xa>
 8007664:	4770      	bx	lr
 8007666:	f803 1b01 	strb.w	r1, [r3], #1
 800766a:	e7f9      	b.n	8007660 <memset+0x4>

0800766c <__cvt>:
 800766c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	ec55 4b10 	vmov	r4, r5, d0
 8007674:	2d00      	cmp	r5, #0
 8007676:	460e      	mov	r6, r1
 8007678:	4619      	mov	r1, r3
 800767a:	462b      	mov	r3, r5
 800767c:	bfbb      	ittet	lt
 800767e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007682:	461d      	movlt	r5, r3
 8007684:	2300      	movge	r3, #0
 8007686:	232d      	movlt	r3, #45	; 0x2d
 8007688:	700b      	strb	r3, [r1, #0]
 800768a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007690:	4691      	mov	r9, r2
 8007692:	f023 0820 	bic.w	r8, r3, #32
 8007696:	bfbc      	itt	lt
 8007698:	4622      	movlt	r2, r4
 800769a:	4614      	movlt	r4, r2
 800769c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076a0:	d005      	beq.n	80076ae <__cvt+0x42>
 80076a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076a6:	d100      	bne.n	80076aa <__cvt+0x3e>
 80076a8:	3601      	adds	r6, #1
 80076aa:	2102      	movs	r1, #2
 80076ac:	e000      	b.n	80076b0 <__cvt+0x44>
 80076ae:	2103      	movs	r1, #3
 80076b0:	ab03      	add	r3, sp, #12
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	ab02      	add	r3, sp, #8
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	ec45 4b10 	vmov	d0, r4, r5
 80076bc:	4653      	mov	r3, sl
 80076be:	4632      	mov	r2, r6
 80076c0:	f000 fe02 	bl	80082c8 <_dtoa_r>
 80076c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076c8:	4607      	mov	r7, r0
 80076ca:	d102      	bne.n	80076d2 <__cvt+0x66>
 80076cc:	f019 0f01 	tst.w	r9, #1
 80076d0:	d022      	beq.n	8007718 <__cvt+0xac>
 80076d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076d6:	eb07 0906 	add.w	r9, r7, r6
 80076da:	d110      	bne.n	80076fe <__cvt+0x92>
 80076dc:	783b      	ldrb	r3, [r7, #0]
 80076de:	2b30      	cmp	r3, #48	; 0x30
 80076e0:	d10a      	bne.n	80076f8 <__cvt+0x8c>
 80076e2:	2200      	movs	r2, #0
 80076e4:	2300      	movs	r3, #0
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f9 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ee:	b918      	cbnz	r0, 80076f8 <__cvt+0x8c>
 80076f0:	f1c6 0601 	rsb	r6, r6, #1
 80076f4:	f8ca 6000 	str.w	r6, [sl]
 80076f8:	f8da 3000 	ldr.w	r3, [sl]
 80076fc:	4499      	add	r9, r3
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	4620      	mov	r0, r4
 8007704:	4629      	mov	r1, r5
 8007706:	f7f9 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800770a:	b108      	cbz	r0, 8007710 <__cvt+0xa4>
 800770c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007710:	2230      	movs	r2, #48	; 0x30
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	454b      	cmp	r3, r9
 8007716:	d307      	bcc.n	8007728 <__cvt+0xbc>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800771c:	1bdb      	subs	r3, r3, r7
 800771e:	4638      	mov	r0, r7
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	b004      	add	sp, #16
 8007724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007728:	1c59      	adds	r1, r3, #1
 800772a:	9103      	str	r1, [sp, #12]
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e7f0      	b.n	8007712 <__cvt+0xa6>

08007730 <__exponent>:
 8007730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007732:	4603      	mov	r3, r0
 8007734:	2900      	cmp	r1, #0
 8007736:	bfb8      	it	lt
 8007738:	4249      	neglt	r1, r1
 800773a:	f803 2b02 	strb.w	r2, [r3], #2
 800773e:	bfb4      	ite	lt
 8007740:	222d      	movlt	r2, #45	; 0x2d
 8007742:	222b      	movge	r2, #43	; 0x2b
 8007744:	2909      	cmp	r1, #9
 8007746:	7042      	strb	r2, [r0, #1]
 8007748:	dd2a      	ble.n	80077a0 <__exponent+0x70>
 800774a:	f10d 0407 	add.w	r4, sp, #7
 800774e:	46a4      	mov	ip, r4
 8007750:	270a      	movs	r7, #10
 8007752:	46a6      	mov	lr, r4
 8007754:	460a      	mov	r2, r1
 8007756:	fb91 f6f7 	sdiv	r6, r1, r7
 800775a:	fb07 1516 	mls	r5, r7, r6, r1
 800775e:	3530      	adds	r5, #48	; 0x30
 8007760:	2a63      	cmp	r2, #99	; 0x63
 8007762:	f104 34ff 	add.w	r4, r4, #4294967295
 8007766:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800776a:	4631      	mov	r1, r6
 800776c:	dcf1      	bgt.n	8007752 <__exponent+0x22>
 800776e:	3130      	adds	r1, #48	; 0x30
 8007770:	f1ae 0502 	sub.w	r5, lr, #2
 8007774:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007778:	1c44      	adds	r4, r0, #1
 800777a:	4629      	mov	r1, r5
 800777c:	4561      	cmp	r1, ip
 800777e:	d30a      	bcc.n	8007796 <__exponent+0x66>
 8007780:	f10d 0209 	add.w	r2, sp, #9
 8007784:	eba2 020e 	sub.w	r2, r2, lr
 8007788:	4565      	cmp	r5, ip
 800778a:	bf88      	it	hi
 800778c:	2200      	movhi	r2, #0
 800778e:	4413      	add	r3, r2
 8007790:	1a18      	subs	r0, r3, r0
 8007792:	b003      	add	sp, #12
 8007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800779a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800779e:	e7ed      	b.n	800777c <__exponent+0x4c>
 80077a0:	2330      	movs	r3, #48	; 0x30
 80077a2:	3130      	adds	r1, #48	; 0x30
 80077a4:	7083      	strb	r3, [r0, #2]
 80077a6:	70c1      	strb	r1, [r0, #3]
 80077a8:	1d03      	adds	r3, r0, #4
 80077aa:	e7f1      	b.n	8007790 <__exponent+0x60>

080077ac <_printf_float>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	ed2d 8b02 	vpush	{d8}
 80077b4:	b08d      	sub	sp, #52	; 0x34
 80077b6:	460c      	mov	r4, r1
 80077b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077bc:	4616      	mov	r6, r2
 80077be:	461f      	mov	r7, r3
 80077c0:	4605      	mov	r5, r0
 80077c2:	f001 fd27 	bl	8009214 <_localeconv_r>
 80077c6:	f8d0 a000 	ldr.w	sl, [r0]
 80077ca:	4650      	mov	r0, sl
 80077cc:	f7f8 fd00 	bl	80001d0 <strlen>
 80077d0:	2300      	movs	r3, #0
 80077d2:	930a      	str	r3, [sp, #40]	; 0x28
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	f8d8 3000 	ldr.w	r3, [r8]
 80077dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077e0:	3307      	adds	r3, #7
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	f103 0208 	add.w	r2, r3, #8
 80077ea:	f8c8 2000 	str.w	r2, [r8]
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	f8cd 8018 	str.w	r8, [sp, #24]
 8007804:	ee08 0a10 	vmov	s16, r0
 8007808:	4b9f      	ldr	r3, [pc, #636]	; (8007a88 <_printf_float+0x2dc>)
 800780a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800780e:	f04f 32ff 	mov.w	r2, #4294967295
 8007812:	f7f9 f98b 	bl	8000b2c <__aeabi_dcmpun>
 8007816:	bb88      	cbnz	r0, 800787c <_printf_float+0xd0>
 8007818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800781c:	4b9a      	ldr	r3, [pc, #616]	; (8007a88 <_printf_float+0x2dc>)
 800781e:	f04f 32ff 	mov.w	r2, #4294967295
 8007822:	f7f9 f965 	bl	8000af0 <__aeabi_dcmple>
 8007826:	bb48      	cbnz	r0, 800787c <_printf_float+0xd0>
 8007828:	2200      	movs	r2, #0
 800782a:	2300      	movs	r3, #0
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f9 f954 	bl	8000adc <__aeabi_dcmplt>
 8007834:	b110      	cbz	r0, 800783c <_printf_float+0x90>
 8007836:	232d      	movs	r3, #45	; 0x2d
 8007838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800783c:	4b93      	ldr	r3, [pc, #588]	; (8007a8c <_printf_float+0x2e0>)
 800783e:	4894      	ldr	r0, [pc, #592]	; (8007a90 <_printf_float+0x2e4>)
 8007840:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007844:	bf94      	ite	ls
 8007846:	4698      	movls	r8, r3
 8007848:	4680      	movhi	r8, r0
 800784a:	2303      	movs	r3, #3
 800784c:	6123      	str	r3, [r4, #16]
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	f023 0204 	bic.w	r2, r3, #4
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	9700      	str	r7, [sp, #0]
 800785c:	4633      	mov	r3, r6
 800785e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007860:	4621      	mov	r1, r4
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f9d8 	bl	8007c18 <_printf_common>
 8007868:	3001      	adds	r0, #1
 800786a:	f040 8090 	bne.w	800798e <_printf_float+0x1e2>
 800786e:	f04f 30ff 	mov.w	r0, #4294967295
 8007872:	b00d      	add	sp, #52	; 0x34
 8007874:	ecbd 8b02 	vpop	{d8}
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	f7f9 f952 	bl	8000b2c <__aeabi_dcmpun>
 8007888:	b140      	cbz	r0, 800789c <_printf_float+0xf0>
 800788a:	464b      	mov	r3, r9
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfbc      	itt	lt
 8007890:	232d      	movlt	r3, #45	; 0x2d
 8007892:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007896:	487f      	ldr	r0, [pc, #508]	; (8007a94 <_printf_float+0x2e8>)
 8007898:	4b7f      	ldr	r3, [pc, #508]	; (8007a98 <_printf_float+0x2ec>)
 800789a:	e7d1      	b.n	8007840 <_printf_float+0x94>
 800789c:	6863      	ldr	r3, [r4, #4]
 800789e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078a2:	9206      	str	r2, [sp, #24]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	d13f      	bne.n	8007928 <_printf_float+0x17c>
 80078a8:	2306      	movs	r3, #6
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	9b05      	ldr	r3, [sp, #20]
 80078ae:	6861      	ldr	r1, [r4, #4]
 80078b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078b4:	2300      	movs	r3, #0
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	ab0a      	add	r3, sp, #40	; 0x28
 80078ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078be:	ab09      	add	r3, sp, #36	; 0x24
 80078c0:	ec49 8b10 	vmov	d0, r8, r9
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	6022      	str	r2, [r4, #0]
 80078c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078cc:	4628      	mov	r0, r5
 80078ce:	f7ff fecd 	bl	800766c <__cvt>
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078d6:	2b47      	cmp	r3, #71	; 0x47
 80078d8:	4680      	mov	r8, r0
 80078da:	d108      	bne.n	80078ee <_printf_float+0x142>
 80078dc:	1cc8      	adds	r0, r1, #3
 80078de:	db02      	blt.n	80078e6 <_printf_float+0x13a>
 80078e0:	6863      	ldr	r3, [r4, #4]
 80078e2:	4299      	cmp	r1, r3
 80078e4:	dd41      	ble.n	800796a <_printf_float+0x1be>
 80078e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80078ea:	fa5f fb8b 	uxtb.w	fp, fp
 80078ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078f2:	d820      	bhi.n	8007936 <_printf_float+0x18a>
 80078f4:	3901      	subs	r1, #1
 80078f6:	465a      	mov	r2, fp
 80078f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078fc:	9109      	str	r1, [sp, #36]	; 0x24
 80078fe:	f7ff ff17 	bl	8007730 <__exponent>
 8007902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007904:	1813      	adds	r3, r2, r0
 8007906:	2a01      	cmp	r2, #1
 8007908:	4681      	mov	r9, r0
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	dc02      	bgt.n	8007914 <_printf_float+0x168>
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	07d2      	lsls	r2, r2, #31
 8007912:	d501      	bpl.n	8007918 <_printf_float+0x16c>
 8007914:	3301      	adds	r3, #1
 8007916:	6123      	str	r3, [r4, #16]
 8007918:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800791c:	2b00      	cmp	r3, #0
 800791e:	d09c      	beq.n	800785a <_printf_float+0xae>
 8007920:	232d      	movs	r3, #45	; 0x2d
 8007922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007926:	e798      	b.n	800785a <_printf_float+0xae>
 8007928:	9a06      	ldr	r2, [sp, #24]
 800792a:	2a47      	cmp	r2, #71	; 0x47
 800792c:	d1be      	bne.n	80078ac <_printf_float+0x100>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1bc      	bne.n	80078ac <_printf_float+0x100>
 8007932:	2301      	movs	r3, #1
 8007934:	e7b9      	b.n	80078aa <_printf_float+0xfe>
 8007936:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800793a:	d118      	bne.n	800796e <_printf_float+0x1c2>
 800793c:	2900      	cmp	r1, #0
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	dd0b      	ble.n	800795a <_printf_float+0x1ae>
 8007942:	6121      	str	r1, [r4, #16]
 8007944:	b913      	cbnz	r3, 800794c <_printf_float+0x1a0>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	07d0      	lsls	r0, r2, #31
 800794a:	d502      	bpl.n	8007952 <_printf_float+0x1a6>
 800794c:	3301      	adds	r3, #1
 800794e:	440b      	add	r3, r1
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	65a1      	str	r1, [r4, #88]	; 0x58
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	e7de      	b.n	8007918 <_printf_float+0x16c>
 800795a:	b913      	cbnz	r3, 8007962 <_printf_float+0x1b6>
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	07d2      	lsls	r2, r2, #31
 8007960:	d501      	bpl.n	8007966 <_printf_float+0x1ba>
 8007962:	3302      	adds	r3, #2
 8007964:	e7f4      	b.n	8007950 <_printf_float+0x1a4>
 8007966:	2301      	movs	r3, #1
 8007968:	e7f2      	b.n	8007950 <_printf_float+0x1a4>
 800796a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	4299      	cmp	r1, r3
 8007972:	db05      	blt.n	8007980 <_printf_float+0x1d4>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	6121      	str	r1, [r4, #16]
 8007978:	07d8      	lsls	r0, r3, #31
 800797a:	d5ea      	bpl.n	8007952 <_printf_float+0x1a6>
 800797c:	1c4b      	adds	r3, r1, #1
 800797e:	e7e7      	b.n	8007950 <_printf_float+0x1a4>
 8007980:	2900      	cmp	r1, #0
 8007982:	bfd4      	ite	le
 8007984:	f1c1 0202 	rsble	r2, r1, #2
 8007988:	2201      	movgt	r2, #1
 800798a:	4413      	add	r3, r2
 800798c:	e7e0      	b.n	8007950 <_printf_float+0x1a4>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	055a      	lsls	r2, r3, #21
 8007992:	d407      	bmi.n	80079a4 <_printf_float+0x1f8>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	4642      	mov	r2, r8
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	d12c      	bne.n	80079fc <_printf_float+0x250>
 80079a2:	e764      	b.n	800786e <_printf_float+0xc2>
 80079a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079a8:	f240 80e0 	bls.w	8007b6c <_printf_float+0x3c0>
 80079ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079b0:	2200      	movs	r2, #0
 80079b2:	2300      	movs	r3, #0
 80079b4:	f7f9 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d034      	beq.n	8007a26 <_printf_float+0x27a>
 80079bc:	4a37      	ldr	r2, [pc, #220]	; (8007a9c <_printf_float+0x2f0>)
 80079be:	2301      	movs	r3, #1
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f af51 	beq.w	800786e <_printf_float+0xc2>
 80079cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d0:	429a      	cmp	r2, r3
 80079d2:	db02      	blt.n	80079da <_printf_float+0x22e>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	07d8      	lsls	r0, r3, #31
 80079d8:	d510      	bpl.n	80079fc <_printf_float+0x250>
 80079da:	ee18 3a10 	vmov	r3, s16
 80079de:	4652      	mov	r2, sl
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f af41 	beq.w	800786e <_printf_float+0xc2>
 80079ec:	f04f 0800 	mov.w	r8, #0
 80079f0:	f104 091a 	add.w	r9, r4, #26
 80079f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4543      	cmp	r3, r8
 80079fa:	dc09      	bgt.n	8007a10 <_printf_float+0x264>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	079b      	lsls	r3, r3, #30
 8007a00:	f100 8105 	bmi.w	8007c0e <_printf_float+0x462>
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a08:	4298      	cmp	r0, r3
 8007a0a:	bfb8      	it	lt
 8007a0c:	4618      	movlt	r0, r3
 8007a0e:	e730      	b.n	8007872 <_printf_float+0xc6>
 8007a10:	2301      	movs	r3, #1
 8007a12:	464a      	mov	r2, r9
 8007a14:	4631      	mov	r1, r6
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f af27 	beq.w	800786e <_printf_float+0xc2>
 8007a20:	f108 0801 	add.w	r8, r8, #1
 8007a24:	e7e6      	b.n	80079f4 <_printf_float+0x248>
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc39      	bgt.n	8007aa0 <_printf_float+0x2f4>
 8007a2c:	4a1b      	ldr	r2, [pc, #108]	; (8007a9c <_printf_float+0x2f0>)
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af19 	beq.w	800786e <_printf_float+0xc2>
 8007a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d102      	bne.n	8007a4a <_printf_float+0x29e>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	07d9      	lsls	r1, r3, #31
 8007a48:	d5d8      	bpl.n	80079fc <_printf_float+0x250>
 8007a4a:	ee18 3a10 	vmov	r3, s16
 8007a4e:	4652      	mov	r2, sl
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af09 	beq.w	800786e <_printf_float+0xc2>
 8007a5c:	f04f 0900 	mov.w	r9, #0
 8007a60:	f104 0a1a 	add.w	sl, r4, #26
 8007a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a66:	425b      	negs	r3, r3
 8007a68:	454b      	cmp	r3, r9
 8007a6a:	dc01      	bgt.n	8007a70 <_printf_float+0x2c4>
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6e:	e792      	b.n	8007996 <_printf_float+0x1ea>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f aef7 	beq.w	800786e <_printf_float+0xc2>
 8007a80:	f109 0901 	add.w	r9, r9, #1
 8007a84:	e7ee      	b.n	8007a64 <_printf_float+0x2b8>
 8007a86:	bf00      	nop
 8007a88:	7fefffff 	.word	0x7fefffff
 8007a8c:	0800a260 	.word	0x0800a260
 8007a90:	0800a264 	.word	0x0800a264
 8007a94:	0800a26c 	.word	0x0800a26c
 8007a98:	0800a268 	.word	0x0800a268
 8007a9c:	0800a270 	.word	0x0800a270
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	bfa8      	it	ge
 8007aa8:	461a      	movge	r2, r3
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	4691      	mov	r9, r2
 8007aae:	dc37      	bgt.n	8007b20 <_printf_float+0x374>
 8007ab0:	f04f 0b00 	mov.w	fp, #0
 8007ab4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ab8:	f104 021a 	add.w	r2, r4, #26
 8007abc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007abe:	9305      	str	r3, [sp, #20]
 8007ac0:	eba3 0309 	sub.w	r3, r3, r9
 8007ac4:	455b      	cmp	r3, fp
 8007ac6:	dc33      	bgt.n	8007b30 <_printf_float+0x384>
 8007ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007acc:	429a      	cmp	r2, r3
 8007ace:	db3b      	blt.n	8007b48 <_printf_float+0x39c>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07da      	lsls	r2, r3, #31
 8007ad4:	d438      	bmi.n	8007b48 <_printf_float+0x39c>
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	9a05      	ldr	r2, [sp, #20]
 8007ada:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007adc:	1a9a      	subs	r2, r3, r2
 8007ade:	eba3 0901 	sub.w	r9, r3, r1
 8007ae2:	4591      	cmp	r9, r2
 8007ae4:	bfa8      	it	ge
 8007ae6:	4691      	movge	r9, r2
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	dc35      	bgt.n	8007b5a <_printf_float+0x3ae>
 8007aee:	f04f 0800 	mov.w	r8, #0
 8007af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af6:	f104 0a1a 	add.w	sl, r4, #26
 8007afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	eba3 0309 	sub.w	r3, r3, r9
 8007b04:	4543      	cmp	r3, r8
 8007b06:	f77f af79 	ble.w	80079fc <_printf_float+0x250>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f aeaa 	beq.w	800786e <_printf_float+0xc2>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	e7ec      	b.n	8007afa <_printf_float+0x34e>
 8007b20:	4613      	mov	r3, r2
 8007b22:	4631      	mov	r1, r6
 8007b24:	4642      	mov	r2, r8
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d1c0      	bne.n	8007ab0 <_printf_float+0x304>
 8007b2e:	e69e      	b.n	800786e <_printf_float+0xc2>
 8007b30:	2301      	movs	r3, #1
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	9205      	str	r2, [sp, #20]
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f43f ae97 	beq.w	800786e <_printf_float+0xc2>
 8007b40:	9a05      	ldr	r2, [sp, #20]
 8007b42:	f10b 0b01 	add.w	fp, fp, #1
 8007b46:	e7b9      	b.n	8007abc <_printf_float+0x310>
 8007b48:	ee18 3a10 	vmov	r3, s16
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1be      	bne.n	8007ad6 <_printf_float+0x32a>
 8007b58:	e689      	b.n	800786e <_printf_float+0xc2>
 8007b5a:	9a05      	ldr	r2, [sp, #20]
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	4442      	add	r2, r8
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	d1c1      	bne.n	8007aee <_printf_float+0x342>
 8007b6a:	e680      	b.n	800786e <_printf_float+0xc2>
 8007b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b6e:	2a01      	cmp	r2, #1
 8007b70:	dc01      	bgt.n	8007b76 <_printf_float+0x3ca>
 8007b72:	07db      	lsls	r3, r3, #31
 8007b74:	d538      	bpl.n	8007be8 <_printf_float+0x43c>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4642      	mov	r2, r8
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f ae74 	beq.w	800786e <_printf_float+0xc2>
 8007b86:	ee18 3a10 	vmov	r3, s16
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f ae6b 	beq.w	800786e <_printf_float+0xc2>
 8007b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f7f8 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba4:	b9d8      	cbnz	r0, 8007bde <_printf_float+0x432>
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	f108 0201 	add.w	r2, r8, #1
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d10e      	bne.n	8007bd6 <_printf_float+0x42a>
 8007bb8:	e659      	b.n	800786e <_printf_float+0xc2>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f ae52 	beq.w	800786e <_printf_float+0xc2>
 8007bca:	f108 0801 	add.w	r8, r8, #1
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	4543      	cmp	r3, r8
 8007bd4:	dcf1      	bgt.n	8007bba <_printf_float+0x40e>
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bdc:	e6dc      	b.n	8007998 <_printf_float+0x1ec>
 8007bde:	f04f 0800 	mov.w	r8, #0
 8007be2:	f104 0a1a 	add.w	sl, r4, #26
 8007be6:	e7f2      	b.n	8007bce <_printf_float+0x422>
 8007be8:	2301      	movs	r3, #1
 8007bea:	4642      	mov	r2, r8
 8007bec:	e7df      	b.n	8007bae <_printf_float+0x402>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	464a      	mov	r2, r9
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f43f ae38 	beq.w	800786e <_printf_float+0xc2>
 8007bfe:	f108 0801 	add.w	r8, r8, #1
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c06:	1a5b      	subs	r3, r3, r1
 8007c08:	4543      	cmp	r3, r8
 8007c0a:	dcf0      	bgt.n	8007bee <_printf_float+0x442>
 8007c0c:	e6fa      	b.n	8007a04 <_printf_float+0x258>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	f104 0919 	add.w	r9, r4, #25
 8007c16:	e7f4      	b.n	8007c02 <_printf_float+0x456>

08007c18 <_printf_common>:
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	4616      	mov	r6, r2
 8007c1e:	4699      	mov	r9, r3
 8007c20:	688a      	ldr	r2, [r1, #8]
 8007c22:	690b      	ldr	r3, [r1, #16]
 8007c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	bfb8      	it	lt
 8007c2c:	4613      	movlt	r3, r2
 8007c2e:	6033      	str	r3, [r6, #0]
 8007c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c34:	4607      	mov	r7, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	b10a      	cbz	r2, 8007c3e <_printf_common+0x26>
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	6033      	str	r3, [r6, #0]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	0699      	lsls	r1, r3, #26
 8007c42:	bf42      	ittt	mi
 8007c44:	6833      	ldrmi	r3, [r6, #0]
 8007c46:	3302      	addmi	r3, #2
 8007c48:	6033      	strmi	r3, [r6, #0]
 8007c4a:	6825      	ldr	r5, [r4, #0]
 8007c4c:	f015 0506 	ands.w	r5, r5, #6
 8007c50:	d106      	bne.n	8007c60 <_printf_common+0x48>
 8007c52:	f104 0a19 	add.w	sl, r4, #25
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	6832      	ldr	r2, [r6, #0]
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	42ab      	cmp	r3, r5
 8007c5e:	dc26      	bgt.n	8007cae <_printf_common+0x96>
 8007c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c64:	1e13      	subs	r3, r2, #0
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	0692      	lsls	r2, r2, #26
 8007c6e:	d42b      	bmi.n	8007cc8 <_printf_common+0xb0>
 8007c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c74:	4649      	mov	r1, r9
 8007c76:	4638      	mov	r0, r7
 8007c78:	47c0      	blx	r8
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d01e      	beq.n	8007cbc <_printf_common+0xa4>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	68e5      	ldr	r5, [r4, #12]
 8007c82:	6832      	ldr	r2, [r6, #0]
 8007c84:	f003 0306 	and.w	r3, r3, #6
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	bf08      	it	eq
 8007c8c:	1aad      	subeq	r5, r5, r2
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	bf0c      	ite	eq
 8007c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c98:	2500      	movne	r5, #0
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bfc4      	itt	gt
 8007c9e:	1a9b      	subgt	r3, r3, r2
 8007ca0:	18ed      	addgt	r5, r5, r3
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	341a      	adds	r4, #26
 8007ca6:	42b5      	cmp	r5, r6
 8007ca8:	d11a      	bne.n	8007ce0 <_printf_common+0xc8>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e008      	b.n	8007cc0 <_printf_common+0xa8>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	47c0      	blx	r8
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d103      	bne.n	8007cc4 <_printf_common+0xac>
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	e7c6      	b.n	8007c56 <_printf_common+0x3e>
 8007cc8:	18e1      	adds	r1, r4, r3
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	2030      	movs	r0, #48	; 0x30
 8007cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd2:	4422      	add	r2, r4
 8007cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cdc:	3302      	adds	r3, #2
 8007cde:	e7c7      	b.n	8007c70 <_printf_common+0x58>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c0      	blx	r8
 8007cea:	3001      	adds	r0, #1
 8007cec:	d0e6      	beq.n	8007cbc <_printf_common+0xa4>
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7d9      	b.n	8007ca6 <_printf_common+0x8e>
	...

08007cf4 <_printf_i>:
 8007cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	7e0f      	ldrb	r7, [r1, #24]
 8007cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cfc:	2f78      	cmp	r7, #120	; 0x78
 8007cfe:	4691      	mov	r9, r2
 8007d00:	4680      	mov	r8, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	469a      	mov	sl, r3
 8007d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d0a:	d807      	bhi.n	8007d1c <_printf_i+0x28>
 8007d0c:	2f62      	cmp	r7, #98	; 0x62
 8007d0e:	d80a      	bhi.n	8007d26 <_printf_i+0x32>
 8007d10:	2f00      	cmp	r7, #0
 8007d12:	f000 80d8 	beq.w	8007ec6 <_printf_i+0x1d2>
 8007d16:	2f58      	cmp	r7, #88	; 0x58
 8007d18:	f000 80a3 	beq.w	8007e62 <_printf_i+0x16e>
 8007d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d24:	e03a      	b.n	8007d9c <_printf_i+0xa8>
 8007d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d2a:	2b15      	cmp	r3, #21
 8007d2c:	d8f6      	bhi.n	8007d1c <_printf_i+0x28>
 8007d2e:	a101      	add	r1, pc, #4	; (adr r1, 8007d34 <_printf_i+0x40>)
 8007d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007d1d 	.word	0x08007d1d
 8007d40:	08007d1d 	.word	0x08007d1d
 8007d44:	08007d1d 	.word	0x08007d1d
 8007d48:	08007d1d 	.word	0x08007d1d
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007d1d 	.word	0x08007d1d
 8007d54:	08007d1d 	.word	0x08007d1d
 8007d58:	08007d1d 	.word	0x08007d1d
 8007d5c:	08007d1d 	.word	0x08007d1d
 8007d60:	08007ead 	.word	0x08007ead
 8007d64:	08007dd1 	.word	0x08007dd1
 8007d68:	08007e8f 	.word	0x08007e8f
 8007d6c:	08007d1d 	.word	0x08007d1d
 8007d70:	08007d1d 	.word	0x08007d1d
 8007d74:	08007ecf 	.word	0x08007ecf
 8007d78:	08007d1d 	.word	0x08007d1d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d1d 	.word	0x08007d1d
 8007d84:	08007d1d 	.word	0x08007d1d
 8007d88:	08007e97 	.word	0x08007e97
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	1d1a      	adds	r2, r3, #4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	602a      	str	r2, [r5, #0]
 8007d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e0a3      	b.n	8007ee8 <_printf_i+0x1f4>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	6829      	ldr	r1, [r5, #0]
 8007da4:	0606      	lsls	r6, r0, #24
 8007da6:	f101 0304 	add.w	r3, r1, #4
 8007daa:	d50a      	bpl.n	8007dc2 <_printf_i+0xce>
 8007dac:	680e      	ldr	r6, [r1, #0]
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	da03      	bge.n	8007dbc <_printf_i+0xc8>
 8007db4:	232d      	movs	r3, #45	; 0x2d
 8007db6:	4276      	negs	r6, r6
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbc:	485e      	ldr	r0, [pc, #376]	; (8007f38 <_printf_i+0x244>)
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	e019      	b.n	8007df6 <_printf_i+0x102>
 8007dc2:	680e      	ldr	r6, [r1, #0]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dca:	bf18      	it	ne
 8007dcc:	b236      	sxthne	r6, r6
 8007dce:	e7ef      	b.n	8007db0 <_printf_i+0xbc>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	6029      	str	r1, [r5, #0]
 8007dd8:	0601      	lsls	r1, r0, #24
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0xec>
 8007ddc:	681e      	ldr	r6, [r3, #0]
 8007dde:	e002      	b.n	8007de6 <_printf_i+0xf2>
 8007de0:	0646      	lsls	r6, r0, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0xe8>
 8007de4:	881e      	ldrh	r6, [r3, #0]
 8007de6:	4854      	ldr	r0, [pc, #336]	; (8007f38 <_printf_i+0x244>)
 8007de8:	2f6f      	cmp	r7, #111	; 0x6f
 8007dea:	bf0c      	ite	eq
 8007dec:	2308      	moveq	r3, #8
 8007dee:	230a      	movne	r3, #10
 8007df0:	2100      	movs	r1, #0
 8007df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007df6:	6865      	ldr	r5, [r4, #4]
 8007df8:	60a5      	str	r5, [r4, #8]
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	bfa2      	ittt	ge
 8007dfe:	6821      	ldrge	r1, [r4, #0]
 8007e00:	f021 0104 	bicge.w	r1, r1, #4
 8007e04:	6021      	strge	r1, [r4, #0]
 8007e06:	b90e      	cbnz	r6, 8007e0c <_printf_i+0x118>
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	d04d      	beq.n	8007ea8 <_printf_i+0x1b4>
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e12:	fb03 6711 	mls	r7, r3, r1, r6
 8007e16:	5dc7      	ldrb	r7, [r0, r7]
 8007e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	42bb      	cmp	r3, r7
 8007e20:	460e      	mov	r6, r1
 8007e22:	d9f4      	bls.n	8007e0e <_printf_i+0x11a>
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d10b      	bne.n	8007e40 <_printf_i+0x14c>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	07de      	lsls	r6, r3, #31
 8007e2c:	d508      	bpl.n	8007e40 <_printf_i+0x14c>
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	6861      	ldr	r1, [r4, #4]
 8007e32:	4299      	cmp	r1, r3
 8007e34:	bfde      	ittt	le
 8007e36:	2330      	movle	r3, #48	; 0x30
 8007e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e40:	1b52      	subs	r2, r2, r5
 8007e42:	6122      	str	r2, [r4, #16]
 8007e44:	f8cd a000 	str.w	sl, [sp]
 8007e48:	464b      	mov	r3, r9
 8007e4a:	aa03      	add	r2, sp, #12
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4640      	mov	r0, r8
 8007e50:	f7ff fee2 	bl	8007c18 <_printf_common>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d14c      	bne.n	8007ef2 <_printf_i+0x1fe>
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	b004      	add	sp, #16
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	4835      	ldr	r0, [pc, #212]	; (8007f38 <_printf_i+0x244>)
 8007e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e68:	6829      	ldr	r1, [r5, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e70:	6029      	str	r1, [r5, #0]
 8007e72:	061d      	lsls	r5, r3, #24
 8007e74:	d514      	bpl.n	8007ea0 <_printf_i+0x1ac>
 8007e76:	07df      	lsls	r7, r3, #31
 8007e78:	bf44      	itt	mi
 8007e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e7e:	6023      	strmi	r3, [r4, #0]
 8007e80:	b91e      	cbnz	r6, 8007e8a <_printf_i+0x196>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	f023 0320 	bic.w	r3, r3, #32
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	e7b0      	b.n	8007df0 <_printf_i+0xfc>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	f043 0320 	orr.w	r3, r3, #32
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	2378      	movs	r3, #120	; 0x78
 8007e98:	4828      	ldr	r0, [pc, #160]	; (8007f3c <_printf_i+0x248>)
 8007e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e9e:	e7e3      	b.n	8007e68 <_printf_i+0x174>
 8007ea0:	0659      	lsls	r1, r3, #25
 8007ea2:	bf48      	it	mi
 8007ea4:	b2b6      	uxthmi	r6, r6
 8007ea6:	e7e6      	b.n	8007e76 <_printf_i+0x182>
 8007ea8:	4615      	mov	r5, r2
 8007eaa:	e7bb      	b.n	8007e24 <_printf_i+0x130>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	6826      	ldr	r6, [r4, #0]
 8007eb0:	6961      	ldr	r1, [r4, #20]
 8007eb2:	1d18      	adds	r0, r3, #4
 8007eb4:	6028      	str	r0, [r5, #0]
 8007eb6:	0635      	lsls	r5, r6, #24
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0x1cc>
 8007ebc:	6019      	str	r1, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <_printf_i+0x1d2>
 8007ec0:	0670      	lsls	r0, r6, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0x1c8>
 8007ec4:	8019      	strh	r1, [r3, #0]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6123      	str	r3, [r4, #16]
 8007eca:	4615      	mov	r5, r2
 8007ecc:	e7ba      	b.n	8007e44 <_printf_i+0x150>
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	602a      	str	r2, [r5, #0]
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	6862      	ldr	r2, [r4, #4]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4628      	mov	r0, r5
 8007edc:	f7f8 f980 	bl	80001e0 <memchr>
 8007ee0:	b108      	cbz	r0, 8007ee6 <_printf_i+0x1f2>
 8007ee2:	1b40      	subs	r0, r0, r5
 8007ee4:	6060      	str	r0, [r4, #4]
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	2300      	movs	r3, #0
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef0:	e7a8      	b.n	8007e44 <_printf_i+0x150>
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	4640      	mov	r0, r8
 8007efa:	47d0      	blx	sl
 8007efc:	3001      	adds	r0, #1
 8007efe:	d0ab      	beq.n	8007e58 <_printf_i+0x164>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	079b      	lsls	r3, r3, #30
 8007f04:	d413      	bmi.n	8007f2e <_printf_i+0x23a>
 8007f06:	68e0      	ldr	r0, [r4, #12]
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	bfb8      	it	lt
 8007f0e:	4618      	movlt	r0, r3
 8007f10:	e7a4      	b.n	8007e5c <_printf_i+0x168>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4632      	mov	r2, r6
 8007f16:	4649      	mov	r1, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	47d0      	blx	sl
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d09b      	beq.n	8007e58 <_printf_i+0x164>
 8007f20:	3501      	adds	r5, #1
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	9903      	ldr	r1, [sp, #12]
 8007f26:	1a5b      	subs	r3, r3, r1
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dcf2      	bgt.n	8007f12 <_printf_i+0x21e>
 8007f2c:	e7eb      	b.n	8007f06 <_printf_i+0x212>
 8007f2e:	2500      	movs	r5, #0
 8007f30:	f104 0619 	add.w	r6, r4, #25
 8007f34:	e7f5      	b.n	8007f22 <_printf_i+0x22e>
 8007f36:	bf00      	nop
 8007f38:	0800a272 	.word	0x0800a272
 8007f3c:	0800a283 	.word	0x0800a283

08007f40 <_puts_r>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	460e      	mov	r6, r1
 8007f44:	4605      	mov	r5, r0
 8007f46:	b118      	cbz	r0, 8007f50 <_puts_r+0x10>
 8007f48:	6983      	ldr	r3, [r0, #24]
 8007f4a:	b90b      	cbnz	r3, 8007f50 <_puts_r+0x10>
 8007f4c:	f001 f8c4 	bl	80090d8 <__sinit>
 8007f50:	69ab      	ldr	r3, [r5, #24]
 8007f52:	68ac      	ldr	r4, [r5, #8]
 8007f54:	b913      	cbnz	r3, 8007f5c <_puts_r+0x1c>
 8007f56:	4628      	mov	r0, r5
 8007f58:	f001 f8be 	bl	80090d8 <__sinit>
 8007f5c:	4b2c      	ldr	r3, [pc, #176]	; (8008010 <_puts_r+0xd0>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d120      	bne.n	8007fa4 <_puts_r+0x64>
 8007f62:	686c      	ldr	r4, [r5, #4]
 8007f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f66:	07db      	lsls	r3, r3, #31
 8007f68:	d405      	bmi.n	8007f76 <_puts_r+0x36>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	0598      	lsls	r0, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_puts_r+0x36>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f001 f954 	bl	800921e <__retarget_lock_acquire_recursive>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	0719      	lsls	r1, r3, #28
 8007f7a:	d51d      	bpl.n	8007fb8 <_puts_r+0x78>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	b1db      	cbz	r3, 8007fb8 <_puts_r+0x78>
 8007f80:	3e01      	subs	r6, #1
 8007f82:	68a3      	ldr	r3, [r4, #8]
 8007f84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	bb39      	cbnz	r1, 8007fde <_puts_r+0x9e>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da38      	bge.n	8008004 <_puts_r+0xc4>
 8007f92:	4622      	mov	r2, r4
 8007f94:	210a      	movs	r1, #10
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f848 	bl	800802c <__swbuf_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d011      	beq.n	8007fc4 <_puts_r+0x84>
 8007fa0:	250a      	movs	r5, #10
 8007fa2:	e011      	b.n	8007fc8 <_puts_r+0x88>
 8007fa4:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <_puts_r+0xd4>)
 8007fa6:	429c      	cmp	r4, r3
 8007fa8:	d101      	bne.n	8007fae <_puts_r+0x6e>
 8007faa:	68ac      	ldr	r4, [r5, #8]
 8007fac:	e7da      	b.n	8007f64 <_puts_r+0x24>
 8007fae:	4b1a      	ldr	r3, [pc, #104]	; (8008018 <_puts_r+0xd8>)
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	bf08      	it	eq
 8007fb4:	68ec      	ldreq	r4, [r5, #12]
 8007fb6:	e7d5      	b.n	8007f64 <_puts_r+0x24>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 f888 	bl	80080d0 <__swsetup_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d0dd      	beq.n	8007f80 <_puts_r+0x40>
 8007fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fca:	07da      	lsls	r2, r3, #31
 8007fcc:	d405      	bmi.n	8007fda <_puts_r+0x9a>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	059b      	lsls	r3, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_puts_r+0x9a>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd6:	f001 f923 	bl	8009220 <__retarget_lock_release_recursive>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	bd70      	pop	{r4, r5, r6, pc}
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da04      	bge.n	8007fec <_puts_r+0xac>
 8007fe2:	69a2      	ldr	r2, [r4, #24]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	dc06      	bgt.n	8007ff6 <_puts_r+0xb6>
 8007fe8:	290a      	cmp	r1, #10
 8007fea:	d004      	beq.n	8007ff6 <_puts_r+0xb6>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	6022      	str	r2, [r4, #0]
 8007ff2:	7019      	strb	r1, [r3, #0]
 8007ff4:	e7c5      	b.n	8007f82 <_puts_r+0x42>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f817 	bl	800802c <__swbuf_r>
 8007ffe:	3001      	adds	r0, #1
 8008000:	d1bf      	bne.n	8007f82 <_puts_r+0x42>
 8008002:	e7df      	b.n	8007fc4 <_puts_r+0x84>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	250a      	movs	r5, #10
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	701d      	strb	r5, [r3, #0]
 800800e:	e7db      	b.n	8007fc8 <_puts_r+0x88>
 8008010:	0800a344 	.word	0x0800a344
 8008014:	0800a364 	.word	0x0800a364
 8008018:	0800a324 	.word	0x0800a324

0800801c <puts>:
 800801c:	4b02      	ldr	r3, [pc, #8]	; (8008028 <puts+0xc>)
 800801e:	4601      	mov	r1, r0
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f7ff bf8d 	b.w	8007f40 <_puts_r>
 8008026:	bf00      	nop
 8008028:	20000010 	.word	0x20000010

0800802c <__swbuf_r>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	460e      	mov	r6, r1
 8008030:	4614      	mov	r4, r2
 8008032:	4605      	mov	r5, r0
 8008034:	b118      	cbz	r0, 800803e <__swbuf_r+0x12>
 8008036:	6983      	ldr	r3, [r0, #24]
 8008038:	b90b      	cbnz	r3, 800803e <__swbuf_r+0x12>
 800803a:	f001 f84d 	bl	80090d8 <__sinit>
 800803e:	4b21      	ldr	r3, [pc, #132]	; (80080c4 <__swbuf_r+0x98>)
 8008040:	429c      	cmp	r4, r3
 8008042:	d12b      	bne.n	800809c <__swbuf_r+0x70>
 8008044:	686c      	ldr	r4, [r5, #4]
 8008046:	69a3      	ldr	r3, [r4, #24]
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	071a      	lsls	r2, r3, #28
 800804e:	d52f      	bpl.n	80080b0 <__swbuf_r+0x84>
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b36b      	cbz	r3, 80080b0 <__swbuf_r+0x84>
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	1ac0      	subs	r0, r0, r3
 800805a:	6963      	ldr	r3, [r4, #20]
 800805c:	b2f6      	uxtb	r6, r6
 800805e:	4283      	cmp	r3, r0
 8008060:	4637      	mov	r7, r6
 8008062:	dc04      	bgt.n	800806e <__swbuf_r+0x42>
 8008064:	4621      	mov	r1, r4
 8008066:	4628      	mov	r0, r5
 8008068:	f000 ffa2 	bl	8008fb0 <_fflush_r>
 800806c:	bb30      	cbnz	r0, 80080bc <__swbuf_r+0x90>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	3b01      	subs	r3, #1
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	6022      	str	r2, [r4, #0]
 800807a:	701e      	strb	r6, [r3, #0]
 800807c:	6963      	ldr	r3, [r4, #20]
 800807e:	3001      	adds	r0, #1
 8008080:	4283      	cmp	r3, r0
 8008082:	d004      	beq.n	800808e <__swbuf_r+0x62>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	07db      	lsls	r3, r3, #31
 8008088:	d506      	bpl.n	8008098 <__swbuf_r+0x6c>
 800808a:	2e0a      	cmp	r6, #10
 800808c:	d104      	bne.n	8008098 <__swbuf_r+0x6c>
 800808e:	4621      	mov	r1, r4
 8008090:	4628      	mov	r0, r5
 8008092:	f000 ff8d 	bl	8008fb0 <_fflush_r>
 8008096:	b988      	cbnz	r0, 80080bc <__swbuf_r+0x90>
 8008098:	4638      	mov	r0, r7
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <__swbuf_r+0x9c>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <__swbuf_r+0x7a>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7cf      	b.n	8008046 <__swbuf_r+0x1a>
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <__swbuf_r+0xa0>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7ca      	b.n	8008046 <__swbuf_r+0x1a>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f000 f80c 	bl	80080d0 <__swsetup_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d0cb      	beq.n	8008054 <__swbuf_r+0x28>
 80080bc:	f04f 37ff 	mov.w	r7, #4294967295
 80080c0:	e7ea      	b.n	8008098 <__swbuf_r+0x6c>
 80080c2:	bf00      	nop
 80080c4:	0800a344 	.word	0x0800a344
 80080c8:	0800a364 	.word	0x0800a364
 80080cc:	0800a324 	.word	0x0800a324

080080d0 <__swsetup_r>:
 80080d0:	4b32      	ldr	r3, [pc, #200]	; (800819c <__swsetup_r+0xcc>)
 80080d2:	b570      	push	{r4, r5, r6, lr}
 80080d4:	681d      	ldr	r5, [r3, #0]
 80080d6:	4606      	mov	r6, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	b125      	cbz	r5, 80080e6 <__swsetup_r+0x16>
 80080dc:	69ab      	ldr	r3, [r5, #24]
 80080de:	b913      	cbnz	r3, 80080e6 <__swsetup_r+0x16>
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 fff9 	bl	80090d8 <__sinit>
 80080e6:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <__swsetup_r+0xd0>)
 80080e8:	429c      	cmp	r4, r3
 80080ea:	d10f      	bne.n	800810c <__swsetup_r+0x3c>
 80080ec:	686c      	ldr	r4, [r5, #4]
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f4:	0719      	lsls	r1, r3, #28
 80080f6:	d42c      	bmi.n	8008152 <__swsetup_r+0x82>
 80080f8:	06dd      	lsls	r5, r3, #27
 80080fa:	d411      	bmi.n	8008120 <__swsetup_r+0x50>
 80080fc:	2309      	movs	r3, #9
 80080fe:	6033      	str	r3, [r6, #0]
 8008100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	f04f 30ff 	mov.w	r0, #4294967295
 800810a:	e03e      	b.n	800818a <__swsetup_r+0xba>
 800810c:	4b25      	ldr	r3, [pc, #148]	; (80081a4 <__swsetup_r+0xd4>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d101      	bne.n	8008116 <__swsetup_r+0x46>
 8008112:	68ac      	ldr	r4, [r5, #8]
 8008114:	e7eb      	b.n	80080ee <__swsetup_r+0x1e>
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <__swsetup_r+0xd8>)
 8008118:	429c      	cmp	r4, r3
 800811a:	bf08      	it	eq
 800811c:	68ec      	ldreq	r4, [r5, #12]
 800811e:	e7e6      	b.n	80080ee <__swsetup_r+0x1e>
 8008120:	0758      	lsls	r0, r3, #29
 8008122:	d512      	bpl.n	800814a <__swsetup_r+0x7a>
 8008124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008126:	b141      	cbz	r1, 800813a <__swsetup_r+0x6a>
 8008128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812c:	4299      	cmp	r1, r3
 800812e:	d002      	beq.n	8008136 <__swsetup_r+0x66>
 8008130:	4630      	mov	r0, r6
 8008132:	f001 fc7d 	bl	8009a30 <_free_r>
 8008136:	2300      	movs	r3, #0
 8008138:	6363      	str	r3, [r4, #52]	; 0x34
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	2300      	movs	r3, #0
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	b94b      	cbnz	r3, 800816a <__swsetup_r+0x9a>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d003      	beq.n	800816a <__swsetup_r+0x9a>
 8008162:	4621      	mov	r1, r4
 8008164:	4630      	mov	r0, r6
 8008166:	f001 f881 	bl	800926c <__smakebuf_r>
 800816a:	89a0      	ldrh	r0, [r4, #12]
 800816c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008170:	f010 0301 	ands.w	r3, r0, #1
 8008174:	d00a      	beq.n	800818c <__swsetup_r+0xbc>
 8008176:	2300      	movs	r3, #0
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	425b      	negs	r3, r3
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	b943      	cbnz	r3, 8008196 <__swsetup_r+0xc6>
 8008184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008188:	d1ba      	bne.n	8008100 <__swsetup_r+0x30>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	0781      	lsls	r1, r0, #30
 800818e:	bf58      	it	pl
 8008190:	6963      	ldrpl	r3, [r4, #20]
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	e7f4      	b.n	8008180 <__swsetup_r+0xb0>
 8008196:	2000      	movs	r0, #0
 8008198:	e7f7      	b.n	800818a <__swsetup_r+0xba>
 800819a:	bf00      	nop
 800819c:	20000010 	.word	0x20000010
 80081a0:	0800a344 	.word	0x0800a344
 80081a4:	0800a364 	.word	0x0800a364
 80081a8:	0800a324 	.word	0x0800a324

080081ac <quorem>:
 80081ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	6903      	ldr	r3, [r0, #16]
 80081b2:	690c      	ldr	r4, [r1, #16]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	4607      	mov	r7, r0
 80081b8:	f2c0 8081 	blt.w	80082be <quorem+0x112>
 80081bc:	3c01      	subs	r4, #1
 80081be:	f101 0814 	add.w	r8, r1, #20
 80081c2:	f100 0514 	add.w	r5, r0, #20
 80081c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d4:	3301      	adds	r3, #1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081e4:	d331      	bcc.n	800824a <quorem+0x9e>
 80081e6:	f04f 0e00 	mov.w	lr, #0
 80081ea:	4640      	mov	r0, r8
 80081ec:	46ac      	mov	ip, r5
 80081ee:	46f2      	mov	sl, lr
 80081f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80081f4:	b293      	uxth	r3, r2
 80081f6:	fb06 e303 	mla	r3, r6, r3, lr
 80081fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081fe:	b29b      	uxth	r3, r3
 8008200:	ebaa 0303 	sub.w	r3, sl, r3
 8008204:	f8dc a000 	ldr.w	sl, [ip]
 8008208:	0c12      	lsrs	r2, r2, #16
 800820a:	fa13 f38a 	uxtah	r3, r3, sl
 800820e:	fb06 e202 	mla	r2, r6, r2, lr
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008224:	f8bd 3000 	ldrh.w	r3, [sp]
 8008228:	4581      	cmp	r9, r0
 800822a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822e:	f84c 3b04 	str.w	r3, [ip], #4
 8008232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008236:	d2db      	bcs.n	80081f0 <quorem+0x44>
 8008238:	f855 300b 	ldr.w	r3, [r5, fp]
 800823c:	b92b      	cbnz	r3, 800824a <quorem+0x9e>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	3b04      	subs	r3, #4
 8008242:	429d      	cmp	r5, r3
 8008244:	461a      	mov	r2, r3
 8008246:	d32e      	bcc.n	80082a6 <quorem+0xfa>
 8008248:	613c      	str	r4, [r7, #16]
 800824a:	4638      	mov	r0, r7
 800824c:	f001 fad8 	bl	8009800 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	db24      	blt.n	800829e <quorem+0xf2>
 8008254:	3601      	adds	r6, #1
 8008256:	4628      	mov	r0, r5
 8008258:	f04f 0c00 	mov.w	ip, #0
 800825c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008260:	f8d0 e000 	ldr.w	lr, [r0]
 8008264:	b293      	uxth	r3, r2
 8008266:	ebac 0303 	sub.w	r3, ip, r3
 800826a:	0c12      	lsrs	r2, r2, #16
 800826c:	fa13 f38e 	uxtah	r3, r3, lr
 8008270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008278:	b29b      	uxth	r3, r3
 800827a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827e:	45c1      	cmp	r9, r8
 8008280:	f840 3b04 	str.w	r3, [r0], #4
 8008284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008288:	d2e8      	bcs.n	800825c <quorem+0xb0>
 800828a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800828e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008292:	b922      	cbnz	r2, 800829e <quorem+0xf2>
 8008294:	3b04      	subs	r3, #4
 8008296:	429d      	cmp	r5, r3
 8008298:	461a      	mov	r2, r3
 800829a:	d30a      	bcc.n	80082b2 <quorem+0x106>
 800829c:	613c      	str	r4, [r7, #16]
 800829e:	4630      	mov	r0, r6
 80082a0:	b003      	add	sp, #12
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	3b04      	subs	r3, #4
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d1cc      	bne.n	8008248 <quorem+0x9c>
 80082ae:	3c01      	subs	r4, #1
 80082b0:	e7c7      	b.n	8008242 <quorem+0x96>
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	3b04      	subs	r3, #4
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d1f0      	bne.n	800829c <quorem+0xf0>
 80082ba:	3c01      	subs	r4, #1
 80082bc:	e7eb      	b.n	8008296 <quorem+0xea>
 80082be:	2000      	movs	r0, #0
 80082c0:	e7ee      	b.n	80082a0 <quorem+0xf4>
 80082c2:	0000      	movs	r0, r0
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b04 	vpush	{d8-d9}
 80082d0:	ec57 6b10 	vmov	r6, r7, d0
 80082d4:	b093      	sub	sp, #76	; 0x4c
 80082d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082dc:	9106      	str	r1, [sp, #24]
 80082de:	ee10 aa10 	vmov	sl, s0
 80082e2:	4604      	mov	r4, r0
 80082e4:	9209      	str	r2, [sp, #36]	; 0x24
 80082e6:	930c      	str	r3, [sp, #48]	; 0x30
 80082e8:	46bb      	mov	fp, r7
 80082ea:	b975      	cbnz	r5, 800830a <_dtoa_r+0x42>
 80082ec:	2010      	movs	r0, #16
 80082ee:	f000 fffd 	bl	80092ec <malloc>
 80082f2:	4602      	mov	r2, r0
 80082f4:	6260      	str	r0, [r4, #36]	; 0x24
 80082f6:	b920      	cbnz	r0, 8008302 <_dtoa_r+0x3a>
 80082f8:	4ba7      	ldr	r3, [pc, #668]	; (8008598 <_dtoa_r+0x2d0>)
 80082fa:	21ea      	movs	r1, #234	; 0xea
 80082fc:	48a7      	ldr	r0, [pc, #668]	; (800859c <_dtoa_r+0x2d4>)
 80082fe:	f001 fcdd 	bl	8009cbc <__assert_func>
 8008302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008306:	6005      	str	r5, [r0, #0]
 8008308:	60c5      	str	r5, [r0, #12]
 800830a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830c:	6819      	ldr	r1, [r3, #0]
 800830e:	b151      	cbz	r1, 8008326 <_dtoa_r+0x5e>
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	604a      	str	r2, [r1, #4]
 8008314:	2301      	movs	r3, #1
 8008316:	4093      	lsls	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
 800831a:	4620      	mov	r0, r4
 800831c:	f001 f82e 	bl	800937c <_Bfree>
 8008320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	1e3b      	subs	r3, r7, #0
 8008328:	bfaa      	itet	ge
 800832a:	2300      	movge	r3, #0
 800832c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008330:	f8c8 3000 	strge.w	r3, [r8]
 8008334:	4b9a      	ldr	r3, [pc, #616]	; (80085a0 <_dtoa_r+0x2d8>)
 8008336:	bfbc      	itt	lt
 8008338:	2201      	movlt	r2, #1
 800833a:	f8c8 2000 	strlt.w	r2, [r8]
 800833e:	ea33 030b 	bics.w	r3, r3, fp
 8008342:	d11b      	bne.n	800837c <_dtoa_r+0xb4>
 8008344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008346:	f242 730f 	movw	r3, #9999	; 0x270f
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008350:	4333      	orrs	r3, r6
 8008352:	f000 8592 	beq.w	8008e7a <_dtoa_r+0xbb2>
 8008356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008358:	b963      	cbnz	r3, 8008374 <_dtoa_r+0xac>
 800835a:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <_dtoa_r+0x2dc>)
 800835c:	e022      	b.n	80083a4 <_dtoa_r+0xdc>
 800835e:	4b92      	ldr	r3, [pc, #584]	; (80085a8 <_dtoa_r+0x2e0>)
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	3308      	adds	r3, #8
 8008364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	b013      	add	sp, #76	; 0x4c
 800836c:	ecbd 8b04 	vpop	{d8-d9}
 8008370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	4b8b      	ldr	r3, [pc, #556]	; (80085a4 <_dtoa_r+0x2dc>)
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	3303      	adds	r3, #3
 800837a:	e7f3      	b.n	8008364 <_dtoa_r+0x9c>
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	4650      	mov	r0, sl
 8008382:	4659      	mov	r1, fp
 8008384:	f7f8 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008388:	ec4b ab19 	vmov	d9, sl, fp
 800838c:	4680      	mov	r8, r0
 800838e:	b158      	cbz	r0, 80083a8 <_dtoa_r+0xe0>
 8008390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008392:	2301      	movs	r3, #1
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 856b 	beq.w	8008e74 <_dtoa_r+0xbac>
 800839e:	4883      	ldr	r0, [pc, #524]	; (80085ac <_dtoa_r+0x2e4>)
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	1e43      	subs	r3, r0, #1
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	e7df      	b.n	8008368 <_dtoa_r+0xa0>
 80083a8:	ec4b ab10 	vmov	d0, sl, fp
 80083ac:	aa10      	add	r2, sp, #64	; 0x40
 80083ae:	a911      	add	r1, sp, #68	; 0x44
 80083b0:	4620      	mov	r0, r4
 80083b2:	f001 facb 	bl	800994c <__d2b>
 80083b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083ba:	ee08 0a10 	vmov	s16, r0
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f000 8084 	beq.w	80084cc <_dtoa_r+0x204>
 80083c4:	ee19 3a90 	vmov	r3, s19
 80083c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083d0:	4656      	mov	r6, sl
 80083d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083de:	4b74      	ldr	r3, [pc, #464]	; (80085b0 <_dtoa_r+0x2e8>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f7 ff4f 	bl	8000288 <__aeabi_dsub>
 80083ea:	a365      	add	r3, pc, #404	; (adr r3, 8008580 <_dtoa_r+0x2b8>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	a364      	add	r3, pc, #400	; (adr r3, 8008588 <_dtoa_r+0x2c0>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f7 ff47 	bl	800028c <__adddf3>
 80083fe:	4606      	mov	r6, r0
 8008400:	4628      	mov	r0, r5
 8008402:	460f      	mov	r7, r1
 8008404:	f7f8 f88e 	bl	8000524 <__aeabi_i2d>
 8008408:	a361      	add	r3, pc, #388	; (adr r3, 8008590 <_dtoa_r+0x2c8>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 f8f3 	bl	80005f8 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 ff37 	bl	800028c <__adddf3>
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	f7f8 fb99 	bl	8000b58 <__aeabi_d2iz>
 8008426:	2200      	movs	r2, #0
 8008428:	9000      	str	r0, [sp, #0]
 800842a:	2300      	movs	r3, #0
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb54 	bl	8000adc <__aeabi_dcmplt>
 8008434:	b150      	cbz	r0, 800844c <_dtoa_r+0x184>
 8008436:	9800      	ldr	r0, [sp, #0]
 8008438:	f7f8 f874 	bl	8000524 <__aeabi_i2d>
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	f7f8 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008444:	b910      	cbnz	r0, 800844c <_dtoa_r+0x184>
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	2b16      	cmp	r3, #22
 8008450:	d85a      	bhi.n	8008508 <_dtoa_r+0x240>
 8008452:	9a00      	ldr	r2, [sp, #0]
 8008454:	4b57      	ldr	r3, [pc, #348]	; (80085b4 <_dtoa_r+0x2ec>)
 8008456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	ec51 0b19 	vmov	r0, r1, d9
 8008462:	f7f8 fb3b 	bl	8000adc <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	d050      	beq.n	800850c <_dtoa_r+0x244>
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	930b      	str	r3, [sp, #44]	; 0x2c
 8008474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008476:	1b5d      	subs	r5, r3, r5
 8008478:	1e6b      	subs	r3, r5, #1
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	bf45      	ittet	mi
 800847e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008482:	9304      	strmi	r3, [sp, #16]
 8008484:	2300      	movpl	r3, #0
 8008486:	2300      	movmi	r3, #0
 8008488:	bf4c      	ite	mi
 800848a:	9305      	strmi	r3, [sp, #20]
 800848c:	9304      	strpl	r3, [sp, #16]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db3d      	blt.n	8008510 <_dtoa_r+0x248>
 8008494:	9b05      	ldr	r3, [sp, #20]
 8008496:	9a00      	ldr	r2, [sp, #0]
 8008498:	920a      	str	r2, [sp, #40]	; 0x28
 800849a:	4413      	add	r3, r2
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	2300      	movs	r3, #0
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	f200 8089 	bhi.w	80085bc <_dtoa_r+0x2f4>
 80084aa:	2b05      	cmp	r3, #5
 80084ac:	bfc4      	itt	gt
 80084ae:	3b04      	subgt	r3, #4
 80084b0:	9306      	strgt	r3, [sp, #24]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	f1a3 0302 	sub.w	r3, r3, #2
 80084b8:	bfcc      	ite	gt
 80084ba:	2500      	movgt	r5, #0
 80084bc:	2501      	movle	r5, #1
 80084be:	2b03      	cmp	r3, #3
 80084c0:	f200 8087 	bhi.w	80085d2 <_dtoa_r+0x30a>
 80084c4:	e8df f003 	tbb	[pc, r3]
 80084c8:	59383a2d 	.word	0x59383a2d
 80084cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084d0:	441d      	add	r5, r3
 80084d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	bfc1      	itttt	gt
 80084da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084ea:	bfda      	itte	le
 80084ec:	f1c3 0320 	rsble	r3, r3, #32
 80084f0:	fa06 f003 	lslle.w	r0, r6, r3
 80084f4:	4318      	orrgt	r0, r3
 80084f6:	f7f8 f805 	bl	8000504 <__aeabi_ui2d>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4606      	mov	r6, r0
 80084fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008502:	3d01      	subs	r5, #1
 8008504:	930e      	str	r3, [sp, #56]	; 0x38
 8008506:	e76a      	b.n	80083de <_dtoa_r+0x116>
 8008508:	2301      	movs	r3, #1
 800850a:	e7b2      	b.n	8008472 <_dtoa_r+0x1aa>
 800850c:	900b      	str	r0, [sp, #44]	; 0x2c
 800850e:	e7b1      	b.n	8008474 <_dtoa_r+0x1ac>
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	9a00      	ldr	r2, [sp, #0]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	4253      	negs	r3, r2
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	2300      	movs	r3, #0
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	e7bf      	b.n	80084a2 <_dtoa_r+0x1da>
 8008522:	2300      	movs	r3, #0
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc55      	bgt.n	80085d8 <_dtoa_r+0x310>
 800852c:	2301      	movs	r3, #1
 800852e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008532:	461a      	mov	r2, r3
 8008534:	9209      	str	r2, [sp, #36]	; 0x24
 8008536:	e00c      	b.n	8008552 <_dtoa_r+0x28a>
 8008538:	2301      	movs	r3, #1
 800853a:	e7f3      	b.n	8008524 <_dtoa_r+0x25c>
 800853c:	2300      	movs	r3, #0
 800853e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	4413      	add	r3, r2
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	3301      	adds	r3, #1
 800854a:	2b01      	cmp	r3, #1
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	bfb8      	it	lt
 8008550:	2301      	movlt	r3, #1
 8008552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008554:	2200      	movs	r2, #0
 8008556:	6042      	str	r2, [r0, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	f102 0614 	add.w	r6, r2, #20
 800855e:	429e      	cmp	r6, r3
 8008560:	6841      	ldr	r1, [r0, #4]
 8008562:	d93d      	bls.n	80085e0 <_dtoa_r+0x318>
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fec9 	bl	80092fc <_Balloc>
 800856a:	9001      	str	r0, [sp, #4]
 800856c:	2800      	cmp	r0, #0
 800856e:	d13b      	bne.n	80085e8 <_dtoa_r+0x320>
 8008570:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <_dtoa_r+0x2f0>)
 8008572:	4602      	mov	r2, r0
 8008574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008578:	e6c0      	b.n	80082fc <_dtoa_r+0x34>
 800857a:	2301      	movs	r3, #1
 800857c:	e7df      	b.n	800853e <_dtoa_r+0x276>
 800857e:	bf00      	nop
 8008580:	636f4361 	.word	0x636f4361
 8008584:	3fd287a7 	.word	0x3fd287a7
 8008588:	8b60c8b3 	.word	0x8b60c8b3
 800858c:	3fc68a28 	.word	0x3fc68a28
 8008590:	509f79fb 	.word	0x509f79fb
 8008594:	3fd34413 	.word	0x3fd34413
 8008598:	0800a2a1 	.word	0x0800a2a1
 800859c:	0800a2b8 	.word	0x0800a2b8
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	0800a29d 	.word	0x0800a29d
 80085a8:	0800a294 	.word	0x0800a294
 80085ac:	0800a271 	.word	0x0800a271
 80085b0:	3ff80000 	.word	0x3ff80000
 80085b4:	0800a408 	.word	0x0800a408
 80085b8:	0800a313 	.word	0x0800a313
 80085bc:	2501      	movs	r5, #1
 80085be:	2300      	movs	r3, #0
 80085c0:	9306      	str	r3, [sp, #24]
 80085c2:	9508      	str	r5, [sp, #32]
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	2312      	movs	r3, #18
 80085d0:	e7b0      	b.n	8008534 <_dtoa_r+0x26c>
 80085d2:	2301      	movs	r3, #1
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	e7f5      	b.n	80085c4 <_dtoa_r+0x2fc>
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085de:	e7b8      	b.n	8008552 <_dtoa_r+0x28a>
 80085e0:	3101      	adds	r1, #1
 80085e2:	6041      	str	r1, [r0, #4]
 80085e4:	0052      	lsls	r2, r2, #1
 80085e6:	e7b8      	b.n	800855a <_dtoa_r+0x292>
 80085e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ea:	9a01      	ldr	r2, [sp, #4]
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	2b0e      	cmp	r3, #14
 80085f2:	f200 809d 	bhi.w	8008730 <_dtoa_r+0x468>
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	f000 809a 	beq.w	8008730 <_dtoa_r+0x468>
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd32      	ble.n	8008668 <_dtoa_r+0x3a0>
 8008602:	4ab7      	ldr	r2, [pc, #732]	; (80088e0 <_dtoa_r+0x618>)
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800860c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	05d8      	lsls	r0, r3, #23
 8008614:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008618:	d516      	bpl.n	8008648 <_dtoa_r+0x380>
 800861a:	4bb2      	ldr	r3, [pc, #712]	; (80088e4 <_dtoa_r+0x61c>)
 800861c:	ec51 0b19 	vmov	r0, r1, d9
 8008620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008624:	f7f8 f912 	bl	800084c <__aeabi_ddiv>
 8008628:	f007 070f 	and.w	r7, r7, #15
 800862c:	4682      	mov	sl, r0
 800862e:	468b      	mov	fp, r1
 8008630:	2503      	movs	r5, #3
 8008632:	4eac      	ldr	r6, [pc, #688]	; (80088e4 <_dtoa_r+0x61c>)
 8008634:	b957      	cbnz	r7, 800864c <_dtoa_r+0x384>
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	4650      	mov	r0, sl
 800863c:	4659      	mov	r1, fp
 800863e:	f7f8 f905 	bl	800084c <__aeabi_ddiv>
 8008642:	4682      	mov	sl, r0
 8008644:	468b      	mov	fp, r1
 8008646:	e028      	b.n	800869a <_dtoa_r+0x3d2>
 8008648:	2502      	movs	r5, #2
 800864a:	e7f2      	b.n	8008632 <_dtoa_r+0x36a>
 800864c:	07f9      	lsls	r1, r7, #31
 800864e:	d508      	bpl.n	8008662 <_dtoa_r+0x39a>
 8008650:	4640      	mov	r0, r8
 8008652:	4649      	mov	r1, r9
 8008654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	3501      	adds	r5, #1
 800865e:	4680      	mov	r8, r0
 8008660:	4689      	mov	r9, r1
 8008662:	107f      	asrs	r7, r7, #1
 8008664:	3608      	adds	r6, #8
 8008666:	e7e5      	b.n	8008634 <_dtoa_r+0x36c>
 8008668:	f000 809b 	beq.w	80087a2 <_dtoa_r+0x4da>
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	4f9d      	ldr	r7, [pc, #628]	; (80088e4 <_dtoa_r+0x61c>)
 8008670:	425e      	negs	r6, r3
 8008672:	4b9b      	ldr	r3, [pc, #620]	; (80088e0 <_dtoa_r+0x618>)
 8008674:	f006 020f 	and.w	r2, r6, #15
 8008678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	ec51 0b19 	vmov	r0, r1, d9
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	1136      	asrs	r6, r6, #4
 800868a:	4682      	mov	sl, r0
 800868c:	468b      	mov	fp, r1
 800868e:	2300      	movs	r3, #0
 8008690:	2502      	movs	r5, #2
 8008692:	2e00      	cmp	r6, #0
 8008694:	d17a      	bne.n	800878c <_dtoa_r+0x4c4>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1d3      	bne.n	8008642 <_dtoa_r+0x37a>
 800869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8082 	beq.w	80087a6 <_dtoa_r+0x4de>
 80086a2:	4b91      	ldr	r3, [pc, #580]	; (80088e8 <_dtoa_r+0x620>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	4650      	mov	r0, sl
 80086a8:	4659      	mov	r1, fp
 80086aa:	f7f8 fa17 	bl	8000adc <__aeabi_dcmplt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d079      	beq.n	80087a6 <_dtoa_r+0x4de>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d076      	beq.n	80087a6 <_dtoa_r+0x4de>
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	dd36      	ble.n	800872c <_dtoa_r+0x464>
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	4650      	mov	r0, sl
 80086c2:	4659      	mov	r1, fp
 80086c4:	1e5f      	subs	r7, r3, #1
 80086c6:	2200      	movs	r2, #0
 80086c8:	4b88      	ldr	r3, [pc, #544]	; (80088ec <_dtoa_r+0x624>)
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	9e02      	ldr	r6, [sp, #8]
 80086d0:	4682      	mov	sl, r0
 80086d2:	468b      	mov	fp, r1
 80086d4:	3501      	adds	r5, #1
 80086d6:	4628      	mov	r0, r5
 80086d8:	f7f7 ff24 	bl	8000524 <__aeabi_i2d>
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	4b82      	ldr	r3, [pc, #520]	; (80088f0 <_dtoa_r+0x628>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	f7f7 fdd0 	bl	800028c <__adddf3>
 80086ec:	46d0      	mov	r8, sl
 80086ee:	46d9      	mov	r9, fp
 80086f0:	4682      	mov	sl, r0
 80086f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d158      	bne.n	80087ac <_dtoa_r+0x4e4>
 80086fa:	4b7e      	ldr	r3, [pc, #504]	; (80088f4 <_dtoa_r+0x62c>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 fdc1 	bl	8000288 <__aeabi_dsub>
 8008706:	4652      	mov	r2, sl
 8008708:	465b      	mov	r3, fp
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	f7f8 fa03 	bl	8000b18 <__aeabi_dcmpgt>
 8008712:	2800      	cmp	r0, #0
 8008714:	f040 8295 	bne.w	8008c42 <_dtoa_r+0x97a>
 8008718:	4652      	mov	r2, sl
 800871a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	f7f8 f9db 	bl	8000adc <__aeabi_dcmplt>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8289 	bne.w	8008c3e <_dtoa_r+0x976>
 800872c:	ec5b ab19 	vmov	sl, fp, d9
 8008730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008732:	2b00      	cmp	r3, #0
 8008734:	f2c0 8148 	blt.w	80089c8 <_dtoa_r+0x700>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	2a0e      	cmp	r2, #14
 800873c:	f300 8144 	bgt.w	80089c8 <_dtoa_r+0x700>
 8008740:	4b67      	ldr	r3, [pc, #412]	; (80088e0 <_dtoa_r+0x618>)
 8008742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800874a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	f280 80d5 	bge.w	80088fc <_dtoa_r+0x634>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f300 80d1 	bgt.w	80088fc <_dtoa_r+0x634>
 800875a:	f040 826f 	bne.w	8008c3c <_dtoa_r+0x974>
 800875e:	4b65      	ldr	r3, [pc, #404]	; (80088f4 <_dtoa_r+0x62c>)
 8008760:	2200      	movs	r2, #0
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	f7f7 ff47 	bl	80005f8 <__aeabi_dmul>
 800876a:	4652      	mov	r2, sl
 800876c:	465b      	mov	r3, fp
 800876e:	f7f8 f9c9 	bl	8000b04 <__aeabi_dcmpge>
 8008772:	9e03      	ldr	r6, [sp, #12]
 8008774:	4637      	mov	r7, r6
 8008776:	2800      	cmp	r0, #0
 8008778:	f040 8245 	bne.w	8008c06 <_dtoa_r+0x93e>
 800877c:	9d01      	ldr	r5, [sp, #4]
 800877e:	2331      	movs	r3, #49	; 0x31
 8008780:	f805 3b01 	strb.w	r3, [r5], #1
 8008784:	9b00      	ldr	r3, [sp, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	e240      	b.n	8008c0e <_dtoa_r+0x946>
 800878c:	07f2      	lsls	r2, r6, #31
 800878e:	d505      	bpl.n	800879c <_dtoa_r+0x4d4>
 8008790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	3501      	adds	r5, #1
 800879a:	2301      	movs	r3, #1
 800879c:	1076      	asrs	r6, r6, #1
 800879e:	3708      	adds	r7, #8
 80087a0:	e777      	b.n	8008692 <_dtoa_r+0x3ca>
 80087a2:	2502      	movs	r5, #2
 80087a4:	e779      	b.n	800869a <_dtoa_r+0x3d2>
 80087a6:	9f00      	ldr	r7, [sp, #0]
 80087a8:	9e03      	ldr	r6, [sp, #12]
 80087aa:	e794      	b.n	80086d6 <_dtoa_r+0x40e>
 80087ac:	9901      	ldr	r1, [sp, #4]
 80087ae:	4b4c      	ldr	r3, [pc, #304]	; (80088e0 <_dtoa_r+0x618>)
 80087b0:	4431      	add	r1, r6
 80087b2:	910d      	str	r1, [sp, #52]	; 0x34
 80087b4:	9908      	ldr	r1, [sp, #32]
 80087b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087be:	2900      	cmp	r1, #0
 80087c0:	d043      	beq.n	800884a <_dtoa_r+0x582>
 80087c2:	494d      	ldr	r1, [pc, #308]	; (80088f8 <_dtoa_r+0x630>)
 80087c4:	2000      	movs	r0, #0
 80087c6:	f7f8 f841 	bl	800084c <__aeabi_ddiv>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	9d01      	ldr	r5, [sp, #4]
 80087d4:	4682      	mov	sl, r0
 80087d6:	468b      	mov	fp, r1
 80087d8:	4649      	mov	r1, r9
 80087da:	4640      	mov	r0, r8
 80087dc:	f7f8 f9bc 	bl	8000b58 <__aeabi_d2iz>
 80087e0:	4606      	mov	r6, r0
 80087e2:	f7f7 fe9f 	bl	8000524 <__aeabi_i2d>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 fd4b 	bl	8000288 <__aeabi_dsub>
 80087f2:	3630      	adds	r6, #48	; 0x30
 80087f4:	f805 6b01 	strb.w	r6, [r5], #1
 80087f8:	4652      	mov	r2, sl
 80087fa:	465b      	mov	r3, fp
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d163      	bne.n	80088d0 <_dtoa_r+0x608>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	4936      	ldr	r1, [pc, #216]	; (80088e8 <_dtoa_r+0x620>)
 800880e:	2000      	movs	r0, #0
 8008810:	f7f7 fd3a 	bl	8000288 <__aeabi_dsub>
 8008814:	4652      	mov	r2, sl
 8008816:	465b      	mov	r3, fp
 8008818:	f7f8 f960 	bl	8000adc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	f040 80b5 	bne.w	800898c <_dtoa_r+0x6c4>
 8008822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008824:	429d      	cmp	r5, r3
 8008826:	d081      	beq.n	800872c <_dtoa_r+0x464>
 8008828:	4b30      	ldr	r3, [pc, #192]	; (80088ec <_dtoa_r+0x624>)
 800882a:	2200      	movs	r2, #0
 800882c:	4650      	mov	r0, sl
 800882e:	4659      	mov	r1, fp
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	4b2d      	ldr	r3, [pc, #180]	; (80088ec <_dtoa_r+0x624>)
 8008836:	4682      	mov	sl, r0
 8008838:	468b      	mov	fp, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	2200      	movs	r2, #0
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	4680      	mov	r8, r0
 8008846:	4689      	mov	r9, r1
 8008848:	e7c6      	b.n	80087d8 <_dtoa_r+0x510>
 800884a:	4650      	mov	r0, sl
 800884c:	4659      	mov	r1, fp
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008854:	9d01      	ldr	r5, [sp, #4]
 8008856:	930f      	str	r3, [sp, #60]	; 0x3c
 8008858:	4682      	mov	sl, r0
 800885a:	468b      	mov	fp, r1
 800885c:	4649      	mov	r1, r9
 800885e:	4640      	mov	r0, r8
 8008860:	f7f8 f97a 	bl	8000b58 <__aeabi_d2iz>
 8008864:	4606      	mov	r6, r0
 8008866:	f7f7 fe5d 	bl	8000524 <__aeabi_i2d>
 800886a:	3630      	adds	r6, #48	; 0x30
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fd08 	bl	8000288 <__aeabi_dsub>
 8008878:	f805 6b01 	strb.w	r6, [r5], #1
 800887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887e:	429d      	cmp	r5, r3
 8008880:	4680      	mov	r8, r0
 8008882:	4689      	mov	r9, r1
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	d124      	bne.n	80088d4 <_dtoa_r+0x60c>
 800888a:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <_dtoa_r+0x630>)
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	f7f7 fcfc 	bl	800028c <__adddf3>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f8 f93c 	bl	8000b18 <__aeabi_dcmpgt>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d173      	bne.n	800898c <_dtoa_r+0x6c4>
 80088a4:	4652      	mov	r2, sl
 80088a6:	465b      	mov	r3, fp
 80088a8:	4913      	ldr	r1, [pc, #76]	; (80088f8 <_dtoa_r+0x630>)
 80088aa:	2000      	movs	r0, #0
 80088ac:	f7f7 fcec 	bl	8000288 <__aeabi_dsub>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4640      	mov	r0, r8
 80088b6:	4649      	mov	r1, r9
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f43f af35 	beq.w	800872c <_dtoa_r+0x464>
 80088c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088c4:	1e6b      	subs	r3, r5, #1
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088cc:	2b30      	cmp	r3, #48	; 0x30
 80088ce:	d0f8      	beq.n	80088c2 <_dtoa_r+0x5fa>
 80088d0:	9700      	str	r7, [sp, #0]
 80088d2:	e049      	b.n	8008968 <_dtoa_r+0x6a0>
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <_dtoa_r+0x624>)
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	4680      	mov	r8, r0
 80088dc:	4689      	mov	r9, r1
 80088de:	e7bd      	b.n	800885c <_dtoa_r+0x594>
 80088e0:	0800a408 	.word	0x0800a408
 80088e4:	0800a3e0 	.word	0x0800a3e0
 80088e8:	3ff00000 	.word	0x3ff00000
 80088ec:	40240000 	.word	0x40240000
 80088f0:	401c0000 	.word	0x401c0000
 80088f4:	40140000 	.word	0x40140000
 80088f8:	3fe00000 	.word	0x3fe00000
 80088fc:	9d01      	ldr	r5, [sp, #4]
 80088fe:	4656      	mov	r6, sl
 8008900:	465f      	mov	r7, fp
 8008902:	4642      	mov	r2, r8
 8008904:	464b      	mov	r3, r9
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 ff9f 	bl	800084c <__aeabi_ddiv>
 800890e:	f7f8 f923 	bl	8000b58 <__aeabi_d2iz>
 8008912:	4682      	mov	sl, r0
 8008914:	f7f7 fe06 	bl	8000524 <__aeabi_i2d>
 8008918:	4642      	mov	r2, r8
 800891a:	464b      	mov	r3, r9
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	f805 6b01 	strb.w	r6, [r5], #1
 8008934:	9e01      	ldr	r6, [sp, #4]
 8008936:	9f03      	ldr	r7, [sp, #12]
 8008938:	1bae      	subs	r6, r5, r6
 800893a:	42b7      	cmp	r7, r6
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	d135      	bne.n	80089ae <_dtoa_r+0x6e6>
 8008942:	f7f7 fca3 	bl	800028c <__adddf3>
 8008946:	4642      	mov	r2, r8
 8008948:	464b      	mov	r3, r9
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	f7f8 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8008952:	b9d0      	cbnz	r0, 800898a <_dtoa_r+0x6c2>
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f8 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008960:	b110      	cbz	r0, 8008968 <_dtoa_r+0x6a0>
 8008962:	f01a 0f01 	tst.w	sl, #1
 8008966:	d110      	bne.n	800898a <_dtoa_r+0x6c2>
 8008968:	4620      	mov	r0, r4
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	f000 fd05 	bl	800937c <_Bfree>
 8008972:	2300      	movs	r3, #0
 8008974:	9800      	ldr	r0, [sp, #0]
 8008976:	702b      	strb	r3, [r5, #0]
 8008978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800897a:	3001      	adds	r0, #1
 800897c:	6018      	str	r0, [r3, #0]
 800897e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008980:	2b00      	cmp	r3, #0
 8008982:	f43f acf1 	beq.w	8008368 <_dtoa_r+0xa0>
 8008986:	601d      	str	r5, [r3, #0]
 8008988:	e4ee      	b.n	8008368 <_dtoa_r+0xa0>
 800898a:	9f00      	ldr	r7, [sp, #0]
 800898c:	462b      	mov	r3, r5
 800898e:	461d      	mov	r5, r3
 8008990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008994:	2a39      	cmp	r2, #57	; 0x39
 8008996:	d106      	bne.n	80089a6 <_dtoa_r+0x6de>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d1f7      	bne.n	800898e <_dtoa_r+0x6c6>
 800899e:	9901      	ldr	r1, [sp, #4]
 80089a0:	2230      	movs	r2, #48	; 0x30
 80089a2:	3701      	adds	r7, #1
 80089a4:	700a      	strb	r2, [r1, #0]
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	3201      	adds	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	e790      	b.n	80088d0 <_dtoa_r+0x608>
 80089ae:	4ba6      	ldr	r3, [pc, #664]	; (8008c48 <_dtoa_r+0x980>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fe21 	bl	80005f8 <__aeabi_dmul>
 80089b6:	2200      	movs	r2, #0
 80089b8:	2300      	movs	r3, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f8 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d09d      	beq.n	8008902 <_dtoa_r+0x63a>
 80089c6:	e7cf      	b.n	8008968 <_dtoa_r+0x6a0>
 80089c8:	9a08      	ldr	r2, [sp, #32]
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	f000 80d7 	beq.w	8008b7e <_dtoa_r+0x8b6>
 80089d0:	9a06      	ldr	r2, [sp, #24]
 80089d2:	2a01      	cmp	r2, #1
 80089d4:	f300 80ba 	bgt.w	8008b4c <_dtoa_r+0x884>
 80089d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089da:	2a00      	cmp	r2, #0
 80089dc:	f000 80b2 	beq.w	8008b44 <_dtoa_r+0x87c>
 80089e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089e4:	9e07      	ldr	r6, [sp, #28]
 80089e6:	9d04      	ldr	r5, [sp, #16]
 80089e8:	9a04      	ldr	r2, [sp, #16]
 80089ea:	441a      	add	r2, r3
 80089ec:	9204      	str	r2, [sp, #16]
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	2101      	movs	r1, #1
 80089f2:	441a      	add	r2, r3
 80089f4:	4620      	mov	r0, r4
 80089f6:	9205      	str	r2, [sp, #20]
 80089f8:	f000 fd78 	bl	80094ec <__i2b>
 80089fc:	4607      	mov	r7, r0
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	dd0c      	ble.n	8008a1c <_dtoa_r+0x754>
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dd09      	ble.n	8008a1c <_dtoa_r+0x754>
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	9a04      	ldr	r2, [sp, #16]
 8008a0c:	bfa8      	it	ge
 8008a0e:	462b      	movge	r3, r5
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	9a05      	ldr	r2, [sp, #20]
 8008a16:	1aed      	subs	r5, r5, r3
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	b31b      	cbz	r3, 8008a68 <_dtoa_r+0x7a0>
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80af 	beq.w	8008b86 <_dtoa_r+0x8be>
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	dd13      	ble.n	8008a54 <_dtoa_r+0x78c>
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fe1b 	bl	800966c <__pow5mult>
 8008a36:	ee18 2a10 	vmov	r2, s16
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 fd6a 	bl	8009518 <__multiply>
 8008a44:	ee18 1a10 	vmov	r1, s16
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fc96 	bl	800937c <_Bfree>
 8008a50:	ee08 8a10 	vmov	s16, r8
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	1b9a      	subs	r2, r3, r6
 8008a58:	d006      	beq.n	8008a68 <_dtoa_r+0x7a0>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fe04 	bl	800966c <__pow5mult>
 8008a64:	ee08 0a10 	vmov	s16, r0
 8008a68:	2101      	movs	r1, #1
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fd3e 	bl	80094ec <__i2b>
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	f340 8088 	ble.w	8008b8a <_dtoa_r+0x8c2>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fdf4 	bl	800966c <__pow5mult>
 8008a84:	9b06      	ldr	r3, [sp, #24]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	4606      	mov	r6, r0
 8008a8a:	f340 8081 	ble.w	8008b90 <_dtoa_r+0x8c8>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	6933      	ldr	r3, [r6, #16]
 8008a94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a98:	6918      	ldr	r0, [r3, #16]
 8008a9a:	f000 fcd7 	bl	800944c <__hi0bits>
 8008a9e:	f1c0 0020 	rsb	r0, r0, #32
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	4418      	add	r0, r3
 8008aa6:	f010 001f 	ands.w	r0, r0, #31
 8008aaa:	f000 8092 	beq.w	8008bd2 <_dtoa_r+0x90a>
 8008aae:	f1c0 0320 	rsb	r3, r0, #32
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	f340 808a 	ble.w	8008bcc <_dtoa_r+0x904>
 8008ab8:	f1c0 001c 	rsb	r0, r0, #28
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	4403      	add	r3, r0
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	4403      	add	r3, r0
 8008ac6:	4405      	add	r5, r0
 8008ac8:	9305      	str	r3, [sp, #20]
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd07      	ble.n	8008ae0 <_dtoa_r+0x818>
 8008ad0:	ee18 1a10 	vmov	r1, s16
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fe22 	bl	8009720 <__lshift>
 8008adc:	ee08 0a10 	vmov	s16, r0
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x82a>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fe18 	bl	8009720 <__lshift>
 8008af0:	4606      	mov	r6, r0
 8008af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d06e      	beq.n	8008bd6 <_dtoa_r+0x90e>
 8008af8:	ee18 0a10 	vmov	r0, s16
 8008afc:	4631      	mov	r1, r6
 8008afe:	f000 fe7f 	bl	8009800 <__mcmp>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	da67      	bge.n	8008bd6 <_dtoa_r+0x90e>
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	220a      	movs	r2, #10
 8008b12:	2300      	movs	r3, #0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fc53 	bl	80093c0 <__multadd>
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	ee08 0a10 	vmov	s16, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81b1 	beq.w	8008e88 <_dtoa_r+0xbc0>
 8008b26:	2300      	movs	r3, #0
 8008b28:	4639      	mov	r1, r7
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fc47 	bl	80093c0 <__multadd>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	4607      	mov	r7, r0
 8008b38:	f300 808e 	bgt.w	8008c58 <_dtoa_r+0x990>
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc51      	bgt.n	8008be6 <_dtoa_r+0x91e>
 8008b42:	e089      	b.n	8008c58 <_dtoa_r+0x990>
 8008b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b4a:	e74b      	b.n	80089e4 <_dtoa_r+0x71c>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1e5e      	subs	r6, r3, #1
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	bfbf      	itttt	lt
 8008b56:	9b07      	ldrlt	r3, [sp, #28]
 8008b58:	9607      	strlt	r6, [sp, #28]
 8008b5a:	1af2      	sublt	r2, r6, r3
 8008b5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b5e:	bfb6      	itet	lt
 8008b60:	189b      	addlt	r3, r3, r2
 8008b62:	1b9e      	subge	r6, r3, r6
 8008b64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	bfb8      	it	lt
 8008b6a:	2600      	movlt	r6, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb7      	itett	lt
 8008b70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b78:	1a9d      	sublt	r5, r3, r2
 8008b7a:	2300      	movlt	r3, #0
 8008b7c:	e734      	b.n	80089e8 <_dtoa_r+0x720>
 8008b7e:	9e07      	ldr	r6, [sp, #28]
 8008b80:	9d04      	ldr	r5, [sp, #16]
 8008b82:	9f08      	ldr	r7, [sp, #32]
 8008b84:	e73b      	b.n	80089fe <_dtoa_r+0x736>
 8008b86:	9a07      	ldr	r2, [sp, #28]
 8008b88:	e767      	b.n	8008a5a <_dtoa_r+0x792>
 8008b8a:	9b06      	ldr	r3, [sp, #24]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	dc18      	bgt.n	8008bc2 <_dtoa_r+0x8fa>
 8008b90:	f1ba 0f00 	cmp.w	sl, #0
 8008b94:	d115      	bne.n	8008bc2 <_dtoa_r+0x8fa>
 8008b96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b9a:	b993      	cbnz	r3, 8008bc2 <_dtoa_r+0x8fa>
 8008b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ba0:	0d1b      	lsrs	r3, r3, #20
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	b183      	cbz	r3, 8008bc8 <_dtoa_r+0x900>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	9b05      	ldr	r3, [sp, #20]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f04f 0801 	mov.w	r8, #1
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f47f af6a 	bne.w	8008a92 <_dtoa_r+0x7ca>
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e76f      	b.n	8008aa2 <_dtoa_r+0x7da>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	e7f6      	b.n	8008bb6 <_dtoa_r+0x8ee>
 8008bc8:	4698      	mov	r8, r3
 8008bca:	e7f4      	b.n	8008bb6 <_dtoa_r+0x8ee>
 8008bcc:	f43f af7d 	beq.w	8008aca <_dtoa_r+0x802>
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	301c      	adds	r0, #28
 8008bd4:	e772      	b.n	8008abc <_dtoa_r+0x7f4>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc37      	bgt.n	8008c4c <_dtoa_r+0x984>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	dd34      	ble.n	8008c4c <_dtoa_r+0x984>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	9302      	str	r3, [sp, #8]
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	b96b      	cbnz	r3, 8008c06 <_dtoa_r+0x93e>
 8008bea:	4631      	mov	r1, r6
 8008bec:	2205      	movs	r2, #5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 fbe6 	bl	80093c0 <__multadd>
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	ee18 0a10 	vmov	r0, s16
 8008bfc:	f000 fe00 	bl	8009800 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f73f adbb 	bgt.w	800877c <_dtoa_r+0x4b4>
 8008c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c08:	9d01      	ldr	r5, [sp, #4]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	4631      	mov	r1, r6
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fbb1 	bl	800937c <_Bfree>
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	f43f aea4 	beq.w	8008968 <_dtoa_r+0x6a0>
 8008c20:	f1b8 0f00 	cmp.w	r8, #0
 8008c24:	d005      	beq.n	8008c32 <_dtoa_r+0x96a>
 8008c26:	45b8      	cmp	r8, r7
 8008c28:	d003      	beq.n	8008c32 <_dtoa_r+0x96a>
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fba5 	bl	800937c <_Bfree>
 8008c32:	4639      	mov	r1, r7
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fba1 	bl	800937c <_Bfree>
 8008c3a:	e695      	b.n	8008968 <_dtoa_r+0x6a0>
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	4637      	mov	r7, r6
 8008c40:	e7e1      	b.n	8008c06 <_dtoa_r+0x93e>
 8008c42:	9700      	str	r7, [sp, #0]
 8008c44:	4637      	mov	r7, r6
 8008c46:	e599      	b.n	800877c <_dtoa_r+0x4b4>
 8008c48:	40240000 	.word	0x40240000
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 80ca 	beq.w	8008de8 <_dtoa_r+0xb20>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	dd05      	ble.n	8008c68 <_dtoa_r+0x9a0>
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fd5d 	bl	8009720 <__lshift>
 8008c66:	4607      	mov	r7, r0
 8008c68:	f1b8 0f00 	cmp.w	r8, #0
 8008c6c:	d05b      	beq.n	8008d26 <_dtoa_r+0xa5e>
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fb43 	bl	80092fc <_Balloc>
 8008c76:	4605      	mov	r5, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <_dtoa_r+0x9be>
 8008c7a:	4b87      	ldr	r3, [pc, #540]	; (8008e98 <_dtoa_r+0xbd0>)
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c82:	f7ff bb3b 	b.w	80082fc <_dtoa_r+0x34>
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	3202      	adds	r2, #2
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	f107 010c 	add.w	r1, r7, #12
 8008c90:	300c      	adds	r0, #12
 8008c92:	f7fe fcd5 	bl	8007640 <memcpy>
 8008c96:	2201      	movs	r2, #1
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fd40 	bl	8009720 <__lshift>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	f103 0901 	add.w	r9, r3, #1
 8008ca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008caa:	4413      	add	r3, r2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	f00a 0301 	and.w	r3, sl, #1
 8008cb2:	46b8      	mov	r8, r7
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	4631      	mov	r1, r6
 8008cba:	ee18 0a10 	vmov	r0, s16
 8008cbe:	f7ff fa75 	bl	80081ac <quorem>
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	9002      	str	r0, [sp, #8]
 8008cc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cca:	ee18 0a10 	vmov	r0, s16
 8008cce:	f000 fd97 	bl	8009800 <__mcmp>
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	9003      	str	r0, [sp, #12]
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 fdad 	bl	8009838 <__mdiff>
 8008cde:	68c2      	ldr	r2, [r0, #12]
 8008ce0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	bb02      	cbnz	r2, 8008d2a <_dtoa_r+0xa62>
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ee18 0a10 	vmov	r0, s16
 8008cee:	f000 fd87 	bl	8009800 <__mcmp>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	9207      	str	r2, [sp, #28]
 8008cfa:	f000 fb3f 	bl	800937c <_Bfree>
 8008cfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d02:	ea43 0102 	orr.w	r1, r3, r2
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	464d      	mov	r5, r9
 8008d0c:	d10f      	bne.n	8008d2e <_dtoa_r+0xa66>
 8008d0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d12:	d02a      	beq.n	8008d6a <_dtoa_r+0xaa2>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd02      	ble.n	8008d20 <_dtoa_r+0xa58>
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d20:	f88b a000 	strb.w	sl, [fp]
 8008d24:	e775      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d26:	4638      	mov	r0, r7
 8008d28:	e7ba      	b.n	8008ca0 <_dtoa_r+0x9d8>
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	e7e2      	b.n	8008cf4 <_dtoa_r+0xa2c>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	db04      	blt.n	8008d3e <_dtoa_r+0xa76>
 8008d34:	9906      	ldr	r1, [sp, #24]
 8008d36:	430b      	orrs	r3, r1
 8008d38:	9904      	ldr	r1, [sp, #16]
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	d122      	bne.n	8008d84 <_dtoa_r+0xabc>
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	ddee      	ble.n	8008d20 <_dtoa_r+0xa58>
 8008d42:	ee18 1a10 	vmov	r1, s16
 8008d46:	2201      	movs	r2, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fce9 	bl	8009720 <__lshift>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	ee08 0a10 	vmov	s16, r0
 8008d54:	f000 fd54 	bl	8009800 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc03      	bgt.n	8008d64 <_dtoa_r+0xa9c>
 8008d5c:	d1e0      	bne.n	8008d20 <_dtoa_r+0xa58>
 8008d5e:	f01a 0f01 	tst.w	sl, #1
 8008d62:	d0dd      	beq.n	8008d20 <_dtoa_r+0xa58>
 8008d64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d68:	d1d7      	bne.n	8008d1a <_dtoa_r+0xa52>
 8008d6a:	2339      	movs	r3, #57	; 0x39
 8008d6c:	f88b 3000 	strb.w	r3, [fp]
 8008d70:	462b      	mov	r3, r5
 8008d72:	461d      	mov	r5, r3
 8008d74:	3b01      	subs	r3, #1
 8008d76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d7a:	2a39      	cmp	r2, #57	; 0x39
 8008d7c:	d071      	beq.n	8008e62 <_dtoa_r+0xb9a>
 8008d7e:	3201      	adds	r2, #1
 8008d80:	701a      	strb	r2, [r3, #0]
 8008d82:	e746      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	dd07      	ble.n	8008d98 <_dtoa_r+0xad0>
 8008d88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d8c:	d0ed      	beq.n	8008d6a <_dtoa_r+0xaa2>
 8008d8e:	f10a 0301 	add.w	r3, sl, #1
 8008d92:	f88b 3000 	strb.w	r3, [fp]
 8008d96:	e73c      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d98:	9b05      	ldr	r3, [sp, #20]
 8008d9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d9e:	4599      	cmp	r9, r3
 8008da0:	d047      	beq.n	8008e32 <_dtoa_r+0xb6a>
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fb08 	bl	80093c0 <__multadd>
 8008db0:	45b8      	cmp	r8, r7
 8008db2:	ee08 0a10 	vmov	s16, r0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	f04f 020a 	mov.w	r2, #10
 8008dbe:	4641      	mov	r1, r8
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	d106      	bne.n	8008dd2 <_dtoa_r+0xb0a>
 8008dc4:	f000 fafc 	bl	80093c0 <__multadd>
 8008dc8:	4680      	mov	r8, r0
 8008dca:	4607      	mov	r7, r0
 8008dcc:	f109 0901 	add.w	r9, r9, #1
 8008dd0:	e772      	b.n	8008cb8 <_dtoa_r+0x9f0>
 8008dd2:	f000 faf5 	bl	80093c0 <__multadd>
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4680      	mov	r8, r0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 faee 	bl	80093c0 <__multadd>
 8008de4:	4607      	mov	r7, r0
 8008de6:	e7f1      	b.n	8008dcc <_dtoa_r+0xb04>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	9d01      	ldr	r5, [sp, #4]
 8008dee:	ee18 0a10 	vmov	r0, s16
 8008df2:	4631      	mov	r1, r6
 8008df4:	f7ff f9da 	bl	80081ac <quorem>
 8008df8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	f805 ab01 	strb.w	sl, [r5], #1
 8008e02:	1aea      	subs	r2, r5, r3
 8008e04:	9b02      	ldr	r3, [sp, #8]
 8008e06:	4293      	cmp	r3, r2
 8008e08:	dd09      	ble.n	8008e1e <_dtoa_r+0xb56>
 8008e0a:	ee18 1a10 	vmov	r1, s16
 8008e0e:	2300      	movs	r3, #0
 8008e10:	220a      	movs	r2, #10
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fad4 	bl	80093c0 <__multadd>
 8008e18:	ee08 0a10 	vmov	s16, r0
 8008e1c:	e7e7      	b.n	8008dee <_dtoa_r+0xb26>
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bfc8      	it	gt
 8008e24:	461d      	movgt	r5, r3
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	bfd8      	it	le
 8008e2a:	2501      	movle	r5, #1
 8008e2c:	441d      	add	r5, r3
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	ee18 1a10 	vmov	r1, s16
 8008e36:	2201      	movs	r2, #1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fc71 	bl	8009720 <__lshift>
 8008e3e:	4631      	mov	r1, r6
 8008e40:	ee08 0a10 	vmov	s16, r0
 8008e44:	f000 fcdc 	bl	8009800 <__mcmp>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dc91      	bgt.n	8008d70 <_dtoa_r+0xaa8>
 8008e4c:	d102      	bne.n	8008e54 <_dtoa_r+0xb8c>
 8008e4e:	f01a 0f01 	tst.w	sl, #1
 8008e52:	d18d      	bne.n	8008d70 <_dtoa_r+0xaa8>
 8008e54:	462b      	mov	r3, r5
 8008e56:	461d      	mov	r5, r3
 8008e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e5c:	2a30      	cmp	r2, #48	; 0x30
 8008e5e:	d0fa      	beq.n	8008e56 <_dtoa_r+0xb8e>
 8008e60:	e6d7      	b.n	8008c12 <_dtoa_r+0x94a>
 8008e62:	9a01      	ldr	r2, [sp, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d184      	bne.n	8008d72 <_dtoa_r+0xaaa>
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2331      	movs	r3, #49	; 0x31
 8008e70:	7013      	strb	r3, [r2, #0]
 8008e72:	e6ce      	b.n	8008c12 <_dtoa_r+0x94a>
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <_dtoa_r+0xbd4>)
 8008e76:	f7ff ba95 	b.w	80083a4 <_dtoa_r+0xdc>
 8008e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f aa6e 	bne.w	800835e <_dtoa_r+0x96>
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <_dtoa_r+0xbd8>)
 8008e84:	f7ff ba8e 	b.w	80083a4 <_dtoa_r+0xdc>
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dcae      	bgt.n	8008dec <_dtoa_r+0xb24>
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f73f aea8 	bgt.w	8008be6 <_dtoa_r+0x91e>
 8008e96:	e7a9      	b.n	8008dec <_dtoa_r+0xb24>
 8008e98:	0800a313 	.word	0x0800a313
 8008e9c:	0800a270 	.word	0x0800a270
 8008ea0:	0800a294 	.word	0x0800a294

08008ea4 <__sflush_r>:
 8008ea4:	898a      	ldrh	r2, [r1, #12]
 8008ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eaa:	4605      	mov	r5, r0
 8008eac:	0710      	lsls	r0, r2, #28
 8008eae:	460c      	mov	r4, r1
 8008eb0:	d458      	bmi.n	8008f64 <__sflush_r+0xc0>
 8008eb2:	684b      	ldr	r3, [r1, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dc05      	bgt.n	8008ec4 <__sflush_r+0x20>
 8008eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dc02      	bgt.n	8008ec4 <__sflush_r+0x20>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	d0f9      	beq.n	8008ebe <__sflush_r+0x1a>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ed0:	682f      	ldr	r7, [r5, #0]
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	d032      	beq.n	8008f3c <__sflush_r+0x98>
 8008ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	075a      	lsls	r2, r3, #29
 8008edc:	d505      	bpl.n	8008eea <__sflush_r+0x46>
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	1ac0      	subs	r0, r0, r3
 8008ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ee4:	b10b      	cbz	r3, 8008eea <__sflush_r+0x46>
 8008ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ee8:	1ac0      	subs	r0, r0, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	4602      	mov	r2, r0
 8008eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b0      	blx	r6
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	d106      	bne.n	8008f0a <__sflush_r+0x66>
 8008efc:	6829      	ldr	r1, [r5, #0]
 8008efe:	291d      	cmp	r1, #29
 8008f00:	d82c      	bhi.n	8008f5c <__sflush_r+0xb8>
 8008f02:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <__sflush_r+0x108>)
 8008f04:	40ca      	lsrs	r2, r1
 8008f06:	07d6      	lsls	r6, r2, #31
 8008f08:	d528      	bpl.n	8008f5c <__sflush_r+0xb8>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	6062      	str	r2, [r4, #4]
 8008f0e:	04d9      	lsls	r1, r3, #19
 8008f10:	6922      	ldr	r2, [r4, #16]
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	d504      	bpl.n	8008f20 <__sflush_r+0x7c>
 8008f16:	1c42      	adds	r2, r0, #1
 8008f18:	d101      	bne.n	8008f1e <__sflush_r+0x7a>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	b903      	cbnz	r3, 8008f20 <__sflush_r+0x7c>
 8008f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f22:	602f      	str	r7, [r5, #0]
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d0ca      	beq.n	8008ebe <__sflush_r+0x1a>
 8008f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	d002      	beq.n	8008f36 <__sflush_r+0x92>
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 fd7d 	bl	8009a30 <_free_r>
 8008f36:	2000      	movs	r0, #0
 8008f38:	6360      	str	r0, [r4, #52]	; 0x34
 8008f3a:	e7c1      	b.n	8008ec0 <__sflush_r+0x1c>
 8008f3c:	6a21      	ldr	r1, [r4, #32]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b0      	blx	r6
 8008f44:	1c41      	adds	r1, r0, #1
 8008f46:	d1c7      	bne.n	8008ed8 <__sflush_r+0x34>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0c4      	beq.n	8008ed8 <__sflush_r+0x34>
 8008f4e:	2b1d      	cmp	r3, #29
 8008f50:	d001      	beq.n	8008f56 <__sflush_r+0xb2>
 8008f52:	2b16      	cmp	r3, #22
 8008f54:	d101      	bne.n	8008f5a <__sflush_r+0xb6>
 8008f56:	602f      	str	r7, [r5, #0]
 8008f58:	e7b1      	b.n	8008ebe <__sflush_r+0x1a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	e7ad      	b.n	8008ec0 <__sflush_r+0x1c>
 8008f64:	690f      	ldr	r7, [r1, #16]
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	d0a9      	beq.n	8008ebe <__sflush_r+0x1a>
 8008f6a:	0793      	lsls	r3, r2, #30
 8008f6c:	680e      	ldr	r6, [r1, #0]
 8008f6e:	bf08      	it	eq
 8008f70:	694b      	ldreq	r3, [r1, #20]
 8008f72:	600f      	str	r7, [r1, #0]
 8008f74:	bf18      	it	ne
 8008f76:	2300      	movne	r3, #0
 8008f78:	eba6 0807 	sub.w	r8, r6, r7
 8008f7c:	608b      	str	r3, [r1, #8]
 8008f7e:	f1b8 0f00 	cmp.w	r8, #0
 8008f82:	dd9c      	ble.n	8008ebe <__sflush_r+0x1a>
 8008f84:	6a21      	ldr	r1, [r4, #32]
 8008f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f88:	4643      	mov	r3, r8
 8008f8a:	463a      	mov	r2, r7
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b0      	blx	r6
 8008f90:	2800      	cmp	r0, #0
 8008f92:	dc06      	bgt.n	8008fa2 <__sflush_r+0xfe>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	e78e      	b.n	8008ec0 <__sflush_r+0x1c>
 8008fa2:	4407      	add	r7, r0
 8008fa4:	eba8 0800 	sub.w	r8, r8, r0
 8008fa8:	e7e9      	b.n	8008f7e <__sflush_r+0xda>
 8008faa:	bf00      	nop
 8008fac:	20400001 	.word	0x20400001

08008fb0 <_fflush_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	690b      	ldr	r3, [r1, #16]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b913      	cbnz	r3, 8008fc0 <_fflush_r+0x10>
 8008fba:	2500      	movs	r5, #0
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	b118      	cbz	r0, 8008fca <_fflush_r+0x1a>
 8008fc2:	6983      	ldr	r3, [r0, #24]
 8008fc4:	b90b      	cbnz	r3, 8008fca <_fflush_r+0x1a>
 8008fc6:	f000 f887 	bl	80090d8 <__sinit>
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <_fflush_r+0x6c>)
 8008fcc:	429c      	cmp	r4, r3
 8008fce:	d11b      	bne.n	8009008 <_fflush_r+0x58>
 8008fd0:	686c      	ldr	r4, [r5, #4]
 8008fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0ef      	beq.n	8008fba <_fflush_r+0xa>
 8008fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fdc:	07d0      	lsls	r0, r2, #31
 8008fde:	d404      	bmi.n	8008fea <_fflush_r+0x3a>
 8008fe0:	0599      	lsls	r1, r3, #22
 8008fe2:	d402      	bmi.n	8008fea <_fflush_r+0x3a>
 8008fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe6:	f000 f91a 	bl	800921e <__retarget_lock_acquire_recursive>
 8008fea:	4628      	mov	r0, r5
 8008fec:	4621      	mov	r1, r4
 8008fee:	f7ff ff59 	bl	8008ea4 <__sflush_r>
 8008ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ff4:	07da      	lsls	r2, r3, #31
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	d4e0      	bmi.n	8008fbc <_fflush_r+0xc>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	059b      	lsls	r3, r3, #22
 8008ffe:	d4dd      	bmi.n	8008fbc <_fflush_r+0xc>
 8009000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009002:	f000 f90d 	bl	8009220 <__retarget_lock_release_recursive>
 8009006:	e7d9      	b.n	8008fbc <_fflush_r+0xc>
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <_fflush_r+0x70>)
 800900a:	429c      	cmp	r4, r3
 800900c:	d101      	bne.n	8009012 <_fflush_r+0x62>
 800900e:	68ac      	ldr	r4, [r5, #8]
 8009010:	e7df      	b.n	8008fd2 <_fflush_r+0x22>
 8009012:	4b04      	ldr	r3, [pc, #16]	; (8009024 <_fflush_r+0x74>)
 8009014:	429c      	cmp	r4, r3
 8009016:	bf08      	it	eq
 8009018:	68ec      	ldreq	r4, [r5, #12]
 800901a:	e7da      	b.n	8008fd2 <_fflush_r+0x22>
 800901c:	0800a344 	.word	0x0800a344
 8009020:	0800a364 	.word	0x0800a364
 8009024:	0800a324 	.word	0x0800a324

08009028 <std>:
 8009028:	2300      	movs	r3, #0
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	e9c0 3300 	strd	r3, r3, [r0]
 8009032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009036:	6083      	str	r3, [r0, #8]
 8009038:	8181      	strh	r1, [r0, #12]
 800903a:	6643      	str	r3, [r0, #100]	; 0x64
 800903c:	81c2      	strh	r2, [r0, #14]
 800903e:	6183      	str	r3, [r0, #24]
 8009040:	4619      	mov	r1, r3
 8009042:	2208      	movs	r2, #8
 8009044:	305c      	adds	r0, #92	; 0x5c
 8009046:	f7fe fb09 	bl	800765c <memset>
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <std+0x38>)
 800904c:	6263      	str	r3, [r4, #36]	; 0x24
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <std+0x3c>)
 8009050:	62a3      	str	r3, [r4, #40]	; 0x28
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <std+0x40>)
 8009054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <std+0x44>)
 8009058:	6224      	str	r4, [r4, #32]
 800905a:	6323      	str	r3, [r4, #48]	; 0x30
 800905c:	bd10      	pop	{r4, pc}
 800905e:	bf00      	nop
 8009060:	08009c11 	.word	0x08009c11
 8009064:	08009c33 	.word	0x08009c33
 8009068:	08009c6b 	.word	0x08009c6b
 800906c:	08009c8f 	.word	0x08009c8f

08009070 <_cleanup_r>:
 8009070:	4901      	ldr	r1, [pc, #4]	; (8009078 <_cleanup_r+0x8>)
 8009072:	f000 b8af 	b.w	80091d4 <_fwalk_reent>
 8009076:	bf00      	nop
 8009078:	08008fb1 	.word	0x08008fb1

0800907c <__sfmoreglue>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	2268      	movs	r2, #104	; 0x68
 8009080:	1e4d      	subs	r5, r1, #1
 8009082:	4355      	muls	r5, r2
 8009084:	460e      	mov	r6, r1
 8009086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800908a:	f000 fd3d 	bl	8009b08 <_malloc_r>
 800908e:	4604      	mov	r4, r0
 8009090:	b140      	cbz	r0, 80090a4 <__sfmoreglue+0x28>
 8009092:	2100      	movs	r1, #0
 8009094:	e9c0 1600 	strd	r1, r6, [r0]
 8009098:	300c      	adds	r0, #12
 800909a:	60a0      	str	r0, [r4, #8]
 800909c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090a0:	f7fe fadc 	bl	800765c <memset>
 80090a4:	4620      	mov	r0, r4
 80090a6:	bd70      	pop	{r4, r5, r6, pc}

080090a8 <__sfp_lock_acquire>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__sfp_lock_acquire+0x8>)
 80090aa:	f000 b8b8 	b.w	800921e <__retarget_lock_acquire_recursive>
 80090ae:	bf00      	nop
 80090b0:	20001d0d 	.word	0x20001d0d

080090b4 <__sfp_lock_release>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__sfp_lock_release+0x8>)
 80090b6:	f000 b8b3 	b.w	8009220 <__retarget_lock_release_recursive>
 80090ba:	bf00      	nop
 80090bc:	20001d0d 	.word	0x20001d0d

080090c0 <__sinit_lock_acquire>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__sinit_lock_acquire+0x8>)
 80090c2:	f000 b8ac 	b.w	800921e <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	20001d0e 	.word	0x20001d0e

080090cc <__sinit_lock_release>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__sinit_lock_release+0x8>)
 80090ce:	f000 b8a7 	b.w	8009220 <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	20001d0e 	.word	0x20001d0e

080090d8 <__sinit>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4604      	mov	r4, r0
 80090dc:	f7ff fff0 	bl	80090c0 <__sinit_lock_acquire>
 80090e0:	69a3      	ldr	r3, [r4, #24]
 80090e2:	b11b      	cbz	r3, 80090ec <__sinit+0x14>
 80090e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e8:	f7ff bff0 	b.w	80090cc <__sinit_lock_release>
 80090ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090f0:	6523      	str	r3, [r4, #80]	; 0x50
 80090f2:	4b13      	ldr	r3, [pc, #76]	; (8009140 <__sinit+0x68>)
 80090f4:	4a13      	ldr	r2, [pc, #76]	; (8009144 <__sinit+0x6c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	bf04      	itt	eq
 80090fe:	2301      	moveq	r3, #1
 8009100:	61a3      	streq	r3, [r4, #24]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f820 	bl	8009148 <__sfp>
 8009108:	6060      	str	r0, [r4, #4]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f81c 	bl	8009148 <__sfp>
 8009110:	60a0      	str	r0, [r4, #8]
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f818 	bl	8009148 <__sfp>
 8009118:	2200      	movs	r2, #0
 800911a:	60e0      	str	r0, [r4, #12]
 800911c:	2104      	movs	r1, #4
 800911e:	6860      	ldr	r0, [r4, #4]
 8009120:	f7ff ff82 	bl	8009028 <std>
 8009124:	68a0      	ldr	r0, [r4, #8]
 8009126:	2201      	movs	r2, #1
 8009128:	2109      	movs	r1, #9
 800912a:	f7ff ff7d 	bl	8009028 <std>
 800912e:	68e0      	ldr	r0, [r4, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	2112      	movs	r1, #18
 8009134:	f7ff ff78 	bl	8009028 <std>
 8009138:	2301      	movs	r3, #1
 800913a:	61a3      	str	r3, [r4, #24]
 800913c:	e7d2      	b.n	80090e4 <__sinit+0xc>
 800913e:	bf00      	nop
 8009140:	0800a25c 	.word	0x0800a25c
 8009144:	08009071 	.word	0x08009071

08009148 <__sfp>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	4607      	mov	r7, r0
 800914c:	f7ff ffac 	bl	80090a8 <__sfp_lock_acquire>
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <__sfp+0x84>)
 8009152:	681e      	ldr	r6, [r3, #0]
 8009154:	69b3      	ldr	r3, [r6, #24]
 8009156:	b913      	cbnz	r3, 800915e <__sfp+0x16>
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff ffbd 	bl	80090d8 <__sinit>
 800915e:	3648      	adds	r6, #72	; 0x48
 8009160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009164:	3b01      	subs	r3, #1
 8009166:	d503      	bpl.n	8009170 <__sfp+0x28>
 8009168:	6833      	ldr	r3, [r6, #0]
 800916a:	b30b      	cbz	r3, 80091b0 <__sfp+0x68>
 800916c:	6836      	ldr	r6, [r6, #0]
 800916e:	e7f7      	b.n	8009160 <__sfp+0x18>
 8009170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009174:	b9d5      	cbnz	r5, 80091ac <__sfp+0x64>
 8009176:	4b16      	ldr	r3, [pc, #88]	; (80091d0 <__sfp+0x88>)
 8009178:	60e3      	str	r3, [r4, #12]
 800917a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800917e:	6665      	str	r5, [r4, #100]	; 0x64
 8009180:	f000 f84c 	bl	800921c <__retarget_lock_init_recursive>
 8009184:	f7ff ff96 	bl	80090b4 <__sfp_lock_release>
 8009188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800918c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009190:	6025      	str	r5, [r4, #0]
 8009192:	61a5      	str	r5, [r4, #24]
 8009194:	2208      	movs	r2, #8
 8009196:	4629      	mov	r1, r5
 8009198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800919c:	f7fe fa5e 	bl	800765c <memset>
 80091a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091a8:	4620      	mov	r0, r4
 80091aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ac:	3468      	adds	r4, #104	; 0x68
 80091ae:	e7d9      	b.n	8009164 <__sfp+0x1c>
 80091b0:	2104      	movs	r1, #4
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7ff ff62 	bl	800907c <__sfmoreglue>
 80091b8:	4604      	mov	r4, r0
 80091ba:	6030      	str	r0, [r6, #0]
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1d5      	bne.n	800916c <__sfp+0x24>
 80091c0:	f7ff ff78 	bl	80090b4 <__sfp_lock_release>
 80091c4:	230c      	movs	r3, #12
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	e7ee      	b.n	80091a8 <__sfp+0x60>
 80091ca:	bf00      	nop
 80091cc:	0800a25c 	.word	0x0800a25c
 80091d0:	ffff0001 	.word	0xffff0001

080091d4 <_fwalk_reent>:
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	4606      	mov	r6, r0
 80091da:	4688      	mov	r8, r1
 80091dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091e0:	2700      	movs	r7, #0
 80091e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091e6:	f1b9 0901 	subs.w	r9, r9, #1
 80091ea:	d505      	bpl.n	80091f8 <_fwalk_reent+0x24>
 80091ec:	6824      	ldr	r4, [r4, #0]
 80091ee:	2c00      	cmp	r4, #0
 80091f0:	d1f7      	bne.n	80091e2 <_fwalk_reent+0xe>
 80091f2:	4638      	mov	r0, r7
 80091f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f8:	89ab      	ldrh	r3, [r5, #12]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d907      	bls.n	800920e <_fwalk_reent+0x3a>
 80091fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009202:	3301      	adds	r3, #1
 8009204:	d003      	beq.n	800920e <_fwalk_reent+0x3a>
 8009206:	4629      	mov	r1, r5
 8009208:	4630      	mov	r0, r6
 800920a:	47c0      	blx	r8
 800920c:	4307      	orrs	r7, r0
 800920e:	3568      	adds	r5, #104	; 0x68
 8009210:	e7e9      	b.n	80091e6 <_fwalk_reent+0x12>
	...

08009214 <_localeconv_r>:
 8009214:	4800      	ldr	r0, [pc, #0]	; (8009218 <_localeconv_r+0x4>)
 8009216:	4770      	bx	lr
 8009218:	20000164 	.word	0x20000164

0800921c <__retarget_lock_init_recursive>:
 800921c:	4770      	bx	lr

0800921e <__retarget_lock_acquire_recursive>:
 800921e:	4770      	bx	lr

08009220 <__retarget_lock_release_recursive>:
 8009220:	4770      	bx	lr

08009222 <__swhatbuf_r>:
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	460e      	mov	r6, r1
 8009226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922a:	2900      	cmp	r1, #0
 800922c:	b096      	sub	sp, #88	; 0x58
 800922e:	4614      	mov	r4, r2
 8009230:	461d      	mov	r5, r3
 8009232:	da08      	bge.n	8009246 <__swhatbuf_r+0x24>
 8009234:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	602a      	str	r2, [r5, #0]
 800923c:	061a      	lsls	r2, r3, #24
 800923e:	d410      	bmi.n	8009262 <__swhatbuf_r+0x40>
 8009240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009244:	e00e      	b.n	8009264 <__swhatbuf_r+0x42>
 8009246:	466a      	mov	r2, sp
 8009248:	f000 fd78 	bl	8009d3c <_fstat_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	dbf1      	blt.n	8009234 <__swhatbuf_r+0x12>
 8009250:	9a01      	ldr	r2, [sp, #4]
 8009252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800925a:	425a      	negs	r2, r3
 800925c:	415a      	adcs	r2, r3
 800925e:	602a      	str	r2, [r5, #0]
 8009260:	e7ee      	b.n	8009240 <__swhatbuf_r+0x1e>
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	2000      	movs	r0, #0
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	b016      	add	sp, #88	; 0x58
 800926a:	bd70      	pop	{r4, r5, r6, pc}

0800926c <__smakebuf_r>:
 800926c:	898b      	ldrh	r3, [r1, #12]
 800926e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009270:	079d      	lsls	r5, r3, #30
 8009272:	4606      	mov	r6, r0
 8009274:	460c      	mov	r4, r1
 8009276:	d507      	bpl.n	8009288 <__smakebuf_r+0x1c>
 8009278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	6123      	str	r3, [r4, #16]
 8009280:	2301      	movs	r3, #1
 8009282:	6163      	str	r3, [r4, #20]
 8009284:	b002      	add	sp, #8
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	ab01      	add	r3, sp, #4
 800928a:	466a      	mov	r2, sp
 800928c:	f7ff ffc9 	bl	8009222 <__swhatbuf_r>
 8009290:	9900      	ldr	r1, [sp, #0]
 8009292:	4605      	mov	r5, r0
 8009294:	4630      	mov	r0, r6
 8009296:	f000 fc37 	bl	8009b08 <_malloc_r>
 800929a:	b948      	cbnz	r0, 80092b0 <__smakebuf_r+0x44>
 800929c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a0:	059a      	lsls	r2, r3, #22
 80092a2:	d4ef      	bmi.n	8009284 <__smakebuf_r+0x18>
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	f043 0302 	orr.w	r3, r3, #2
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	e7e3      	b.n	8009278 <__smakebuf_r+0xc>
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <__smakebuf_r+0x7c>)
 80092b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	6020      	str	r0, [r4, #0]
 80092b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	9b00      	ldr	r3, [sp, #0]
 80092c0:	6163      	str	r3, [r4, #20]
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	6120      	str	r0, [r4, #16]
 80092c6:	b15b      	cbz	r3, 80092e0 <__smakebuf_r+0x74>
 80092c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fd47 	bl	8009d60 <_isatty_r>
 80092d2:	b128      	cbz	r0, 80092e0 <__smakebuf_r+0x74>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	89a0      	ldrh	r0, [r4, #12]
 80092e2:	4305      	orrs	r5, r0
 80092e4:	81a5      	strh	r5, [r4, #12]
 80092e6:	e7cd      	b.n	8009284 <__smakebuf_r+0x18>
 80092e8:	08009071 	.word	0x08009071

080092ec <malloc>:
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <malloc+0xc>)
 80092ee:	4601      	mov	r1, r0
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f000 bc09 	b.w	8009b08 <_malloc_r>
 80092f6:	bf00      	nop
 80092f8:	20000010 	.word	0x20000010

080092fc <_Balloc>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009300:	4604      	mov	r4, r0
 8009302:	460d      	mov	r5, r1
 8009304:	b976      	cbnz	r6, 8009324 <_Balloc+0x28>
 8009306:	2010      	movs	r0, #16
 8009308:	f7ff fff0 	bl	80092ec <malloc>
 800930c:	4602      	mov	r2, r0
 800930e:	6260      	str	r0, [r4, #36]	; 0x24
 8009310:	b920      	cbnz	r0, 800931c <_Balloc+0x20>
 8009312:	4b18      	ldr	r3, [pc, #96]	; (8009374 <_Balloc+0x78>)
 8009314:	4818      	ldr	r0, [pc, #96]	; (8009378 <_Balloc+0x7c>)
 8009316:	2166      	movs	r1, #102	; 0x66
 8009318:	f000 fcd0 	bl	8009cbc <__assert_func>
 800931c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009320:	6006      	str	r6, [r0, #0]
 8009322:	60c6      	str	r6, [r0, #12]
 8009324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009326:	68f3      	ldr	r3, [r6, #12]
 8009328:	b183      	cbz	r3, 800934c <_Balloc+0x50>
 800932a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009332:	b9b8      	cbnz	r0, 8009364 <_Balloc+0x68>
 8009334:	2101      	movs	r1, #1
 8009336:	fa01 f605 	lsl.w	r6, r1, r5
 800933a:	1d72      	adds	r2, r6, #5
 800933c:	0092      	lsls	r2, r2, #2
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fb60 	bl	8009a04 <_calloc_r>
 8009344:	b160      	cbz	r0, 8009360 <_Balloc+0x64>
 8009346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800934a:	e00e      	b.n	800936a <_Balloc+0x6e>
 800934c:	2221      	movs	r2, #33	; 0x21
 800934e:	2104      	movs	r1, #4
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fb57 	bl	8009a04 <_calloc_r>
 8009356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009358:	60f0      	str	r0, [r6, #12]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e4      	bne.n	800932a <_Balloc+0x2e>
 8009360:	2000      	movs	r0, #0
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	6802      	ldr	r2, [r0, #0]
 8009366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800936a:	2300      	movs	r3, #0
 800936c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009370:	e7f7      	b.n	8009362 <_Balloc+0x66>
 8009372:	bf00      	nop
 8009374:	0800a2a1 	.word	0x0800a2a1
 8009378:	0800a384 	.word	0x0800a384

0800937c <_Bfree>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009380:	4605      	mov	r5, r0
 8009382:	460c      	mov	r4, r1
 8009384:	b976      	cbnz	r6, 80093a4 <_Bfree+0x28>
 8009386:	2010      	movs	r0, #16
 8009388:	f7ff ffb0 	bl	80092ec <malloc>
 800938c:	4602      	mov	r2, r0
 800938e:	6268      	str	r0, [r5, #36]	; 0x24
 8009390:	b920      	cbnz	r0, 800939c <_Bfree+0x20>
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <_Bfree+0x3c>)
 8009394:	4809      	ldr	r0, [pc, #36]	; (80093bc <_Bfree+0x40>)
 8009396:	218a      	movs	r1, #138	; 0x8a
 8009398:	f000 fc90 	bl	8009cbc <__assert_func>
 800939c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a0:	6006      	str	r6, [r0, #0]
 80093a2:	60c6      	str	r6, [r0, #12]
 80093a4:	b13c      	cbz	r4, 80093b6 <_Bfree+0x3a>
 80093a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093a8:	6862      	ldr	r2, [r4, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093b0:	6021      	str	r1, [r4, #0]
 80093b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	0800a2a1 	.word	0x0800a2a1
 80093bc:	0800a384 	.word	0x0800a384

080093c0 <__multadd>:
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	690d      	ldr	r5, [r1, #16]
 80093c6:	4607      	mov	r7, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	461e      	mov	r6, r3
 80093cc:	f101 0c14 	add.w	ip, r1, #20
 80093d0:	2000      	movs	r0, #0
 80093d2:	f8dc 3000 	ldr.w	r3, [ip]
 80093d6:	b299      	uxth	r1, r3
 80093d8:	fb02 6101 	mla	r1, r2, r1, r6
 80093dc:	0c1e      	lsrs	r6, r3, #16
 80093de:	0c0b      	lsrs	r3, r1, #16
 80093e0:	fb02 3306 	mla	r3, r2, r6, r3
 80093e4:	b289      	uxth	r1, r1
 80093e6:	3001      	adds	r0, #1
 80093e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093ec:	4285      	cmp	r5, r0
 80093ee:	f84c 1b04 	str.w	r1, [ip], #4
 80093f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093f6:	dcec      	bgt.n	80093d2 <__multadd+0x12>
 80093f8:	b30e      	cbz	r6, 800943e <__multadd+0x7e>
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dc19      	bgt.n	8009434 <__multadd+0x74>
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	4638      	mov	r0, r7
 8009404:	3101      	adds	r1, #1
 8009406:	f7ff ff79 	bl	80092fc <_Balloc>
 800940a:	4680      	mov	r8, r0
 800940c:	b928      	cbnz	r0, 800941a <__multadd+0x5a>
 800940e:	4602      	mov	r2, r0
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <__multadd+0x84>)
 8009412:	480d      	ldr	r0, [pc, #52]	; (8009448 <__multadd+0x88>)
 8009414:	21b5      	movs	r1, #181	; 0xb5
 8009416:	f000 fc51 	bl	8009cbc <__assert_func>
 800941a:	6922      	ldr	r2, [r4, #16]
 800941c:	3202      	adds	r2, #2
 800941e:	f104 010c 	add.w	r1, r4, #12
 8009422:	0092      	lsls	r2, r2, #2
 8009424:	300c      	adds	r0, #12
 8009426:	f7fe f90b 	bl	8007640 <memcpy>
 800942a:	4621      	mov	r1, r4
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ffa5 	bl	800937c <_Bfree>
 8009432:	4644      	mov	r4, r8
 8009434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009438:	3501      	adds	r5, #1
 800943a:	615e      	str	r6, [r3, #20]
 800943c:	6125      	str	r5, [r4, #16]
 800943e:	4620      	mov	r0, r4
 8009440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009444:	0800a313 	.word	0x0800a313
 8009448:	0800a384 	.word	0x0800a384

0800944c <__hi0bits>:
 800944c:	0c03      	lsrs	r3, r0, #16
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	b9d3      	cbnz	r3, 8009488 <__hi0bits+0x3c>
 8009452:	0400      	lsls	r0, r0, #16
 8009454:	2310      	movs	r3, #16
 8009456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800945a:	bf04      	itt	eq
 800945c:	0200      	lsleq	r0, r0, #8
 800945e:	3308      	addeq	r3, #8
 8009460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009464:	bf04      	itt	eq
 8009466:	0100      	lsleq	r0, r0, #4
 8009468:	3304      	addeq	r3, #4
 800946a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800946e:	bf04      	itt	eq
 8009470:	0080      	lsleq	r0, r0, #2
 8009472:	3302      	addeq	r3, #2
 8009474:	2800      	cmp	r0, #0
 8009476:	db05      	blt.n	8009484 <__hi0bits+0x38>
 8009478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800947c:	f103 0301 	add.w	r3, r3, #1
 8009480:	bf08      	it	eq
 8009482:	2320      	moveq	r3, #32
 8009484:	4618      	mov	r0, r3
 8009486:	4770      	bx	lr
 8009488:	2300      	movs	r3, #0
 800948a:	e7e4      	b.n	8009456 <__hi0bits+0xa>

0800948c <__lo0bits>:
 800948c:	6803      	ldr	r3, [r0, #0]
 800948e:	f013 0207 	ands.w	r2, r3, #7
 8009492:	4601      	mov	r1, r0
 8009494:	d00b      	beq.n	80094ae <__lo0bits+0x22>
 8009496:	07da      	lsls	r2, r3, #31
 8009498:	d423      	bmi.n	80094e2 <__lo0bits+0x56>
 800949a:	0798      	lsls	r0, r3, #30
 800949c:	bf49      	itett	mi
 800949e:	085b      	lsrmi	r3, r3, #1
 80094a0:	089b      	lsrpl	r3, r3, #2
 80094a2:	2001      	movmi	r0, #1
 80094a4:	600b      	strmi	r3, [r1, #0]
 80094a6:	bf5c      	itt	pl
 80094a8:	600b      	strpl	r3, [r1, #0]
 80094aa:	2002      	movpl	r0, #2
 80094ac:	4770      	bx	lr
 80094ae:	b298      	uxth	r0, r3
 80094b0:	b9a8      	cbnz	r0, 80094de <__lo0bits+0x52>
 80094b2:	0c1b      	lsrs	r3, r3, #16
 80094b4:	2010      	movs	r0, #16
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	b90a      	cbnz	r2, 80094be <__lo0bits+0x32>
 80094ba:	3008      	adds	r0, #8
 80094bc:	0a1b      	lsrs	r3, r3, #8
 80094be:	071a      	lsls	r2, r3, #28
 80094c0:	bf04      	itt	eq
 80094c2:	091b      	lsreq	r3, r3, #4
 80094c4:	3004      	addeq	r0, #4
 80094c6:	079a      	lsls	r2, r3, #30
 80094c8:	bf04      	itt	eq
 80094ca:	089b      	lsreq	r3, r3, #2
 80094cc:	3002      	addeq	r0, #2
 80094ce:	07da      	lsls	r2, r3, #31
 80094d0:	d403      	bmi.n	80094da <__lo0bits+0x4e>
 80094d2:	085b      	lsrs	r3, r3, #1
 80094d4:	f100 0001 	add.w	r0, r0, #1
 80094d8:	d005      	beq.n	80094e6 <__lo0bits+0x5a>
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	4770      	bx	lr
 80094de:	4610      	mov	r0, r2
 80094e0:	e7e9      	b.n	80094b6 <__lo0bits+0x2a>
 80094e2:	2000      	movs	r0, #0
 80094e4:	4770      	bx	lr
 80094e6:	2020      	movs	r0, #32
 80094e8:	4770      	bx	lr
	...

080094ec <__i2b>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	2101      	movs	r1, #1
 80094f2:	f7ff ff03 	bl	80092fc <_Balloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	b928      	cbnz	r0, 8009506 <__i2b+0x1a>
 80094fa:	4b05      	ldr	r3, [pc, #20]	; (8009510 <__i2b+0x24>)
 80094fc:	4805      	ldr	r0, [pc, #20]	; (8009514 <__i2b+0x28>)
 80094fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009502:	f000 fbdb 	bl	8009cbc <__assert_func>
 8009506:	2301      	movs	r3, #1
 8009508:	6144      	str	r4, [r0, #20]
 800950a:	6103      	str	r3, [r0, #16]
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	0800a313 	.word	0x0800a313
 8009514:	0800a384 	.word	0x0800a384

08009518 <__multiply>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4691      	mov	r9, r2
 800951e:	690a      	ldr	r2, [r1, #16]
 8009520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009524:	429a      	cmp	r2, r3
 8009526:	bfb8      	it	lt
 8009528:	460b      	movlt	r3, r1
 800952a:	460c      	mov	r4, r1
 800952c:	bfbc      	itt	lt
 800952e:	464c      	movlt	r4, r9
 8009530:	4699      	movlt	r9, r3
 8009532:	6927      	ldr	r7, [r4, #16]
 8009534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	6861      	ldr	r1, [r4, #4]
 800953c:	eb07 060a 	add.w	r6, r7, sl
 8009540:	42b3      	cmp	r3, r6
 8009542:	b085      	sub	sp, #20
 8009544:	bfb8      	it	lt
 8009546:	3101      	addlt	r1, #1
 8009548:	f7ff fed8 	bl	80092fc <_Balloc>
 800954c:	b930      	cbnz	r0, 800955c <__multiply+0x44>
 800954e:	4602      	mov	r2, r0
 8009550:	4b44      	ldr	r3, [pc, #272]	; (8009664 <__multiply+0x14c>)
 8009552:	4845      	ldr	r0, [pc, #276]	; (8009668 <__multiply+0x150>)
 8009554:	f240 115d 	movw	r1, #349	; 0x15d
 8009558:	f000 fbb0 	bl	8009cbc <__assert_func>
 800955c:	f100 0514 	add.w	r5, r0, #20
 8009560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009564:	462b      	mov	r3, r5
 8009566:	2200      	movs	r2, #0
 8009568:	4543      	cmp	r3, r8
 800956a:	d321      	bcc.n	80095b0 <__multiply+0x98>
 800956c:	f104 0314 	add.w	r3, r4, #20
 8009570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009574:	f109 0314 	add.w	r3, r9, #20
 8009578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800957c:	9202      	str	r2, [sp, #8]
 800957e:	1b3a      	subs	r2, r7, r4
 8009580:	3a15      	subs	r2, #21
 8009582:	f022 0203 	bic.w	r2, r2, #3
 8009586:	3204      	adds	r2, #4
 8009588:	f104 0115 	add.w	r1, r4, #21
 800958c:	428f      	cmp	r7, r1
 800958e:	bf38      	it	cc
 8009590:	2204      	movcc	r2, #4
 8009592:	9201      	str	r2, [sp, #4]
 8009594:	9a02      	ldr	r2, [sp, #8]
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d80c      	bhi.n	80095b6 <__multiply+0x9e>
 800959c:	2e00      	cmp	r6, #0
 800959e:	dd03      	ble.n	80095a8 <__multiply+0x90>
 80095a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d05a      	beq.n	800965e <__multiply+0x146>
 80095a8:	6106      	str	r6, [r0, #16]
 80095aa:	b005      	add	sp, #20
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	f843 2b04 	str.w	r2, [r3], #4
 80095b4:	e7d8      	b.n	8009568 <__multiply+0x50>
 80095b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80095ba:	f1ba 0f00 	cmp.w	sl, #0
 80095be:	d024      	beq.n	800960a <__multiply+0xf2>
 80095c0:	f104 0e14 	add.w	lr, r4, #20
 80095c4:	46a9      	mov	r9, r5
 80095c6:	f04f 0c00 	mov.w	ip, #0
 80095ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095ce:	f8d9 1000 	ldr.w	r1, [r9]
 80095d2:	fa1f fb82 	uxth.w	fp, r2
 80095d6:	b289      	uxth	r1, r1
 80095d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80095dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095e0:	f8d9 2000 	ldr.w	r2, [r9]
 80095e4:	4461      	add	r1, ip
 80095e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80095ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095f2:	b289      	uxth	r1, r1
 80095f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095f8:	4577      	cmp	r7, lr
 80095fa:	f849 1b04 	str.w	r1, [r9], #4
 80095fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009602:	d8e2      	bhi.n	80095ca <__multiply+0xb2>
 8009604:	9a01      	ldr	r2, [sp, #4]
 8009606:	f845 c002 	str.w	ip, [r5, r2]
 800960a:	9a03      	ldr	r2, [sp, #12]
 800960c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009610:	3304      	adds	r3, #4
 8009612:	f1b9 0f00 	cmp.w	r9, #0
 8009616:	d020      	beq.n	800965a <__multiply+0x142>
 8009618:	6829      	ldr	r1, [r5, #0]
 800961a:	f104 0c14 	add.w	ip, r4, #20
 800961e:	46ae      	mov	lr, r5
 8009620:	f04f 0a00 	mov.w	sl, #0
 8009624:	f8bc b000 	ldrh.w	fp, [ip]
 8009628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800962c:	fb09 220b 	mla	r2, r9, fp, r2
 8009630:	4492      	add	sl, r2
 8009632:	b289      	uxth	r1, r1
 8009634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009638:	f84e 1b04 	str.w	r1, [lr], #4
 800963c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009640:	f8be 1000 	ldrh.w	r1, [lr]
 8009644:	0c12      	lsrs	r2, r2, #16
 8009646:	fb09 1102 	mla	r1, r9, r2, r1
 800964a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800964e:	4567      	cmp	r7, ip
 8009650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009654:	d8e6      	bhi.n	8009624 <__multiply+0x10c>
 8009656:	9a01      	ldr	r2, [sp, #4]
 8009658:	50a9      	str	r1, [r5, r2]
 800965a:	3504      	adds	r5, #4
 800965c:	e79a      	b.n	8009594 <__multiply+0x7c>
 800965e:	3e01      	subs	r6, #1
 8009660:	e79c      	b.n	800959c <__multiply+0x84>
 8009662:	bf00      	nop
 8009664:	0800a313 	.word	0x0800a313
 8009668:	0800a384 	.word	0x0800a384

0800966c <__pow5mult>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4615      	mov	r5, r2
 8009672:	f012 0203 	ands.w	r2, r2, #3
 8009676:	4606      	mov	r6, r0
 8009678:	460f      	mov	r7, r1
 800967a:	d007      	beq.n	800968c <__pow5mult+0x20>
 800967c:	4c25      	ldr	r4, [pc, #148]	; (8009714 <__pow5mult+0xa8>)
 800967e:	3a01      	subs	r2, #1
 8009680:	2300      	movs	r3, #0
 8009682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009686:	f7ff fe9b 	bl	80093c0 <__multadd>
 800968a:	4607      	mov	r7, r0
 800968c:	10ad      	asrs	r5, r5, #2
 800968e:	d03d      	beq.n	800970c <__pow5mult+0xa0>
 8009690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009692:	b97c      	cbnz	r4, 80096b4 <__pow5mult+0x48>
 8009694:	2010      	movs	r0, #16
 8009696:	f7ff fe29 	bl	80092ec <malloc>
 800969a:	4602      	mov	r2, r0
 800969c:	6270      	str	r0, [r6, #36]	; 0x24
 800969e:	b928      	cbnz	r0, 80096ac <__pow5mult+0x40>
 80096a0:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <__pow5mult+0xac>)
 80096a2:	481e      	ldr	r0, [pc, #120]	; (800971c <__pow5mult+0xb0>)
 80096a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096a8:	f000 fb08 	bl	8009cbc <__assert_func>
 80096ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096b0:	6004      	str	r4, [r0, #0]
 80096b2:	60c4      	str	r4, [r0, #12]
 80096b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096bc:	b94c      	cbnz	r4, 80096d2 <__pow5mult+0x66>
 80096be:	f240 2171 	movw	r1, #625	; 0x271
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff12 	bl	80094ec <__i2b>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ce:	4604      	mov	r4, r0
 80096d0:	6003      	str	r3, [r0, #0]
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	07eb      	lsls	r3, r5, #31
 80096d8:	d50a      	bpl.n	80096f0 <__pow5mult+0x84>
 80096da:	4639      	mov	r1, r7
 80096dc:	4622      	mov	r2, r4
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ff1a 	bl	8009518 <__multiply>
 80096e4:	4639      	mov	r1, r7
 80096e6:	4680      	mov	r8, r0
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7ff fe47 	bl	800937c <_Bfree>
 80096ee:	4647      	mov	r7, r8
 80096f0:	106d      	asrs	r5, r5, #1
 80096f2:	d00b      	beq.n	800970c <__pow5mult+0xa0>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	b938      	cbnz	r0, 8009708 <__pow5mult+0x9c>
 80096f8:	4622      	mov	r2, r4
 80096fa:	4621      	mov	r1, r4
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7ff ff0b 	bl	8009518 <__multiply>
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	f8c0 9000 	str.w	r9, [r0]
 8009708:	4604      	mov	r4, r0
 800970a:	e7e4      	b.n	80096d6 <__pow5mult+0x6a>
 800970c:	4638      	mov	r0, r7
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	bf00      	nop
 8009714:	0800a4d0 	.word	0x0800a4d0
 8009718:	0800a2a1 	.word	0x0800a2a1
 800971c:	0800a384 	.word	0x0800a384

08009720 <__lshift>:
 8009720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	6849      	ldr	r1, [r1, #4]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	4607      	mov	r7, r0
 8009732:	4691      	mov	r9, r2
 8009734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009738:	f108 0601 	add.w	r6, r8, #1
 800973c:	42b3      	cmp	r3, r6
 800973e:	db0b      	blt.n	8009758 <__lshift+0x38>
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff fddb 	bl	80092fc <_Balloc>
 8009746:	4605      	mov	r5, r0
 8009748:	b948      	cbnz	r0, 800975e <__lshift+0x3e>
 800974a:	4602      	mov	r2, r0
 800974c:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <__lshift+0xd8>)
 800974e:	482b      	ldr	r0, [pc, #172]	; (80097fc <__lshift+0xdc>)
 8009750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009754:	f000 fab2 	bl	8009cbc <__assert_func>
 8009758:	3101      	adds	r1, #1
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	e7ee      	b.n	800973c <__lshift+0x1c>
 800975e:	2300      	movs	r3, #0
 8009760:	f100 0114 	add.w	r1, r0, #20
 8009764:	f100 0210 	add.w	r2, r0, #16
 8009768:	4618      	mov	r0, r3
 800976a:	4553      	cmp	r3, sl
 800976c:	db37      	blt.n	80097de <__lshift+0xbe>
 800976e:	6920      	ldr	r0, [r4, #16]
 8009770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009774:	f104 0314 	add.w	r3, r4, #20
 8009778:	f019 091f 	ands.w	r9, r9, #31
 800977c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009784:	d02f      	beq.n	80097e6 <__lshift+0xc6>
 8009786:	f1c9 0e20 	rsb	lr, r9, #32
 800978a:	468a      	mov	sl, r1
 800978c:	f04f 0c00 	mov.w	ip, #0
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	fa02 f209 	lsl.w	r2, r2, r9
 8009796:	ea42 020c 	orr.w	r2, r2, ip
 800979a:	f84a 2b04 	str.w	r2, [sl], #4
 800979e:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a2:	4298      	cmp	r0, r3
 80097a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097a8:	d8f2      	bhi.n	8009790 <__lshift+0x70>
 80097aa:	1b03      	subs	r3, r0, r4
 80097ac:	3b15      	subs	r3, #21
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	3304      	adds	r3, #4
 80097b4:	f104 0215 	add.w	r2, r4, #21
 80097b8:	4290      	cmp	r0, r2
 80097ba:	bf38      	it	cc
 80097bc:	2304      	movcc	r3, #4
 80097be:	f841 c003 	str.w	ip, [r1, r3]
 80097c2:	f1bc 0f00 	cmp.w	ip, #0
 80097c6:	d001      	beq.n	80097cc <__lshift+0xac>
 80097c8:	f108 0602 	add.w	r6, r8, #2
 80097cc:	3e01      	subs	r6, #1
 80097ce:	4638      	mov	r0, r7
 80097d0:	612e      	str	r6, [r5, #16]
 80097d2:	4621      	mov	r1, r4
 80097d4:	f7ff fdd2 	bl	800937c <_Bfree>
 80097d8:	4628      	mov	r0, r5
 80097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097de:	f842 0f04 	str.w	r0, [r2, #4]!
 80097e2:	3301      	adds	r3, #1
 80097e4:	e7c1      	b.n	800976a <__lshift+0x4a>
 80097e6:	3904      	subs	r1, #4
 80097e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80097f0:	4298      	cmp	r0, r3
 80097f2:	d8f9      	bhi.n	80097e8 <__lshift+0xc8>
 80097f4:	e7ea      	b.n	80097cc <__lshift+0xac>
 80097f6:	bf00      	nop
 80097f8:	0800a313 	.word	0x0800a313
 80097fc:	0800a384 	.word	0x0800a384

08009800 <__mcmp>:
 8009800:	b530      	push	{r4, r5, lr}
 8009802:	6902      	ldr	r2, [r0, #16]
 8009804:	690c      	ldr	r4, [r1, #16]
 8009806:	1b12      	subs	r2, r2, r4
 8009808:	d10e      	bne.n	8009828 <__mcmp+0x28>
 800980a:	f100 0314 	add.w	r3, r0, #20
 800980e:	3114      	adds	r1, #20
 8009810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800981c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009820:	42a5      	cmp	r5, r4
 8009822:	d003      	beq.n	800982c <__mcmp+0x2c>
 8009824:	d305      	bcc.n	8009832 <__mcmp+0x32>
 8009826:	2201      	movs	r2, #1
 8009828:	4610      	mov	r0, r2
 800982a:	bd30      	pop	{r4, r5, pc}
 800982c:	4283      	cmp	r3, r0
 800982e:	d3f3      	bcc.n	8009818 <__mcmp+0x18>
 8009830:	e7fa      	b.n	8009828 <__mcmp+0x28>
 8009832:	f04f 32ff 	mov.w	r2, #4294967295
 8009836:	e7f7      	b.n	8009828 <__mcmp+0x28>

08009838 <__mdiff>:
 8009838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	4606      	mov	r6, r0
 8009840:	4611      	mov	r1, r2
 8009842:	4620      	mov	r0, r4
 8009844:	4690      	mov	r8, r2
 8009846:	f7ff ffdb 	bl	8009800 <__mcmp>
 800984a:	1e05      	subs	r5, r0, #0
 800984c:	d110      	bne.n	8009870 <__mdiff+0x38>
 800984e:	4629      	mov	r1, r5
 8009850:	4630      	mov	r0, r6
 8009852:	f7ff fd53 	bl	80092fc <_Balloc>
 8009856:	b930      	cbnz	r0, 8009866 <__mdiff+0x2e>
 8009858:	4b3a      	ldr	r3, [pc, #232]	; (8009944 <__mdiff+0x10c>)
 800985a:	4602      	mov	r2, r0
 800985c:	f240 2132 	movw	r1, #562	; 0x232
 8009860:	4839      	ldr	r0, [pc, #228]	; (8009948 <__mdiff+0x110>)
 8009862:	f000 fa2b 	bl	8009cbc <__assert_func>
 8009866:	2301      	movs	r3, #1
 8009868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800986c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009870:	bfa4      	itt	ge
 8009872:	4643      	movge	r3, r8
 8009874:	46a0      	movge	r8, r4
 8009876:	4630      	mov	r0, r6
 8009878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800987c:	bfa6      	itte	ge
 800987e:	461c      	movge	r4, r3
 8009880:	2500      	movge	r5, #0
 8009882:	2501      	movlt	r5, #1
 8009884:	f7ff fd3a 	bl	80092fc <_Balloc>
 8009888:	b920      	cbnz	r0, 8009894 <__mdiff+0x5c>
 800988a:	4b2e      	ldr	r3, [pc, #184]	; (8009944 <__mdiff+0x10c>)
 800988c:	4602      	mov	r2, r0
 800988e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009892:	e7e5      	b.n	8009860 <__mdiff+0x28>
 8009894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009898:	6926      	ldr	r6, [r4, #16]
 800989a:	60c5      	str	r5, [r0, #12]
 800989c:	f104 0914 	add.w	r9, r4, #20
 80098a0:	f108 0514 	add.w	r5, r8, #20
 80098a4:	f100 0e14 	add.w	lr, r0, #20
 80098a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098b0:	f108 0210 	add.w	r2, r8, #16
 80098b4:	46f2      	mov	sl, lr
 80098b6:	2100      	movs	r1, #0
 80098b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80098bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098c0:	fa1f f883 	uxth.w	r8, r3
 80098c4:	fa11 f18b 	uxtah	r1, r1, fp
 80098c8:	0c1b      	lsrs	r3, r3, #16
 80098ca:	eba1 0808 	sub.w	r8, r1, r8
 80098ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098d6:	fa1f f888 	uxth.w	r8, r8
 80098da:	1419      	asrs	r1, r3, #16
 80098dc:	454e      	cmp	r6, r9
 80098de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098e2:	f84a 3b04 	str.w	r3, [sl], #4
 80098e6:	d8e7      	bhi.n	80098b8 <__mdiff+0x80>
 80098e8:	1b33      	subs	r3, r6, r4
 80098ea:	3b15      	subs	r3, #21
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	3304      	adds	r3, #4
 80098f2:	3415      	adds	r4, #21
 80098f4:	42a6      	cmp	r6, r4
 80098f6:	bf38      	it	cc
 80098f8:	2304      	movcc	r3, #4
 80098fa:	441d      	add	r5, r3
 80098fc:	4473      	add	r3, lr
 80098fe:	469e      	mov	lr, r3
 8009900:	462e      	mov	r6, r5
 8009902:	4566      	cmp	r6, ip
 8009904:	d30e      	bcc.n	8009924 <__mdiff+0xec>
 8009906:	f10c 0203 	add.w	r2, ip, #3
 800990a:	1b52      	subs	r2, r2, r5
 800990c:	f022 0203 	bic.w	r2, r2, #3
 8009910:	3d03      	subs	r5, #3
 8009912:	45ac      	cmp	ip, r5
 8009914:	bf38      	it	cc
 8009916:	2200      	movcc	r2, #0
 8009918:	441a      	add	r2, r3
 800991a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800991e:	b17b      	cbz	r3, 8009940 <__mdiff+0x108>
 8009920:	6107      	str	r7, [r0, #16]
 8009922:	e7a3      	b.n	800986c <__mdiff+0x34>
 8009924:	f856 8b04 	ldr.w	r8, [r6], #4
 8009928:	fa11 f288 	uxtah	r2, r1, r8
 800992c:	1414      	asrs	r4, r2, #16
 800992e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009932:	b292      	uxth	r2, r2
 8009934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009938:	f84e 2b04 	str.w	r2, [lr], #4
 800993c:	1421      	asrs	r1, r4, #16
 800993e:	e7e0      	b.n	8009902 <__mdiff+0xca>
 8009940:	3f01      	subs	r7, #1
 8009942:	e7ea      	b.n	800991a <__mdiff+0xe2>
 8009944:	0800a313 	.word	0x0800a313
 8009948:	0800a384 	.word	0x0800a384

0800994c <__d2b>:
 800994c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009950:	4689      	mov	r9, r1
 8009952:	2101      	movs	r1, #1
 8009954:	ec57 6b10 	vmov	r6, r7, d0
 8009958:	4690      	mov	r8, r2
 800995a:	f7ff fccf 	bl	80092fc <_Balloc>
 800995e:	4604      	mov	r4, r0
 8009960:	b930      	cbnz	r0, 8009970 <__d2b+0x24>
 8009962:	4602      	mov	r2, r0
 8009964:	4b25      	ldr	r3, [pc, #148]	; (80099fc <__d2b+0xb0>)
 8009966:	4826      	ldr	r0, [pc, #152]	; (8009a00 <__d2b+0xb4>)
 8009968:	f240 310a 	movw	r1, #778	; 0x30a
 800996c:	f000 f9a6 	bl	8009cbc <__assert_func>
 8009970:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009974:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009978:	bb35      	cbnz	r5, 80099c8 <__d2b+0x7c>
 800997a:	2e00      	cmp	r6, #0
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	d028      	beq.n	80099d2 <__d2b+0x86>
 8009980:	4668      	mov	r0, sp
 8009982:	9600      	str	r6, [sp, #0]
 8009984:	f7ff fd82 	bl	800948c <__lo0bits>
 8009988:	9900      	ldr	r1, [sp, #0]
 800998a:	b300      	cbz	r0, 80099ce <__d2b+0x82>
 800998c:	9a01      	ldr	r2, [sp, #4]
 800998e:	f1c0 0320 	rsb	r3, r0, #32
 8009992:	fa02 f303 	lsl.w	r3, r2, r3
 8009996:	430b      	orrs	r3, r1
 8009998:	40c2      	lsrs	r2, r0
 800999a:	6163      	str	r3, [r4, #20]
 800999c:	9201      	str	r2, [sp, #4]
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	61a3      	str	r3, [r4, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bf14      	ite	ne
 80099a6:	2202      	movne	r2, #2
 80099a8:	2201      	moveq	r2, #1
 80099aa:	6122      	str	r2, [r4, #16]
 80099ac:	b1d5      	cbz	r5, 80099e4 <__d2b+0x98>
 80099ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099b2:	4405      	add	r5, r0
 80099b4:	f8c9 5000 	str.w	r5, [r9]
 80099b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099bc:	f8c8 0000 	str.w	r0, [r8]
 80099c0:	4620      	mov	r0, r4
 80099c2:	b003      	add	sp, #12
 80099c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099cc:	e7d5      	b.n	800997a <__d2b+0x2e>
 80099ce:	6161      	str	r1, [r4, #20]
 80099d0:	e7e5      	b.n	800999e <__d2b+0x52>
 80099d2:	a801      	add	r0, sp, #4
 80099d4:	f7ff fd5a 	bl	800948c <__lo0bits>
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	6163      	str	r3, [r4, #20]
 80099dc:	2201      	movs	r2, #1
 80099de:	6122      	str	r2, [r4, #16]
 80099e0:	3020      	adds	r0, #32
 80099e2:	e7e3      	b.n	80099ac <__d2b+0x60>
 80099e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099ec:	f8c9 0000 	str.w	r0, [r9]
 80099f0:	6918      	ldr	r0, [r3, #16]
 80099f2:	f7ff fd2b 	bl	800944c <__hi0bits>
 80099f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099fa:	e7df      	b.n	80099bc <__d2b+0x70>
 80099fc:	0800a313 	.word	0x0800a313
 8009a00:	0800a384 	.word	0x0800a384

08009a04 <_calloc_r>:
 8009a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a06:	fba1 2402 	umull	r2, r4, r1, r2
 8009a0a:	b94c      	cbnz	r4, 8009a20 <_calloc_r+0x1c>
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	9201      	str	r2, [sp, #4]
 8009a10:	f000 f87a 	bl	8009b08 <_malloc_r>
 8009a14:	9a01      	ldr	r2, [sp, #4]
 8009a16:	4605      	mov	r5, r0
 8009a18:	b930      	cbnz	r0, 8009a28 <_calloc_r+0x24>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	b003      	add	sp, #12
 8009a1e:	bd30      	pop	{r4, r5, pc}
 8009a20:	220c      	movs	r2, #12
 8009a22:	6002      	str	r2, [r0, #0]
 8009a24:	2500      	movs	r5, #0
 8009a26:	e7f8      	b.n	8009a1a <_calloc_r+0x16>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f7fd fe17 	bl	800765c <memset>
 8009a2e:	e7f4      	b.n	8009a1a <_calloc_r+0x16>

08009a30 <_free_r>:
 8009a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a32:	2900      	cmp	r1, #0
 8009a34:	d044      	beq.n	8009ac0 <_free_r+0x90>
 8009a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a3a:	9001      	str	r0, [sp, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a42:	bfb8      	it	lt
 8009a44:	18e4      	addlt	r4, r4, r3
 8009a46:	f000 f9bf 	bl	8009dc8 <__malloc_lock>
 8009a4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ac4 <_free_r+0x94>)
 8009a4c:	9801      	ldr	r0, [sp, #4]
 8009a4e:	6813      	ldr	r3, [r2, #0]
 8009a50:	b933      	cbnz	r3, 8009a60 <_free_r+0x30>
 8009a52:	6063      	str	r3, [r4, #4]
 8009a54:	6014      	str	r4, [r2, #0]
 8009a56:	b003      	add	sp, #12
 8009a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a5c:	f000 b9ba 	b.w	8009dd4 <__malloc_unlock>
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	d908      	bls.n	8009a76 <_free_r+0x46>
 8009a64:	6825      	ldr	r5, [r4, #0]
 8009a66:	1961      	adds	r1, r4, r5
 8009a68:	428b      	cmp	r3, r1
 8009a6a:	bf01      	itttt	eq
 8009a6c:	6819      	ldreq	r1, [r3, #0]
 8009a6e:	685b      	ldreq	r3, [r3, #4]
 8009a70:	1949      	addeq	r1, r1, r5
 8009a72:	6021      	streq	r1, [r4, #0]
 8009a74:	e7ed      	b.n	8009a52 <_free_r+0x22>
 8009a76:	461a      	mov	r2, r3
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	b10b      	cbz	r3, 8009a80 <_free_r+0x50>
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	d9fa      	bls.n	8009a76 <_free_r+0x46>
 8009a80:	6811      	ldr	r1, [r2, #0]
 8009a82:	1855      	adds	r5, r2, r1
 8009a84:	42a5      	cmp	r5, r4
 8009a86:	d10b      	bne.n	8009aa0 <_free_r+0x70>
 8009a88:	6824      	ldr	r4, [r4, #0]
 8009a8a:	4421      	add	r1, r4
 8009a8c:	1854      	adds	r4, r2, r1
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	6011      	str	r1, [r2, #0]
 8009a92:	d1e0      	bne.n	8009a56 <_free_r+0x26>
 8009a94:	681c      	ldr	r4, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	6053      	str	r3, [r2, #4]
 8009a9a:	4421      	add	r1, r4
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	e7da      	b.n	8009a56 <_free_r+0x26>
 8009aa0:	d902      	bls.n	8009aa8 <_free_r+0x78>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	6003      	str	r3, [r0, #0]
 8009aa6:	e7d6      	b.n	8009a56 <_free_r+0x26>
 8009aa8:	6825      	ldr	r5, [r4, #0]
 8009aaa:	1961      	adds	r1, r4, r5
 8009aac:	428b      	cmp	r3, r1
 8009aae:	bf04      	itt	eq
 8009ab0:	6819      	ldreq	r1, [r3, #0]
 8009ab2:	685b      	ldreq	r3, [r3, #4]
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	bf04      	itt	eq
 8009ab8:	1949      	addeq	r1, r1, r5
 8009aba:	6021      	streq	r1, [r4, #0]
 8009abc:	6054      	str	r4, [r2, #4]
 8009abe:	e7ca      	b.n	8009a56 <_free_r+0x26>
 8009ac0:	b003      	add	sp, #12
 8009ac2:	bd30      	pop	{r4, r5, pc}
 8009ac4:	20001d10 	.word	0x20001d10

08009ac8 <sbrk_aligned>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	4e0e      	ldr	r6, [pc, #56]	; (8009b04 <sbrk_aligned+0x3c>)
 8009acc:	460c      	mov	r4, r1
 8009ace:	6831      	ldr	r1, [r6, #0]
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	b911      	cbnz	r1, 8009ada <sbrk_aligned+0x12>
 8009ad4:	f000 f88c 	bl	8009bf0 <_sbrk_r>
 8009ad8:	6030      	str	r0, [r6, #0]
 8009ada:	4621      	mov	r1, r4
 8009adc:	4628      	mov	r0, r5
 8009ade:	f000 f887 	bl	8009bf0 <_sbrk_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d00a      	beq.n	8009afc <sbrk_aligned+0x34>
 8009ae6:	1cc4      	adds	r4, r0, #3
 8009ae8:	f024 0403 	bic.w	r4, r4, #3
 8009aec:	42a0      	cmp	r0, r4
 8009aee:	d007      	beq.n	8009b00 <sbrk_aligned+0x38>
 8009af0:	1a21      	subs	r1, r4, r0
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f87c 	bl	8009bf0 <_sbrk_r>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d101      	bne.n	8009b00 <sbrk_aligned+0x38>
 8009afc:	f04f 34ff 	mov.w	r4, #4294967295
 8009b00:	4620      	mov	r0, r4
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	20001d14 	.word	0x20001d14

08009b08 <_malloc_r>:
 8009b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	1ccd      	adds	r5, r1, #3
 8009b0e:	f025 0503 	bic.w	r5, r5, #3
 8009b12:	3508      	adds	r5, #8
 8009b14:	2d0c      	cmp	r5, #12
 8009b16:	bf38      	it	cc
 8009b18:	250c      	movcc	r5, #12
 8009b1a:	2d00      	cmp	r5, #0
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	db01      	blt.n	8009b24 <_malloc_r+0x1c>
 8009b20:	42a9      	cmp	r1, r5
 8009b22:	d905      	bls.n	8009b30 <_malloc_r+0x28>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	2600      	movs	r6, #0
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b30:	4e2e      	ldr	r6, [pc, #184]	; (8009bec <_malloc_r+0xe4>)
 8009b32:	f000 f949 	bl	8009dc8 <__malloc_lock>
 8009b36:	6833      	ldr	r3, [r6, #0]
 8009b38:	461c      	mov	r4, r3
 8009b3a:	bb34      	cbnz	r4, 8009b8a <_malloc_r+0x82>
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ffc2 	bl	8009ac8 <sbrk_aligned>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	4604      	mov	r4, r0
 8009b48:	d14d      	bne.n	8009be6 <_malloc_r+0xde>
 8009b4a:	6834      	ldr	r4, [r6, #0]
 8009b4c:	4626      	mov	r6, r4
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	d140      	bne.n	8009bd4 <_malloc_r+0xcc>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	4631      	mov	r1, r6
 8009b56:	4638      	mov	r0, r7
 8009b58:	eb04 0803 	add.w	r8, r4, r3
 8009b5c:	f000 f848 	bl	8009bf0 <_sbrk_r>
 8009b60:	4580      	cmp	r8, r0
 8009b62:	d13a      	bne.n	8009bda <_malloc_r+0xd2>
 8009b64:	6821      	ldr	r1, [r4, #0]
 8009b66:	3503      	adds	r5, #3
 8009b68:	1a6d      	subs	r5, r5, r1
 8009b6a:	f025 0503 	bic.w	r5, r5, #3
 8009b6e:	3508      	adds	r5, #8
 8009b70:	2d0c      	cmp	r5, #12
 8009b72:	bf38      	it	cc
 8009b74:	250c      	movcc	r5, #12
 8009b76:	4629      	mov	r1, r5
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ffa5 	bl	8009ac8 <sbrk_aligned>
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d02b      	beq.n	8009bda <_malloc_r+0xd2>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	442b      	add	r3, r5
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	e00e      	b.n	8009ba8 <_malloc_r+0xa0>
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	1b52      	subs	r2, r2, r5
 8009b8e:	d41e      	bmi.n	8009bce <_malloc_r+0xc6>
 8009b90:	2a0b      	cmp	r2, #11
 8009b92:	d916      	bls.n	8009bc2 <_malloc_r+0xba>
 8009b94:	1961      	adds	r1, r4, r5
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	6025      	str	r5, [r4, #0]
 8009b9a:	bf18      	it	ne
 8009b9c:	6059      	strne	r1, [r3, #4]
 8009b9e:	6863      	ldr	r3, [r4, #4]
 8009ba0:	bf08      	it	eq
 8009ba2:	6031      	streq	r1, [r6, #0]
 8009ba4:	5162      	str	r2, [r4, r5]
 8009ba6:	604b      	str	r3, [r1, #4]
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f104 060b 	add.w	r6, r4, #11
 8009bae:	f000 f911 	bl	8009dd4 <__malloc_unlock>
 8009bb2:	f026 0607 	bic.w	r6, r6, #7
 8009bb6:	1d23      	adds	r3, r4, #4
 8009bb8:	1af2      	subs	r2, r6, r3
 8009bba:	d0b6      	beq.n	8009b2a <_malloc_r+0x22>
 8009bbc:	1b9b      	subs	r3, r3, r6
 8009bbe:	50a3      	str	r3, [r4, r2]
 8009bc0:	e7b3      	b.n	8009b2a <_malloc_r+0x22>
 8009bc2:	6862      	ldr	r2, [r4, #4]
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	bf0c      	ite	eq
 8009bc8:	6032      	streq	r2, [r6, #0]
 8009bca:	605a      	strne	r2, [r3, #4]
 8009bcc:	e7ec      	b.n	8009ba8 <_malloc_r+0xa0>
 8009bce:	4623      	mov	r3, r4
 8009bd0:	6864      	ldr	r4, [r4, #4]
 8009bd2:	e7b2      	b.n	8009b3a <_malloc_r+0x32>
 8009bd4:	4634      	mov	r4, r6
 8009bd6:	6876      	ldr	r6, [r6, #4]
 8009bd8:	e7b9      	b.n	8009b4e <_malloc_r+0x46>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	603b      	str	r3, [r7, #0]
 8009bde:	4638      	mov	r0, r7
 8009be0:	f000 f8f8 	bl	8009dd4 <__malloc_unlock>
 8009be4:	e7a1      	b.n	8009b2a <_malloc_r+0x22>
 8009be6:	6025      	str	r5, [r4, #0]
 8009be8:	e7de      	b.n	8009ba8 <_malloc_r+0xa0>
 8009bea:	bf00      	nop
 8009bec:	20001d10 	.word	0x20001d10

08009bf0 <_sbrk_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d06      	ldr	r5, [pc, #24]	; (8009c0c <_sbrk_r+0x1c>)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	f7f7 fdfe 	bl	80017fc <_sbrk>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_sbrk_r+0x1a>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_sbrk_r+0x1a>
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20001d18 	.word	0x20001d18

08009c10 <__sread>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c18:	f000 fa3c 	bl	800a094 <_read_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	bfab      	itete	ge
 8009c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c22:	89a3      	ldrhlt	r3, [r4, #12]
 8009c24:	181b      	addge	r3, r3, r0
 8009c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c2a:	bfac      	ite	ge
 8009c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c2e:	81a3      	strhlt	r3, [r4, #12]
 8009c30:	bd10      	pop	{r4, pc}

08009c32 <__swrite>:
 8009c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c36:	461f      	mov	r7, r3
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	05db      	lsls	r3, r3, #23
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	4616      	mov	r6, r2
 8009c42:	d505      	bpl.n	8009c50 <__swrite+0x1e>
 8009c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c48:	2302      	movs	r3, #2
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f000 f898 	bl	8009d80 <_lseek_r>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	463b      	mov	r3, r7
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_write_r>

08009c6a <__sseek>:
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c72:	f000 f885 	bl	8009d80 <_lseek_r>
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	bf15      	itete	ne
 8009c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c86:	81a3      	strheq	r3, [r4, #12]
 8009c88:	bf18      	it	ne
 8009c8a:	81a3      	strhne	r3, [r4, #12]
 8009c8c:	bd10      	pop	{r4, pc}

08009c8e <__sclose>:
 8009c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c92:	f000 b831 	b.w	8009cf8 <_close_r>
	...

08009c98 <_write_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_write_r+0x20>)
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f7 fd57 	bl	800175a <_write>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_write_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_write_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	20001d18 	.word	0x20001d18

08009cbc <__assert_func>:
 8009cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cbe:	4614      	mov	r4, r2
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <__assert_func+0x2c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	68d8      	ldr	r0, [r3, #12]
 8009cca:	b14c      	cbz	r4, 8009ce0 <__assert_func+0x24>
 8009ccc:	4b07      	ldr	r3, [pc, #28]	; (8009cec <__assert_func+0x30>)
 8009cce:	9100      	str	r1, [sp, #0]
 8009cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cd4:	4906      	ldr	r1, [pc, #24]	; (8009cf0 <__assert_func+0x34>)
 8009cd6:	462b      	mov	r3, r5
 8009cd8:	f000 f81e 	bl	8009d18 <fiprintf>
 8009cdc:	f000 f9f9 	bl	800a0d2 <abort>
 8009ce0:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <__assert_func+0x38>)
 8009ce2:	461c      	mov	r4, r3
 8009ce4:	e7f3      	b.n	8009cce <__assert_func+0x12>
 8009ce6:	bf00      	nop
 8009ce8:	20000010 	.word	0x20000010
 8009cec:	0800a4dc 	.word	0x0800a4dc
 8009cf0:	0800a4e9 	.word	0x0800a4e9
 8009cf4:	0800a517 	.word	0x0800a517

08009cf8 <_close_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	; (8009d14 <_close_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f7 fd45 	bl	8001792 <_close>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_close_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_close_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20001d18 	.word	0x20001d18

08009d18 <fiprintf>:
 8009d18:	b40e      	push	{r1, r2, r3}
 8009d1a:	b503      	push	{r0, r1, lr}
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	ab03      	add	r3, sp, #12
 8009d20:	4805      	ldr	r0, [pc, #20]	; (8009d38 <fiprintf+0x20>)
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	6800      	ldr	r0, [r0, #0]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	f000 f883 	bl	8009e34 <_vfiprintf_r>
 8009d2e:	b002      	add	sp, #8
 8009d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d34:	b003      	add	sp, #12
 8009d36:	4770      	bx	lr
 8009d38:	20000010 	.word	0x20000010

08009d3c <_fstat_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d07      	ldr	r5, [pc, #28]	; (8009d5c <_fstat_r+0x20>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f7f7 fd2e 	bl	80017aa <_fstat>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d102      	bne.n	8009d58 <_fstat_r+0x1c>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	b103      	cbz	r3, 8009d58 <_fstat_r+0x1c>
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001d18 	.word	0x20001d18

08009d60 <_isatty_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_isatty_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 fd2d 	bl	80017ca <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_isatty_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_isatty_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20001d18 	.word	0x20001d18

08009d80 <_lseek_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_lseek_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f7 fd26 	bl	80017e0 <_lseek>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_lseek_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_lseek_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20001d18 	.word	0x20001d18

08009da4 <__ascii_mbtowc>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	b901      	cbnz	r1, 8009daa <__ascii_mbtowc+0x6>
 8009da8:	a901      	add	r1, sp, #4
 8009daa:	b142      	cbz	r2, 8009dbe <__ascii_mbtowc+0x1a>
 8009dac:	b14b      	cbz	r3, 8009dc2 <__ascii_mbtowc+0x1e>
 8009dae:	7813      	ldrb	r3, [r2, #0]
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	1e10      	subs	r0, r2, #0
 8009db6:	bf18      	it	ne
 8009db8:	2001      	movne	r0, #1
 8009dba:	b002      	add	sp, #8
 8009dbc:	4770      	bx	lr
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	e7fb      	b.n	8009dba <__ascii_mbtowc+0x16>
 8009dc2:	f06f 0001 	mvn.w	r0, #1
 8009dc6:	e7f8      	b.n	8009dba <__ascii_mbtowc+0x16>

08009dc8 <__malloc_lock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__malloc_lock+0x8>)
 8009dca:	f7ff ba28 	b.w	800921e <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20001d0c 	.word	0x20001d0c

08009dd4 <__malloc_unlock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__malloc_unlock+0x8>)
 8009dd6:	f7ff ba23 	b.w	8009220 <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20001d0c 	.word	0x20001d0c

08009de0 <__sfputc_r>:
 8009de0:	6893      	ldr	r3, [r2, #8]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	b410      	push	{r4}
 8009de8:	6093      	str	r3, [r2, #8]
 8009dea:	da08      	bge.n	8009dfe <__sfputc_r+0x1e>
 8009dec:	6994      	ldr	r4, [r2, #24]
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	db01      	blt.n	8009df6 <__sfputc_r+0x16>
 8009df2:	290a      	cmp	r1, #10
 8009df4:	d103      	bne.n	8009dfe <__sfputc_r+0x1e>
 8009df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dfa:	f7fe b917 	b.w	800802c <__swbuf_r>
 8009dfe:	6813      	ldr	r3, [r2, #0]
 8009e00:	1c58      	adds	r0, r3, #1
 8009e02:	6010      	str	r0, [r2, #0]
 8009e04:	7019      	strb	r1, [r3, #0]
 8009e06:	4608      	mov	r0, r1
 8009e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <__sfputs_r>:
 8009e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e10:	4606      	mov	r6, r0
 8009e12:	460f      	mov	r7, r1
 8009e14:	4614      	mov	r4, r2
 8009e16:	18d5      	adds	r5, r2, r3
 8009e18:	42ac      	cmp	r4, r5
 8009e1a:	d101      	bne.n	8009e20 <__sfputs_r+0x12>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e007      	b.n	8009e30 <__sfputs_r+0x22>
 8009e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e24:	463a      	mov	r2, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffda 	bl	8009de0 <__sfputc_r>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d1f3      	bne.n	8009e18 <__sfputs_r+0xa>
 8009e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e34 <_vfiprintf_r>:
 8009e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	460d      	mov	r5, r1
 8009e3a:	b09d      	sub	sp, #116	; 0x74
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	4698      	mov	r8, r3
 8009e40:	4606      	mov	r6, r0
 8009e42:	b118      	cbz	r0, 8009e4c <_vfiprintf_r+0x18>
 8009e44:	6983      	ldr	r3, [r0, #24]
 8009e46:	b90b      	cbnz	r3, 8009e4c <_vfiprintf_r+0x18>
 8009e48:	f7ff f946 	bl	80090d8 <__sinit>
 8009e4c:	4b89      	ldr	r3, [pc, #548]	; (800a074 <_vfiprintf_r+0x240>)
 8009e4e:	429d      	cmp	r5, r3
 8009e50:	d11b      	bne.n	8009e8a <_vfiprintf_r+0x56>
 8009e52:	6875      	ldr	r5, [r6, #4]
 8009e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d405      	bmi.n	8009e66 <_vfiprintf_r+0x32>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_vfiprintf_r+0x32>
 8009e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e62:	f7ff f9dc 	bl	800921e <__retarget_lock_acquire_recursive>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	071b      	lsls	r3, r3, #28
 8009e6a:	d501      	bpl.n	8009e70 <_vfiprintf_r+0x3c>
 8009e6c:	692b      	ldr	r3, [r5, #16]
 8009e6e:	b9eb      	cbnz	r3, 8009eac <_vfiprintf_r+0x78>
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7fe f92c 	bl	80080d0 <__swsetup_r>
 8009e78:	b1c0      	cbz	r0, 8009eac <_vfiprintf_r+0x78>
 8009e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e7c:	07dc      	lsls	r4, r3, #31
 8009e7e:	d50e      	bpl.n	8009e9e <_vfiprintf_r+0x6a>
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	b01d      	add	sp, #116	; 0x74
 8009e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8a:	4b7b      	ldr	r3, [pc, #492]	; (800a078 <_vfiprintf_r+0x244>)
 8009e8c:	429d      	cmp	r5, r3
 8009e8e:	d101      	bne.n	8009e94 <_vfiprintf_r+0x60>
 8009e90:	68b5      	ldr	r5, [r6, #8]
 8009e92:	e7df      	b.n	8009e54 <_vfiprintf_r+0x20>
 8009e94:	4b79      	ldr	r3, [pc, #484]	; (800a07c <_vfiprintf_r+0x248>)
 8009e96:	429d      	cmp	r5, r3
 8009e98:	bf08      	it	eq
 8009e9a:	68f5      	ldreq	r5, [r6, #12]
 8009e9c:	e7da      	b.n	8009e54 <_vfiprintf_r+0x20>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	0598      	lsls	r0, r3, #22
 8009ea2:	d4ed      	bmi.n	8009e80 <_vfiprintf_r+0x4c>
 8009ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ea6:	f7ff f9bb 	bl	8009220 <__retarget_lock_release_recursive>
 8009eaa:	e7e9      	b.n	8009e80 <_vfiprintf_r+0x4c>
 8009eac:	2300      	movs	r3, #0
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eba:	2330      	movs	r3, #48	; 0x30
 8009ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a080 <_vfiprintf_r+0x24c>
 8009ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec4:	f04f 0901 	mov.w	r9, #1
 8009ec8:	4623      	mov	r3, r4
 8009eca:	469a      	mov	sl, r3
 8009ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed0:	b10a      	cbz	r2, 8009ed6 <_vfiprintf_r+0xa2>
 8009ed2:	2a25      	cmp	r2, #37	; 0x25
 8009ed4:	d1f9      	bne.n	8009eca <_vfiprintf_r+0x96>
 8009ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eda:	d00b      	beq.n	8009ef4 <_vfiprintf_r+0xc0>
 8009edc:	465b      	mov	r3, fp
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ff93 	bl	8009e0e <__sfputs_r>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f000 80aa 	beq.w	800a042 <_vfiprintf_r+0x20e>
 8009eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef0:	445a      	add	r2, fp
 8009ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80a2 	beq.w	800a042 <_vfiprintf_r+0x20e>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f08:	f10a 0a01 	add.w	sl, sl, #1
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f14:	931a      	str	r3, [sp, #104]	; 0x68
 8009f16:	4654      	mov	r4, sl
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1e:	4858      	ldr	r0, [pc, #352]	; (800a080 <_vfiprintf_r+0x24c>)
 8009f20:	f7f6 f95e 	bl	80001e0 <memchr>
 8009f24:	9a04      	ldr	r2, [sp, #16]
 8009f26:	b9d8      	cbnz	r0, 8009f60 <_vfiprintf_r+0x12c>
 8009f28:	06d1      	lsls	r1, r2, #27
 8009f2a:	bf44      	itt	mi
 8009f2c:	2320      	movmi	r3, #32
 8009f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f32:	0713      	lsls	r3, r2, #28
 8009f34:	bf44      	itt	mi
 8009f36:	232b      	movmi	r3, #43	; 0x2b
 8009f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f40:	2b2a      	cmp	r3, #42	; 0x2a
 8009f42:	d015      	beq.n	8009f70 <_vfiprintf_r+0x13c>
 8009f44:	9a07      	ldr	r2, [sp, #28]
 8009f46:	4654      	mov	r4, sl
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f04f 0c0a 	mov.w	ip, #10
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f54:	3b30      	subs	r3, #48	; 0x30
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d94e      	bls.n	8009ff8 <_vfiprintf_r+0x1c4>
 8009f5a:	b1b0      	cbz	r0, 8009f8a <_vfiprintf_r+0x156>
 8009f5c:	9207      	str	r2, [sp, #28]
 8009f5e:	e014      	b.n	8009f8a <_vfiprintf_r+0x156>
 8009f60:	eba0 0308 	sub.w	r3, r0, r8
 8009f64:	fa09 f303 	lsl.w	r3, r9, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	46a2      	mov	sl, r4
 8009f6e:	e7d2      	b.n	8009f16 <_vfiprintf_r+0xe2>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	1d19      	adds	r1, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	9103      	str	r1, [sp, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbb      	ittet	lt
 8009f7c:	425b      	neglt	r3, r3
 8009f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f82:	9307      	strge	r3, [sp, #28]
 8009f84:	9307      	strlt	r3, [sp, #28]
 8009f86:	bfb8      	it	lt
 8009f88:	9204      	strlt	r2, [sp, #16]
 8009f8a:	7823      	ldrb	r3, [r4, #0]
 8009f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8e:	d10c      	bne.n	8009faa <_vfiprintf_r+0x176>
 8009f90:	7863      	ldrb	r3, [r4, #1]
 8009f92:	2b2a      	cmp	r3, #42	; 0x2a
 8009f94:	d135      	bne.n	800a002 <_vfiprintf_r+0x1ce>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9203      	str	r2, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfb8      	it	lt
 8009fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fa6:	3402      	adds	r4, #2
 8009fa8:	9305      	str	r3, [sp, #20]
 8009faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a090 <_vfiprintf_r+0x25c>
 8009fae:	7821      	ldrb	r1, [r4, #0]
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	f7f6 f914 	bl	80001e0 <memchr>
 8009fb8:	b140      	cbz	r0, 8009fcc <_vfiprintf_r+0x198>
 8009fba:	2340      	movs	r3, #64	; 0x40
 8009fbc:	eba0 000a 	sub.w	r0, r0, sl
 8009fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	4303      	orrs	r3, r0
 8009fc8:	3401      	adds	r4, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd0:	482c      	ldr	r0, [pc, #176]	; (800a084 <_vfiprintf_r+0x250>)
 8009fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	f7f6 f902 	bl	80001e0 <memchr>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d03f      	beq.n	800a060 <_vfiprintf_r+0x22c>
 8009fe0:	4b29      	ldr	r3, [pc, #164]	; (800a088 <_vfiprintf_r+0x254>)
 8009fe2:	bb1b      	cbnz	r3, 800a02c <_vfiprintf_r+0x1f8>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	3307      	adds	r3, #7
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	3308      	adds	r3, #8
 8009fee:	9303      	str	r3, [sp, #12]
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	443b      	add	r3, r7
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	e767      	b.n	8009ec8 <_vfiprintf_r+0x94>
 8009ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	2001      	movs	r0, #1
 800a000:	e7a5      	b.n	8009f4e <_vfiprintf_r+0x11a>
 800a002:	2300      	movs	r3, #0
 800a004:	3401      	adds	r4, #1
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	4619      	mov	r1, r3
 800a00a:	f04f 0c0a 	mov.w	ip, #10
 800a00e:	4620      	mov	r0, r4
 800a010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a014:	3a30      	subs	r2, #48	; 0x30
 800a016:	2a09      	cmp	r2, #9
 800a018:	d903      	bls.n	800a022 <_vfiprintf_r+0x1ee>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0c5      	beq.n	8009faa <_vfiprintf_r+0x176>
 800a01e:	9105      	str	r1, [sp, #20]
 800a020:	e7c3      	b.n	8009faa <_vfiprintf_r+0x176>
 800a022:	fb0c 2101 	mla	r1, ip, r1, r2
 800a026:	4604      	mov	r4, r0
 800a028:	2301      	movs	r3, #1
 800a02a:	e7f0      	b.n	800a00e <_vfiprintf_r+0x1da>
 800a02c:	ab03      	add	r3, sp, #12
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	462a      	mov	r2, r5
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <_vfiprintf_r+0x258>)
 800a034:	a904      	add	r1, sp, #16
 800a036:	4630      	mov	r0, r6
 800a038:	f7fd fbb8 	bl	80077ac <_printf_float>
 800a03c:	4607      	mov	r7, r0
 800a03e:	1c78      	adds	r0, r7, #1
 800a040:	d1d6      	bne.n	8009ff0 <_vfiprintf_r+0x1bc>
 800a042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a044:	07d9      	lsls	r1, r3, #31
 800a046:	d405      	bmi.n	800a054 <_vfiprintf_r+0x220>
 800a048:	89ab      	ldrh	r3, [r5, #12]
 800a04a:	059a      	lsls	r2, r3, #22
 800a04c:	d402      	bmi.n	800a054 <_vfiprintf_r+0x220>
 800a04e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a050:	f7ff f8e6 	bl	8009220 <__retarget_lock_release_recursive>
 800a054:	89ab      	ldrh	r3, [r5, #12]
 800a056:	065b      	lsls	r3, r3, #25
 800a058:	f53f af12 	bmi.w	8009e80 <_vfiprintf_r+0x4c>
 800a05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a05e:	e711      	b.n	8009e84 <_vfiprintf_r+0x50>
 800a060:	ab03      	add	r3, sp, #12
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	462a      	mov	r2, r5
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <_vfiprintf_r+0x258>)
 800a068:	a904      	add	r1, sp, #16
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7fd fe42 	bl	8007cf4 <_printf_i>
 800a070:	e7e4      	b.n	800a03c <_vfiprintf_r+0x208>
 800a072:	bf00      	nop
 800a074:	0800a344 	.word	0x0800a344
 800a078:	0800a364 	.word	0x0800a364
 800a07c:	0800a324 	.word	0x0800a324
 800a080:	0800a522 	.word	0x0800a522
 800a084:	0800a52c 	.word	0x0800a52c
 800a088:	080077ad 	.word	0x080077ad
 800a08c:	08009e0f 	.word	0x08009e0f
 800a090:	0800a528 	.word	0x0800a528

0800a094 <_read_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_read_r+0x20>)
 800a098:	4604      	mov	r4, r0
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f7 fb3c 	bl	8001720 <_read>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_read_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_read_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20001d18 	.word	0x20001d18

0800a0b8 <__ascii_wctomb>:
 800a0b8:	b149      	cbz	r1, 800a0ce <__ascii_wctomb+0x16>
 800a0ba:	2aff      	cmp	r2, #255	; 0xff
 800a0bc:	bf85      	ittet	hi
 800a0be:	238a      	movhi	r3, #138	; 0x8a
 800a0c0:	6003      	strhi	r3, [r0, #0]
 800a0c2:	700a      	strbls	r2, [r1, #0]
 800a0c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0c8:	bf98      	it	ls
 800a0ca:	2001      	movls	r0, #1
 800a0cc:	4770      	bx	lr
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4770      	bx	lr

0800a0d2 <abort>:
 800a0d2:	b508      	push	{r3, lr}
 800a0d4:	2006      	movs	r0, #6
 800a0d6:	f000 f82b 	bl	800a130 <raise>
 800a0da:	2001      	movs	r0, #1
 800a0dc:	f7f7 fb16 	bl	800170c <_exit>

0800a0e0 <_raise_r>:
 800a0e0:	291f      	cmp	r1, #31
 800a0e2:	b538      	push	{r3, r4, r5, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	d904      	bls.n	800a0f4 <_raise_r+0x14>
 800a0ea:	2316      	movs	r3, #22
 800a0ec:	6003      	str	r3, [r0, #0]
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0f6:	b112      	cbz	r2, 800a0fe <_raise_r+0x1e>
 800a0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0fc:	b94b      	cbnz	r3, 800a112 <_raise_r+0x32>
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 f830 	bl	800a164 <_getpid_r>
 800a104:	462a      	mov	r2, r5
 800a106:	4601      	mov	r1, r0
 800a108:	4620      	mov	r0, r4
 800a10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10e:	f000 b817 	b.w	800a140 <_kill_r>
 800a112:	2b01      	cmp	r3, #1
 800a114:	d00a      	beq.n	800a12c <_raise_r+0x4c>
 800a116:	1c59      	adds	r1, r3, #1
 800a118:	d103      	bne.n	800a122 <_raise_r+0x42>
 800a11a:	2316      	movs	r3, #22
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	2001      	movs	r0, #1
 800a120:	e7e7      	b.n	800a0f2 <_raise_r+0x12>
 800a122:	2400      	movs	r4, #0
 800a124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a128:	4628      	mov	r0, r5
 800a12a:	4798      	blx	r3
 800a12c:	2000      	movs	r0, #0
 800a12e:	e7e0      	b.n	800a0f2 <_raise_r+0x12>

0800a130 <raise>:
 800a130:	4b02      	ldr	r3, [pc, #8]	; (800a13c <raise+0xc>)
 800a132:	4601      	mov	r1, r0
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f7ff bfd3 	b.w	800a0e0 <_raise_r>
 800a13a:	bf00      	nop
 800a13c:	20000010 	.word	0x20000010

0800a140 <_kill_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d07      	ldr	r5, [pc, #28]	; (800a160 <_kill_r+0x20>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	4611      	mov	r1, r2
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	f7f7 facd 	bl	80016ec <_kill>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d102      	bne.n	800a15c <_kill_r+0x1c>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	b103      	cbz	r3, 800a15c <_kill_r+0x1c>
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	bd38      	pop	{r3, r4, r5, pc}
 800a15e:	bf00      	nop
 800a160:	20001d18 	.word	0x20001d18

0800a164 <_getpid_r>:
 800a164:	f7f7 baba 	b.w	80016dc <_getpid>

0800a168 <_init>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <_fini>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr
