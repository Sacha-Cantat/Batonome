
Batonome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007308  08007308  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007310  08007310  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b78  20000074  0800738c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bec  0800738c  00021bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f354  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba8  00000000  00000000  0003f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00042fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  000449b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005896  00000000  00000000  00046248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf3f  00000000  00000000  0004bade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d844f  00000000  00000000  00068a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007634  00000000  00000000  00140ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071b0 	.word	0x080071b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080071b0 	.word	0x080071b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ImuManagement>:
 *  Created on: 5 janv. 2023
 *      Author: aubin
 */

void ImuManagement()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

	printf("Nous voila ici");
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <ImuManagement+0x10>)
 800057a:	f005 ffad 	bl	80064d8 <iprintf>


}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	080071c8 	.word	0x080071c8

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc0b 	bl	8000da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f81c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f90c 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000598:	f000 f85e 	bl	8000658 <MX_I2C1_Init>
  MX_I2C3_Init();
 800059c:	f000 f89a 	bl	80006d4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f8d6 	bl	8000750 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f003 f84e 	bl	8003644 <osKernelInitialize>

  /* creation of blink02 */
  //blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);

  /* creation of IMU */
  ImuHandle = osThreadNew(StartImu, NULL, &Imu_attributes);
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <main+0x38>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <main+0x3c>)
 80005ae:	f003 f893 	bl	80036d8 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <main+0x40>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f003 f868 	bl	800368c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x34>
 80005be:	bf00      	nop
 80005c0:	08007204 	.word	0x08007204
 80005c4:	080007f9 	.word	0x080007f9
 80005c8:	200001bc 	.word	0x200001bc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fedf 	bl	800639e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f2:	f000 ff91 	bl	8001518 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 f918 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000600:	2310      	movs	r3, #16
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ffd3 	bl	80015c4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000624:	f000 f904 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fbd3 	bl	8001dec <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800064c:	f000 f8f0 	bl	8000830 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3758      	adds	r7, #88	; 0x58
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_I2C1_Init+0x74>)
 8000664:	f640 6214 	movw	r2, #3604	; 0xe14
 8000668:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_I2C1_Init+0x74>)
 8000672:	2201      	movs	r2, #1
 8000674:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_I2C1_Init+0x74>)
 8000696:	f000 fe0b 	bl	80012b0 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f8c6 	bl	8000830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <MX_I2C1_Init+0x74>)
 80006a8:	f000 fe91 	bl	80013ce <HAL_I2CEx_ConfigAnalogFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006b2:	f000 f8bd 	bl	8000830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2C1_Init+0x74>)
 80006ba:	f000 fed3 	bl	8001464 <HAL_I2CEx_ConfigDigitalFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 f8b4 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000090 	.word	0x20000090
 80006d0:	40005400 	.word	0x40005400

080006d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C3_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C3_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C3_Init+0x74>)
 80006e0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006e4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C3_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_I2C3_Init+0x74>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C3_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2C3_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C3_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2C3_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_I2C3_Init+0x74>)
 8000712:	f000 fdcd 	bl	80012b0 <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f888 	bl	8000830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C3_Init+0x74>)
 8000724:	f000 fe53 	bl	80013ce <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800072e:	f000 f87f 	bl	8000830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C3_Init+0x74>)
 8000736:	f000 fe95 	bl	8001464 <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 f876 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000e4 	.word	0x200000e4
 800074c:	40005c00 	.word	0x40005c00

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART1_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000794:	f002 fae8 	bl	8002d68 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f847 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000138 	.word	0x20000138
 80007ac:	40013800 	.word	0x40013800

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_GPIO_Init+0x44>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <StartImu>:
  * @brief  Function implementing the Imu management thread.
  * @param  argument: Not used
  * @retval None
  */
void StartImu(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f002 fffb 	bl	80037fc <osDelay>
		ImuManagement();
 8000806:	f7ff feb5 	bl	8000574 <ImuManagement>
		osDelay(1);
 800080a:	e7f9      	b.n	8000800 <StartImu+0x8>

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fadb 	bl	8000dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40001000 	.word	0x40001000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_MspInit+0x4c>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fb85 	bl	8000f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0a2      	sub	sp, #136	; 0x88
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	2254      	movs	r2, #84	; 0x54
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fd76 	bl	800639e <memset>
  if(hi2c->Instance==I2C1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <HAL_I2C_MspInit+0x168>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d13a      	bne.n	8000932 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fce5 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008d4:	f7ff ffac 	bl	8000830 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	4a46      	ldr	r2, [pc, #280]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f6:	2312      	movs	r3, #18
 80008f8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f000 fb62 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6593      	str	r3, [r2, #88]	; 0x58
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000930:	e05c      	b.n	80009ec <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a31      	ldr	r2, [pc, #196]	; (80009fc <HAL_I2C_MspInit+0x170>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d157      	bne.n	80009ec <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000942:	2300      	movs	r3, #0
 8000944:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fca4 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000956:	f7ff ff6b 	bl	8000830 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800099c:	2304      	movs	r3, #4
 800099e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 fb16 	bl	8000fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009b0:	2310      	movs	r3, #16
 80009b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009c2:	2304      	movs	r3, #4
 80009c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <HAL_I2C_MspInit+0x174>)
 80009d0:	f000 fb04 	bl	8000fdc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80009da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x16c>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3788      	adds	r7, #136	; 0x88
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40005c00 	.word	0x40005c00
 8000a00:	48000400 	.word	0x48000400

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09e      	sub	sp, #120	; 0x78
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2254      	movs	r2, #84	; 0x54
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 fcba 	bl	800639e <memset>
  if(huart->Instance==USART1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_UART_MspInit+0xa4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d135      	bne.n	8000aa0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fc29 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff fef0 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a80:	23c0      	movs	r3, #192	; 0xc0
 8000a82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a90:	2307      	movs	r3, #7
 8000a92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a9c:	f000 fa9e 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3778      	adds	r7, #120	; 0x78
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac2:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_InitTick+0xe0>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <HAL_InitTick+0xe0>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <HAL_InitTick+0xe0>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ada:	f107 0210 	add.w	r2, r7, #16
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fb45 	bl	8002174 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d103      	bne.n	8000afc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af4:	f001 fb12 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8000af8:	6378      	str	r0, [r7, #52]	; 0x34
 8000afa:	e004      	b.n	8000b06 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afc:	f001 fb0e 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8000b00:	4603      	mov	r3, r0
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_InitTick+0xe4>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	0c9b      	lsrs	r3, r3, #18
 8000b10:	3b01      	subs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b3c:	f001 fe94 	bl	8002868 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d11b      	bne.n	8000b86 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b50:	f001 feec 	bl	800292c <HAL_TIM_Base_Start_IT>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d111      	bne.n	8000b86 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f000 fa2c 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d808      	bhi.n	8000b80 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2036      	movs	r0, #54	; 0x36
 8000b74:	f000 fa08 	bl	8000f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_InitTick+0xf0>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e002      	b.n	8000b86 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3738      	adds	r7, #56	; 0x38
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	200001c0 	.word	0x200001c0
 8000ba0:	40001000 	.word	0x40001000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM6_DAC_IRQHandler+0x10>)
 8000bda:	f001 fefb 	bl	80029d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001c0 	.word	0x200001c0

08000be8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfa:	f3af 8000 	nop.w
 8000bfe:	4601      	mov	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
  }

  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e009      	b.n	8000c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf1      	blt.n	8000c34 <_write+0x12>
  }
  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:

int _close(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:

int _isatty(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f005 fa22 	bl	800613c <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20010000 	.word	0x20010000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	2000020c 	.word	0x2000020c
 8000d2c:	20001bf0 	.word	0x20001bf0

08000d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff ffea 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f005 fad7 	bl	8006334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d86:	f7ff fbff 	bl	8000588 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d98:	08007318 	.word	0x08007318
  ldr r2, =_sbss
 8000d9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000da0:	20001bec 	.word	0x20001bec

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>

08000da6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8de 	bl	8000f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	200f      	movs	r0, #15
 8000db8:	f7ff fe7c 	bl	8000ab4 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc8:	f7ff fd38 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000210 	.word	0x20000210

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000210 	.word	0x20000210

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff4c 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9a:	f7ff ff61 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000f9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	f7ff ffb1 	bl	8000f0c <NVIC_EncodePriority>
 8000faa:	4602      	mov	r2, r0
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff80 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff54 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e148      	b.n	800127e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 813a 	beq.w	8001278 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8094 	beq.w	8001278 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a51      	ldr	r2, [pc, #324]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d00d      	beq.n	80011b0 <HAL_GPIO_Init+0x1d4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x1d0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_GPIO_Init+0x1cc>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e004      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011a8:	2307      	movs	r3, #7
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011b0:	2300      	movs	r3, #0
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	f002 0203 	and.w	r2, r2, #3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4093      	lsls	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c2:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	f47f aeaf 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e081      	b.n	80013c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fad8 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001300:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001310:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e006      	b.n	8001338 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001336:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d104      	bne.n	800134a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800136c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69d9      	ldr	r1, [r3, #28]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2220      	movs	r2, #32
 80013b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d138      	bne.n	8001456 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e032      	b.n	8001458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2224      	movs	r2, #36	; 0x24
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001420:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001456:	2302      	movs	r3, #2
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b20      	cmp	r3, #32
 8001478:	d139      	bne.n	80014ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001484:	2302      	movs	r3, #2
 8001486:	e033      	b.n	80014f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2224      	movs	r2, #36	; 0x24
 8001494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0201 	orr.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWREx_GetVoltageRange+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d130      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d038      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	e002      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d102      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d110      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e00f      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d007      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	431bde83 	.word	0x431bde83

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f000 bc02 	b.w	8001ddc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d8:	4b96      	ldr	r3, [pc, #600]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e2:	4b94      	ldr	r3, [pc, #592]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80e4 	beq.w	80017c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_RCC_OscConfig+0x4c>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	f040 808b 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 8087 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_OscConfig+0x64>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e3d9      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_RCC_OscConfig+0x7e>
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	e005      	b.n	800164e <HAL_RCC_OscConfig+0x8a>
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164e:	4293      	cmp	r3, r2
 8001650:	d223      	bcs.n	800169a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fdbe 	bl	80021d8 <RCC_SetFlashLatencyFromMSIRange>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3ba      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	496d      	ldr	r1, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4968      	ldr	r1, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e025      	b.n	80016e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4960      	ldr	r1, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	495b      	ldr	r1, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd7e 	bl	80021d8 <RCC_SetFlashLatencyFromMSIRange>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e37a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e6:	f000 fc81 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4950      	ldr	r1, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x278>)
 8001704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f9d2 	bl	8000ab4 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d052      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	e35e      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001732:	f7ff fb65 	bl	8000e00 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173a:	f7ff fb61 	bl	8000e00 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e347      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174c:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4930      	ldr	r1, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	492b      	ldr	r1, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb32 	bl	8000e00 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb2e 	bl	8000e00 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e314      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1dc>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d073      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x21c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d10e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d063      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d15f      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x24c>
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e025      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d114      	bne.n	8001844 <HAL_RCC_OscConfig+0x280>
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e013      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001834:	40021000 	.word	0x40021000
 8001838:	08007228 	.word	0x08007228
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004
 8001844:	4ba0      	ldr	r3, [pc, #640]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9c      	ldr	r2, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff facc 	bl	8000e00 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fac8 	bl	8000e00 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e2ae      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x2a8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fab8 	bl	8000e00 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fab4 	bl	8000e00 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e29a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d0>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d060      	beq.n	8001984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x310>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x328>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e277      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	4973      	ldr	r1, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	e040      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fa73 	bl	8000e00 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fa6f 	bl	8000e00 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e255      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	495f      	ldr	r1, [pc, #380]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff fa4f 	bl	8000e00 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fa4b 	bl	8000e00 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e231      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa2a 	bl	8000e00 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fa26 	bl	8000e00 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa0d 	bl	8000e00 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fa09 	bl	8000e00 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1ef      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ef      	bne.n	80019ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a6 	beq.w	8001b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d118      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9d0 	bl	8000e00 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff f9cc 	bl	8000e00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1b2      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9a:	e029      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x50c>
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a99      	ldr	r2, [pc, #612]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a95      	ldr	r2, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d016      	beq.n	8001b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f982 	bl	8000e00 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f97e 	bl	8000e00 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e162      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ed      	beq.n	8001b00 <HAL_RCC_OscConfig+0x53c>
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f96b 	bl	8000e00 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f967 	bl	8000e00 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e14b      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ed      	bne.n	8001b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03c      	beq.n	8001bea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f93a 	bl	8000e00 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b90:	f7ff f936 	bl	8000e00 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e11c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ef      	beq.n	8001b90 <HAL_RCC_OscConfig+0x5cc>
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f91d 	bl	8000e00 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bca:	f7ff f919 	bl	8000e00 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ff      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80f3 	beq.w	8001dda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 80c9 	bne.w	8001d90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d12c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d123      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d11b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d113      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d06b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d062      	beq.n	8001d38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0ac      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8e:	f7ff f8b7 	bl	8000e00 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f8b3 	bl	8000e00 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e099      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x77c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	0552      	lsls	r2, r2, #21
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0652      	lsls	r2, r2, #25
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cee:	06d2      	lsls	r2, r2, #27
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7ff f876 	bl	8000e00 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f872 	bl	8000e00 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e058      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d36:	e050      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d144      	bne.n	8001dda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d68:	f7ff f84a 	bl	8000e00 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f846 	bl	8000e00 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e02c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x7ac>
 8001d8e:	e024      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d01f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f82d 	bl	8000e00 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f829 	bl	8000e00 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	feeefffc 	.word	0xfeeefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e7      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4970      	ldr	r1, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cf      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4960      	ldr	r1, [pc, #384]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04c      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0a6      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e09a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e086      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4943      	ldr	r1, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7fe ff94 	bl	8000e00 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe ff90 	bl	8000e00 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e06e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d208      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d210      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e036      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa0:	f000 f824 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fd75 	bl	8000ab4 <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08007228 	.word	0x08007228
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x34>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d121      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e004      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 8002072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d134      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0xa6>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xac>
 8002090:	e005      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002094:	617b      	str	r3, [r7, #20]
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 800209a:	617b      	str	r3, [r7, #20]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0e5b      	lsrs	r3, r3, #25
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08007240 	.word	0x08007240
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08007238 	.word	0x08007238

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800214c:	f7ff ffda 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0adb      	lsrs	r3, r3, #11
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08007238 	.word	0x08007238

08002174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	220f      	movs	r2, #15
 8002182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetClockConfig+0x60>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021f0:	f7ff f984 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 80021f4:	6178      	str	r0, [r7, #20]
 80021f6:	e014      	b.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002210:	f7ff f974 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002214:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002228:	d10b      	bne.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d919      	bls.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2ba0      	cmp	r3, #160	; 0xa0
 8002234:	d902      	bls.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002236:	2302      	movs	r3, #2
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	e013      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e010      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d902      	bls.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002248:	2303      	movs	r3, #3
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e00a      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d102      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e004      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d101      	bne.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0207 	bic.w	r2, r3, #7
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022a0:	2300      	movs	r3, #0
 80022a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022a4:	2300      	movs	r3, #0
 80022a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d031      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022bc:	d01a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022c2:	d814      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022cc:	d10f      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a5c      	ldr	r2, [pc, #368]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f9ce 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ec:	e003      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74fb      	strb	r3, [r7, #19]
      break;
 80022f2:	e000      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80022f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022fc:	4b51      	ldr	r3, [pc, #324]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	494e      	ldr	r1, [pc, #312]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002312:	e001      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 809e 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a39      	ldr	r2, [pc, #228]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002368:	f7fe fd4a 	bl	8000e00 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7fe fd46 	bl	8000e00 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	74fb      	strb	r3, [r7, #19]
        break;
 8002382:	e005      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ef      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d15a      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01e      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d019      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fd06 	bl	8000e00 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fd02 	bl	8000e00 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d902      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	74fb      	strb	r3, [r7, #19]
            break;
 800240e:	e006      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ec      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
 8002440:	e006      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b8a      	ldr	r3, [pc, #552]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a89      	ldr	r2, [pc, #548]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4980      	ldr	r1, [pc, #512]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	4978      	ldr	r1, [pc, #480]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	496f      	ldr	r1, [pc, #444]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	4967      	ldr	r1, [pc, #412]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	495e      	ldr	r1, [pc, #376]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4956      	ldr	r1, [pc, #344]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d028      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4945      	ldr	r1, [pc, #276]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257a:	d106      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a3f      	ldr	r2, [pc, #252]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
 8002588:	e011      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002592:	d10c      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f872 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d028      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	492d      	ldr	r1, [pc, #180]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d8:	d106      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e4:	60d3      	str	r3, [r2, #12]
 80025e6:	e011      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f0:	d10c      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f843 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80025fe:	4603      	mov	r3, r0
 8002600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01c      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002636:	d10c      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2102      	movs	r1, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f820 	bl	8002684 <RCCEx_PLLSAI1_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002674:	7cbb      	ldrb	r3, [r7, #18]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002692:	4b74      	ldr	r3, [pc, #464]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800269e:	4b71      	ldr	r3, [pc, #452]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
       ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026b6:	4b6b      	ldr	r3, [pc, #428]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
       ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d047      	beq.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d018      	beq.n	800270a <RCCEx_PLLSAI1_Config+0x86>
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d825      	bhi.n	8002728 <RCCEx_PLLSAI1_Config+0xa4>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <RCCEx_PLLSAI1_Config+0x62>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d009      	beq.n	80026f8 <RCCEx_PLLSAI1_Config+0x74>
 80026e4:	e020      	b.n	8002728 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11d      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e01a      	b.n	800272e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f8:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e013      	b.n	8002732 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270a:	4b56      	ldr	r3, [pc, #344]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002716:	4b53      	ldr	r3, [pc, #332]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002726:	e006      	b.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e004      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002736:	bf00      	nop
    }

    if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	430b      	orrs	r3, r1
 8002754:	4943      	ldr	r1, [pc, #268]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d17c      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fb48 	bl	8000e00 <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002774:	f7fe fb44 	bl	8000e00 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
        break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ef      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d15f      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d110      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6892      	ldr	r2, [r2, #8]
 80027b0:	0211      	lsls	r1, r2, #8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	06d2      	lsls	r2, r2, #27
 80027b8:	430a      	orrs	r2, r1
 80027ba:	492a      	ldr	r1, [pc, #168]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	610b      	str	r3, [r1, #16]
 80027c0:	e027      	b.n	8002812 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d112      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0552      	lsls	r2, r2, #21
 80027e4:	430a      	orrs	r2, r1
 80027e6:	491f      	ldr	r1, [pc, #124]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	610b      	str	r3, [r1, #16]
 80027ec:	e011      	b.n	8002812 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6892      	ldr	r2, [r2, #8]
 80027fe:	0211      	lsls	r1, r2, #8
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6952      	ldr	r2, [r2, #20]
 8002804:	0852      	lsrs	r2, r2, #1
 8002806:	3a01      	subs	r2, #1
 8002808:	0652      	lsls	r2, r2, #25
 800280a:	430a      	orrs	r2, r1
 800280c:	4915      	ldr	r1, [pc, #84]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe faef 	bl	8000e00 <HAL_GetTick>
 8002822:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002824:	e009      	b.n	800283a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002826:	f7fe faeb 	bl	8000e00 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d902      	bls.n	800283a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	73fb      	strb	r3, [r7, #15]
          break;
 8002838:	e005      	b.n	8002846 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0ef      	beq.n	8002826 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e049      	b.n	800290e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f841 	bl	8002916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f9dc 	bl	8002c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d001      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e03b      	b.n	80029bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x4e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d004      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x4e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <HAL_TIM_Base_Start_IT+0xa0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d115      	bne.n	80029a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d015      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x8c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d011      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	e008      	b.n	80029b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e000      	b.n	80029ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40014000 	.word	0x40014000
 80029d0:	00010007 	.word	0x00010007

080029d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0202 	mvn.w	r2, #2
 8002a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f905 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8f7 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f908 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d122      	bne.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d11b      	bne.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0204 	mvn.w	r2, #4
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8db 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8cd 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8de 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d122      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0208 	mvn.w	r2, #8
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2204      	movs	r2, #4
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8b1 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8a3 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8b4 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0210 	mvn.w	r2, #16
 8002afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2208      	movs	r2, #8
 8002b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f887 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f879 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f88a 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0201 	mvn.w	r2, #1
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fe5a 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8de 	bl	8002d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b92:	d10e      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d107      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8d1 	bl	8002d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d10e      	bne.n	8002bde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f838 	bl	8002c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d10e      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d107      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0220 	mvn.w	r2, #32
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f891 	bl	8002d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <TIM_Base_SetConfig+0xbc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x20>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <TIM_Base_SetConfig+0xbc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0x52>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x52>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <TIM_Base_SetConfig+0xc0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x52>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <TIM_Base_SetConfig+0xc4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <TIM_Base_SetConfig+0xbc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0xa0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <TIM_Base_SetConfig+0xc0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0xa0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <TIM_Base_SetConfig+0xc4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	615a      	str	r2, [r3, #20]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400

08002d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e040      	b.n	8002dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fe3a 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f82c 	bl	8002e04 <UART_SetConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa4c 	bl	800325c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fad3 	bl	80033a0 <UART_CheckIdleState>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b08a      	sub	sp, #40	; 0x28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4bb4      	ldr	r3, [pc, #720]	; (8003104 <UART_SetConfig+0x300>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4aa9      	ldr	r2, [pc, #676]	; (8003108 <UART_SetConfig+0x304>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4aa0      	ldr	r2, [pc, #640]	; (800310c <UART_SetConfig+0x308>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d126      	bne.n	8002edc <UART_SetConfig+0xd8>
 8002e8e:	4ba0      	ldr	r3, [pc, #640]	; (8003110 <UART_SetConfig+0x30c>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d81b      	bhi.n	8002ed4 <UART_SetConfig+0xd0>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0xa0>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecd 	.word	0x08002ecd
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eba:	e080      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec2:	e07c      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e078      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e074      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e070      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8c      	ldr	r2, [pc, #560]	; (8003114 <UART_SetConfig+0x310>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d138      	bne.n	8002f58 <UART_SetConfig+0x154>
 8002ee6:	4b8a      	ldr	r3, [pc, #552]	; (8003110 <UART_SetConfig+0x30c>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d82d      	bhi.n	8002f50 <UART_SetConfig+0x14c>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0xf8>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f51 	.word	0x08002f51
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f51 	.word	0x08002f51
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f39 	.word	0x08002f39
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f36:	e042      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e03e      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f40:	2304      	movs	r3, #4
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e03a      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e036      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f50:	2310      	movs	r3, #16
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e032      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <UART_SetConfig+0x304>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12a      	bne.n	8002fb8 <UART_SetConfig+0x1b4>
 8002f62:	4b6b      	ldr	r3, [pc, #428]	; (8003110 <UART_SetConfig+0x30c>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f70:	d01a      	beq.n	8002fa8 <UART_SetConfig+0x1a4>
 8002f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f76:	d81b      	bhi.n	8002fb0 <UART_SetConfig+0x1ac>
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d00c      	beq.n	8002f98 <UART_SetConfig+0x194>
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	d815      	bhi.n	8002fb0 <UART_SetConfig+0x1ac>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <UART_SetConfig+0x18c>
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8c:	d008      	beq.n	8002fa0 <UART_SetConfig+0x19c>
 8002f8e:	e00f      	b.n	8002fb0 <UART_SetConfig+0x1ac>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e012      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e00e      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e00a      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e006      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e002      	b.n	8002fbe <UART_SetConfig+0x1ba>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a51      	ldr	r2, [pc, #324]	; (8003108 <UART_SetConfig+0x304>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d17a      	bne.n	80030be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d824      	bhi.n	800301a <UART_SetConfig+0x216>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <UART_SetConfig+0x1d4>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	0800301b 	.word	0x0800301b
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	0800300b 	.word	0x0800300b
 8002fec:	0800301b 	.word	0x0800301b
 8002ff0:	0800301b 	.word	0x0800301b
 8002ff4:	0800301b 	.word	0x0800301b
 8002ff8:	08003013 	.word	0x08003013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7ff f88e 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003000:	61f8      	str	r0, [r7, #28]
        break;
 8003002:	e010      	b.n	8003026 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003004:	4b44      	ldr	r3, [pc, #272]	; (8003118 <UART_SetConfig+0x314>)
 8003006:	61fb      	str	r3, [r7, #28]
        break;
 8003008:	e00d      	b.n	8003026 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300a:	f7fe ffef 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 800300e:	61f8      	str	r0, [r7, #28]
        break;
 8003010:	e009      	b.n	8003026 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003016:	61fb      	str	r3, [r7, #28]
        break;
 8003018:	e005      	b.n	8003026 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8107 	beq.w	800323c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	429a      	cmp	r2, r3
 800303c:	d305      	bcc.n	800304a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	d903      	bls.n	8003052 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003050:	e0f4      	b.n	800323c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2200      	movs	r2, #0
 8003056:	461c      	mov	r4, r3
 8003058:	4615      	mov	r5, r2
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	022b      	lsls	r3, r5, #8
 8003064:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003068:	0222      	lsls	r2, r4, #8
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	6849      	ldr	r1, [r1, #4]
 800306e:	0849      	lsrs	r1, r1, #1
 8003070:	2000      	movs	r0, #0
 8003072:	4688      	mov	r8, r1
 8003074:	4681      	mov	r9, r0
 8003076:	eb12 0a08 	adds.w	sl, r2, r8
 800307a:	eb43 0b09 	adc.w	fp, r3, r9
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308c:	4650      	mov	r0, sl
 800308e:	4659      	mov	r1, fp
 8003090:	f7fd f8ee 	bl	8000270 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d308      	bcc.n	80030b6 <UART_SetConfig+0x2b2>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030aa:	d204      	bcs.n	80030b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e0c2      	b.n	800323c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030bc:	e0be      	b.n	800323c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c6:	d16a      	bne.n	800319e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80030c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d834      	bhi.n	800313a <UART_SetConfig+0x336>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x2d4>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	08003125 	.word	0x08003125
 80030e4:	0800313b 	.word	0x0800313b
 80030e8:	0800312b 	.word	0x0800312b
 80030ec:	0800313b 	.word	0x0800313b
 80030f0:	0800313b 	.word	0x0800313b
 80030f4:	0800313b 	.word	0x0800313b
 80030f8:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7ff f80e 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003100:	61f8      	str	r0, [r7, #28]
        break;
 8003102:	e020      	b.n	8003146 <UART_SetConfig+0x342>
 8003104:	efff69f3 	.word	0xefff69f3
 8003108:	40008000 	.word	0x40008000
 800310c:	40013800 	.word	0x40013800
 8003110:	40021000 	.word	0x40021000
 8003114:	40004400 	.word	0x40004400
 8003118:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7ff f814 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003120:	61f8      	str	r0, [r7, #28]
        break;
 8003122:	e010      	b.n	8003146 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <UART_SetConfig+0x454>)
 8003126:	61fb      	str	r3, [r7, #28]
        break;
 8003128:	e00d      	b.n	8003146 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7fe ff5f 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 800312e:	61f8      	str	r0, [r7, #28]
        break;
 8003130:	e009      	b.n	8003146 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e005      	b.n	8003146 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d077      	beq.n	800323c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005a      	lsls	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	441a      	add	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d916      	bls.n	8003196 <UART_SetConfig+0x392>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d212      	bcs.n	8003196 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f023 030f 	bic.w	r3, r3, #15
 8003178:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b29a      	uxth	r2, r3
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	4313      	orrs	r3, r2
 800318a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	8afa      	ldrh	r2, [r7, #22]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	e052      	b.n	800323c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800319c:	e04e      	b.n	800323c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d827      	bhi.n	80031f6 <UART_SetConfig+0x3f2>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0x3a8>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e7 	.word	0x080031e7
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d0:	f7fe ffa4 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 80031d4:	61f8      	str	r0, [r7, #28]
        break;
 80031d6:	e014      	b.n	8003202 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7fe ffb6 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 80031dc:	61f8      	str	r0, [r7, #28]
        break;
 80031de:	e010      	b.n	8003202 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <UART_SetConfig+0x454>)
 80031e2:	61fb      	str	r3, [r7, #28]
        break;
 80031e4:	e00d      	b.n	8003202 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7fe ff01 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80031ea:	61f8      	str	r0, [r7, #28]
        break;
 80031ec:	e009      	b.n	8003202 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e005      	b.n	8003202 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003200:	bf00      	nop
    }

    if (pclk != 0U)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d019      	beq.n	800323c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	085a      	lsrs	r2, r3, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d909      	bls.n	8003236 <UART_SetConfig+0x432>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d205      	bcs.n	8003236 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e002      	b.n	800323c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003248:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	00f42400 	.word	0x00f42400

0800325c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01a      	beq.n	8003372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335a:	d10a      	bne.n	8003372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b0:	f7fd fd26 	bl	8000e00 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10e      	bne.n	80033e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f82d 	bl	8003432 <UART_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e023      	b.n	800342a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d10e      	bne.n	800340e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f817 	bl	8003432 <UART_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e00d      	b.n	800342a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b09c      	sub	sp, #112	; 0x70
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4613      	mov	r3, r2
 8003440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003442:	e0a5      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	f000 80a1 	beq.w	8003590 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fd fcd7 	bl	8000e00 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <UART_WaitOnFlagUntilTimeout+0x32>
 800345e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003460:	2b00      	cmp	r3, #0
 8003462:	d13e      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003478:	667b      	str	r3, [r7, #100]	; 0x64
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e6      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	663b      	str	r3, [r7, #96]	; 0x60
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3308      	adds	r3, #8
 80034b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e067      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d04f      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fe:	d147      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003508:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800351e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
 800352a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800352e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e6      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3308      	adds	r3, #8
 8003542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	613b      	str	r3, [r7, #16]
   return(result);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	66bb      	str	r3, [r7, #104]	; 0x68
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3308      	adds	r3, #8
 800355a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800355c:	623a      	str	r2, [r7, #32]
 800355e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	6a3a      	ldr	r2, [r7, #32]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	61bb      	str	r3, [r7, #24]
   return(result);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e010      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	f43f af4a 	beq.w	8003444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3770      	adds	r7, #112	; 0x70
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <__NVIC_SetPriority>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db0a      	blt.n	80035e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	490c      	ldr	r1, [pc, #48]	; (8003608 <__NVIC_SetPriority+0x4c>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	440b      	add	r3, r1
 80035e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035e4:	e00a      	b.n	80035fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <__NVIC_SetPriority+0x50>)
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	3b04      	subs	r3, #4
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	440b      	add	r3, r1
 80035fa:	761a      	strb	r2, [r3, #24]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Handler+0x1c>)
 8003616:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003618:	f001 fd28 	bl	800506c <xTaskGetSchedulerState>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003622:	f002 fb11 	bl	8005c48 <xPortSysTickHandler>
  }
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003634:	2100      	movs	r1, #0
 8003636:	f06f 0004 	mvn.w	r0, #4
 800363a:	f7ff ffbf 	bl	80035bc <__NVIC_SetPriority>
#endif
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800364a:	f3ef 8305 	mrs	r3, IPSR
 800364e:	603b      	str	r3, [r7, #0]
  return(result);
 8003650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003656:	f06f 0305 	mvn.w	r3, #5
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	e00c      	b.n	8003678 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <osKernelInitialize+0x44>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <osKernelInitialize+0x44>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	e002      	b.n	8003678 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003678:	687b      	ldr	r3, [r7, #4]
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000214 	.word	0x20000214

0800368c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003692:	f3ef 8305 	mrs	r3, IPSR
 8003696:	603b      	str	r3, [r7, #0]
  return(result);
 8003698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800369e:	f06f 0305 	mvn.w	r3, #5
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	e010      	b.n	80036c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <osKernelStart+0x48>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d109      	bne.n	80036c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036ae:	f7ff ffbf 	bl	8003630 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <osKernelStart+0x48>)
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036b8:	f001 f87c 	bl	80047b4 <vTaskStartScheduler>
      stat = osOK;
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	e002      	b.n	80036c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000214 	.word	0x20000214

080036d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e8:	f3ef 8305 	mrs	r3, IPSR
 80036ec:	617b      	str	r3, [r7, #20]
  return(result);
 80036ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d17e      	bne.n	80037f2 <osThreadNew+0x11a>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d07b      	beq.n	80037f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036fe:	2318      	movs	r3, #24
 8003700:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d045      	beq.n	800379e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <osThreadNew+0x48>
        name = attr->name;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <osThreadNew+0x6e>
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b38      	cmp	r3, #56	; 0x38
 8003738:	d805      	bhi.n	8003746 <osThreadNew+0x6e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <osThreadNew+0x72>
        return (NULL);
 8003746:	2300      	movs	r3, #0
 8003748:	e054      	b.n	80037f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <osThreadNew+0xa8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2bbb      	cmp	r3, #187	; 0xbb
 8003768:	d90a      	bls.n	8003780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <osThreadNew+0xa8>
        mem = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e010      	b.n	80037a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10c      	bne.n	80037a2 <osThreadNew+0xca>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d108      	bne.n	80037a2 <osThreadNew+0xca>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <osThreadNew+0xca>
          mem = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e001      	b.n	80037a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d110      	bne.n	80037ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037b0:	9202      	str	r2, [sp, #8]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fe0c 	bl	80043dc <xTaskCreateStatic>
 80037c4:	4603      	mov	r3, r0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e013      	b.n	80037f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fe57 	bl	8004496 <xTaskCreate>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d001      	beq.n	80037f2 <osThreadNew+0x11a>
            hTask = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037f2:	693b      	ldr	r3, [r7, #16]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003804:	f3ef 8305 	mrs	r3, IPSR
 8003808:	60bb      	str	r3, [r7, #8]
  return(result);
 800380a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <osDelay+0x1c>
    stat = osErrorISR;
 8003810:	f06f 0305 	mvn.w	r3, #5
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e007      	b.n	8003828 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 ff92 	bl	800474c <vTaskDelay>
    }
  }

  return (stat);
 8003828:	68fb      	ldr	r3, [r7, #12]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <vApplicationGetIdleTaskMemory+0x2c>)
 8003844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a06      	ldr	r2, [pc, #24]	; (8003864 <vApplicationGetIdleTaskMemory+0x30>)
 800384a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000218 	.word	0x20000218
 8003864:	200002d4 	.word	0x200002d4

08003868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <vApplicationGetTimerTaskMemory+0x2c>)
 8003878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <vApplicationGetTimerTaskMemory+0x30>)
 800387e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003886:	601a      	str	r2, [r3, #0]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	200004d4 	.word	0x200004d4
 8003898:	20000590 	.word	0x20000590

0800389c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f103 0208 	add.w	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295
 80038b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f103 0208 	add.w	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f103 0208 	add.w	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d103      	bne.n	800395e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e00c      	b.n	8003978 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3308      	adds	r3, #8
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e002      	b.n	800396c <vListInsert+0x2e>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d2f6      	bcs.n	8003966 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6892      	ldr	r2, [r2, #8]
 80039c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6852      	ldr	r2, [r2, #4]
 80039d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d103      	bne.n	80039e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a2e:	f002 f879 	bl	8005b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d114      	bne.n	8003aae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3310      	adds	r3, #16
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f929 	bl	8004ce8 <xTaskRemoveFromEventList>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xQueueGenericReset+0xcc>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	e009      	b.n	8003ac2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fef2 	bl	800389c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff feed 	bl	800389c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ac2:	f002 f85f 	bl	8005b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ac6:	2301      	movs	r3, #1
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	; 0x38
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <xQueueGenericCreateStatic+0x52>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <xQueueGenericCreateStatic+0x56>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueGenericCreateStatic+0x58>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	623b      	str	r3, [r7, #32]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <xQueueGenericCreateStatic+0x7e>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <xQueueGenericCreateStatic+0x82>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <xQueueGenericCreateStatic+0x84>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	61fb      	str	r3, [r7, #28]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b72:	2350      	movs	r3, #80	; 0x50
 8003b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b50      	cmp	r3, #80	; 0x50
 8003b7a:	d00a      	beq.n	8003b92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	61bb      	str	r3, [r7, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ba6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f805 	bl	8003bc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3730      	adds	r7, #48	; 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	69b8      	ldr	r0, [r7, #24]
 8003bf6:	f7ff ff05 	bl	8003a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08e      	sub	sp, #56	; 0x38
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericSend+0x32>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <xQueueGenericSend+0x40>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <xQueueGenericSend+0x44>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <xQueueGenericSend+0x46>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <xQueueGenericSend+0x60>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d103      	bne.n	8003c7a <xQueueGenericSend+0x6e>
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <xQueueGenericSend+0x72>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueGenericSend+0x74>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGenericSend+0x8e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c9a:	f001 f9e7 	bl	800506c <xTaskGetSchedulerState>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <xQueueGenericSend+0x9e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSend+0xa2>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSend+0xa4>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xQueueGenericSend+0xbe>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61fb      	str	r3, [r7, #28]
}
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cca:	f001 ff2b 	bl	8005b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <xQueueGenericSend+0xd4>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d129      	bne.n	8003d34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce6:	f000 fa0b 	bl	8004100 <prvCopyDataToQueue>
 8003cea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fff5 	bl	8004ce8 <xTaskRemoveFromEventList>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <xQueueGenericSend+0x1f8>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	e00a      	b.n	8003d2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <xQueueGenericSend+0x1f8>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d2c:	f001 ff2a 	bl	8005b84 <vPortExitCritical>
				return pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e063      	b.n	8003dfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3a:	f001 ff23 	bl	8005b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e05c      	b.n	8003dfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f82f 	bl	8004db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d56:	f001 ff15 	bl	8005b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d5a:	f000 fd9b 	bl	8004894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d5e:	f001 fee1 	bl	8005b24 <vPortEnterCritical>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d103      	bne.n	8003d78 <xQueueGenericSend+0x16c>
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d103      	bne.n	8003d8e <xQueueGenericSend+0x182>
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8e:	f001 fef9 	bl	8005b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d92:	1d3a      	adds	r2, r7, #4
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f81e 	bl	8004ddc <xTaskCheckForTimeOut>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d124      	bne.n	8003df0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da8:	f000 faa2 	bl	80042f0 <prvIsQueueFull>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	3310      	adds	r3, #16
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 ff44 	bl	8004c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc2:	f000 fa2d 	bl	8004220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dc6:	f000 fd73 	bl	80048b0 <xTaskResumeAll>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f47f af7c 	bne.w	8003cca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <xQueueGenericSend+0x1f8>)
 8003dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	e772      	b.n	8003cca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de6:	f000 fa1b 	bl	8004220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dea:	f000 fd61 	bl	80048b0 <xTaskResumeAll>
 8003dee:	e76c      	b.n	8003cca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df2:	f000 fa15 	bl	8004220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003df6:	f000 fd5b 	bl	80048b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3738      	adds	r7, #56	; 0x38
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b090      	sub	sp, #64	; 0x40
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <xQueueGenericSendFromISR+0x3c>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <xQueueGenericSendFromISR+0x40>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <xQueueGenericSendFromISR+0x42>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d103      	bne.n	8003e72 <xQueueGenericSendFromISR+0x6a>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <xQueueGenericSendFromISR+0x6e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueGenericSendFromISR+0x70>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	623b      	str	r3, [r7, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e92:	f001 ff29 	bl	8005ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e96:	f3ef 8211 	mrs	r2, BASEPRI
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	61fa      	str	r2, [r7, #28]
 8003eac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003eae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <xQueueGenericSendFromISR+0xbc>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d12f      	bne.n	8003f24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003eda:	f000 f911 	bl	8004100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d112      	bne.n	8003f0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d016      	beq.n	8003f1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fef7 	bl	8004ce8 <xTaskRemoveFromEventList>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e007      	b.n	8003f1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f12:	3301      	adds	r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	b25a      	sxtb	r2, r3
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f22:	e001      	b.n	8003f28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3740      	adds	r7, #64	; 0x40
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <xQueueReceive+0x30>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	623b      	str	r3, [r7, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <xQueueReceive+0x3e>
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <xQueueReceive+0x42>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <xQueueReceive+0x44>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueReceive+0x5e>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	61fb      	str	r3, [r7, #28]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f9e:	f001 f865 	bl	800506c <xTaskGetSchedulerState>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <xQueueReceive+0x6e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <xQueueReceive+0x72>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueReceive+0x74>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueReceive+0x8e>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	61bb      	str	r3, [r7, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fce:	f001 fda9 	bl	8005b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01f      	beq.n	800401e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe2:	f000 f8f7 	bl	80041d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00f      	beq.n	8004016 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	3310      	adds	r3, #16
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fe74 	bl	8004ce8 <xTaskRemoveFromEventList>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <xQueueReceive+0x1bc>)
 8004008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004016:	f001 fdb5 	bl	8005b84 <vPortExitCritical>
				return pdPASS;
 800401a:	2301      	movs	r3, #1
 800401c:	e069      	b.n	80040f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004024:	f001 fdae 	bl	8005b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004028:	2300      	movs	r3, #0
 800402a:	e062      	b.n	80040f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004032:	f107 0310 	add.w	r3, r7, #16
 8004036:	4618      	mov	r0, r3
 8004038:	f000 feba 	bl	8004db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004040:	f001 fda0 	bl	8005b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004044:	f000 fc26 	bl	8004894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004048:	f001 fd6c 	bl	8005b24 <vPortEnterCritical>
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004052:	b25b      	sxtb	r3, r3
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <xQueueReceive+0x122>
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004068:	b25b      	sxtb	r3, r3
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d103      	bne.n	8004078 <xQueueReceive+0x138>
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004078:	f001 fd84 	bl	8005b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800407c:	1d3a      	adds	r2, r7, #4
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fea9 	bl	8004ddc <xTaskCheckForTimeOut>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d123      	bne.n	80040d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004092:	f000 f917 	bl	80042c4 <prvIsQueueEmpty>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fdcf 	bl	8004c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ac:	f000 f8b8 	bl	8004220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040b0:	f000 fbfe 	bl	80048b0 <xTaskResumeAll>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d189      	bne.n	8003fce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <xQueueReceive+0x1bc>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	e780      	b.n	8003fce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ce:	f000 f8a7 	bl	8004220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040d2:	f000 fbed 	bl	80048b0 <xTaskResumeAll>
 80040d6:	e77a      	b.n	8003fce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80040d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040da:	f000 f8a1 	bl	8004220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040de:	f000 fbe7 	bl	80048b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e4:	f000 f8ee 	bl	80042c4 <prvIsQueueEmpty>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f43f af6f 	beq.w	8003fce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3730      	adds	r7, #48	; 0x30
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d14d      	bne.n	80041c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 ffbc 	bl	80050a8 <xTaskPriorityDisinherit>
 8004130:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e043      	b.n	80041c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d119      	bne.n	8004174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6858      	ldr	r0, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	461a      	mov	r2, r3
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	f002 f919 	bl	8006382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	441a      	add	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d32b      	bcc.n	80041c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e026      	b.n	80041c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68d8      	ldr	r0, [r3, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	461a      	mov	r2, r3
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	f002 f8ff 	bl	8006382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	425b      	negs	r3, r3
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d207      	bcs.n	80041b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	425b      	negs	r3, r3
 80041aa:	441a      	add	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d105      	bne.n	80041c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	3b01      	subs	r3, #1
 80041c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	441a      	add	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d303      	bcc.n	8004208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68d9      	ldr	r1, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	461a      	mov	r2, r3
 8004212:	6838      	ldr	r0, [r7, #0]
 8004214:	f002 f8b5 	bl	8006382 <memcpy>
	}
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004228:	f001 fc7c 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004234:	e011      	b.n	800425a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fd50 	bl	8004ce8 <xTaskRemoveFromEventList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800424e:	f000 fe27 	bl	8004ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	3b01      	subs	r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800425a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	dce9      	bgt.n	8004236 <prvUnlockQueue+0x16>
 8004262:	e000      	b.n	8004266 <prvUnlockQueue+0x46>
					break;
 8004264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800426e:	f001 fc89 	bl	8005b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004272:	f001 fc57 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800427e:	e011      	b.n	80042a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3310      	adds	r3, #16
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fd2b 	bl	8004ce8 <xTaskRemoveFromEventList>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004298:	f000 fe02 	bl	8004ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	3b01      	subs	r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dce9      	bgt.n	8004280 <prvUnlockQueue+0x60>
 80042ac:	e000      	b.n	80042b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	22ff      	movs	r2, #255	; 0xff
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042b8:	f001 fc64 	bl	8005b84 <vPortExitCritical>
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042cc:	f001 fc2a 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e001      	b.n	80042e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042e2:	f001 fc4f 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042f8:	f001 fc14 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	429a      	cmp	r2, r3
 8004306:	d102      	bne.n	800430e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e001      	b.n	8004312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004312:	f001 fc37 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e014      	b.n	800435a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004330:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <vQueueAddToRegistry+0x50>)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <vQueueAddToRegistry+0x50>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <vQueueAddToRegistry+0x50>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004352:	e006      	b.n	8004362 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3301      	adds	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b07      	cmp	r3, #7
 800435e:	d9e7      	bls.n	8004330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000990 	.word	0x20000990

08004374 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004384:	f001 fbce 	bl	8005b24 <vPortEnterCritical>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d103      	bne.n	800439e <vQueueWaitForMessageRestricted+0x2a>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043a4:	b25b      	sxtb	r3, r3
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d103      	bne.n	80043b4 <vQueueWaitForMessageRestricted+0x40>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b4:	f001 fbe6 	bl	8005b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fc61 	bl	8004c90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7ff ff26 	bl	8004220 <prvUnlockQueue>
	}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af04      	add	r7, sp, #16
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xTaskCreateStatic+0x46>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	61fb      	str	r3, [r7, #28]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004422:	23bc      	movs	r3, #188	; 0xbc
 8004424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2bbc      	cmp	r3, #188	; 0xbc
 800442a:	d00a      	beq.n	8004442 <xTaskCreateStatic+0x66>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	61bb      	str	r3, [r7, #24]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004442:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01e      	beq.n	8004488 <xTaskCreateStatic+0xac>
 800444a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004458:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	2202      	movs	r2, #2
 800445e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004462:	2300      	movs	r3, #0
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	f107 0314 	add.w	r3, r7, #20
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f850 	bl	8004520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004482:	f000 f8f3 	bl	800466c <prvAddNewTaskToReadyList>
 8004486:	e001      	b.n	800448c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800448c:	697b      	ldr	r3, [r7, #20]
	}
 800448e:	4618      	mov	r0, r3
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004496:	b580      	push	{r7, lr}
 8004498:	b08c      	sub	sp, #48	; 0x30
 800449a:	af04      	add	r7, sp, #16
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fc5c 	bl	8005d68 <pvPortMalloc>
 80044b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044b8:	20bc      	movs	r0, #188	; 0xbc
 80044ba:	f001 fc55 	bl	8005d68 <pvPortMalloc>
 80044be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
 80044cc:	e005      	b.n	80044da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f001 fd16 	bl	8005f00 <vPortFree>
 80044d4:	e001      	b.n	80044da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d017      	beq.n	8004510 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9303      	str	r3, [sp, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f80e 	bl	8004520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004504:	69f8      	ldr	r0, [r7, #28]
 8004506:	f000 f8b1 	bl	800466c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800450a:	2301      	movs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	e002      	b.n	8004516 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004516:	69bb      	ldr	r3, [r7, #24]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	461a      	mov	r2, r3
 8004538:	21a5      	movs	r1, #165	; 0xa5
 800453a:	f001 ff30 	bl	800639e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004548:	3b01      	subs	r3, #1
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	617b      	str	r3, [r7, #20]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01f      	beq.n	80045be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e012      	b.n	80045aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	3334      	adds	r3, #52	; 0x34
 8004594:	460a      	mov	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d9e9      	bls.n	8004584 <prvInitialiseNewTask+0x64>
 80045b0:	e000      	b.n	80045b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80045b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	e003      	b.n	80045c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2b37      	cmp	r3, #55	; 0x37
 80045ca:	d901      	bls.n	80045d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045cc:	2337      	movs	r3, #55	; 0x37
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2200      	movs	r2, #0
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f978 	bl	80038dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3318      	adds	r3, #24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f973 	bl	80038dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	2200      	movs	r2, #0
 8004618:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	3354      	adds	r3, #84	; 0x54
 8004620:	2260      	movs	r2, #96	; 0x60
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f001 feba 	bl	800639e <memset>
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <prvInitialiseNewTask+0x140>)
 800462e:	659a      	str	r2, [r3, #88]	; 0x58
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <prvInitialiseNewTask+0x144>)
 8004634:	65da      	str	r2, [r3, #92]	; 0x5c
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <prvInitialiseNewTask+0x148>)
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	69b8      	ldr	r0, [r7, #24]
 8004642:	f001 f941 	bl	80058c8 <pxPortInitialiseStack>
 8004646:	4602      	mov	r2, r0
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004656:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004658:	bf00      	nop
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08007290 	.word	0x08007290
 8004664:	080072b0 	.word	0x080072b0
 8004668:	08007270 	.word	0x08007270

0800466c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004674:	f001 fa56 	bl	8005b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004678:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <prvAddNewTaskToReadyList+0xc4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <prvAddNewTaskToReadyList+0xc4>)
 8004680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <prvAddNewTaskToReadyList+0xc8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800468a:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <prvAddNewTaskToReadyList+0xc8>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <prvAddNewTaskToReadyList+0xc4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d110      	bne.n	80046ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004698:	f000 fc26 	bl	8004ee8 <prvInitialiseTaskLists>
 800469c:	e00d      	b.n	80046ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <prvAddNewTaskToReadyList+0xcc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <prvAddNewTaskToReadyList+0xc8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d802      	bhi.n	80046ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <prvAddNewTaskToReadyList+0xc8>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <prvAddNewTaskToReadyList+0xd0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <prvAddNewTaskToReadyList+0xd0>)
 80046c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <prvAddNewTaskToReadyList+0xd0>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <prvAddNewTaskToReadyList+0xd4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d903      	bls.n	80046e0 <prvAddNewTaskToReadyList+0x74>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <prvAddNewTaskToReadyList+0xd4>)
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4a15      	ldr	r2, [pc, #84]	; (8004744 <prvAddNewTaskToReadyList+0xd8>)
 80046ee:	441a      	add	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7ff f8fd 	bl	80038f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046fc:	f001 fa42 	bl	8005b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <prvAddNewTaskToReadyList+0xcc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00e      	beq.n	8004726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d207      	bcs.n	8004726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvAddNewTaskToReadyList+0xdc>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000ea4 	.word	0x20000ea4
 8004734:	200009d0 	.word	0x200009d0
 8004738:	20000eb0 	.word	0x20000eb0
 800473c:	20000ec0 	.word	0x20000ec0
 8004740:	20000eac 	.word	0x20000eac
 8004744:	200009d4 	.word	0x200009d4
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <vTaskDelay+0x60>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <vTaskDelay+0x30>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800477c:	f000 f88a 	bl	8004894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004780:	2100      	movs	r1, #0
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fcfe 	bl	8005184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004788:	f000 f892 	bl	80048b0 <xTaskResumeAll>
 800478c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <vTaskDelay+0x64>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000ecc 	.word	0x20000ecc
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047c2:	463a      	mov	r2, r7
 80047c4:	1d39      	adds	r1, r7, #4
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff f832 	bl	8003834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	9202      	str	r2, [sp, #8]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	2300      	movs	r3, #0
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	460a      	mov	r2, r1
 80047e2:	4924      	ldr	r1, [pc, #144]	; (8004874 <vTaskStartScheduler+0xc0>)
 80047e4:	4824      	ldr	r0, [pc, #144]	; (8004878 <vTaskStartScheduler+0xc4>)
 80047e6:	f7ff fdf9 	bl	80043dc <xTaskCreateStatic>
 80047ea:	4603      	mov	r3, r0
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <vTaskStartScheduler+0xc8>)
 80047ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047f0:	4b22      	ldr	r3, [pc, #136]	; (800487c <vTaskStartScheduler+0xc8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e001      	b.n	8004802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004808:	f000 fd10 	bl	800522c <xTimerCreateTimerTask>
 800480c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d11b      	bne.n	800484c <vTaskStartScheduler+0x98>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <vTaskStartScheduler+0xcc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3354      	adds	r3, #84	; 0x54
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <vTaskStartScheduler+0xd0>)
 8004830:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <vTaskStartScheduler+0xd4>)
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <vTaskStartScheduler+0xd8>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <vTaskStartScheduler+0xdc>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004846:	f001 f8cb 	bl	80059e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800484a:	e00e      	b.n	800486a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d10a      	bne.n	800486a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60fb      	str	r3, [r7, #12]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <vTaskStartScheduler+0xb4>
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	080071ec 	.word	0x080071ec
 8004878:	08004eb9 	.word	0x08004eb9
 800487c:	20000ec8 	.word	0x20000ec8
 8004880:	200009d0 	.word	0x200009d0
 8004884:	20000010 	.word	0x20000010
 8004888:	20000ec4 	.word	0x20000ec4
 800488c:	20000eb0 	.word	0x20000eb0
 8004890:	20000ea8 	.word	0x20000ea8

08004894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <vTaskSuspendAll+0x18>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	4a03      	ldr	r2, [pc, #12]	; (80048ac <vTaskSuspendAll+0x18>)
 80048a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048a2:	bf00      	nop
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000ecc 	.word	0x20000ecc

080048b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048be:	4b42      	ldr	r3, [pc, #264]	; (80049c8 <xTaskResumeAll+0x118>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <xTaskResumeAll+0x2c>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	603b      	str	r3, [r7, #0]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048dc:	f001 f922 	bl	8005b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <xTaskResumeAll+0x118>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <xTaskResumeAll+0x118>)
 80048e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <xTaskResumeAll+0x118>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d162      	bne.n	80049b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <xTaskResumeAll+0x11c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d05e      	beq.n	80049b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048fa:	e02f      	b.n	800495c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048fc:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <xTaskResumeAll+0x120>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3318      	adds	r3, #24
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f851 	bl	80039b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff f84c 	bl	80039b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <xTaskResumeAll+0x124>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d903      	bls.n	800492c <xTaskResumeAll+0x7c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <xTaskResumeAll+0x124>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <xTaskResumeAll+0x128>)
 800493a:	441a      	add	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe ffd7 	bl	80038f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4b23      	ldr	r3, [pc, #140]	; (80049dc <xTaskResumeAll+0x12c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <xTaskResumeAll+0x130>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800495c:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <xTaskResumeAll+0x120>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1cb      	bne.n	80048fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800496a:	f000 fb5f 	bl	800502c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <xTaskResumeAll+0x134>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d010      	beq.n	800499c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800497a:	f000 f847 	bl	8004a0c <xTaskIncrementTick>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <xTaskResumeAll+0x130>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f1      	bne.n	800497a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <xTaskResumeAll+0x134>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <xTaskResumeAll+0x130>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d009      	beq.n	80049b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <xTaskResumeAll+0x138>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049b8:	f001 f8e4 	bl	8005b84 <vPortExitCritical>

	return xAlreadyYielded;
 80049bc:	68bb      	ldr	r3, [r7, #8]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000ecc 	.word	0x20000ecc
 80049cc:	20000ea4 	.word	0x20000ea4
 80049d0:	20000e64 	.word	0x20000e64
 80049d4:	20000eac 	.word	0x20000eac
 80049d8:	200009d4 	.word	0x200009d4
 80049dc:	200009d0 	.word	0x200009d0
 80049e0:	20000eb8 	.word	0x20000eb8
 80049e4:	20000eb4 	.word	0x20000eb4
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <xTaskGetTickCount+0x1c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049f8:	687b      	ldr	r3, [r7, #4]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000ea8 	.word	0x20000ea8

08004a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a16:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <xTaskIncrementTick+0x148>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 808f 	bne.w	8004b3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a28:	4a4b      	ldr	r2, [pc, #300]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d120      	bne.n	8004a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a34:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	603b      	str	r3, [r7, #0]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <xTaskIncrementTick+0x46>
 8004a54:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <xTaskIncrementTick+0x154>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4a3f      	ldr	r2, [pc, #252]	; (8004b60 <xTaskIncrementTick+0x154>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b3e      	ldr	r3, [pc, #248]	; (8004b64 <xTaskIncrementTick+0x158>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a3d      	ldr	r2, [pc, #244]	; (8004b64 <xTaskIncrementTick+0x158>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	f000 fadb 	bl	800502c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a76:	4b3c      	ldr	r3, [pc, #240]	; (8004b68 <xTaskIncrementTick+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d349      	bcc.n	8004b14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a80:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <xTaskIncrementTick+0x15c>)
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	601a      	str	r2, [r3, #0]
					break;
 8004a92:	e03f      	b.n	8004b14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d203      	bcs.n	8004ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aac:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <xTaskIncrementTick+0x15c>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ab2:	e02f      	b.n	8004b14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe ff79 	bl	80039b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe ff70 	bl	80039b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <xTaskIncrementTick+0x160>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d903      	bls.n	8004ae4 <xTaskIncrementTick+0xd8>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <xTaskIncrementTick+0x160>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <xTaskIncrementTick+0x164>)
 8004af2:	441a      	add	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe fefb 	bl	80038f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <xTaskIncrementTick+0x168>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3b8      	bcc.n	8004a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b12:	e7b5      	b.n	8004a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <xTaskIncrementTick+0x168>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1a:	4915      	ldr	r1, [pc, #84]	; (8004b70 <xTaskIncrementTick+0x164>)
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d901      	bls.n	8004b30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <xTaskIncrementTick+0x16c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e004      	b.n	8004b48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <xTaskIncrementTick+0x170>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <xTaskIncrementTick+0x170>)
 8004b46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b48:	697b      	ldr	r3, [r7, #20]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000ecc 	.word	0x20000ecc
 8004b58:	20000ea8 	.word	0x20000ea8
 8004b5c:	20000e5c 	.word	0x20000e5c
 8004b60:	20000e60 	.word	0x20000e60
 8004b64:	20000ebc 	.word	0x20000ebc
 8004b68:	20000ec4 	.word	0x20000ec4
 8004b6c:	20000eac 	.word	0x20000eac
 8004b70:	200009d4 	.word	0x200009d4
 8004b74:	200009d0 	.word	0x200009d0
 8004b78:	20000eb8 	.word	0x20000eb8
 8004b7c:	20000eb4 	.word	0x20000eb4

08004b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <vTaskSwitchContext+0xb0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <vTaskSwitchContext+0xb4>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b94:	e046      	b.n	8004c24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <vTaskSwitchContext+0xb4>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <vTaskSwitchContext+0xb8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e010      	b.n	8004bc6 <vTaskSwitchContext+0x46>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	607b      	str	r3, [r7, #4]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vTaskSwitchContext+0x3e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	491d      	ldr	r1, [pc, #116]	; (8004c3c <vTaskSwitchContext+0xbc>)
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0e4      	beq.n	8004ba4 <vTaskSwitchContext+0x24>
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <vTaskSwitchContext+0xbc>)
 8004be6:	4413      	add	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <vTaskSwitchContext+0x8a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <vTaskSwitchContext+0xc0>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <vTaskSwitchContext+0xb8>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <vTaskSwitchContext+0xc0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3354      	adds	r3, #84	; 0x54
 8004c20:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <vTaskSwitchContext+0xc4>)
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000ecc 	.word	0x20000ecc
 8004c34:	20000eb8 	.word	0x20000eb8
 8004c38:	20000eac 	.word	0x20000eac
 8004c3c:	200009d4 	.word	0x200009d4
 8004c40:	200009d0 	.word	0x200009d0
 8004c44:	20000010 	.word	0x20000010

08004c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60fb      	str	r3, [r7, #12]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <vTaskPlaceOnEventList+0x44>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3318      	adds	r3, #24
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fe fe61 	bl	800393e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f000 fa80 	bl	8005184 <prvAddCurrentTaskToDelayedList>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	200009d0 	.word	0x200009d0

08004c90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	617b      	str	r3, [r7, #20]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3318      	adds	r3, #24
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7fe fe18 	bl	80038f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	68b8      	ldr	r0, [r7, #8]
 8004cd6:	f000 fa55 	bl	8005184 <prvAddCurrentTaskToDelayedList>
	}
 8004cda:	bf00      	nop
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200009d0 	.word	0x200009d0

08004ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	60fb      	str	r3, [r7, #12]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	3318      	adds	r3, #24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fe49 	bl	80039b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <xTaskRemoveFromEventList+0xb0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fe40 	bl	80039b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <xTaskRemoveFromEventList+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d903      	bls.n	8004d44 <xTaskRemoveFromEventList+0x5c>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <xTaskRemoveFromEventList+0xb4>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <xTaskRemoveFromEventList+0xb8>)
 8004d52:	441a      	add	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fe fdcb 	bl	80038f6 <vListInsertEnd>
 8004d60:	e005      	b.n	8004d6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3318      	adds	r3, #24
 8004d66:	4619      	mov	r1, r3
 8004d68:	480e      	ldr	r0, [pc, #56]	; (8004da4 <xTaskRemoveFromEventList+0xbc>)
 8004d6a:	f7fe fdc4 	bl	80038f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <xTaskRemoveFromEventList+0xc0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d905      	bls.n	8004d88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <xTaskRemoveFromEventList+0xc4>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e001      	b.n	8004d8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d8c:	697b      	ldr	r3, [r7, #20]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000ecc 	.word	0x20000ecc
 8004d9c:	20000eac 	.word	0x20000eac
 8004da0:	200009d4 	.word	0x200009d4
 8004da4:	20000e64 	.word	0x20000e64
 8004da8:	200009d0 	.word	0x200009d0
 8004dac:	20000eb8 	.word	0x20000eb8

08004db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <vTaskInternalSetTimeOutState+0x24>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <vTaskInternalSetTimeOutState+0x28>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	20000ebc 	.word	0x20000ebc
 8004dd8:	20000ea8 	.word	0x20000ea8

08004ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	613b      	str	r3, [r7, #16]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e1e:	f000 fe81 	bl	8005b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <xTaskCheckForTimeOut+0xbc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d102      	bne.n	8004e42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e023      	b.n	8004e8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <xTaskCheckForTimeOut+0xc0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d007      	beq.n	8004e5e <xTaskCheckForTimeOut+0x82>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e015      	b.n	8004e8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d20b      	bcs.n	8004e80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff9b 	bl	8004db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e004      	b.n	8004e8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f000 fe7b 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000ea8 	.word	0x20000ea8
 8004e9c:	20000ebc 	.word	0x20000ebc

08004ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <vTaskMissedYield+0x14>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20000eb8 	.word	0x20000eb8

08004eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ec0:	f000 f852 	bl	8004f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <prvIdleTask+0x28>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d9f9      	bls.n	8004ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <prvIdleTask+0x2c>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004edc:	e7f0      	b.n	8004ec0 <prvIdleTask+0x8>
 8004ede:	bf00      	nop
 8004ee0:	200009d4 	.word	0x200009d4
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	e00c      	b.n	8004f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4a12      	ldr	r2, [pc, #72]	; (8004f48 <prvInitialiseTaskLists+0x60>)
 8004f00:	4413      	add	r3, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fcca 	bl	800389c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b37      	cmp	r3, #55	; 0x37
 8004f12:	d9ef      	bls.n	8004ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f14:	480d      	ldr	r0, [pc, #52]	; (8004f4c <prvInitialiseTaskLists+0x64>)
 8004f16:	f7fe fcc1 	bl	800389c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f1a:	480d      	ldr	r0, [pc, #52]	; (8004f50 <prvInitialiseTaskLists+0x68>)
 8004f1c:	f7fe fcbe 	bl	800389c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f20:	480c      	ldr	r0, [pc, #48]	; (8004f54 <prvInitialiseTaskLists+0x6c>)
 8004f22:	f7fe fcbb 	bl	800389c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f26:	480c      	ldr	r0, [pc, #48]	; (8004f58 <prvInitialiseTaskLists+0x70>)
 8004f28:	f7fe fcb8 	bl	800389c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f2c:	480b      	ldr	r0, [pc, #44]	; (8004f5c <prvInitialiseTaskLists+0x74>)
 8004f2e:	f7fe fcb5 	bl	800389c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <prvInitialiseTaskLists+0x78>)
 8004f34:	4a05      	ldr	r2, [pc, #20]	; (8004f4c <prvInitialiseTaskLists+0x64>)
 8004f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <prvInitialiseTaskLists+0x7c>)
 8004f3a:	4a05      	ldr	r2, [pc, #20]	; (8004f50 <prvInitialiseTaskLists+0x68>)
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200009d4 	.word	0x200009d4
 8004f4c:	20000e34 	.word	0x20000e34
 8004f50:	20000e48 	.word	0x20000e48
 8004f54:	20000e64 	.word	0x20000e64
 8004f58:	20000e78 	.word	0x20000e78
 8004f5c:	20000e90 	.word	0x20000e90
 8004f60:	20000e5c 	.word	0x20000e5c
 8004f64:	20000e60 	.word	0x20000e60

08004f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f6e:	e019      	b.n	8004fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f70:	f000 fdd8 	bl	8005b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f74:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <prvCheckTasksWaitingTermination+0x50>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe fd15 	bl	80039b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <prvCheckTasksWaitingTermination+0x54>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <prvCheckTasksWaitingTermination+0x54>)
 8004f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvCheckTasksWaitingTermination+0x58>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <prvCheckTasksWaitingTermination+0x58>)
 8004f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f9a:	f000 fdf3 	bl	8005b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f810 	bl	8004fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <prvCheckTasksWaitingTermination+0x58>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e1      	bne.n	8004f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000e78 	.word	0x20000e78
 8004fbc:	20000ea4 	.word	0x20000ea4
 8004fc0:	20000e8c 	.word	0x20000e8c

08004fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3354      	adds	r3, #84	; 0x54
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 faa7 	bl	8006524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d108      	bne.n	8004ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 ff8b 	bl	8005f00 <vPortFree>
				vPortFree( pxTCB );
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 ff88 	bl	8005f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ff0:	e018      	b.n	8005024 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d103      	bne.n	8005004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 ff7f 	bl	8005f00 <vPortFree>
	}
 8005002:	e00f      	b.n	8005024 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800500a:	2b02      	cmp	r3, #2
 800500c:	d00a      	beq.n	8005024 <prvDeleteTCB+0x60>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <prvDeleteTCB+0x5e>
	}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <prvResetNextTaskUnblockTime+0x38>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <prvResetNextTaskUnblockTime+0x3c>)
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005044:	e008      	b.n	8005058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <prvResetNextTaskUnblockTime+0x38>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <prvResetNextTaskUnblockTime+0x3c>)
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000e5c 	.word	0x20000e5c
 8005068:	20000ec4 	.word	0x20000ec4

0800506c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <xTaskGetSchedulerState+0x34>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800507a:	2301      	movs	r3, #1
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e008      	b.n	8005092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <xTaskGetSchedulerState+0x38>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005088:	2302      	movs	r3, #2
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	e001      	b.n	8005092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005092:	687b      	ldr	r3, [r7, #4]
	}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	20000eb0 	.word	0x20000eb0
 80050a4:	20000ecc 	.word	0x20000ecc

080050a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d056      	beq.n	800516c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <xTaskPriorityDisinherit+0xd0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d00a      	beq.n	80050de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60bb      	str	r3, [r7, #8]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	429a      	cmp	r2, r3
 8005110:	d02c      	beq.n	800516c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005116:	2b00      	cmp	r3, #0
 8005118:	d128      	bne.n	800516c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fc46 	bl	80039b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <xTaskPriorityDisinherit+0xd4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d903      	bls.n	800514c <xTaskPriorityDisinherit+0xa4>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	4a0c      	ldr	r2, [pc, #48]	; (800517c <xTaskPriorityDisinherit+0xd4>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <xTaskPriorityDisinherit+0xd8>)
 800515a:	441a      	add	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fe fbc7 	bl	80038f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
	}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200009d0 	.word	0x200009d0
 800517c:	20000eac 	.word	0x20000eac
 8005180:	200009d4 	.word	0x200009d4

08005184 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800518e:	4b21      	ldr	r3, [pc, #132]	; (8005214 <prvAddCurrentTaskToDelayedList+0x90>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <prvAddCurrentTaskToDelayedList+0x94>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3304      	adds	r3, #4
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fc08 	bl	80039b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d10a      	bne.n	80051be <prvAddCurrentTaskToDelayedList+0x3a>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ae:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4819      	ldr	r0, [pc, #100]	; (800521c <prvAddCurrentTaskToDelayedList+0x98>)
 80051b8:	f7fe fb9d 	bl	80038f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051bc:	e026      	b.n	800520c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d209      	bcs.n	80051ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe fbab 	bl	800393e <vListInsert>
}
 80051e8:	e010      	b.n	800520c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fba1 	bl	800393e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d202      	bcs.n	800520c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000ea8 	.word	0x20000ea8
 8005218:	200009d0 	.word	0x200009d0
 800521c:	20000e90 	.word	0x20000e90
 8005220:	20000e60 	.word	0x20000e60
 8005224:	20000e5c 	.word	0x20000e5c
 8005228:	20000ec4 	.word	0x20000ec4

0800522c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005236:	f000 fb07 	bl	8005848 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <xTimerCreateTimerTask+0x80>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d021      	beq.n	8005286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800524a:	1d3a      	adds	r2, r7, #4
 800524c:	f107 0108 	add.w	r1, r7, #8
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fb07 	bl	8003868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	9202      	str	r2, [sp, #8]
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	2302      	movs	r3, #2
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2300      	movs	r3, #0
 800526a:	460a      	mov	r2, r1
 800526c:	4910      	ldr	r1, [pc, #64]	; (80052b0 <xTimerCreateTimerTask+0x84>)
 800526e:	4811      	ldr	r0, [pc, #68]	; (80052b4 <xTimerCreateTimerTask+0x88>)
 8005270:	f7ff f8b4 	bl	80043dc <xTaskCreateStatic>
 8005274:	4603      	mov	r3, r0
 8005276:	4a10      	ldr	r2, [pc, #64]	; (80052b8 <xTimerCreateTimerTask+0x8c>)
 8005278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <xTimerCreateTimerTask+0x8c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005282:	2301      	movs	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	613b      	str	r3, [r7, #16]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000f00 	.word	0x20000f00
 80052b0:	080071f4 	.word	0x080071f4
 80052b4:	080053f1 	.word	0x080053f1
 80052b8:	20000f04 	.word	0x20000f04

080052bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	623b      	str	r3, [r7, #32]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <xTimerGenericCommand+0x98>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d02a      	beq.n	8005348 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b05      	cmp	r3, #5
 8005302:	dc18      	bgt.n	8005336 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005304:	f7ff feb2 	bl	800506c <xTaskGetSchedulerState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b02      	cmp	r3, #2
 800530c:	d109      	bne.n	8005322 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <xTimerGenericCommand+0x98>)
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	f107 0110 	add.w	r1, r7, #16
 8005316:	2300      	movs	r3, #0
 8005318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531a:	f7fe fc77 	bl	8003c0c <xQueueGenericSend>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24
 8005320:	e012      	b.n	8005348 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <xTimerGenericCommand+0x98>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f107 0110 	add.w	r1, r7, #16
 800532a:	2300      	movs	r3, #0
 800532c:	2200      	movs	r2, #0
 800532e:	f7fe fc6d 	bl	8003c0c <xQueueGenericSend>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24
 8005334:	e008      	b.n	8005348 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <xTimerGenericCommand+0x98>)
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f107 0110 	add.w	r1, r7, #16
 800533e:	2300      	movs	r3, #0
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	f7fe fd61 	bl	8003e08 <xQueueGenericSendFromISR>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800534a:	4618      	mov	r0, r3
 800534c:	3728      	adds	r7, #40	; 0x28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000f00 	.word	0x20000f00

08005358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <prvProcessExpiredTimer+0x94>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fb1d 	bl	80039b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d022      	beq.n	80053ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	18d1      	adds	r1, r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	f000 f8d1 	bl	8005538 <prvInsertTimerInActiveList>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01f      	beq.n	80053dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800539c:	2300      	movs	r3, #0
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2300      	movs	r3, #0
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	2100      	movs	r1, #0
 80053a6:	6978      	ldr	r0, [r7, #20]
 80053a8:	f7ff ff88 	bl	80052bc <xTimerGenericCommand>
 80053ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d113      	bne.n	80053dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60fb      	str	r3, [r7, #12]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	6978      	ldr	r0, [r7, #20]
 80053e2:	4798      	blx	r3
}
 80053e4:	bf00      	nop
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000ef8 	.word	0x20000ef8

080053f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f857 	bl	80054b0 <prvGetNextExpireTime>
 8005402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f803 	bl	8005414 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800540e:	f000 f8d5 	bl	80055bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005412:	e7f1      	b.n	80053f8 <prvTimerTask+0x8>

08005414 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800541e:	f7ff fa39 	bl	8004894 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f866 	bl	80054f8 <prvSampleTimeNow>
 800542c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d130      	bne.n	8005496 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <prvProcessTimerOrBlockTask+0x3c>
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	429a      	cmp	r2, r3
 8005440:	d806      	bhi.n	8005450 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005442:	f7ff fa35 	bl	80048b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ff85 	bl	8005358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800544e:	e024      	b.n	800549a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <prvProcessTimerOrBlockTask+0x90>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <prvProcessTimerOrBlockTask+0x50>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <prvProcessTimerOrBlockTask+0x52>
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <prvProcessTimerOrBlockTask+0x94>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	f7fe ff7d 	bl	8004374 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800547a:	f7ff fa19 	bl	80048b0 <xTaskResumeAll>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <prvProcessTimerOrBlockTask+0x98>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
}
 8005494:	e001      	b.n	800549a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005496:	f7ff fa0b 	bl	80048b0 <xTaskResumeAll>
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000efc 	.word	0x20000efc
 80054a8:	20000f00 	.word	0x20000f00
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <prvGetNextExpireTime+0x44>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <prvGetNextExpireTime+0x16>
 80054c2:	2201      	movs	r2, #1
 80054c4:	e000      	b.n	80054c8 <prvGetNextExpireTime+0x18>
 80054c6:	2200      	movs	r2, #0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <prvGetNextExpireTime+0x44>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e001      	b.n	80054e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000ef8 	.word	0x20000ef8

080054f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005500:	f7ff fa74 	bl	80049ec <xTaskGetTickCount>
 8005504:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <prvSampleTimeNow+0x3c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d205      	bcs.n	800551c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005510:	f000 f936 	bl	8005780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e002      	b.n	8005522 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <prvSampleTimeNow+0x3c>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000f08 	.word	0x20000f08

08005538 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d812      	bhi.n	8005584 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e01b      	b.n	80055aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <prvInsertTimerInActiveList+0x7c>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fe f9de 	bl	800393e <vListInsert>
 8005582:	e012      	b.n	80055aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d206      	bcs.n	800559a <prvInsertTimerInActiveList+0x62>
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e007      	b.n	80055aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <prvInsertTimerInActiveList+0x80>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fe f9ca 	bl	800393e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000efc 	.word	0x20000efc
 80055b8:	20000ef8 	.word	0x20000ef8

080055bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08e      	sub	sp, #56	; 0x38
 80055c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055c2:	e0ca      	b.n	800575a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da18      	bge.n	80055fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	3304      	adds	r3, #4
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	61fb      	str	r3, [r7, #28]
}
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f2:	6850      	ldr	r0, [r2, #4]
 80055f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f6:	6892      	ldr	r2, [r2, #8]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f2c0 80aa 	blt.w	8005758 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe f9cb 	bl	80039b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800561a:	463b      	mov	r3, r7
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff6b 	bl	80054f8 <prvSampleTimeNow>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b09      	cmp	r3, #9
 8005628:	f200 8097 	bhi.w	800575a <prvProcessReceivedCommands+0x19e>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <prvProcessReceivedCommands+0x78>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	0800565d 	.word	0x0800565d
 8005638:	0800565d 	.word	0x0800565d
 800563c:	0800565d 	.word	0x0800565d
 8005640:	080056d1 	.word	0x080056d1
 8005644:	080056e5 	.word	0x080056e5
 8005648:	0800572f 	.word	0x0800572f
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800565d 	.word	0x0800565d
 8005654:	080056d1 	.word	0x080056d1
 8005658:	080056e5 	.word	0x080056e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	18d1      	adds	r1, r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567c:	f7ff ff5c 	bl	8005538 <prvInsertTimerInActiveList>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d069      	beq.n	800575a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05e      	beq.n	800575a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	441a      	add	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	2100      	movs	r1, #0
 80056ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ae:	f7ff fe05 	bl	80052bc <xTimerGenericCommand>
 80056b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d14f      	bne.n	800575a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	61bb      	str	r3, [r7, #24]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056e2:	e03a      	b.n	800575a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	617b      	str	r3, [r7, #20]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	18d1      	adds	r1, r2, r3
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f7ff ff06 	bl	8005538 <prvInsertTimerInActiveList>
					break;
 800572c:	e015      	b.n	800575a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800573c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573e:	f000 fbdf 	bl	8005f00 <vPortFree>
 8005742:	e00a      	b.n	800575a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005756:	e000      	b.n	800575a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <prvProcessReceivedCommands+0x1c0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1d39      	adds	r1, r7, #4
 8005760:	2200      	movs	r2, #0
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fbec 	bl	8003f40 <xQueueReceive>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	f47f af2a 	bne.w	80055c4 <prvProcessReceivedCommands+0x8>
	}
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3730      	adds	r7, #48	; 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000f00 	.word	0x20000f00

08005780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005786:	e048      	b.n	800581a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005788:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <prvSwitchTimerLists+0xc0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <prvSwitchTimerLists+0xc0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3304      	adds	r3, #4
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe f905 	bl	80039b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02e      	beq.n	800581a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90e      	bls.n	80057ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <prvSwitchTimerLists+0xc0>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fe f8aa 	bl	800393e <vListInsert>
 80057ea:	e016      	b.n	800581a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	2100      	movs	r1, #0
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff fd60 	bl	80052bc <xTimerGenericCommand>
 80057fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	603b      	str	r3, [r7, #0]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <prvSwitchTimerLists+0xc0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1b1      	bne.n	8005788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <prvSwitchTimerLists+0xc0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800582a:	4b06      	ldr	r3, [pc, #24]	; (8005844 <prvSwitchTimerLists+0xc4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a04      	ldr	r2, [pc, #16]	; (8005840 <prvSwitchTimerLists+0xc0>)
 8005830:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005832:	4a04      	ldr	r2, [pc, #16]	; (8005844 <prvSwitchTimerLists+0xc4>)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	6013      	str	r3, [r2, #0]
}
 8005838:	bf00      	nop
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20000ef8 	.word	0x20000ef8
 8005844:	20000efc 	.word	0x20000efc

08005848 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800584e:	f000 f969 	bl	8005b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d120      	bne.n	800589c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800585a:	4814      	ldr	r0, [pc, #80]	; (80058ac <prvCheckForValidListAndQueue+0x64>)
 800585c:	f7fe f81e 	bl	800389c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005860:	4813      	ldr	r0, [pc, #76]	; (80058b0 <prvCheckForValidListAndQueue+0x68>)
 8005862:	f7fe f81b 	bl	800389c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <prvCheckForValidListAndQueue+0x6c>)
 8005868:	4a10      	ldr	r2, [pc, #64]	; (80058ac <prvCheckForValidListAndQueue+0x64>)
 800586a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800586c:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <prvCheckForValidListAndQueue+0x70>)
 800586e:	4a10      	ldr	r2, [pc, #64]	; (80058b0 <prvCheckForValidListAndQueue+0x68>)
 8005870:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	4b11      	ldr	r3, [pc, #68]	; (80058bc <prvCheckForValidListAndQueue+0x74>)
 8005878:	4a11      	ldr	r2, [pc, #68]	; (80058c0 <prvCheckForValidListAndQueue+0x78>)
 800587a:	2110      	movs	r1, #16
 800587c:	200a      	movs	r0, #10
 800587e:	f7fe f929 	bl	8003ad4 <xQueueGenericCreateStatic>
 8005882:	4603      	mov	r3, r0
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005886:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <prvCheckForValidListAndQueue+0x60>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	490b      	ldr	r1, [pc, #44]	; (80058c4 <prvCheckForValidListAndQueue+0x7c>)
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fd42 	bl	8004320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800589c:	f000 f972 	bl	8005b84 <vPortExitCritical>
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000f00 	.word	0x20000f00
 80058ac:	20000ed0 	.word	0x20000ed0
 80058b0:	20000ee4 	.word	0x20000ee4
 80058b4:	20000ef8 	.word	0x20000ef8
 80058b8:	20000efc 	.word	0x20000efc
 80058bc:	20000fac 	.word	0x20000fac
 80058c0:	20000f0c 	.word	0x20000f0c
 80058c4:	080071fc 	.word	0x080071fc

080058c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3b04      	subs	r3, #4
 80058d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3b04      	subs	r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0201 	bic.w	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058f8:	4a0c      	ldr	r2, [pc, #48]	; (800592c <pxPortInitialiseStack+0x64>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b14      	subs	r3, #20
 8005902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3b04      	subs	r3, #4
 800590e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f06f 0202 	mvn.w	r2, #2
 8005916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3b20      	subs	r3, #32
 800591c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	08005931 	.word	0x08005931

08005930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <prvTaskExitError+0x54>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d00a      	beq.n	800595a <prvTaskExitError+0x2a>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <prvTaskExitError+0x28>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	60bb      	str	r3, [r7, #8]
}
 800596c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800596e:	bf00      	nop
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0fc      	beq.n	8005970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	2000000c 	.word	0x2000000c
	...

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059b8:	4808      	ldr	r0, [pc, #32]	; (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059da:	bf00      	nop
 80059dc:	e000ed08 	.word	0xe000ed08

080059e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <xPortStartScheduler+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <xPortStartScheduler+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <xPortStartScheduler+0x26>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <xPortStartScheduler+0x120>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <xPortStartScheduler+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10a      	bne.n	8005a26 <xPortStartScheduler+0x46>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <xPortStartScheduler+0x12c>)
 8005a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <xPortStartScheduler+0x130>)
 8005a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a54:	e009      	b.n	8005a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d0ef      	beq.n	8005a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1c3 0307 	rsb	r3, r3, #7
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00a      	beq.n	8005a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <xPortStartScheduler+0x138>)
 8005abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ace:	f000 f8dd 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <xPortStartScheduler+0x13c>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ad8:	f000 f8fc 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ae8:	f7ff ff66 	bl	80059b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aec:	f7ff f848 	bl	8004b80 <vTaskSwitchContext>
	prvTaskExitError();
 8005af0:	f7ff ff1e 	bl	8005930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed00 	.word	0xe000ed00
 8005b04:	410fc271 	.word	0x410fc271
 8005b08:	410fc270 	.word	0x410fc270
 8005b0c:	e000e400 	.word	0xe000e400
 8005b10:	20000ffc 	.word	0x20000ffc
 8005b14:	20001000 	.word	0x20001000
 8005b18:	e000ed20 	.word	0xe000ed20
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	e000ef34 	.word	0xe000ef34

08005b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortEnterCritical+0x5c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	603b      	str	r3, [r7, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vPortEnterCritical+0x4a>
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <vPortExitCritical+0x50>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <vPortExitCritical+0x24>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <vPortExitCritical+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <vPortExitCritical+0x42>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f383 8811 	msr	BASEPRI, r3
}
 8005bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c
	...

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7fe ffb6 	bl	8004b80 <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7fe fed3 	bl	8004a0c <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <xPortSysTickHandler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cee:	f3ef 8305 	mrs	r3, IPSR
 8005cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	d914      	bls.n	8005d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <vPortValidateInterruptPriority+0x70>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d04:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <vPortValidateInterruptPriority+0x74>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	7afa      	ldrb	r2, [r7, #11]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d20a      	bcs.n	8005d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <vPortValidateInterruptPriority+0x78>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <vPortValidateInterruptPriority+0x7c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d90a      	bls.n	8005d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	603b      	str	r3, [r7, #0]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <vPortValidateInterruptPriority+0x60>
	}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000e3f0 	.word	0xe000e3f0
 8005d5c:	20000ffc 	.word	0x20000ffc
 8005d60:	e000ed0c 	.word	0xe000ed0c
 8005d64:	20001000 	.word	0x20001000

08005d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d74:	f7fe fd8e 	bl	8004894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d78:	4b5b      	ldr	r3, [pc, #364]	; (8005ee8 <pvPortMalloc+0x180>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d80:	f000 f920 	bl	8005fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d84:	4b59      	ldr	r3, [pc, #356]	; (8005eec <pvPortMalloc+0x184>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8093 	bne.w	8005eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01d      	beq.n	8005dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d98:	2208      	movs	r2, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d014      	beq.n	8005dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f023 0307 	bic.w	r3, r3, #7
 8005db0:	3308      	adds	r3, #8
 8005db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	617b      	str	r3, [r7, #20]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d06e      	beq.n	8005eb8 <pvPortMalloc+0x150>
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <pvPortMalloc+0x188>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d869      	bhi.n	8005eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005de4:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <pvPortMalloc+0x18c>)
 8005de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005de8:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <pvPortMalloc+0x18c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dee:	e004      	b.n	8005dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d903      	bls.n	8005e0c <pvPortMalloc+0xa4>
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f1      	bne.n	8005df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e0c:	4b36      	ldr	r3, [pc, #216]	; (8005ee8 <pvPortMalloc+0x180>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d050      	beq.n	8005eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	4413      	add	r3, r2
 8005e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	2308      	movs	r3, #8
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d91f      	bls.n	8005e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <pvPortMalloc+0xf8>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	613b      	str	r3, [r7, #16]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	1ad2      	subs	r2, r2, r3
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e72:	69b8      	ldr	r0, [r7, #24]
 8005e74:	f000 f908 	bl	8006088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <pvPortMalloc+0x188>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <pvPortMalloc+0x188>)
 8005e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <pvPortMalloc+0x188>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <pvPortMalloc+0x190>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d203      	bcs.n	8005e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e92:	4b17      	ldr	r3, [pc, #92]	; (8005ef0 <pvPortMalloc+0x188>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <pvPortMalloc+0x190>)
 8005e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <pvPortMalloc+0x184>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <pvPortMalloc+0x194>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a11      	ldr	r2, [pc, #68]	; (8005efc <pvPortMalloc+0x194>)
 8005eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eb8:	f7fe fcfa 	bl	80048b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <pvPortMalloc+0x174>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <pvPortMalloc+0x172>
	return pvReturn;
 8005edc:	69fb      	ldr	r3, [r7, #28]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3728      	adds	r7, #40	; 0x28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001bc4 	.word	0x20001bc4
 8005eec:	20001bd8 	.word	0x20001bd8
 8005ef0:	20001bc8 	.word	0x20001bc8
 8005ef4:	20001bbc 	.word	0x20001bbc
 8005ef8:	20001bcc 	.word	0x20001bcc
 8005efc:	20001bd0 	.word	0x20001bd0

08005f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04d      	beq.n	8005fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f12:	2308      	movs	r3, #8
 8005f14:	425b      	negs	r3, r3
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <vPortFree+0xb8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <vPortFree+0x44>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <vPortFree+0x62>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60bb      	str	r3, [r7, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <vPortFree+0xb8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01e      	beq.n	8005fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11a      	bne.n	8005fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <vPortFree+0xb8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f88:	f7fe fc84 	bl	8004894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <vPortFree+0xbc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4413      	add	r3, r2
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <vPortFree+0xbc>)
 8005f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f9a:	6938      	ldr	r0, [r7, #16]
 8005f9c:	f000 f874 	bl	8006088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <vPortFree+0xc0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <vPortFree+0xc0>)
 8005fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005faa:	f7fe fc81 	bl	80048b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20001bd8 	.word	0x20001bd8
 8005fbc:	20001bc8 	.word	0x20001bc8
 8005fc0:	20001bd4 	.word	0x20001bd4

08005fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fd0:	4b27      	ldr	r3, [pc, #156]	; (8006070 <prvHeapInit+0xac>)
 8005fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00c      	beq.n	8005ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3307      	adds	r3, #7
 8005fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <prvHeapInit+0xac>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <prvHeapInit+0xb0>)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <prvHeapInit+0xb0>)
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006010:	2208      	movs	r2, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0307 	bic.w	r3, r3, #7
 800601e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <prvHeapInit+0xb4>)
 8006024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <prvHeapInit+0xb4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <prvHeapInit+0xb4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <prvHeapInit+0xb4>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4a0a      	ldr	r2, [pc, #40]	; (800607c <prvHeapInit+0xb8>)
 8006052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <prvHeapInit+0xbc>)
 800605a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <prvHeapInit+0xc0>)
 800605e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20001004 	.word	0x20001004
 8006074:	20001bbc 	.word	0x20001bbc
 8006078:	20001bc4 	.word	0x20001bc4
 800607c:	20001bcc 	.word	0x20001bcc
 8006080:	20001bc8 	.word	0x20001bc8
 8006084:	20001bd8 	.word	0x20001bd8

08006088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006090:	4b28      	ldr	r3, [pc, #160]	; (8006134 <prvInsertBlockIntoFreeList+0xac>)
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e002      	b.n	800609c <prvInsertBlockIntoFreeList+0x14>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d8f7      	bhi.n	8006096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	4413      	add	r3, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d108      	bne.n	80060ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	441a      	add	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d118      	bne.n	8006110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <prvInsertBlockIntoFreeList+0xb0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d00d      	beq.n	8006106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e008      	b.n	8006118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <prvInsertBlockIntoFreeList+0xb0>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e003      	b.n	8006118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d002      	beq.n	8006126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20001bbc 	.word	0x20001bbc
 8006138:	20001bc4 	.word	0x20001bc4

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000010 	.word	0x20000010

08006148 <std>:
 8006148:	2300      	movs	r3, #0
 800614a:	b510      	push	{r4, lr}
 800614c:	4604      	mov	r4, r0
 800614e:	e9c0 3300 	strd	r3, r3, [r0]
 8006152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006156:	6083      	str	r3, [r0, #8]
 8006158:	8181      	strh	r1, [r0, #12]
 800615a:	6643      	str	r3, [r0, #100]	; 0x64
 800615c:	81c2      	strh	r2, [r0, #14]
 800615e:	6183      	str	r3, [r0, #24]
 8006160:	4619      	mov	r1, r3
 8006162:	2208      	movs	r2, #8
 8006164:	305c      	adds	r0, #92	; 0x5c
 8006166:	f000 f91a 	bl	800639e <memset>
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <std+0x38>)
 800616c:	6263      	str	r3, [r4, #36]	; 0x24
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <std+0x3c>)
 8006170:	62a3      	str	r3, [r4, #40]	; 0x28
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <std+0x40>)
 8006174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <std+0x44>)
 8006178:	6224      	str	r4, [r4, #32]
 800617a:	6323      	str	r3, [r4, #48]	; 0x30
 800617c:	bd10      	pop	{r4, pc}
 800617e:	bf00      	nop
 8006180:	080065fd 	.word	0x080065fd
 8006184:	0800661f 	.word	0x0800661f
 8006188:	08006657 	.word	0x08006657
 800618c:	0800667b 	.word	0x0800667b

08006190 <_cleanup_r>:
 8006190:	4901      	ldr	r1, [pc, #4]	; (8006198 <_cleanup_r+0x8>)
 8006192:	f000 b8af 	b.w	80062f4 <_fwalk_reent>
 8006196:	bf00      	nop
 8006198:	080067d5 	.word	0x080067d5

0800619c <__sfmoreglue>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	2268      	movs	r2, #104	; 0x68
 80061a0:	1e4d      	subs	r5, r1, #1
 80061a2:	4355      	muls	r5, r2
 80061a4:	460e      	mov	r6, r1
 80061a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061aa:	f000 f921 	bl	80063f0 <_malloc_r>
 80061ae:	4604      	mov	r4, r0
 80061b0:	b140      	cbz	r0, 80061c4 <__sfmoreglue+0x28>
 80061b2:	2100      	movs	r1, #0
 80061b4:	e9c0 1600 	strd	r1, r6, [r0]
 80061b8:	300c      	adds	r0, #12
 80061ba:	60a0      	str	r0, [r4, #8]
 80061bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061c0:	f000 f8ed 	bl	800639e <memset>
 80061c4:	4620      	mov	r0, r4
 80061c6:	bd70      	pop	{r4, r5, r6, pc}

080061c8 <__sfp_lock_acquire>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__sfp_lock_acquire+0x8>)
 80061ca:	f000 b8d8 	b.w	800637e <__retarget_lock_acquire_recursive>
 80061ce:	bf00      	nop
 80061d0:	20001bdd 	.word	0x20001bdd

080061d4 <__sfp_lock_release>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__sfp_lock_release+0x8>)
 80061d6:	f000 b8d3 	b.w	8006380 <__retarget_lock_release_recursive>
 80061da:	bf00      	nop
 80061dc:	20001bdd 	.word	0x20001bdd

080061e0 <__sinit_lock_acquire>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__sinit_lock_acquire+0x8>)
 80061e2:	f000 b8cc 	b.w	800637e <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	20001bde 	.word	0x20001bde

080061ec <__sinit_lock_release>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__sinit_lock_release+0x8>)
 80061ee:	f000 b8c7 	b.w	8006380 <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	20001bde 	.word	0x20001bde

080061f8 <__sinit>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4604      	mov	r4, r0
 80061fc:	f7ff fff0 	bl	80061e0 <__sinit_lock_acquire>
 8006200:	69a3      	ldr	r3, [r4, #24]
 8006202:	b11b      	cbz	r3, 800620c <__sinit+0x14>
 8006204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006208:	f7ff bff0 	b.w	80061ec <__sinit_lock_release>
 800620c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006210:	6523      	str	r3, [r4, #80]	; 0x50
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <__sinit+0x68>)
 8006214:	4a13      	ldr	r2, [pc, #76]	; (8006264 <__sinit+0x6c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	62a2      	str	r2, [r4, #40]	; 0x28
 800621a:	42a3      	cmp	r3, r4
 800621c:	bf04      	itt	eq
 800621e:	2301      	moveq	r3, #1
 8006220:	61a3      	streq	r3, [r4, #24]
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f820 	bl	8006268 <__sfp>
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	4620      	mov	r0, r4
 800622c:	f000 f81c 	bl	8006268 <__sfp>
 8006230:	60a0      	str	r0, [r4, #8]
 8006232:	4620      	mov	r0, r4
 8006234:	f000 f818 	bl	8006268 <__sfp>
 8006238:	2200      	movs	r2, #0
 800623a:	60e0      	str	r0, [r4, #12]
 800623c:	2104      	movs	r1, #4
 800623e:	6860      	ldr	r0, [r4, #4]
 8006240:	f7ff ff82 	bl	8006148 <std>
 8006244:	68a0      	ldr	r0, [r4, #8]
 8006246:	2201      	movs	r2, #1
 8006248:	2109      	movs	r1, #9
 800624a:	f7ff ff7d 	bl	8006148 <std>
 800624e:	68e0      	ldr	r0, [r4, #12]
 8006250:	2202      	movs	r2, #2
 8006252:	2112      	movs	r1, #18
 8006254:	f7ff ff78 	bl	8006148 <std>
 8006258:	2301      	movs	r3, #1
 800625a:	61a3      	str	r3, [r4, #24]
 800625c:	e7d2      	b.n	8006204 <__sinit+0xc>
 800625e:	bf00      	nop
 8006260:	080072d0 	.word	0x080072d0
 8006264:	08006191 	.word	0x08006191

08006268 <__sfp>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	4607      	mov	r7, r0
 800626c:	f7ff ffac 	bl	80061c8 <__sfp_lock_acquire>
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <__sfp+0x84>)
 8006272:	681e      	ldr	r6, [r3, #0]
 8006274:	69b3      	ldr	r3, [r6, #24]
 8006276:	b913      	cbnz	r3, 800627e <__sfp+0x16>
 8006278:	4630      	mov	r0, r6
 800627a:	f7ff ffbd 	bl	80061f8 <__sinit>
 800627e:	3648      	adds	r6, #72	; 0x48
 8006280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006284:	3b01      	subs	r3, #1
 8006286:	d503      	bpl.n	8006290 <__sfp+0x28>
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	b30b      	cbz	r3, 80062d0 <__sfp+0x68>
 800628c:	6836      	ldr	r6, [r6, #0]
 800628e:	e7f7      	b.n	8006280 <__sfp+0x18>
 8006290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006294:	b9d5      	cbnz	r5, 80062cc <__sfp+0x64>
 8006296:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <__sfp+0x88>)
 8006298:	60e3      	str	r3, [r4, #12]
 800629a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800629e:	6665      	str	r5, [r4, #100]	; 0x64
 80062a0:	f000 f86c 	bl	800637c <__retarget_lock_init_recursive>
 80062a4:	f7ff ff96 	bl	80061d4 <__sfp_lock_release>
 80062a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062b0:	6025      	str	r5, [r4, #0]
 80062b2:	61a5      	str	r5, [r4, #24]
 80062b4:	2208      	movs	r2, #8
 80062b6:	4629      	mov	r1, r5
 80062b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062bc:	f000 f86f 	bl	800639e <memset>
 80062c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062c8:	4620      	mov	r0, r4
 80062ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062cc:	3468      	adds	r4, #104	; 0x68
 80062ce:	e7d9      	b.n	8006284 <__sfp+0x1c>
 80062d0:	2104      	movs	r1, #4
 80062d2:	4638      	mov	r0, r7
 80062d4:	f7ff ff62 	bl	800619c <__sfmoreglue>
 80062d8:	4604      	mov	r4, r0
 80062da:	6030      	str	r0, [r6, #0]
 80062dc:	2800      	cmp	r0, #0
 80062de:	d1d5      	bne.n	800628c <__sfp+0x24>
 80062e0:	f7ff ff78 	bl	80061d4 <__sfp_lock_release>
 80062e4:	230c      	movs	r3, #12
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	e7ee      	b.n	80062c8 <__sfp+0x60>
 80062ea:	bf00      	nop
 80062ec:	080072d0 	.word	0x080072d0
 80062f0:	ffff0001 	.word	0xffff0001

080062f4 <_fwalk_reent>:
 80062f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f8:	4606      	mov	r6, r0
 80062fa:	4688      	mov	r8, r1
 80062fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006300:	2700      	movs	r7, #0
 8006302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006306:	f1b9 0901 	subs.w	r9, r9, #1
 800630a:	d505      	bpl.n	8006318 <_fwalk_reent+0x24>
 800630c:	6824      	ldr	r4, [r4, #0]
 800630e:	2c00      	cmp	r4, #0
 8006310:	d1f7      	bne.n	8006302 <_fwalk_reent+0xe>
 8006312:	4638      	mov	r0, r7
 8006314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006318:	89ab      	ldrh	r3, [r5, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d907      	bls.n	800632e <_fwalk_reent+0x3a>
 800631e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006322:	3301      	adds	r3, #1
 8006324:	d003      	beq.n	800632e <_fwalk_reent+0x3a>
 8006326:	4629      	mov	r1, r5
 8006328:	4630      	mov	r0, r6
 800632a:	47c0      	blx	r8
 800632c:	4307      	orrs	r7, r0
 800632e:	3568      	adds	r5, #104	; 0x68
 8006330:	e7e9      	b.n	8006306 <_fwalk_reent+0x12>
	...

08006334 <__libc_init_array>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	4d0d      	ldr	r5, [pc, #52]	; (800636c <__libc_init_array+0x38>)
 8006338:	4c0d      	ldr	r4, [pc, #52]	; (8006370 <__libc_init_array+0x3c>)
 800633a:	1b64      	subs	r4, r4, r5
 800633c:	10a4      	asrs	r4, r4, #2
 800633e:	2600      	movs	r6, #0
 8006340:	42a6      	cmp	r6, r4
 8006342:	d109      	bne.n	8006358 <__libc_init_array+0x24>
 8006344:	4d0b      	ldr	r5, [pc, #44]	; (8006374 <__libc_init_array+0x40>)
 8006346:	4c0c      	ldr	r4, [pc, #48]	; (8006378 <__libc_init_array+0x44>)
 8006348:	f000 ff32 	bl	80071b0 <_init>
 800634c:	1b64      	subs	r4, r4, r5
 800634e:	10a4      	asrs	r4, r4, #2
 8006350:	2600      	movs	r6, #0
 8006352:	42a6      	cmp	r6, r4
 8006354:	d105      	bne.n	8006362 <__libc_init_array+0x2e>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	f855 3b04 	ldr.w	r3, [r5], #4
 800635c:	4798      	blx	r3
 800635e:	3601      	adds	r6, #1
 8006360:	e7ee      	b.n	8006340 <__libc_init_array+0xc>
 8006362:	f855 3b04 	ldr.w	r3, [r5], #4
 8006366:	4798      	blx	r3
 8006368:	3601      	adds	r6, #1
 800636a:	e7f2      	b.n	8006352 <__libc_init_array+0x1e>
 800636c:	08007310 	.word	0x08007310
 8006370:	08007310 	.word	0x08007310
 8006374:	08007310 	.word	0x08007310
 8006378:	08007314 	.word	0x08007314

0800637c <__retarget_lock_init_recursive>:
 800637c:	4770      	bx	lr

0800637e <__retarget_lock_acquire_recursive>:
 800637e:	4770      	bx	lr

08006380 <__retarget_lock_release_recursive>:
 8006380:	4770      	bx	lr

08006382 <memcpy>:
 8006382:	440a      	add	r2, r1
 8006384:	4291      	cmp	r1, r2
 8006386:	f100 33ff 	add.w	r3, r0, #4294967295
 800638a:	d100      	bne.n	800638e <memcpy+0xc>
 800638c:	4770      	bx	lr
 800638e:	b510      	push	{r4, lr}
 8006390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006398:	4291      	cmp	r1, r2
 800639a:	d1f9      	bne.n	8006390 <memcpy+0xe>
 800639c:	bd10      	pop	{r4, pc}

0800639e <memset>:
 800639e:	4402      	add	r2, r0
 80063a0:	4603      	mov	r3, r0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d100      	bne.n	80063a8 <memset+0xa>
 80063a6:	4770      	bx	lr
 80063a8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ac:	e7f9      	b.n	80063a2 <memset+0x4>
	...

080063b0 <sbrk_aligned>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4e0e      	ldr	r6, [pc, #56]	; (80063ec <sbrk_aligned+0x3c>)
 80063b4:	460c      	mov	r4, r1
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	4605      	mov	r5, r0
 80063ba:	b911      	cbnz	r1, 80063c2 <sbrk_aligned+0x12>
 80063bc:	f000 f90e 	bl	80065dc <_sbrk_r>
 80063c0:	6030      	str	r0, [r6, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 f909 	bl	80065dc <_sbrk_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d00a      	beq.n	80063e4 <sbrk_aligned+0x34>
 80063ce:	1cc4      	adds	r4, r0, #3
 80063d0:	f024 0403 	bic.w	r4, r4, #3
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d007      	beq.n	80063e8 <sbrk_aligned+0x38>
 80063d8:	1a21      	subs	r1, r4, r0
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f8fe 	bl	80065dc <_sbrk_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	d101      	bne.n	80063e8 <sbrk_aligned+0x38>
 80063e4:	f04f 34ff 	mov.w	r4, #4294967295
 80063e8:	4620      	mov	r0, r4
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	20001be4 	.word	0x20001be4

080063f0 <_malloc_r>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	1ccd      	adds	r5, r1, #3
 80063f6:	f025 0503 	bic.w	r5, r5, #3
 80063fa:	3508      	adds	r5, #8
 80063fc:	2d0c      	cmp	r5, #12
 80063fe:	bf38      	it	cc
 8006400:	250c      	movcc	r5, #12
 8006402:	2d00      	cmp	r5, #0
 8006404:	4607      	mov	r7, r0
 8006406:	db01      	blt.n	800640c <_malloc_r+0x1c>
 8006408:	42a9      	cmp	r1, r5
 800640a:	d905      	bls.n	8006418 <_malloc_r+0x28>
 800640c:	230c      	movs	r3, #12
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	2600      	movs	r6, #0
 8006412:	4630      	mov	r0, r6
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006418:	4e2e      	ldr	r6, [pc, #184]	; (80064d4 <_malloc_r+0xe4>)
 800641a:	f000 fa29 	bl	8006870 <__malloc_lock>
 800641e:	6833      	ldr	r3, [r6, #0]
 8006420:	461c      	mov	r4, r3
 8006422:	bb34      	cbnz	r4, 8006472 <_malloc_r+0x82>
 8006424:	4629      	mov	r1, r5
 8006426:	4638      	mov	r0, r7
 8006428:	f7ff ffc2 	bl	80063b0 <sbrk_aligned>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	4604      	mov	r4, r0
 8006430:	d14d      	bne.n	80064ce <_malloc_r+0xde>
 8006432:	6834      	ldr	r4, [r6, #0]
 8006434:	4626      	mov	r6, r4
 8006436:	2e00      	cmp	r6, #0
 8006438:	d140      	bne.n	80064bc <_malloc_r+0xcc>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	4631      	mov	r1, r6
 800643e:	4638      	mov	r0, r7
 8006440:	eb04 0803 	add.w	r8, r4, r3
 8006444:	f000 f8ca 	bl	80065dc <_sbrk_r>
 8006448:	4580      	cmp	r8, r0
 800644a:	d13a      	bne.n	80064c2 <_malloc_r+0xd2>
 800644c:	6821      	ldr	r1, [r4, #0]
 800644e:	3503      	adds	r5, #3
 8006450:	1a6d      	subs	r5, r5, r1
 8006452:	f025 0503 	bic.w	r5, r5, #3
 8006456:	3508      	adds	r5, #8
 8006458:	2d0c      	cmp	r5, #12
 800645a:	bf38      	it	cc
 800645c:	250c      	movcc	r5, #12
 800645e:	4629      	mov	r1, r5
 8006460:	4638      	mov	r0, r7
 8006462:	f7ff ffa5 	bl	80063b0 <sbrk_aligned>
 8006466:	3001      	adds	r0, #1
 8006468:	d02b      	beq.n	80064c2 <_malloc_r+0xd2>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	442b      	add	r3, r5
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	e00e      	b.n	8006490 <_malloc_r+0xa0>
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	1b52      	subs	r2, r2, r5
 8006476:	d41e      	bmi.n	80064b6 <_malloc_r+0xc6>
 8006478:	2a0b      	cmp	r2, #11
 800647a:	d916      	bls.n	80064aa <_malloc_r+0xba>
 800647c:	1961      	adds	r1, r4, r5
 800647e:	42a3      	cmp	r3, r4
 8006480:	6025      	str	r5, [r4, #0]
 8006482:	bf18      	it	ne
 8006484:	6059      	strne	r1, [r3, #4]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	bf08      	it	eq
 800648a:	6031      	streq	r1, [r6, #0]
 800648c:	5162      	str	r2, [r4, r5]
 800648e:	604b      	str	r3, [r1, #4]
 8006490:	4638      	mov	r0, r7
 8006492:	f104 060b 	add.w	r6, r4, #11
 8006496:	f000 f9f1 	bl	800687c <__malloc_unlock>
 800649a:	f026 0607 	bic.w	r6, r6, #7
 800649e:	1d23      	adds	r3, r4, #4
 80064a0:	1af2      	subs	r2, r6, r3
 80064a2:	d0b6      	beq.n	8006412 <_malloc_r+0x22>
 80064a4:	1b9b      	subs	r3, r3, r6
 80064a6:	50a3      	str	r3, [r4, r2]
 80064a8:	e7b3      	b.n	8006412 <_malloc_r+0x22>
 80064aa:	6862      	ldr	r2, [r4, #4]
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	bf0c      	ite	eq
 80064b0:	6032      	streq	r2, [r6, #0]
 80064b2:	605a      	strne	r2, [r3, #4]
 80064b4:	e7ec      	b.n	8006490 <_malloc_r+0xa0>
 80064b6:	4623      	mov	r3, r4
 80064b8:	6864      	ldr	r4, [r4, #4]
 80064ba:	e7b2      	b.n	8006422 <_malloc_r+0x32>
 80064bc:	4634      	mov	r4, r6
 80064be:	6876      	ldr	r6, [r6, #4]
 80064c0:	e7b9      	b.n	8006436 <_malloc_r+0x46>
 80064c2:	230c      	movs	r3, #12
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	4638      	mov	r0, r7
 80064c8:	f000 f9d8 	bl	800687c <__malloc_unlock>
 80064cc:	e7a1      	b.n	8006412 <_malloc_r+0x22>
 80064ce:	6025      	str	r5, [r4, #0]
 80064d0:	e7de      	b.n	8006490 <_malloc_r+0xa0>
 80064d2:	bf00      	nop
 80064d4:	20001be0 	.word	0x20001be0

080064d8 <iprintf>:
 80064d8:	b40f      	push	{r0, r1, r2, r3}
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <iprintf+0x2c>)
 80064dc:	b513      	push	{r0, r1, r4, lr}
 80064de:	681c      	ldr	r4, [r3, #0]
 80064e0:	b124      	cbz	r4, 80064ec <iprintf+0x14>
 80064e2:	69a3      	ldr	r3, [r4, #24]
 80064e4:	b913      	cbnz	r3, 80064ec <iprintf+0x14>
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fe86 	bl	80061f8 <__sinit>
 80064ec:	ab05      	add	r3, sp, #20
 80064ee:	9a04      	ldr	r2, [sp, #16]
 80064f0:	68a1      	ldr	r1, [r4, #8]
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	4620      	mov	r0, r4
 80064f6:	f000 fa3d 	bl	8006974 <_vfiprintf_r>
 80064fa:	b002      	add	sp, #8
 80064fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006500:	b004      	add	sp, #16
 8006502:	4770      	bx	lr
 8006504:	20000010 	.word	0x20000010

08006508 <cleanup_glue>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	460c      	mov	r4, r1
 800650c:	6809      	ldr	r1, [r1, #0]
 800650e:	4605      	mov	r5, r0
 8006510:	b109      	cbz	r1, 8006516 <cleanup_glue+0xe>
 8006512:	f7ff fff9 	bl	8006508 <cleanup_glue>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800651e:	f000 b9b3 	b.w	8006888 <_free_r>
	...

08006524 <_reclaim_reent>:
 8006524:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <_reclaim_reent+0xb4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4283      	cmp	r3, r0
 800652a:	b570      	push	{r4, r5, r6, lr}
 800652c:	4604      	mov	r4, r0
 800652e:	d051      	beq.n	80065d4 <_reclaim_reent+0xb0>
 8006530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006532:	b143      	cbz	r3, 8006546 <_reclaim_reent+0x22>
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d14a      	bne.n	80065d0 <_reclaim_reent+0xac>
 800653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	b111      	cbz	r1, 8006546 <_reclaim_reent+0x22>
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f9a1 	bl	8006888 <_free_r>
 8006546:	6961      	ldr	r1, [r4, #20]
 8006548:	b111      	cbz	r1, 8006550 <_reclaim_reent+0x2c>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 f99c 	bl	8006888 <_free_r>
 8006550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006552:	b111      	cbz	r1, 800655a <_reclaim_reent+0x36>
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f997 	bl	8006888 <_free_r>
 800655a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800655c:	b111      	cbz	r1, 8006564 <_reclaim_reent+0x40>
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f992 	bl	8006888 <_free_r>
 8006564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006566:	b111      	cbz	r1, 800656e <_reclaim_reent+0x4a>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f98d 	bl	8006888 <_free_r>
 800656e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006570:	b111      	cbz	r1, 8006578 <_reclaim_reent+0x54>
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f988 	bl	8006888 <_free_r>
 8006578:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800657a:	b111      	cbz	r1, 8006582 <_reclaim_reent+0x5e>
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f983 	bl	8006888 <_free_r>
 8006582:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006584:	b111      	cbz	r1, 800658c <_reclaim_reent+0x68>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f97e 	bl	8006888 <_free_r>
 800658c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658e:	b111      	cbz	r1, 8006596 <_reclaim_reent+0x72>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f979 	bl	8006888 <_free_r>
 8006596:	69a3      	ldr	r3, [r4, #24]
 8006598:	b1e3      	cbz	r3, 80065d4 <_reclaim_reent+0xb0>
 800659a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800659c:	4620      	mov	r0, r4
 800659e:	4798      	blx	r3
 80065a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065a2:	b1b9      	cbz	r1, 80065d4 <_reclaim_reent+0xb0>
 80065a4:	4620      	mov	r0, r4
 80065a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065aa:	f7ff bfad 	b.w	8006508 <cleanup_glue>
 80065ae:	5949      	ldr	r1, [r1, r5]
 80065b0:	b941      	cbnz	r1, 80065c4 <_reclaim_reent+0xa0>
 80065b2:	3504      	adds	r5, #4
 80065b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b6:	2d80      	cmp	r5, #128	; 0x80
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	d1f8      	bne.n	80065ae <_reclaim_reent+0x8a>
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 f963 	bl	8006888 <_free_r>
 80065c2:	e7ba      	b.n	800653a <_reclaim_reent+0x16>
 80065c4:	680e      	ldr	r6, [r1, #0]
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 f95e 	bl	8006888 <_free_r>
 80065cc:	4631      	mov	r1, r6
 80065ce:	e7ef      	b.n	80065b0 <_reclaim_reent+0x8c>
 80065d0:	2500      	movs	r5, #0
 80065d2:	e7ef      	b.n	80065b4 <_reclaim_reent+0x90>
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
 80065d6:	bf00      	nop
 80065d8:	20000010 	.word	0x20000010

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4d06      	ldr	r5, [pc, #24]	; (80065f8 <_sbrk_r+0x1c>)
 80065e0:	2300      	movs	r3, #0
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fa fb6c 	bl	8000cc4 <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20001be8 	.word	0x20001be8

080065fc <__sread>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	460c      	mov	r4, r1
 8006600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006604:	f000 fc7a 	bl	8006efc <_read_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	bfab      	itete	ge
 800660c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800660e:	89a3      	ldrhlt	r3, [r4, #12]
 8006610:	181b      	addge	r3, r3, r0
 8006612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006616:	bfac      	ite	ge
 8006618:	6563      	strge	r3, [r4, #84]	; 0x54
 800661a:	81a3      	strhlt	r3, [r4, #12]
 800661c:	bd10      	pop	{r4, pc}

0800661e <__swrite>:
 800661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	461f      	mov	r7, r3
 8006624:	898b      	ldrh	r3, [r1, #12]
 8006626:	05db      	lsls	r3, r3, #23
 8006628:	4605      	mov	r5, r0
 800662a:	460c      	mov	r4, r1
 800662c:	4616      	mov	r6, r2
 800662e:	d505      	bpl.n	800663c <__swrite+0x1e>
 8006630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006634:	2302      	movs	r3, #2
 8006636:	2200      	movs	r2, #0
 8006638:	f000 f908 	bl	800684c <_lseek_r>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	4628      	mov	r0, r5
 800664e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	f000 b817 	b.w	8006684 <_write_r>

08006656 <__sseek>:
 8006656:	b510      	push	{r4, lr}
 8006658:	460c      	mov	r4, r1
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 f8f5 	bl	800684c <_lseek_r>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	bf15      	itete	ne
 8006668:	6560      	strne	r0, [r4, #84]	; 0x54
 800666a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800666e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006672:	81a3      	strheq	r3, [r4, #12]
 8006674:	bf18      	it	ne
 8006676:	81a3      	strhne	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__sclose>:
 800667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667e:	f000 b813 	b.w	80066a8 <_close_r>
	...

08006684 <_write_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_write_r+0x20>)
 8006688:	4604      	mov	r4, r0
 800668a:	4608      	mov	r0, r1
 800668c:	4611      	mov	r1, r2
 800668e:	2200      	movs	r2, #0
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fa fac5 	bl	8000c22 <_write>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_write_r+0x1e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_write_r+0x1e>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20001be8 	.word	0x20001be8

080066a8 <_close_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_close_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fa fad1 	bl	8000c5a <_close>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_close_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_close_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20001be8 	.word	0x20001be8

080066c8 <__sflush_r>:
 80066c8:	898a      	ldrh	r2, [r1, #12]
 80066ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ce:	4605      	mov	r5, r0
 80066d0:	0710      	lsls	r0, r2, #28
 80066d2:	460c      	mov	r4, r1
 80066d4:	d458      	bmi.n	8006788 <__sflush_r+0xc0>
 80066d6:	684b      	ldr	r3, [r1, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc05      	bgt.n	80066e8 <__sflush_r+0x20>
 80066dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dc02      	bgt.n	80066e8 <__sflush_r+0x20>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d0f9      	beq.n	80066e2 <__sflush_r+0x1a>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066f4:	682f      	ldr	r7, [r5, #0]
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	d032      	beq.n	8006760 <__sflush_r+0x98>
 80066fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	075a      	lsls	r2, r3, #29
 8006700:	d505      	bpl.n	800670e <__sflush_r+0x46>
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	1ac0      	subs	r0, r0, r3
 8006706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006708:	b10b      	cbz	r3, 800670e <__sflush_r+0x46>
 800670a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800670c:	1ac0      	subs	r0, r0, r3
 800670e:	2300      	movs	r3, #0
 8006710:	4602      	mov	r2, r0
 8006712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006714:	6a21      	ldr	r1, [r4, #32]
 8006716:	4628      	mov	r0, r5
 8006718:	47b0      	blx	r6
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	d106      	bne.n	800672e <__sflush_r+0x66>
 8006720:	6829      	ldr	r1, [r5, #0]
 8006722:	291d      	cmp	r1, #29
 8006724:	d82c      	bhi.n	8006780 <__sflush_r+0xb8>
 8006726:	4a2a      	ldr	r2, [pc, #168]	; (80067d0 <__sflush_r+0x108>)
 8006728:	40ca      	lsrs	r2, r1
 800672a:	07d6      	lsls	r6, r2, #31
 800672c:	d528      	bpl.n	8006780 <__sflush_r+0xb8>
 800672e:	2200      	movs	r2, #0
 8006730:	6062      	str	r2, [r4, #4]
 8006732:	04d9      	lsls	r1, r3, #19
 8006734:	6922      	ldr	r2, [r4, #16]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	d504      	bpl.n	8006744 <__sflush_r+0x7c>
 800673a:	1c42      	adds	r2, r0, #1
 800673c:	d101      	bne.n	8006742 <__sflush_r+0x7a>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b903      	cbnz	r3, 8006744 <__sflush_r+0x7c>
 8006742:	6560      	str	r0, [r4, #84]	; 0x54
 8006744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006746:	602f      	str	r7, [r5, #0]
 8006748:	2900      	cmp	r1, #0
 800674a:	d0ca      	beq.n	80066e2 <__sflush_r+0x1a>
 800674c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006750:	4299      	cmp	r1, r3
 8006752:	d002      	beq.n	800675a <__sflush_r+0x92>
 8006754:	4628      	mov	r0, r5
 8006756:	f000 f897 	bl	8006888 <_free_r>
 800675a:	2000      	movs	r0, #0
 800675c:	6360      	str	r0, [r4, #52]	; 0x34
 800675e:	e7c1      	b.n	80066e4 <__sflush_r+0x1c>
 8006760:	6a21      	ldr	r1, [r4, #32]
 8006762:	2301      	movs	r3, #1
 8006764:	4628      	mov	r0, r5
 8006766:	47b0      	blx	r6
 8006768:	1c41      	adds	r1, r0, #1
 800676a:	d1c7      	bne.n	80066fc <__sflush_r+0x34>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0c4      	beq.n	80066fc <__sflush_r+0x34>
 8006772:	2b1d      	cmp	r3, #29
 8006774:	d001      	beq.n	800677a <__sflush_r+0xb2>
 8006776:	2b16      	cmp	r3, #22
 8006778:	d101      	bne.n	800677e <__sflush_r+0xb6>
 800677a:	602f      	str	r7, [r5, #0]
 800677c:	e7b1      	b.n	80066e2 <__sflush_r+0x1a>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	e7ad      	b.n	80066e4 <__sflush_r+0x1c>
 8006788:	690f      	ldr	r7, [r1, #16]
 800678a:	2f00      	cmp	r7, #0
 800678c:	d0a9      	beq.n	80066e2 <__sflush_r+0x1a>
 800678e:	0793      	lsls	r3, r2, #30
 8006790:	680e      	ldr	r6, [r1, #0]
 8006792:	bf08      	it	eq
 8006794:	694b      	ldreq	r3, [r1, #20]
 8006796:	600f      	str	r7, [r1, #0]
 8006798:	bf18      	it	ne
 800679a:	2300      	movne	r3, #0
 800679c:	eba6 0807 	sub.w	r8, r6, r7
 80067a0:	608b      	str	r3, [r1, #8]
 80067a2:	f1b8 0f00 	cmp.w	r8, #0
 80067a6:	dd9c      	ble.n	80066e2 <__sflush_r+0x1a>
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067ac:	4643      	mov	r3, r8
 80067ae:	463a      	mov	r2, r7
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b0      	blx	r6
 80067b4:	2800      	cmp	r0, #0
 80067b6:	dc06      	bgt.n	80067c6 <__sflush_r+0xfe>
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e78e      	b.n	80066e4 <__sflush_r+0x1c>
 80067c6:	4407      	add	r7, r0
 80067c8:	eba8 0800 	sub.w	r8, r8, r0
 80067cc:	e7e9      	b.n	80067a2 <__sflush_r+0xda>
 80067ce:	bf00      	nop
 80067d0:	20400001 	.word	0x20400001

080067d4 <_fflush_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	4605      	mov	r5, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b913      	cbnz	r3, 80067e4 <_fflush_r+0x10>
 80067de:	2500      	movs	r5, #0
 80067e0:	4628      	mov	r0, r5
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	b118      	cbz	r0, 80067ee <_fflush_r+0x1a>
 80067e6:	6983      	ldr	r3, [r0, #24]
 80067e8:	b90b      	cbnz	r3, 80067ee <_fflush_r+0x1a>
 80067ea:	f7ff fd05 	bl	80061f8 <__sinit>
 80067ee:	4b14      	ldr	r3, [pc, #80]	; (8006840 <_fflush_r+0x6c>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d11b      	bne.n	800682c <_fflush_r+0x58>
 80067f4:	686c      	ldr	r4, [r5, #4]
 80067f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0ef      	beq.n	80067de <_fflush_r+0xa>
 80067fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006800:	07d0      	lsls	r0, r2, #31
 8006802:	d404      	bmi.n	800680e <_fflush_r+0x3a>
 8006804:	0599      	lsls	r1, r3, #22
 8006806:	d402      	bmi.n	800680e <_fflush_r+0x3a>
 8006808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800680a:	f7ff fdb8 	bl	800637e <__retarget_lock_acquire_recursive>
 800680e:	4628      	mov	r0, r5
 8006810:	4621      	mov	r1, r4
 8006812:	f7ff ff59 	bl	80066c8 <__sflush_r>
 8006816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006818:	07da      	lsls	r2, r3, #31
 800681a:	4605      	mov	r5, r0
 800681c:	d4e0      	bmi.n	80067e0 <_fflush_r+0xc>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	059b      	lsls	r3, r3, #22
 8006822:	d4dd      	bmi.n	80067e0 <_fflush_r+0xc>
 8006824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006826:	f7ff fdab 	bl	8006380 <__retarget_lock_release_recursive>
 800682a:	e7d9      	b.n	80067e0 <_fflush_r+0xc>
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <_fflush_r+0x70>)
 800682e:	429c      	cmp	r4, r3
 8006830:	d101      	bne.n	8006836 <_fflush_r+0x62>
 8006832:	68ac      	ldr	r4, [r5, #8]
 8006834:	e7df      	b.n	80067f6 <_fflush_r+0x22>
 8006836:	4b04      	ldr	r3, [pc, #16]	; (8006848 <_fflush_r+0x74>)
 8006838:	429c      	cmp	r4, r3
 800683a:	bf08      	it	eq
 800683c:	68ec      	ldreq	r4, [r5, #12]
 800683e:	e7da      	b.n	80067f6 <_fflush_r+0x22>
 8006840:	08007290 	.word	0x08007290
 8006844:	080072b0 	.word	0x080072b0
 8006848:	08007270 	.word	0x08007270

0800684c <_lseek_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	; (800686c <_lseek_r+0x20>)
 8006850:	4604      	mov	r4, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fa fa24 	bl	8000ca8 <_lseek>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_lseek_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_lseek_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20001be8 	.word	0x20001be8

08006870 <__malloc_lock>:
 8006870:	4801      	ldr	r0, [pc, #4]	; (8006878 <__malloc_lock+0x8>)
 8006872:	f7ff bd84 	b.w	800637e <__retarget_lock_acquire_recursive>
 8006876:	bf00      	nop
 8006878:	20001bdc 	.word	0x20001bdc

0800687c <__malloc_unlock>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__malloc_unlock+0x8>)
 800687e:	f7ff bd7f 	b.w	8006380 <__retarget_lock_release_recursive>
 8006882:	bf00      	nop
 8006884:	20001bdc 	.word	0x20001bdc

08006888 <_free_r>:
 8006888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688a:	2900      	cmp	r1, #0
 800688c:	d044      	beq.n	8006918 <_free_r+0x90>
 800688e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006892:	9001      	str	r0, [sp, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f1a1 0404 	sub.w	r4, r1, #4
 800689a:	bfb8      	it	lt
 800689c:	18e4      	addlt	r4, r4, r3
 800689e:	f7ff ffe7 	bl	8006870 <__malloc_lock>
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <_free_r+0x94>)
 80068a4:	9801      	ldr	r0, [sp, #4]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	b933      	cbnz	r3, 80068b8 <_free_r+0x30>
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6014      	str	r4, [r2, #0]
 80068ae:	b003      	add	sp, #12
 80068b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b4:	f7ff bfe2 	b.w	800687c <__malloc_unlock>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d908      	bls.n	80068ce <_free_r+0x46>
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1961      	adds	r1, r4, r5
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf01      	itttt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	1949      	addeq	r1, r1, r5
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	e7ed      	b.n	80068aa <_free_r+0x22>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x50>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x46>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1855      	adds	r5, r2, r1
 80068dc:	42a5      	cmp	r5, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x70>
 80068e0:	6824      	ldr	r4, [r4, #0]
 80068e2:	4421      	add	r1, r4
 80068e4:	1854      	adds	r4, r2, r1
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1e0      	bne.n	80068ae <_free_r+0x26>
 80068ec:	681c      	ldr	r4, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	4421      	add	r1, r4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	e7da      	b.n	80068ae <_free_r+0x26>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x78>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6003      	str	r3, [r0, #0]
 80068fe:	e7d6      	b.n	80068ae <_free_r+0x26>
 8006900:	6825      	ldr	r5, [r4, #0]
 8006902:	1961      	adds	r1, r4, r5
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1949      	addeq	r1, r1, r5
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7ca      	b.n	80068ae <_free_r+0x26>
 8006918:	b003      	add	sp, #12
 800691a:	bd30      	pop	{r4, r5, pc}
 800691c:	20001be0 	.word	0x20001be0

08006920 <__sfputc_r>:
 8006920:	6893      	ldr	r3, [r2, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	b410      	push	{r4}
 8006928:	6093      	str	r3, [r2, #8]
 800692a:	da08      	bge.n	800693e <__sfputc_r+0x1e>
 800692c:	6994      	ldr	r4, [r2, #24]
 800692e:	42a3      	cmp	r3, r4
 8006930:	db01      	blt.n	8006936 <__sfputc_r+0x16>
 8006932:	290a      	cmp	r1, #10
 8006934:	d103      	bne.n	800693e <__sfputc_r+0x1e>
 8006936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693a:	f000 baf1 	b.w	8006f20 <__swbuf_r>
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	1c58      	adds	r0, r3, #1
 8006942:	6010      	str	r0, [r2, #0]
 8006944:	7019      	strb	r1, [r3, #0]
 8006946:	4608      	mov	r0, r1
 8006948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800694c:	4770      	bx	lr

0800694e <__sfputs_r>:
 800694e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006950:	4606      	mov	r6, r0
 8006952:	460f      	mov	r7, r1
 8006954:	4614      	mov	r4, r2
 8006956:	18d5      	adds	r5, r2, r3
 8006958:	42ac      	cmp	r4, r5
 800695a:	d101      	bne.n	8006960 <__sfputs_r+0x12>
 800695c:	2000      	movs	r0, #0
 800695e:	e007      	b.n	8006970 <__sfputs_r+0x22>
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	463a      	mov	r2, r7
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ffda 	bl	8006920 <__sfputc_r>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d1f3      	bne.n	8006958 <__sfputs_r+0xa>
 8006970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006974 <_vfiprintf_r>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	460d      	mov	r5, r1
 800697a:	b09d      	sub	sp, #116	; 0x74
 800697c:	4614      	mov	r4, r2
 800697e:	4698      	mov	r8, r3
 8006980:	4606      	mov	r6, r0
 8006982:	b118      	cbz	r0, 800698c <_vfiprintf_r+0x18>
 8006984:	6983      	ldr	r3, [r0, #24]
 8006986:	b90b      	cbnz	r3, 800698c <_vfiprintf_r+0x18>
 8006988:	f7ff fc36 	bl	80061f8 <__sinit>
 800698c:	4b89      	ldr	r3, [pc, #548]	; (8006bb4 <_vfiprintf_r+0x240>)
 800698e:	429d      	cmp	r5, r3
 8006990:	d11b      	bne.n	80069ca <_vfiprintf_r+0x56>
 8006992:	6875      	ldr	r5, [r6, #4]
 8006994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_vfiprintf_r+0x32>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_vfiprintf_r+0x32>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7ff fcec 	bl	800637e <__retarget_lock_acquire_recursive>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	071b      	lsls	r3, r3, #28
 80069aa:	d501      	bpl.n	80069b0 <_vfiprintf_r+0x3c>
 80069ac:	692b      	ldr	r3, [r5, #16]
 80069ae:	b9eb      	cbnz	r3, 80069ec <_vfiprintf_r+0x78>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 fb06 	bl	8006fc4 <__swsetup_r>
 80069b8:	b1c0      	cbz	r0, 80069ec <_vfiprintf_r+0x78>
 80069ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069bc:	07dc      	lsls	r4, r3, #31
 80069be:	d50e      	bpl.n	80069de <_vfiprintf_r+0x6a>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	b01d      	add	sp, #116	; 0x74
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	4b7b      	ldr	r3, [pc, #492]	; (8006bb8 <_vfiprintf_r+0x244>)
 80069cc:	429d      	cmp	r5, r3
 80069ce:	d101      	bne.n	80069d4 <_vfiprintf_r+0x60>
 80069d0:	68b5      	ldr	r5, [r6, #8]
 80069d2:	e7df      	b.n	8006994 <_vfiprintf_r+0x20>
 80069d4:	4b79      	ldr	r3, [pc, #484]	; (8006bbc <_vfiprintf_r+0x248>)
 80069d6:	429d      	cmp	r5, r3
 80069d8:	bf08      	it	eq
 80069da:	68f5      	ldreq	r5, [r6, #12]
 80069dc:	e7da      	b.n	8006994 <_vfiprintf_r+0x20>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	0598      	lsls	r0, r3, #22
 80069e2:	d4ed      	bmi.n	80069c0 <_vfiprintf_r+0x4c>
 80069e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e6:	f7ff fccb 	bl	8006380 <__retarget_lock_release_recursive>
 80069ea:	e7e9      	b.n	80069c0 <_vfiprintf_r+0x4c>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	2320      	movs	r3, #32
 80069f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fa:	2330      	movs	r3, #48	; 0x30
 80069fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bc0 <_vfiprintf_r+0x24c>
 8006a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a04:	f04f 0901 	mov.w	r9, #1
 8006a08:	4623      	mov	r3, r4
 8006a0a:	469a      	mov	sl, r3
 8006a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a10:	b10a      	cbz	r2, 8006a16 <_vfiprintf_r+0xa2>
 8006a12:	2a25      	cmp	r2, #37	; 0x25
 8006a14:	d1f9      	bne.n	8006a0a <_vfiprintf_r+0x96>
 8006a16:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1a:	d00b      	beq.n	8006a34 <_vfiprintf_r+0xc0>
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ff93 	bl	800694e <__sfputs_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f000 80aa 	beq.w	8006b82 <_vfiprintf_r+0x20e>
 8006a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a30:	445a      	add	r2, fp
 8006a32:	9209      	str	r2, [sp, #36]	; 0x24
 8006a34:	f89a 3000 	ldrb.w	r3, [sl]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80a2 	beq.w	8006b82 <_vfiprintf_r+0x20e>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a48:	f10a 0a01 	add.w	sl, sl, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a54:	931a      	str	r3, [sp, #104]	; 0x68
 8006a56:	4654      	mov	r4, sl
 8006a58:	2205      	movs	r2, #5
 8006a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5e:	4858      	ldr	r0, [pc, #352]	; (8006bc0 <_vfiprintf_r+0x24c>)
 8006a60:	f7f9 fbb6 	bl	80001d0 <memchr>
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	b9d8      	cbnz	r0, 8006aa0 <_vfiprintf_r+0x12c>
 8006a68:	06d1      	lsls	r1, r2, #27
 8006a6a:	bf44      	itt	mi
 8006a6c:	2320      	movmi	r3, #32
 8006a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a72:	0713      	lsls	r3, r2, #28
 8006a74:	bf44      	itt	mi
 8006a76:	232b      	movmi	r3, #43	; 0x2b
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a80:	2b2a      	cmp	r3, #42	; 0x2a
 8006a82:	d015      	beq.n	8006ab0 <_vfiprintf_r+0x13c>
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	4654      	mov	r4, sl
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4621      	mov	r1, r4
 8006a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a94:	3b30      	subs	r3, #48	; 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d94e      	bls.n	8006b38 <_vfiprintf_r+0x1c4>
 8006a9a:	b1b0      	cbz	r0, 8006aca <_vfiprintf_r+0x156>
 8006a9c:	9207      	str	r2, [sp, #28]
 8006a9e:	e014      	b.n	8006aca <_vfiprintf_r+0x156>
 8006aa0:	eba0 0308 	sub.w	r3, r0, r8
 8006aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	46a2      	mov	sl, r4
 8006aae:	e7d2      	b.n	8006a56 <_vfiprintf_r+0xe2>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	1d19      	adds	r1, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfbb      	ittet	lt
 8006abc:	425b      	neglt	r3, r3
 8006abe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac2:	9307      	strge	r3, [sp, #28]
 8006ac4:	9307      	strlt	r3, [sp, #28]
 8006ac6:	bfb8      	it	lt
 8006ac8:	9204      	strlt	r2, [sp, #16]
 8006aca:	7823      	ldrb	r3, [r4, #0]
 8006acc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ace:	d10c      	bne.n	8006aea <_vfiprintf_r+0x176>
 8006ad0:	7863      	ldrb	r3, [r4, #1]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d135      	bne.n	8006b42 <_vfiprintf_r+0x1ce>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d1a      	adds	r2, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9203      	str	r2, [sp, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfb8      	it	lt
 8006ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae6:	3402      	adds	r4, #2
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bd0 <_vfiprintf_r+0x25c>
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fb6c 	bl	80001d0 <memchr>
 8006af8:	b140      	cbz	r0, 8006b0c <_vfiprintf_r+0x198>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	fa03 f000 	lsl.w	r0, r3, r0
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	4303      	orrs	r3, r0
 8006b08:	3401      	adds	r4, #1
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b10:	482c      	ldr	r0, [pc, #176]	; (8006bc4 <_vfiprintf_r+0x250>)
 8006b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b16:	2206      	movs	r2, #6
 8006b18:	f7f9 fb5a 	bl	80001d0 <memchr>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d03f      	beq.n	8006ba0 <_vfiprintf_r+0x22c>
 8006b20:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <_vfiprintf_r+0x254>)
 8006b22:	bb1b      	cbnz	r3, 8006b6c <_vfiprintf_r+0x1f8>
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	3307      	adds	r3, #7
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	443b      	add	r3, r7
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	e767      	b.n	8006a08 <_vfiprintf_r+0x94>
 8006b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	2001      	movs	r0, #1
 8006b40:	e7a5      	b.n	8006a8e <_vfiprintf_r+0x11a>
 8006b42:	2300      	movs	r3, #0
 8006b44:	3401      	adds	r4, #1
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f04f 0c0a 	mov.w	ip, #10
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b54:	3a30      	subs	r2, #48	; 0x30
 8006b56:	2a09      	cmp	r2, #9
 8006b58:	d903      	bls.n	8006b62 <_vfiprintf_r+0x1ee>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0c5      	beq.n	8006aea <_vfiprintf_r+0x176>
 8006b5e:	9105      	str	r1, [sp, #20]
 8006b60:	e7c3      	b.n	8006aea <_vfiprintf_r+0x176>
 8006b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b66:	4604      	mov	r4, r0
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e7f0      	b.n	8006b4e <_vfiprintf_r+0x1da>
 8006b6c:	ab03      	add	r3, sp, #12
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <_vfiprintf_r+0x258>)
 8006b74:	a904      	add	r1, sp, #16
 8006b76:	4630      	mov	r0, r6
 8006b78:	f3af 8000 	nop.w
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	1c78      	adds	r0, r7, #1
 8006b80:	d1d6      	bne.n	8006b30 <_vfiprintf_r+0x1bc>
 8006b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b84:	07d9      	lsls	r1, r3, #31
 8006b86:	d405      	bmi.n	8006b94 <_vfiprintf_r+0x220>
 8006b88:	89ab      	ldrh	r3, [r5, #12]
 8006b8a:	059a      	lsls	r2, r3, #22
 8006b8c:	d402      	bmi.n	8006b94 <_vfiprintf_r+0x220>
 8006b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b90:	f7ff fbf6 	bl	8006380 <__retarget_lock_release_recursive>
 8006b94:	89ab      	ldrh	r3, [r5, #12]
 8006b96:	065b      	lsls	r3, r3, #25
 8006b98:	f53f af12 	bmi.w	80069c0 <_vfiprintf_r+0x4c>
 8006b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9e:	e711      	b.n	80069c4 <_vfiprintf_r+0x50>
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <_vfiprintf_r+0x258>)
 8006ba8:	a904      	add	r1, sp, #16
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 f880 	bl	8006cb0 <_printf_i>
 8006bb0:	e7e4      	b.n	8006b7c <_vfiprintf_r+0x208>
 8006bb2:	bf00      	nop
 8006bb4:	08007290 	.word	0x08007290
 8006bb8:	080072b0 	.word	0x080072b0
 8006bbc:	08007270 	.word	0x08007270
 8006bc0:	080072d4 	.word	0x080072d4
 8006bc4:	080072de 	.word	0x080072de
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	0800694f 	.word	0x0800694f
 8006bd0:	080072da 	.word	0x080072da

08006bd4 <_printf_common>:
 8006bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	4616      	mov	r6, r2
 8006bda:	4699      	mov	r9, r3
 8006bdc:	688a      	ldr	r2, [r1, #8]
 8006bde:	690b      	ldr	r3, [r1, #16]
 8006be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006be4:	4293      	cmp	r3, r2
 8006be6:	bfb8      	it	lt
 8006be8:	4613      	movlt	r3, r2
 8006bea:	6033      	str	r3, [r6, #0]
 8006bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf0:	4607      	mov	r7, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	b10a      	cbz	r2, 8006bfa <_printf_common+0x26>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	0699      	lsls	r1, r3, #26
 8006bfe:	bf42      	ittt	mi
 8006c00:	6833      	ldrmi	r3, [r6, #0]
 8006c02:	3302      	addmi	r3, #2
 8006c04:	6033      	strmi	r3, [r6, #0]
 8006c06:	6825      	ldr	r5, [r4, #0]
 8006c08:	f015 0506 	ands.w	r5, r5, #6
 8006c0c:	d106      	bne.n	8006c1c <_printf_common+0x48>
 8006c0e:	f104 0a19 	add.w	sl, r4, #25
 8006c12:	68e3      	ldr	r3, [r4, #12]
 8006c14:	6832      	ldr	r2, [r6, #0]
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	dc26      	bgt.n	8006c6a <_printf_common+0x96>
 8006c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c20:	1e13      	subs	r3, r2, #0
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	bf18      	it	ne
 8006c26:	2301      	movne	r3, #1
 8006c28:	0692      	lsls	r2, r2, #26
 8006c2a:	d42b      	bmi.n	8006c84 <_printf_common+0xb0>
 8006c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c30:	4649      	mov	r1, r9
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c0      	blx	r8
 8006c36:	3001      	adds	r0, #1
 8006c38:	d01e      	beq.n	8006c78 <_printf_common+0xa4>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	68e5      	ldr	r5, [r4, #12]
 8006c3e:	6832      	ldr	r2, [r6, #0]
 8006c40:	f003 0306 	and.w	r3, r3, #6
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	bf08      	it	eq
 8006c48:	1aad      	subeq	r5, r5, r2
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	6922      	ldr	r2, [r4, #16]
 8006c4e:	bf0c      	ite	eq
 8006c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c54:	2500      	movne	r5, #0
 8006c56:	4293      	cmp	r3, r2
 8006c58:	bfc4      	itt	gt
 8006c5a:	1a9b      	subgt	r3, r3, r2
 8006c5c:	18ed      	addgt	r5, r5, r3
 8006c5e:	2600      	movs	r6, #0
 8006c60:	341a      	adds	r4, #26
 8006c62:	42b5      	cmp	r5, r6
 8006c64:	d11a      	bne.n	8006c9c <_printf_common+0xc8>
 8006c66:	2000      	movs	r0, #0
 8006c68:	e008      	b.n	8006c7c <_printf_common+0xa8>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4638      	mov	r0, r7
 8006c72:	47c0      	blx	r8
 8006c74:	3001      	adds	r0, #1
 8006c76:	d103      	bne.n	8006c80 <_printf_common+0xac>
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	3501      	adds	r5, #1
 8006c82:	e7c6      	b.n	8006c12 <_printf_common+0x3e>
 8006c84:	18e1      	adds	r1, r4, r3
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	2030      	movs	r0, #48	; 0x30
 8006c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c8e:	4422      	add	r2, r4
 8006c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c98:	3302      	adds	r3, #2
 8006c9a:	e7c7      	b.n	8006c2c <_printf_common+0x58>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	47c0      	blx	r8
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d0e6      	beq.n	8006c78 <_printf_common+0xa4>
 8006caa:	3601      	adds	r6, #1
 8006cac:	e7d9      	b.n	8006c62 <_printf_common+0x8e>
	...

08006cb0 <_printf_i>:
 8006cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb4:	7e0f      	ldrb	r7, [r1, #24]
 8006cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cb8:	2f78      	cmp	r7, #120	; 0x78
 8006cba:	4691      	mov	r9, r2
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	469a      	mov	sl, r3
 8006cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cc6:	d807      	bhi.n	8006cd8 <_printf_i+0x28>
 8006cc8:	2f62      	cmp	r7, #98	; 0x62
 8006cca:	d80a      	bhi.n	8006ce2 <_printf_i+0x32>
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	f000 80d8 	beq.w	8006e82 <_printf_i+0x1d2>
 8006cd2:	2f58      	cmp	r7, #88	; 0x58
 8006cd4:	f000 80a3 	beq.w	8006e1e <_printf_i+0x16e>
 8006cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ce0:	e03a      	b.n	8006d58 <_printf_i+0xa8>
 8006ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ce6:	2b15      	cmp	r3, #21
 8006ce8:	d8f6      	bhi.n	8006cd8 <_printf_i+0x28>
 8006cea:	a101      	add	r1, pc, #4	; (adr r1, 8006cf0 <_printf_i+0x40>)
 8006cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cf0:	08006d49 	.word	0x08006d49
 8006cf4:	08006d5d 	.word	0x08006d5d
 8006cf8:	08006cd9 	.word	0x08006cd9
 8006cfc:	08006cd9 	.word	0x08006cd9
 8006d00:	08006cd9 	.word	0x08006cd9
 8006d04:	08006cd9 	.word	0x08006cd9
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006cd9 	.word	0x08006cd9
 8006d10:	08006cd9 	.word	0x08006cd9
 8006d14:	08006cd9 	.word	0x08006cd9
 8006d18:	08006cd9 	.word	0x08006cd9
 8006d1c:	08006e69 	.word	0x08006e69
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006e4b 	.word	0x08006e4b
 8006d28:	08006cd9 	.word	0x08006cd9
 8006d2c:	08006cd9 	.word	0x08006cd9
 8006d30:	08006e8b 	.word	0x08006e8b
 8006d34:	08006cd9 	.word	0x08006cd9
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006cd9 	.word	0x08006cd9
 8006d40:	08006cd9 	.word	0x08006cd9
 8006d44:	08006e53 	.word	0x08006e53
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	1d1a      	adds	r2, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0a3      	b.n	8006ea4 <_printf_i+0x1f4>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	6829      	ldr	r1, [r5, #0]
 8006d60:	0606      	lsls	r6, r0, #24
 8006d62:	f101 0304 	add.w	r3, r1, #4
 8006d66:	d50a      	bpl.n	8006d7e <_printf_i+0xce>
 8006d68:	680e      	ldr	r6, [r1, #0]
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	2e00      	cmp	r6, #0
 8006d6e:	da03      	bge.n	8006d78 <_printf_i+0xc8>
 8006d70:	232d      	movs	r3, #45	; 0x2d
 8006d72:	4276      	negs	r6, r6
 8006d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d78:	485e      	ldr	r0, [pc, #376]	; (8006ef4 <_printf_i+0x244>)
 8006d7a:	230a      	movs	r3, #10
 8006d7c:	e019      	b.n	8006db2 <_printf_i+0x102>
 8006d7e:	680e      	ldr	r6, [r1, #0]
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d86:	bf18      	it	ne
 8006d88:	b236      	sxthne	r6, r6
 8006d8a:	e7ef      	b.n	8006d6c <_printf_i+0xbc>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	6820      	ldr	r0, [r4, #0]
 8006d90:	1d19      	adds	r1, r3, #4
 8006d92:	6029      	str	r1, [r5, #0]
 8006d94:	0601      	lsls	r1, r0, #24
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0xec>
 8006d98:	681e      	ldr	r6, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <_printf_i+0xf2>
 8006d9c:	0646      	lsls	r6, r0, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0xe8>
 8006da0:	881e      	ldrh	r6, [r3, #0]
 8006da2:	4854      	ldr	r0, [pc, #336]	; (8006ef4 <_printf_i+0x244>)
 8006da4:	2f6f      	cmp	r7, #111	; 0x6f
 8006da6:	bf0c      	ite	eq
 8006da8:	2308      	moveq	r3, #8
 8006daa:	230a      	movne	r3, #10
 8006dac:	2100      	movs	r1, #0
 8006dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006db2:	6865      	ldr	r5, [r4, #4]
 8006db4:	60a5      	str	r5, [r4, #8]
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	bfa2      	ittt	ge
 8006dba:	6821      	ldrge	r1, [r4, #0]
 8006dbc:	f021 0104 	bicge.w	r1, r1, #4
 8006dc0:	6021      	strge	r1, [r4, #0]
 8006dc2:	b90e      	cbnz	r6, 8006dc8 <_printf_i+0x118>
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	d04d      	beq.n	8006e64 <_printf_i+0x1b4>
 8006dc8:	4615      	mov	r5, r2
 8006dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dce:	fb03 6711 	mls	r7, r3, r1, r6
 8006dd2:	5dc7      	ldrb	r7, [r0, r7]
 8006dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dd8:	4637      	mov	r7, r6
 8006dda:	42bb      	cmp	r3, r7
 8006ddc:	460e      	mov	r6, r1
 8006dde:	d9f4      	bls.n	8006dca <_printf_i+0x11a>
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d10b      	bne.n	8006dfc <_printf_i+0x14c>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	07de      	lsls	r6, r3, #31
 8006de8:	d508      	bpl.n	8006dfc <_printf_i+0x14c>
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	6861      	ldr	r1, [r4, #4]
 8006dee:	4299      	cmp	r1, r3
 8006df0:	bfde      	ittt	le
 8006df2:	2330      	movle	r3, #48	; 0x30
 8006df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dfc:	1b52      	subs	r2, r2, r5
 8006dfe:	6122      	str	r2, [r4, #16]
 8006e00:	f8cd a000 	str.w	sl, [sp]
 8006e04:	464b      	mov	r3, r9
 8006e06:	aa03      	add	r2, sp, #12
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff fee2 	bl	8006bd4 <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d14c      	bne.n	8006eae <_printf_i+0x1fe>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b004      	add	sp, #16
 8006e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1e:	4835      	ldr	r0, [pc, #212]	; (8006ef4 <_printf_i+0x244>)
 8006e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e24:	6829      	ldr	r1, [r5, #0]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e2c:	6029      	str	r1, [r5, #0]
 8006e2e:	061d      	lsls	r5, r3, #24
 8006e30:	d514      	bpl.n	8006e5c <_printf_i+0x1ac>
 8006e32:	07df      	lsls	r7, r3, #31
 8006e34:	bf44      	itt	mi
 8006e36:	f043 0320 	orrmi.w	r3, r3, #32
 8006e3a:	6023      	strmi	r3, [r4, #0]
 8006e3c:	b91e      	cbnz	r6, 8006e46 <_printf_i+0x196>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f023 0320 	bic.w	r3, r3, #32
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	2310      	movs	r3, #16
 8006e48:	e7b0      	b.n	8006dac <_printf_i+0xfc>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	f043 0320 	orr.w	r3, r3, #32
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	2378      	movs	r3, #120	; 0x78
 8006e54:	4828      	ldr	r0, [pc, #160]	; (8006ef8 <_printf_i+0x248>)
 8006e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e5a:	e7e3      	b.n	8006e24 <_printf_i+0x174>
 8006e5c:	0659      	lsls	r1, r3, #25
 8006e5e:	bf48      	it	mi
 8006e60:	b2b6      	uxthmi	r6, r6
 8006e62:	e7e6      	b.n	8006e32 <_printf_i+0x182>
 8006e64:	4615      	mov	r5, r2
 8006e66:	e7bb      	b.n	8006de0 <_printf_i+0x130>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	6826      	ldr	r6, [r4, #0]
 8006e6c:	6961      	ldr	r1, [r4, #20]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	6028      	str	r0, [r5, #0]
 8006e72:	0635      	lsls	r5, r6, #24
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0x1cc>
 8006e78:	6019      	str	r1, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0x1d2>
 8006e7c:	0670      	lsls	r0, r6, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0x1c8>
 8006e80:	8019      	strh	r1, [r3, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	4615      	mov	r5, r2
 8006e88:	e7ba      	b.n	8006e00 <_printf_i+0x150>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	602a      	str	r2, [r5, #0]
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	6862      	ldr	r2, [r4, #4]
 8006e94:	2100      	movs	r1, #0
 8006e96:	4628      	mov	r0, r5
 8006e98:	f7f9 f99a 	bl	80001d0 <memchr>
 8006e9c:	b108      	cbz	r0, 8006ea2 <_printf_i+0x1f2>
 8006e9e:	1b40      	subs	r0, r0, r5
 8006ea0:	6060      	str	r0, [r4, #4]
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	e7a8      	b.n	8006e00 <_printf_i+0x150>
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	47d0      	blx	sl
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d0ab      	beq.n	8006e14 <_printf_i+0x164>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	079b      	lsls	r3, r3, #30
 8006ec0:	d413      	bmi.n	8006eea <_printf_i+0x23a>
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	4298      	cmp	r0, r3
 8006ec8:	bfb8      	it	lt
 8006eca:	4618      	movlt	r0, r3
 8006ecc:	e7a4      	b.n	8006e18 <_printf_i+0x168>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	47d0      	blx	sl
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d09b      	beq.n	8006e14 <_printf_i+0x164>
 8006edc:	3501      	adds	r5, #1
 8006ede:	68e3      	ldr	r3, [r4, #12]
 8006ee0:	9903      	ldr	r1, [sp, #12]
 8006ee2:	1a5b      	subs	r3, r3, r1
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dcf2      	bgt.n	8006ece <_printf_i+0x21e>
 8006ee8:	e7eb      	b.n	8006ec2 <_printf_i+0x212>
 8006eea:	2500      	movs	r5, #0
 8006eec:	f104 0619 	add.w	r6, r4, #25
 8006ef0:	e7f5      	b.n	8006ede <_printf_i+0x22e>
 8006ef2:	bf00      	nop
 8006ef4:	080072e5 	.word	0x080072e5
 8006ef8:	080072f6 	.word	0x080072f6

08006efc <_read_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d07      	ldr	r5, [pc, #28]	; (8006f1c <_read_r+0x20>)
 8006f00:	4604      	mov	r4, r0
 8006f02:	4608      	mov	r0, r1
 8006f04:	4611      	mov	r1, r2
 8006f06:	2200      	movs	r2, #0
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f7f9 fe6c 	bl	8000be8 <_read>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_read_r+0x1e>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_read_r+0x1e>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	20001be8 	.word	0x20001be8

08006f20 <__swbuf_r>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	460e      	mov	r6, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	4605      	mov	r5, r0
 8006f28:	b118      	cbz	r0, 8006f32 <__swbuf_r+0x12>
 8006f2a:	6983      	ldr	r3, [r0, #24]
 8006f2c:	b90b      	cbnz	r3, 8006f32 <__swbuf_r+0x12>
 8006f2e:	f7ff f963 	bl	80061f8 <__sinit>
 8006f32:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <__swbuf_r+0x98>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d12b      	bne.n	8006f90 <__swbuf_r+0x70>
 8006f38:	686c      	ldr	r4, [r5, #4]
 8006f3a:	69a3      	ldr	r3, [r4, #24]
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	071a      	lsls	r2, r3, #28
 8006f42:	d52f      	bpl.n	8006fa4 <__swbuf_r+0x84>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b36b      	cbz	r3, 8006fa4 <__swbuf_r+0x84>
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	6820      	ldr	r0, [r4, #0]
 8006f4c:	1ac0      	subs	r0, r0, r3
 8006f4e:	6963      	ldr	r3, [r4, #20]
 8006f50:	b2f6      	uxtb	r6, r6
 8006f52:	4283      	cmp	r3, r0
 8006f54:	4637      	mov	r7, r6
 8006f56:	dc04      	bgt.n	8006f62 <__swbuf_r+0x42>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7ff fc3a 	bl	80067d4 <_fflush_r>
 8006f60:	bb30      	cbnz	r0, 8006fb0 <__swbuf_r+0x90>
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60a3      	str	r3, [r4, #8]
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	701e      	strb	r6, [r3, #0]
 8006f70:	6963      	ldr	r3, [r4, #20]
 8006f72:	3001      	adds	r0, #1
 8006f74:	4283      	cmp	r3, r0
 8006f76:	d004      	beq.n	8006f82 <__swbuf_r+0x62>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	07db      	lsls	r3, r3, #31
 8006f7c:	d506      	bpl.n	8006f8c <__swbuf_r+0x6c>
 8006f7e:	2e0a      	cmp	r6, #10
 8006f80:	d104      	bne.n	8006f8c <__swbuf_r+0x6c>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f7ff fc25 	bl	80067d4 <_fflush_r>
 8006f8a:	b988      	cbnz	r0, 8006fb0 <__swbuf_r+0x90>
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <__swbuf_r+0x9c>)
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d101      	bne.n	8006f9a <__swbuf_r+0x7a>
 8006f96:	68ac      	ldr	r4, [r5, #8]
 8006f98:	e7cf      	b.n	8006f3a <__swbuf_r+0x1a>
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <__swbuf_r+0xa0>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	bf08      	it	eq
 8006fa0:	68ec      	ldreq	r4, [r5, #12]
 8006fa2:	e7ca      	b.n	8006f3a <__swbuf_r+0x1a>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f80c 	bl	8006fc4 <__swsetup_r>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d0cb      	beq.n	8006f48 <__swbuf_r+0x28>
 8006fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8006fb4:	e7ea      	b.n	8006f8c <__swbuf_r+0x6c>
 8006fb6:	bf00      	nop
 8006fb8:	08007290 	.word	0x08007290
 8006fbc:	080072b0 	.word	0x080072b0
 8006fc0:	08007270 	.word	0x08007270

08006fc4 <__swsetup_r>:
 8006fc4:	4b32      	ldr	r3, [pc, #200]	; (8007090 <__swsetup_r+0xcc>)
 8006fc6:	b570      	push	{r4, r5, r6, lr}
 8006fc8:	681d      	ldr	r5, [r3, #0]
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	b125      	cbz	r5, 8006fda <__swsetup_r+0x16>
 8006fd0:	69ab      	ldr	r3, [r5, #24]
 8006fd2:	b913      	cbnz	r3, 8006fda <__swsetup_r+0x16>
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f7ff f90f 	bl	80061f8 <__sinit>
 8006fda:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <__swsetup_r+0xd0>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	d10f      	bne.n	8007000 <__swsetup_r+0x3c>
 8006fe0:	686c      	ldr	r4, [r5, #4]
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fe8:	0719      	lsls	r1, r3, #28
 8006fea:	d42c      	bmi.n	8007046 <__swsetup_r+0x82>
 8006fec:	06dd      	lsls	r5, r3, #27
 8006fee:	d411      	bmi.n	8007014 <__swsetup_r+0x50>
 8006ff0:	2309      	movs	r3, #9
 8006ff2:	6033      	str	r3, [r6, #0]
 8006ff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffe:	e03e      	b.n	800707e <__swsetup_r+0xba>
 8007000:	4b25      	ldr	r3, [pc, #148]	; (8007098 <__swsetup_r+0xd4>)
 8007002:	429c      	cmp	r4, r3
 8007004:	d101      	bne.n	800700a <__swsetup_r+0x46>
 8007006:	68ac      	ldr	r4, [r5, #8]
 8007008:	e7eb      	b.n	8006fe2 <__swsetup_r+0x1e>
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <__swsetup_r+0xd8>)
 800700c:	429c      	cmp	r4, r3
 800700e:	bf08      	it	eq
 8007010:	68ec      	ldreq	r4, [r5, #12]
 8007012:	e7e6      	b.n	8006fe2 <__swsetup_r+0x1e>
 8007014:	0758      	lsls	r0, r3, #29
 8007016:	d512      	bpl.n	800703e <__swsetup_r+0x7a>
 8007018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800701a:	b141      	cbz	r1, 800702e <__swsetup_r+0x6a>
 800701c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <__swsetup_r+0x66>
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fc2f 	bl	8006888 <_free_r>
 800702a:	2300      	movs	r3, #0
 800702c:	6363      	str	r3, [r4, #52]	; 0x34
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	2300      	movs	r3, #0
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	b94b      	cbnz	r3, 800705e <__swsetup_r+0x9a>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007054:	d003      	beq.n	800705e <__swsetup_r+0x9a>
 8007056:	4621      	mov	r1, r4
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f847 	bl	80070ec <__smakebuf_r>
 800705e:	89a0      	ldrh	r0, [r4, #12]
 8007060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007064:	f010 0301 	ands.w	r3, r0, #1
 8007068:	d00a      	beq.n	8007080 <__swsetup_r+0xbc>
 800706a:	2300      	movs	r3, #0
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	6963      	ldr	r3, [r4, #20]
 8007070:	425b      	negs	r3, r3
 8007072:	61a3      	str	r3, [r4, #24]
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	b943      	cbnz	r3, 800708a <__swsetup_r+0xc6>
 8007078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800707c:	d1ba      	bne.n	8006ff4 <__swsetup_r+0x30>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	0781      	lsls	r1, r0, #30
 8007082:	bf58      	it	pl
 8007084:	6963      	ldrpl	r3, [r4, #20]
 8007086:	60a3      	str	r3, [r4, #8]
 8007088:	e7f4      	b.n	8007074 <__swsetup_r+0xb0>
 800708a:	2000      	movs	r0, #0
 800708c:	e7f7      	b.n	800707e <__swsetup_r+0xba>
 800708e:	bf00      	nop
 8007090:	20000010 	.word	0x20000010
 8007094:	08007290 	.word	0x08007290
 8007098:	080072b0 	.word	0x080072b0
 800709c:	08007270 	.word	0x08007270

080070a0 <__swhatbuf_r>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	460e      	mov	r6, r1
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	b096      	sub	sp, #88	; 0x58
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	da08      	bge.n	80070c4 <__swhatbuf_r+0x24>
 80070b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	061a      	lsls	r2, r3, #24
 80070bc:	d410      	bmi.n	80070e0 <__swhatbuf_r+0x40>
 80070be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c2:	e00e      	b.n	80070e2 <__swhatbuf_r+0x42>
 80070c4:	466a      	mov	r2, sp
 80070c6:	f000 f851 	bl	800716c <_fstat_r>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	dbf1      	blt.n	80070b2 <__swhatbuf_r+0x12>
 80070ce:	9a01      	ldr	r2, [sp, #4]
 80070d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070d8:	425a      	negs	r2, r3
 80070da:	415a      	adcs	r2, r3
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	e7ee      	b.n	80070be <__swhatbuf_r+0x1e>
 80070e0:	2340      	movs	r3, #64	; 0x40
 80070e2:	2000      	movs	r0, #0
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	b016      	add	sp, #88	; 0x58
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffc8 	bl	80070a0 <__swhatbuf_r>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff f96b 	bl	80063f0 <_malloc_r>
 800711a:	b948      	cbnz	r0, 8007130 <__smakebuf_r+0x44>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d4ef      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e7e3      	b.n	80070f8 <__smakebuf_r+0xc>
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <__smakebuf_r+0x7c>)
 8007132:	62b3      	str	r3, [r6, #40]	; 0x28
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	b15b      	cbz	r3, 8007160 <__smakebuf_r+0x74>
 8007148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714c:	4630      	mov	r0, r6
 800714e:	f000 f81f 	bl	8007190 <_isatty_r>
 8007152:	b128      	cbz	r0, 8007160 <__smakebuf_r+0x74>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a0      	ldrh	r0, [r4, #12]
 8007162:	4305      	orrs	r5, r0
 8007164:	81a5      	strh	r5, [r4, #12]
 8007166:	e7cd      	b.n	8007104 <__smakebuf_r+0x18>
 8007168:	08006191 	.word	0x08006191

0800716c <_fstat_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_fstat_r+0x20>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7f9 fd7a 	bl	8000c72 <_fstat>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_fstat_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_fstat_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	20001be8 	.word	0x20001be8

08007190 <_isatty_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d06      	ldr	r5, [pc, #24]	; (80071ac <_isatty_r+0x1c>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7f9 fd79 	bl	8000c92 <_isatty>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_isatty_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_isatty_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	20001be8 	.word	0x20001be8

080071b0 <_init>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	bf00      	nop
 80071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b6:	bc08      	pop	{r3}
 80071b8:	469e      	mov	lr, r3
 80071ba:	4770      	bx	lr

080071bc <_fini>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr
